public void test0() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_K; Vector3D vector3D1 = Vector3D.ZERO; SubLine subLine0 = new SubLine(vector3D1, vector3D0); List<Segment> list0 = subLine0.getSegments(); assertEquals(1, list0.size()); }
public void test1() throws Throwable { Vector3D vector3D0 = Vector3D.NaN; Line line0 = new Line(vector3D0, vector3D0); Segment segment0 = new Segment(vector3D0, vector3D0, line0); SubLine subLine0 = new SubLine(segment0); }
public void test2() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_K; Vector3D vector3D1 = Vector3D.ZERO; SubLine subLine0 = new SubLine(vector3D1, vector3D0); Vector3D vector3D2 = subLine0.intersection(subLine0, true); assertTrue(vector3D2.equals((Object)vector3D1)); }
public void test3() throws Throwable { Vector3D vector3D0 = Vector3D.NaN; Line line0 = new Line(vector3D0, vector3D0); IntervalsSet intervalsSet0 = new IntervalsSet(); SubLine subLine0 = new SubLine(line0, intervalsSet0); Vector3D vector3D1 = subLine0.intersection(subLine0, true); assertNull(vector3D1); }
public void test4() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_K; Vector3D vector3D1 = Vector3D.ZERO; SubLine subLine0 = new SubLine(vector3D1, vector3D0); Vector3D vector3D2 = subLine0.intersection(subLine0, false); assertNull(vector3D2); }
public void test5() throws Throwable { Vector3D vector3D0 = Vector3D.MINUS_K; Vector3D vector3D1 = Vector3D.ZERO; Line line0 = new Line(vector3D0, vector3D1); SubLine subLine0 = new SubLine(vector3D0, vector3D1); IntervalsSet intervalsSet0 = new IntervalsSet(235.7374280996, 0.1246747374534607); SubLine subLine1 = new SubLine(line0, intervalsSet0); Vector3D vector3D2 = subLine1.intersection(subLine0, true); assertNull(vector3D2); }
public void test6() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_K; Vector3D vector3D1 = Vector3D.ZERO; Line line0 = new Line(vector3D0, vector3D1); SubLine subLine0 = new SubLine(vector3D1, vector3D0); IntervalsSet intervalsSet0 = new IntervalsSet(2924.435, 0.0); SubLine subLine1 = new SubLine(line0, intervalsSet0); Vector3D vector3D2 = subLine0.intersection(subLine1, true); assertNull(vector3D2); }
public void test7() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_K; Vector3D vector3D1 = Vector3D.ZERO; Line line0 = new Line(vector3D0, vector3D1); SubLine subLine0 = new SubLine(vector3D1, vector3D0); SubLine subLine1 = line0.wholeLine(); Vector3D vector3D2 = subLine1.intersection(subLine0, false); assertNull(vector3D2); }
public void test8() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_K; Vector3D vector3D1 = Vector3D.ZERO; Line line0 = new Line(vector3D0, vector3D1); IntervalsSet intervalsSet0 = new IntervalsSet(); SubLine subLine0 = new SubLine(line0, intervalsSet0); Vector3D vector3D2 = subLine0.intersection(subLine0, false); assertTrue(vector3D2.equals((Object)vector3D1)); }
public void test00() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_K; Plane plane0 = new Plane(vector3D0); Vector2D vector2D0 = plane0.toSubSpace(vector3D0); Line line0 = new Line(vector2D0, vector2D0); SubLine subLine0 = line0.wholeHyperplane(); LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>(); IntervalsSet intervalsSet0 = new IntervalsSet(linkedList0); AbstractSubHyperplane<Euclidean2D, Euclidean1D> abstractSubHyperplane0 = subLine0.buildNew(line0, intervalsSet0); assertFalse(abstractSubHyperplane0.isEmpty()); }
public void test01() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_K; Plane plane0 = new Plane(vector3D0); Vector2D vector2D0 = plane0.toSubSpace(vector3D0); Line line0 = new Line(vector2D0, vector2D0); SubLine subLine0 = line0.wholeHyperplane(); List<Segment> list0 = subLine0.getSegments(); assertEquals(1, list0.size()); }
public void test02() throws Throwable { Vector2D vector2D0 = new Vector2D(1.0, 1.0); Line line0 = new Line(vector2D0, 1.0); Segment segment0 = new Segment(vector2D0, vector2D0, line0); SubLine subLine0 = new SubLine(segment0); SubLine subLine1 = new SubLine(vector2D0, vector2D0); Vector2D vector2D1 = subLine1.intersection(subLine0, true); assertNull(vector2D1); }
public void test03() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_K; Plane plane0 = new Plane(vector3D0); Vector2D vector2D0 = plane0.toSubSpace(vector3D0); Line line0 = new Line(vector2D0, vector2D0); SubLine subLine0 = line0.wholeHyperplane(); Vector2D vector2D1 = subLine0.intersection(subLine0, false); assertNull(vector2D1); }
public void test04() throws Throwable { Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY; Line line0 = new Line(vector2D0, vector2D0); SubLine subLine0 = line0.wholeHyperplane(); Vector2D vector2D1 = subLine0.intersection(subLine0, false); assertNotSame(vector2D0, vector2D1); }
public void test05() throws Throwable { Vector2D vector2D0 = Vector2D.NaN; SubLine subLine0 = new SubLine(vector2D0, vector2D0); Vector2D vector2D1 = subLine0.intersection(subLine0, true); assertNull(vector2D1); }
public void test06() throws Throwable { Vector2D vector2D0 = new Vector2D(1.0, 1.0); Line line0 = new Line(vector2D0, 1.0); Segment segment0 = new Segment(vector2D0, vector2D0, line0); SubLine subLine0 = new SubLine(segment0); line0.reset(vector2D0, vector2D0); Vector2D vector2D1 = new Vector2D(2855.95733411, vector2D0); SubLine subLine1 = new SubLine(vector2D1, vector2D0); Vector2D vector2D2 = subLine1.intersection(subLine0, true); assertFalse(vector2D2.isNaN()); }
public void test07() throws Throwable { Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY; Line line0 = new Line(vector2D0, vector2D0); Segment segment0 = new Segment(vector2D0, vector2D0, line0); SubLine subLine0 = new SubLine(segment0); Vector2D vector2D1 = subLine0.intersection(subLine0, false); assertNull(vector2D1); }
public void test08() throws Throwable { Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY; Line line0 = new Line(vector2D0, vector2D0); SubLine subLine0 = line0.wholeHyperplane(); SubLine subLine1 = new SubLine(vector2D0, vector2D0); Vector2D vector2D1 = subLine0.intersection(subLine1, false); assertNull(vector2D1); }
public void test09() throws Throwable { Vector2D vector2D0 = new Vector2D(1.0, 1.0); Line line0 = new Line(vector2D0, 1.0); Segment segment0 = new Segment(vector2D0, vector2D0, line0); SubLine subLine0 = new SubLine(segment0); Line line1 = new Line(vector2D0, vector2D0); Side side0 = subLine0.side(line1); assertEquals(Side.PLUS, side0); }
public void test10() throws Throwable { Vector2D vector2D0 = new Vector2D(1.0, 1.0); Line line0 = new Line(vector2D0, 1.0); Segment segment0 = new Segment(vector2D0, vector2D0, line0); SubLine subLine0 = new SubLine(segment0); Side side0 = subLine0.side(line0); assertEquals(Side.HYPER, side0); }
public void test11() throws Throwable { Vector2D vector2D0 = Vector2D.ZERO; Line line0 = new Line(vector2D0, vector2D0); Line line1 = new Line(line0); Segment segment0 = new Segment(vector2D0, vector2D0, line1); line1.setOriginOffset(1912.6220859); SubLine subLine0 = new SubLine(segment0); Side side0 = subLine0.side(line0); assertEquals(Side.MINUS, side0); }
public void test12() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_K; Plane plane0 = new Plane(vector3D0); Vector2D vector2D0 = plane0.toSubSpace(vector3D0); Line line0 = new Line(vector2D0, vector2D0); Line line1 = new Line(line0); SubLine subLine0 = line1.wholeHyperplane(); line0.setOriginOffset(Double.POSITIVE_INFINITY); Side side0 = subLine0.side(line0); assertEquals(Side.PLUS, side0); }
public void test13() throws Throwable { Vector2D vector2D0 = Vector2D.ZERO; SubLine subLine0 = new SubLine(vector2D0, vector2D0); Line line0 = new Line(vector2D0, 0.8414709848078965); Side side0 = subLine0.side(line0); assertEquals(Side.PLUS, side0); }
public void test14() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_K; Plane plane0 = new Plane(vector3D0); Vector2D vector2D0 = plane0.toSubSpace(vector3D0); Line line0 = new Line(vector2D0, vector2D0); SubLine subLine0 = line0.wholeHyperplane(); SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0); assertNotNull(subHyperplane_SplitSubHyperplane0); }
public void test15() throws Throwable { Vector2D vector2D0 = Vector2D.ZERO; Line line0 = new Line(vector2D0, vector2D0); Line line1 = new Line(line0); Segment segment0 = new Segment(vector2D0, vector2D0, line1); line1.setOriginOffset(1912.6220859); SubLine subLine0 = new SubLine(segment0); SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0); assertNotNull(subHyperplane_SplitSubHyperplane0); }
public void test16() throws Throwable { Vector2D vector2D0 = Vector2D.ZERO; SubLine subLine0 = new SubLine(vector2D0, vector2D0); Line line0 = new Line(vector2D0, 0.8414709848078965); SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0); assertNotNull(subHyperplane_SplitSubHyperplane0); }
public void test17() throws Throwable { Vector2D vector2D0 = new Vector2D(1.0, 1.0); Line line0 = new Line(vector2D0, 1.0); Segment segment0 = new Segment(vector2D0, vector2D0, line0); SubLine subLine0 = new SubLine(segment0); Vector2D vector2D1 = vector2D0.subtract(Double.NaN, (Vector<Euclidean2D>) vector2D0); Line line1 = new Line(vector2D1, vector2D0); SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line1); assertNotNull(subHyperplane_SplitSubHyperplane0); }
