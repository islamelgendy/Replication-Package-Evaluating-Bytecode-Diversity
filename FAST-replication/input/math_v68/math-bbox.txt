public void test501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test501"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; double[] doubleArray11 = null; levenbergMarquardtOptimizer0.point = doubleArray11; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer13 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker14 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer13.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker14); levenbergMarquardtOptimizer13.cols = (short) 100; double double18 = levenbergMarquardtOptimizer13.getChiSquare(); double double19 = levenbergMarquardtOptimizer13.cost; levenbergMarquardtOptimizer13.setMaxIterations((int) (byte) 10); int int22 = levenbergMarquardtOptimizer13.getJacobianEvaluations(); java.lang.Throwable throwable23 = null; double[] doubleArray25 = new double[] { (byte) 100 }; java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(throwable23, doubleArray25, "hi!", objArray33); org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException(doubleArray25); double[] doubleArray39 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(doubleArray39); java.lang.Throwable throwable41 = null; double[] doubleArray43 = new double[] { (byte) 100 }; java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException(throwable41, doubleArray43, "hi!", objArray51); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair54 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray43, true); double[] doubleArray55 = vectorialPointValuePair54.getValue(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray25, doubleArray55, true); double[] doubleArray58 = vectorialPointValuePair57.getValue(); levenbergMarquardtOptimizer13.targetValues = doubleArray58; double[] doubleArray60 = levenbergMarquardtOptimizer13.targetValues; levenbergMarquardtOptimizer0.targetValues = doubleArray60; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0]"); org.junit.Assert.assertNotNull(objArray33); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0]"); org.junit.Assert.assertNotNull(objArray51); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]"); }
public void test502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test502"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer2.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker9; int int11 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = null; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker13; levenbergMarquardtOptimizer0.cost = 35.0d; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); }
public void test503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test503"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double[] doubleArray8 = levenbergMarquardtOptimizer0.residuals; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer9 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker10 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer9.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker10); double[] doubleArray12 = levenbergMarquardtOptimizer9.residualsWeights; levenbergMarquardtOptimizer9.cost = 0.0d; double double15 = levenbergMarquardtOptimizer9.getChiSquare(); int int16 = levenbergMarquardtOptimizer9.getIterations(); int int17 = levenbergMarquardtOptimizer9.getIterations(); int int18 = levenbergMarquardtOptimizer9.getIterations(); java.lang.Throwable throwable19 = null; double[] doubleArray21 = new double[] { (byte) 100 }; java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(throwable19, doubleArray21, "hi!", objArray29); double[] doubleArray31 = functionEvaluationException30.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(doubleArray31); org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(doubleArray31); levenbergMarquardtOptimizer9.targetValues = doubleArray31; levenbergMarquardtOptimizer0.targetValues = doubleArray31; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]"); org.junit.Assert.assertNotNull(objArray29); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); }
public void test504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test504"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxIterations(10); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray6); }
public void test505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test505"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray9 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray9; int int11 = levenbergMarquardtOptimizer0.getMaxIterations(); int int12 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray13 = levenbergMarquardtOptimizer0.residuals; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNull(doubleArray13); }
public void test506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test506"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 1L); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test507"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); java.lang.Throwable throwable8 = null; double[] doubleArray10 = new double[] { (byte) 100 }; java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(throwable8, doubleArray10, "hi!", objArray18); double[] doubleArray20 = functionEvaluationException19.getArgument(); java.lang.Throwable throwable21 = null; double[] doubleArray23 = new double[] { (byte) 100 }; java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(throwable21, doubleArray23, "hi!", objArray31); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair34 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray20, doubleArray23, false); levenbergMarquardtOptimizer0.point = doubleArray23; int int36 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0]"); org.junit.Assert.assertNotNull(objArray18); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0]"); org.junit.Assert.assertNotNull(objArray31); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); }
public void test508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test508"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); int int10 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.cols = 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 2147483647); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker15 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker15); }
public void test509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test509"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 100); double[] doubleArray7 = levenbergMarquardtOptimizer0.targetValues; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNull(doubleArray7); }
public void test510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test510"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer3 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker4 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer3.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker4); double[] doubleArray6 = levenbergMarquardtOptimizer3.objective; double[] doubleArray7 = null; levenbergMarquardtOptimizer3.point = doubleArray7; double[] doubleArray9 = levenbergMarquardtOptimizer3.residualsWeights; double[] doubleArray12 = new double[] { (byte) -1, (byte) 10 }; double[] doubleArray15 = new double[] { (byte) -1, (byte) 10 }; double[] doubleArray18 = new double[] { (byte) -1, (byte) 10 }; double[][] doubleArray19 = new double[][] { doubleArray12, doubleArray15, doubleArray18 }; levenbergMarquardtOptimizer3.jacobian = doubleArray19; org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) doubleArray19); java.util.ConcurrentModificationException concurrentModificationException22 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathException: ", (java.lang.Object[]) doubleArray19); java.lang.Object[] objArray31 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException32 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray31); java.lang.Object[] objArray42 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException43 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray42); java.lang.IllegalArgumentException illegalArgumentException44 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException43); java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException43, "", objArray47); org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray47); java.util.ConcurrentModificationException concurrentModificationException50 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray47); java.util.ConcurrentModificationException concurrentModificationException51 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray47); org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException32, "", objArray47); java.lang.IllegalArgumentException illegalArgumentException53 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray47); java.lang.IllegalStateException illegalStateException54 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("", objArray47); org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) concurrentModificationException22, "org.apache.commons.math.MathRuntimeException$4: org.apache.commons.math.MathRuntimeException: ", objArray47); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertNotNull(concurrentModificationException22); org.junit.Assert.assertNotNull(objArray31); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException32); org.junit.Assert.assertNotNull(objArray42); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException43); org.junit.Assert.assertNotNull(illegalArgumentException44); org.junit.Assert.assertNotNull(objArray47); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException50); org.junit.Assert.assertNotNull(concurrentModificationException51); org.junit.Assert.assertNotNull(illegalArgumentException53); org.junit.Assert.assertNotNull(illegalStateException54); }
public void test511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test511"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; int int8 = levenbergMarquardtOptimizer2.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer2.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); double[] doubleArray13 = levenbergMarquardtOptimizer10.residualsWeights; int int14 = levenbergMarquardtOptimizer10.getJacobianEvaluations(); levenbergMarquardtOptimizer10.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer16.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); double[] doubleArray19 = levenbergMarquardtOptimizer16.residualsWeights; levenbergMarquardtOptimizer16.cols = 52; int int22 = levenbergMarquardtOptimizer16.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker23 = levenbergMarquardtOptimizer16.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer24 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker25 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer24.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker25); double[] doubleArray27 = levenbergMarquardtOptimizer24.residualsWeights; levenbergMarquardtOptimizer24.cost = 0.0d; double[] doubleArray30 = levenbergMarquardtOptimizer24.targetValues; double[] doubleArray31 = levenbergMarquardtOptimizer24.residuals; int int32 = levenbergMarquardtOptimizer24.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer33 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker34 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer33.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker34); double[] doubleArray36 = levenbergMarquardtOptimizer33.residualsWeights; levenbergMarquardtOptimizer33.cost = 0.0d; double[] doubleArray39 = levenbergMarquardtOptimizer33.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker40 = levenbergMarquardtOptimizer33.getConvergenceChecker(); levenbergMarquardtOptimizer24.setConvergenceChecker(vectorialConvergenceChecker40); levenbergMarquardtOptimizer16.checker = vectorialConvergenceChecker40; levenbergMarquardtOptimizer10.setConvergenceChecker(vectorialConvergenceChecker40); int int44 = levenbergMarquardtOptimizer10.rows; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer45 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker46 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer45.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker46); levenbergMarquardtOptimizer45.cols = (short) 100; levenbergMarquardtOptimizer45.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer45.setParRelativeTolerance((double) 2147483647); int int54 = levenbergMarquardtOptimizer45.getMaxEvaluations(); int int55 = levenbergMarquardtOptimizer45.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer56 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker57 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer56.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker57); double[] doubleArray59 = levenbergMarquardtOptimizer56.residualsWeights; levenbergMarquardtOptimizer56.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker62 = levenbergMarquardtOptimizer56.getConvergenceChecker(); levenbergMarquardtOptimizer56.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker65 = levenbergMarquardtOptimizer56.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer66 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker67 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer66.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker67); double[] doubleArray69 = levenbergMarquardtOptimizer66.residualsWeights; levenbergMarquardtOptimizer66.cols = 52; levenbergMarquardtOptimizer66.incrementIterationsCounter(); double[] doubleArray77 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray82 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray83 = new double[][] { doubleArray77, doubleArray82 }; levenbergMarquardtOptimizer66.jacobian = doubleArray83; levenbergMarquardtOptimizer56.jacobian = doubleArray83; levenbergMarquardtOptimizer45.jacobian = doubleArray83; levenbergMarquardtOptimizer10.jacobian = doubleArray83; levenbergMarquardtOptimizer2.jacobian = doubleArray83; java.text.ParseException parseException89 = org.apache.commons.math.MathRuntimeException.createParseException((int) '#', "Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) doubleArray83); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNull(doubleArray19); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker23); org.junit.Assert.assertNull(doubleArray27); org.junit.Assert.assertNull(doubleArray30); org.junit.Assert.assertNull(doubleArray31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertNull(doubleArray36); org.junit.Assert.assertNull(doubleArray39); org.junit.Assert.assertNotNull(vectorialConvergenceChecker40); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100); org.junit.Assert.assertNull(doubleArray59); org.junit.Assert.assertNotNull(vectorialConvergenceChecker62); org.junit.Assert.assertNotNull(vectorialConvergenceChecker65); org.junit.Assert.assertNull(doubleArray69); org.junit.Assert.assertNotNull(doubleArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray83); org.junit.Assert.assertNotNull(parseException89); }
public void test512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test512"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double double8 = levenbergMarquardtOptimizer0.getChiSquare(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); }
public void test513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test513"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double double71 = levenbergMarquardtOptimizer0.getChiSquare(); double[] doubleArray72 = levenbergMarquardtOptimizer0.targetValues; levenbergMarquardtOptimizer0.cols = 'a'; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); }
public void test514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test514"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double double71 = levenbergMarquardtOptimizer0.getChiSquare(); double[] doubleArray72 = levenbergMarquardtOptimizer0.targetValues; levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0d); int int75 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray76 = levenbergMarquardtOptimizer0.objective; // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.updateJacobian(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0); org.junit.Assert.assertNull(doubleArray76); }
public void test515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test515"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 100); double[] doubleArray11 = levenbergMarquardtOptimizer0.residuals; levenbergMarquardtOptimizer0.setMaxEvaluations((int) 'a'); org.junit.Assert.assertNull(doubleArray11); }
public void test516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test516"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); double[] doubleArray27 = vectorialPointValuePair26.getPoint(); double[] doubleArray31 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(doubleArray31); java.lang.Throwable throwable33 = null; double[] doubleArray35 = new double[] { (byte) 100 }; java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(throwable33, doubleArray35, "hi!", objArray43); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair46 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray31, doubleArray35, true); java.lang.Throwable throwable47 = null; double[] doubleArray49 = new double[] { (byte) 100 }; java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(throwable47, doubleArray49, "hi!", objArray57); double[] doubleArray59 = functionEvaluationException58.getArgument(); java.lang.Throwable throwable60 = null; double[] doubleArray62 = new double[] { (byte) 100 }; java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException(throwable60, doubleArray62, "hi!", objArray70); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair73 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray59, doubleArray62, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair75 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray31, doubleArray62, true); boolean boolean76 = simpleVectorialValueChecker5.converged(10, vectorialPointValuePair26, vectorialPointValuePair75); double[] doubleArray77 = vectorialPointValuePair26.getValueRef(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException(doubleArray77); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]"); org.junit.Assert.assertNotNull(objArray43); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]"); org.junit.Assert.assertNotNull(objArray57); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]"); org.junit.Assert.assertNotNull(objArray70); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true); org.junit.Assert.assertNotNull(doubleArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0]"); }
public void test517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test517"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); double[] doubleArray7 = null; levenbergMarquardtOptimizer0.objective = doubleArray7; int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int10 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int11 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); }
public void test518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test518"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); int int9 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable12 = null; double[] doubleArray14 = new double[] { (byte) 100 }; java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(throwable12, doubleArray14, "hi!", objArray22); double[] doubleArray24 = functionEvaluationException23.getArgument(); java.lang.Throwable throwable25 = null; double[] doubleArray27 = new double[] { (byte) 100 }; java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(throwable25, doubleArray27, "hi!", objArray35); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair38 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray24, doubleArray27, false); java.lang.Object[] objArray47 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException48 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray47); java.lang.IllegalArgumentException illegalArgumentException49 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException48); java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException48, "", objArray52); org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray52); java.lang.IllegalArgumentException illegalArgumentException55 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray52); org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException11, doubleArray24, "", objArray52); levenbergMarquardtOptimizer0.residuals = doubleArray24; int int58 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker59 = levenbergMarquardtOptimizer0.checker; double[] doubleArray60 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]"); org.junit.Assert.assertNotNull(objArray22); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0]"); org.junit.Assert.assertNotNull(objArray35); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray47); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException48); org.junit.Assert.assertNotNull(illegalArgumentException49); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException55); org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker59); org.junit.Assert.assertNull(doubleArray60); }
public void test519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test519"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations(1000); levenbergMarquardtOptimizer0.setMaxIterations(1000); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test520"); java.lang.Object[] objArray9 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException10 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray9); java.lang.IllegalArgumentException illegalArgumentException11 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException10); java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException10, "", objArray14); org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) 1.0f, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray14); java.lang.IllegalStateException illegalStateException17 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.MathRuntimeException$2: ", objArray14); java.util.ConcurrentModificationException concurrentModificationException18 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("", objArray14); java.lang.RuntimeException runtimeException19 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable) concurrentModificationException18); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer22 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker23 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer22.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker23); double[] doubleArray25 = levenbergMarquardtOptimizer22.residualsWeights; levenbergMarquardtOptimizer22.cost = 0.0d; double[] doubleArray28 = levenbergMarquardtOptimizer22.targetValues; double[] doubleArray29 = levenbergMarquardtOptimizer22.residuals; int int30 = levenbergMarquardtOptimizer22.getMaxIterations(); int int31 = levenbergMarquardtOptimizer22.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer32 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker33 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer32.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker33); levenbergMarquardtOptimizer32.cols = (short) 100; levenbergMarquardtOptimizer32.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer32.setParRelativeTolerance((double) 2147483647); int int41 = levenbergMarquardtOptimizer32.getMaxEvaluations(); int int42 = levenbergMarquardtOptimizer32.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer43 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker44 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer43.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker44); double[] doubleArray46 = levenbergMarquardtOptimizer43.residualsWeights; levenbergMarquardtOptimizer43.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker49 = levenbergMarquardtOptimizer43.getConvergenceChecker(); levenbergMarquardtOptimizer43.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker52 = levenbergMarquardtOptimizer43.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer53 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker54 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer53.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker54); double[] doubleArray56 = levenbergMarquardtOptimizer53.residualsWeights; levenbergMarquardtOptimizer53.cols = 52; levenbergMarquardtOptimizer53.incrementIterationsCounter(); double[] doubleArray64 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray69 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray70 = new double[][] { doubleArray64, doubleArray69 }; levenbergMarquardtOptimizer53.jacobian = doubleArray70; levenbergMarquardtOptimizer43.jacobian = doubleArray70; levenbergMarquardtOptimizer32.jacobian = doubleArray70; levenbergMarquardtOptimizer22.jacobian = doubleArray70; java.io.EOFException eOFException75 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Object[]) doubleArray70); org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException((java.lang.Throwable) runtimeException19, "java.lang.IllegalArgumentException: ", (java.lang.Object[]) doubleArray70); org.junit.Assert.assertNotNull(objArray9); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException10); org.junit.Assert.assertNotNull(illegalArgumentException11); org.junit.Assert.assertNotNull(objArray14); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0]"); org.junit.Assert.assertNotNull(illegalStateException17); org.junit.Assert.assertNotNull(concurrentModificationException18); org.junit.Assert.assertNotNull(runtimeException19); org.junit.Assert.assertNull(doubleArray25); org.junit.Assert.assertNull(doubleArray28); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1000 + "'", int30 == 1000); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100); org.junit.Assert.assertNull(doubleArray46); org.junit.Assert.assertNotNull(vectorialConvergenceChecker49); org.junit.Assert.assertNotNull(vectorialConvergenceChecker52); org.junit.Assert.assertNull(doubleArray56); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray70); org.junit.Assert.assertNotNull(eOFException75); }
public void test521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test521"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.residualsWeights; levenbergMarquardtOptimizer6.cost = 0.0d; double[] doubleArray12 = levenbergMarquardtOptimizer6.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer6.getConvergenceChecker(); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker13; double[] doubleArray15 = null; levenbergMarquardtOptimizer0.objective = doubleArray15; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer17 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker18 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer17.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker18); double[] doubleArray20 = levenbergMarquardtOptimizer17.residualsWeights; levenbergMarquardtOptimizer17.cols = 52; levenbergMarquardtOptimizer17.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker24 = levenbergMarquardtOptimizer17.checker; levenbergMarquardtOptimizer17.cost = 1.0d; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer29 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker30 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer29.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker30); double[] doubleArray32 = levenbergMarquardtOptimizer29.residualsWeights; levenbergMarquardtOptimizer29.cols = 52; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer35 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker36 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer35.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker36); double[] doubleArray38 = levenbergMarquardtOptimizer35.residualsWeights; levenbergMarquardtOptimizer35.cols = 52; levenbergMarquardtOptimizer35.incrementIterationsCounter(); double[] doubleArray46 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray51 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray52 = new double[][] { doubleArray46, doubleArray51 }; levenbergMarquardtOptimizer35.jacobian = doubleArray52; levenbergMarquardtOptimizer29.jacobian = doubleArray52; org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 2147483647, "", (java.lang.Object[]) doubleArray52); levenbergMarquardtOptimizer17.jacobian = doubleArray52; levenbergMarquardtOptimizer0.jacobian = doubleArray52; levenbergMarquardtOptimizer0.setMaxEvaluations(2147483647); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNotNull(vectorialConvergenceChecker24); org.junit.Assert.assertNull(doubleArray32); org.junit.Assert.assertNull(doubleArray38); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray52); }
public void test522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test522"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0d); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 'a'); int int10 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); }
public void test523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test523"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray9 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray9; int int11 = levenbergMarquardtOptimizer0.getMaxIterations(); int int12 = levenbergMarquardtOptimizer0.getIterations(); int int13 = levenbergMarquardtOptimizer0.cols; double double14 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); }
public void test524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test524"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); int int10 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.cols = 100; levenbergMarquardtOptimizer0.setMaxIterations(10); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test525"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.rows = 0; levenbergMarquardtOptimizer0.setMaxIterations(10); double[] doubleArray18 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(doubleArray18); java.lang.Throwable throwable20 = null; double[] doubleArray22 = new double[] { (byte) 100 }; java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(throwable20, doubleArray22, "hi!", objArray30); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair33 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray18, doubleArray22, true); java.lang.Throwable throwable34 = null; double[] doubleArray36 = new double[] { (byte) 100 }; java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException(throwable34, doubleArray36, "hi!", objArray44); double[] doubleArray46 = functionEvaluationException45.getArgument(); java.lang.Throwable throwable47 = null; double[] doubleArray49 = new double[] { (byte) 100 }; java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(throwable47, doubleArray49, "hi!", objArray57); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair60 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray46, doubleArray49, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair62 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray18, doubleArray49, true); java.lang.Throwable throwable63 = null; double[] doubleArray65 = new double[] { (byte) 100 }; java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(throwable63, doubleArray65, "hi!", objArray73); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair75 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray49, doubleArray65); double[] doubleArray76 = vectorialPointValuePair75.getPointRef(); double[] doubleArray77 = vectorialPointValuePair75.getPoint(); double[] doubleArray78 = vectorialPointValuePair75.getPointRef(); double[] doubleArray79 = vectorialPointValuePair75.getValue(); levenbergMarquardtOptimizer0.point = doubleArray79; java.lang.Object[] objArray82 = null; org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException(doubleArray79, "org.apache.commons.math.MathRuntimeException$2: ", objArray82); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertNotNull(objArray30); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0]"); org.junit.Assert.assertNotNull(objArray44); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]"); org.junit.Assert.assertNotNull(objArray57); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0]"); org.junit.Assert.assertNotNull(objArray73); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); }
public void test526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test526"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer2.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker9; int int11 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 0); levenbergMarquardtOptimizer0.cost = 32; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); }
public void test527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test527"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 100); int int7 = levenbergMarquardtOptimizer0.rows; int int8 = levenbergMarquardtOptimizer0.getMaxEvaluations(); levenbergMarquardtOptimizer0.cost = (short) 1; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer11 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker12 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer11.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker12); levenbergMarquardtOptimizer11.cols = (short) 100; levenbergMarquardtOptimizer11.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer18 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker19 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer18.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker19); double[] doubleArray21 = levenbergMarquardtOptimizer18.residualsWeights; int int22 = levenbergMarquardtOptimizer18.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker23 = levenbergMarquardtOptimizer18.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker24 = levenbergMarquardtOptimizer18.checker; levenbergMarquardtOptimizer11.checker = vectorialConvergenceChecker24; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker24; int int27 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray28 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray28; double double30 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1000 + "'", int22 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker23); org.junit.Assert.assertNotNull(vectorialConvergenceChecker24); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d); }
public void test528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test528"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int9 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.setOrthoTolerance((double) 97); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test529"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; int int11 = levenbergMarquardtOptimizer7.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer7.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer7.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker13; double double15 = levenbergMarquardtOptimizer0.getChiSquare(); org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray17 = convergenceException16.getSuppressed(); double[] doubleArray23 = new double[] { (-1L), ' ', 'a', (short) 0, 2147483647 }; java.lang.Object[] objArray33 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException34 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray33); java.lang.IllegalArgumentException illegalArgumentException35 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException34); java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException34, "", objArray38); org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray38); java.util.ConcurrentModificationException concurrentModificationException41 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray38); java.lang.Object[] objArray49 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException50 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray49); java.lang.Object[] objArray60 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException61 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray60); java.lang.IllegalArgumentException illegalArgumentException62 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException61); java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException61, "", objArray65); org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray65); java.util.ConcurrentModificationException concurrentModificationException68 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray65); java.util.ConcurrentModificationException concurrentModificationException69 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray65); org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException50, "", objArray65); org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) concurrentModificationException41, (double) 10, "", objArray65); org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray65); org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) convergenceException16, doubleArray23, "org.apache.commons.math.MathRuntimeException$2: ", objArray65); org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(doubleArray23); org.apache.commons.math.optimization.OptimizationException optimizationException75 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable) functionEvaluationException74); org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray82 = convergenceException81.getSuppressed(); org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) throwableArray82); java.io.EOFException eOFException84 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray82); java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException85 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", (java.lang.Object[]) throwableArray82); java.text.ParseException parseException86 = org.apache.commons.math.MathRuntimeException.createParseException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray82); org.apache.commons.math.MathRuntimeException mathRuntimeException87 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable) parseException86); java.lang.IllegalArgumentException illegalArgumentException88 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) parseException86); functionEvaluationException74.addSuppressed((java.lang.Throwable) parseException86); double[] doubleArray90 = functionEvaluationException74.getArgument(); levenbergMarquardtOptimizer0.residualsWeights = doubleArray90; org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(throwableArray17); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 32.0, 97.0, 0.0, 2.147483647E9]"); org.junit.Assert.assertNotNull(objArray33); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException34); org.junit.Assert.assertNotNull(illegalArgumentException35); org.junit.Assert.assertNotNull(objArray38); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException41); org.junit.Assert.assertNotNull(objArray49); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException50); org.junit.Assert.assertNotNull(objArray60); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException61); org.junit.Assert.assertNotNull(illegalArgumentException62); org.junit.Assert.assertNotNull(objArray65); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException68); org.junit.Assert.assertNotNull(concurrentModificationException69); org.junit.Assert.assertNotNull(throwableArray82); org.junit.Assert.assertNotNull(eOFException84); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException85); org.junit.Assert.assertNotNull(parseException86); org.junit.Assert.assertNotNull(illegalArgumentException88); org.junit.Assert.assertNotNull(doubleArray90); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 32.0, 97.0, 0.0, 2.147483647E9]"); }
public void test530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test530"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); double double6 = levenbergMarquardtOptimizer0.cost; levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) 10); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.residuals; org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); }
public void test531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test531"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) -1); levenbergMarquardtOptimizer0.setMaxEvaluations(0); levenbergMarquardtOptimizer0.setMaxIterations(0); levenbergMarquardtOptimizer0.rows = (-1); double double16 = levenbergMarquardtOptimizer0.cost; int int17 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); }
public void test532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test532"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 1000); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 1.0f); levenbergMarquardtOptimizer0.setMaxIterations(52); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker15 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vectorialConvergenceChecker15); }
public void test533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test533"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); levenbergMarquardtOptimizer7.cols = (short) 100; levenbergMarquardtOptimizer7.setCostRelativeTolerance((double) 0L); double[] doubleArray14 = null; levenbergMarquardtOptimizer7.objective = doubleArray14; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker16 = levenbergMarquardtOptimizer7.getConvergenceChecker(); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker16; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker18 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vectorialConvergenceChecker16); org.junit.Assert.assertNotNull(vectorialConvergenceChecker18); }
public void test534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test534"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations(0); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 'a'); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test535"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double double10 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); }
public void test536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test536"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; levenbergMarquardtOptimizer0.setParRelativeTolerance(Double.NaN); int int73 = levenbergMarquardtOptimizer0.rows; double[] doubleArray74 = null; levenbergMarquardtOptimizer0.residuals = doubleArray74; levenbergMarquardtOptimizer0.setMaxIterations(32); int int78 = levenbergMarquardtOptimizer0.rows; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0); org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0); }
public void test537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test537"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); }
public void test538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test538"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) 100); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test539"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.cost = 1.0d; double[] doubleArray10 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray10); }
public void test540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test540"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.rows = (byte) -1; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer13 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker14 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer13.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker14); double[] doubleArray16 = levenbergMarquardtOptimizer13.residualsWeights; int int17 = levenbergMarquardtOptimizer13.getJacobianEvaluations(); levenbergMarquardtOptimizer13.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer19 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker20 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer19.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker20); double[] doubleArray22 = levenbergMarquardtOptimizer19.residualsWeights; levenbergMarquardtOptimizer19.cols = 52; int int25 = levenbergMarquardtOptimizer19.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker26 = levenbergMarquardtOptimizer19.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer27 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker28 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer27.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker28); double[] doubleArray30 = levenbergMarquardtOptimizer27.residualsWeights; levenbergMarquardtOptimizer27.cost = 0.0d; double[] doubleArray33 = levenbergMarquardtOptimizer27.targetValues; double[] doubleArray34 = levenbergMarquardtOptimizer27.residuals; int int35 = levenbergMarquardtOptimizer27.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer36 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker37 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer36.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker37); double[] doubleArray39 = levenbergMarquardtOptimizer36.residualsWeights; levenbergMarquardtOptimizer36.cost = 0.0d; double[] doubleArray42 = levenbergMarquardtOptimizer36.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker43 = levenbergMarquardtOptimizer36.getConvergenceChecker(); levenbergMarquardtOptimizer27.setConvergenceChecker(vectorialConvergenceChecker43); levenbergMarquardtOptimizer19.checker = vectorialConvergenceChecker43; levenbergMarquardtOptimizer13.setConvergenceChecker(vectorialConvergenceChecker43); int int47 = levenbergMarquardtOptimizer13.rows; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer48 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker49 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer48.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker49); levenbergMarquardtOptimizer48.cols = (short) 100; levenbergMarquardtOptimizer48.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer48.setParRelativeTolerance((double) 2147483647); int int57 = levenbergMarquardtOptimizer48.getMaxEvaluations(); int int58 = levenbergMarquardtOptimizer48.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer59 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker60 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer59.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker60); double[] doubleArray62 = levenbergMarquardtOptimizer59.residualsWeights; levenbergMarquardtOptimizer59.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker65 = levenbergMarquardtOptimizer59.getConvergenceChecker(); levenbergMarquardtOptimizer59.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker68 = levenbergMarquardtOptimizer59.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer69 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker70 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer69.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker70); double[] doubleArray72 = levenbergMarquardtOptimizer69.residualsWeights; levenbergMarquardtOptimizer69.cols = 52; levenbergMarquardtOptimizer69.incrementIterationsCounter(); double[] doubleArray80 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray85 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray86 = new double[][] { doubleArray80, doubleArray85 }; levenbergMarquardtOptimizer69.jacobian = doubleArray86; levenbergMarquardtOptimizer59.jacobian = doubleArray86; levenbergMarquardtOptimizer48.jacobian = doubleArray86; levenbergMarquardtOptimizer13.jacobian = doubleArray86; org.apache.commons.math.MathRuntimeException mathRuntimeException91 = new org.apache.commons.math.MathRuntimeException("org.apache.commons.math.MathRuntimeException$8: evaluation failed for argument = 100", (java.lang.Object[]) doubleArray86); levenbergMarquardtOptimizer0.jacobian = doubleArray86; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNull(doubleArray16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNull(doubleArray22); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker26); org.junit.Assert.assertNull(doubleArray30); org.junit.Assert.assertNull(doubleArray33); org.junit.Assert.assertNull(doubleArray34); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertNull(doubleArray39); org.junit.Assert.assertNull(doubleArray42); org.junit.Assert.assertNotNull(vectorialConvergenceChecker43); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647); org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100); org.junit.Assert.assertNull(doubleArray62); org.junit.Assert.assertNotNull(vectorialConvergenceChecker65); org.junit.Assert.assertNotNull(vectorialConvergenceChecker68); org.junit.Assert.assertNull(doubleArray72); org.junit.Assert.assertNotNull(doubleArray80); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray85); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray86); }
public void test541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test541"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; int int8 = levenbergMarquardtOptimizer0.rows; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test542"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; int int72 = levenbergMarquardtOptimizer0.rows; levenbergMarquardtOptimizer0.setMaxEvaluations(1); int int75 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0); }
public void test543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test543"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 100); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker11 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setMaxIterations(0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker11); }
public void test544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test544"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); int int10 = levenbergMarquardtOptimizer0.rows; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 100); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int14 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); }
public void test545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test545"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray15 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(doubleArray15); java.lang.Throwable throwable17 = null; double[] doubleArray19 = new double[] { (byte) 100 }; java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(throwable17, doubleArray19, "hi!", objArray27); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair30 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray15, doubleArray19, true); double[] doubleArray31 = vectorialPointValuePair30.getValue(); double[] doubleArray32 = vectorialPointValuePair30.getPoint(); double[] doubleArray36 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(doubleArray36); java.lang.Throwable throwable38 = null; double[] doubleArray40 = new double[] { (byte) 100 }; java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException(throwable38, doubleArray40, "hi!", objArray48); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair51 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray36, doubleArray40, true); java.lang.Throwable throwable52 = null; double[] doubleArray54 = new double[] { (byte) 100 }; java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException(throwable52, doubleArray54, "hi!", objArray62); double[] doubleArray64 = functionEvaluationException63.getArgument(); java.lang.Throwable throwable65 = null; double[] doubleArray67 = new double[] { (byte) 100 }; java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(throwable65, doubleArray67, "hi!", objArray75); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray64, doubleArray67, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair80 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray36, doubleArray67, true); java.lang.Throwable throwable81 = null; double[] doubleArray83 = new double[] { (byte) 100 }; java.lang.Object[] objArray91 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(throwable81, doubleArray83, "hi!", objArray91); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair93 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray67, doubleArray83); double[] doubleArray94 = vectorialPointValuePair93.getPointRef(); double[] doubleArray95 = vectorialPointValuePair93.getPoint(); boolean boolean96 = vectorialConvergenceChecker10.converged((int) (byte) 10, vectorialPointValuePair30, vectorialPointValuePair93); double[] doubleArray97 = vectorialPointValuePair30.getValue(); double[] doubleArray98 = vectorialPointValuePair30.getPointRef(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]"); org.junit.Assert.assertNotNull(objArray27); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]"); org.junit.Assert.assertNotNull(objArray48); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0]"); org.junit.Assert.assertNotNull(objArray62); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0]"); org.junit.Assert.assertNotNull(objArray75); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray83); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0]"); org.junit.Assert.assertNotNull(objArray91); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray94); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray95); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[100.0]"); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true); org.junit.Assert.assertNotNull(doubleArray97); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray98); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[10.0, 1.0, -1.0]"); }
public void test546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test546"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException74 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1); int int75 = maxIterationsExceededException74.getMaxIterations(); java.lang.Object[] objArray76 = maxIterationsExceededException74.getArguments(); org.apache.commons.math.optimization.OptimizationException optimizationException77 = new org.apache.commons.math.optimization.OptimizationException("", objArray76); org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42, "org.apache.commons.math.MathRuntimeException$2: ", objArray76); java.io.IOException iOException79 = org.apache.commons.math.MathRuntimeException.createIOException((java.lang.Throwable) functionEvaluationException78); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1)); org.junit.Assert.assertNotNull(objArray76); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[-1]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[-1]"); org.junit.Assert.assertNotNull(iOException79); }
public void test547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test547"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; java.lang.Object[] objArray15 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException16 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray15); org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15); java.lang.Throwable throwable18 = null; double[] doubleArray20 = new double[] { (byte) 100 }; java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(throwable18, doubleArray20, "hi!", objArray28); double[] doubleArray30 = functionEvaluationException29.getArgument(); java.lang.Throwable throwable31 = null; double[] doubleArray33 = new double[] { (byte) 100 }; java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(throwable31, doubleArray33, "hi!", objArray41); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair44 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray30, doubleArray33, false); java.lang.Throwable throwable49 = null; double[] doubleArray51 = new double[] { (byte) 100 }; java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(throwable49, doubleArray51, "hi!", objArray59); org.apache.commons.math.MathRuntimeException mathRuntimeException61 = new org.apache.commons.math.MathRuntimeException(throwable49); java.lang.String str62 = mathRuntimeException61.getPattern(); java.lang.String str63 = mathRuntimeException61.getPattern(); java.lang.Object[] objArray64 = mathRuntimeException61.getArguments(); java.lang.NullPointerException nullPointerException65 = org.apache.commons.math.MathRuntimeException.createNullPointerException("org.apache.commons.math.MathRuntimeException$2: ", objArray64); org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException66 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray64); org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) mathException17, doubleArray33, "Convergence failed", objArray64); levenbergMarquardtOptimizer0.point = doubleArray33; double[][] doubleArray69 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNotNull(objArray15); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException16); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]"); org.junit.Assert.assertNotNull(objArray28); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]"); org.junit.Assert.assertNotNull(objArray41); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]"); org.junit.Assert.assertNotNull(objArray59); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, ""); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, ""); org.junit.Assert.assertNotNull(objArray64); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]"); org.junit.Assert.assertNotNull(nullPointerException65); org.junit.Assert.assertNull(doubleArray69); }
public void test548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test548"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.checker; int int7 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray12 = new double[] { 52, 0.0f, 0L, 0L }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(doubleArray12); levenbergMarquardtOptimizer0.objective = doubleArray12; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, 0.0, 0.0, 0.0]"); }
public void test549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test549"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); int int10 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.cost = '4'; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test550"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int11 = levenbergMarquardtOptimizer0.rows; // The following exception was thrown during execution in test generation try { double[][] doubleArray12 = levenbergMarquardtOptimizer0.getCovariances(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test551"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setParRelativeTolerance(10.0d); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); }
public void test552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test552"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; int int6 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000); org.junit.Assert.assertNull(doubleArray7); }
public void test553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test553"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 100); double[] doubleArray7 = levenbergMarquardtOptimizer0.targetValues; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test554"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair9 = null; double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); java.lang.Throwable throwable15 = null; double[] doubleArray17 = new double[] { (byte) 100 }; java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(throwable15, doubleArray17, "hi!", objArray25); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray17, true); double[] doubleArray29 = vectorialPointValuePair28.getPoint(); java.lang.Throwable throwable30 = null; double[] doubleArray32 = new double[] { (byte) 100 }; java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(throwable30, doubleArray32, "hi!", objArray40); double[] doubleArray42 = functionEvaluationException41.getArgument(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair43 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray29, doubleArray42); double[] doubleArray44 = vectorialPointValuePair43.getPoint(); double[] doubleArray45 = vectorialPointValuePair43.getPointRef(); // The following exception was thrown during execution in test generation try { boolean boolean46 = vectorialConvergenceChecker7.converged(0, vectorialPointValuePair9, vectorialPointValuePair43); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]"); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]"); org.junit.Assert.assertNotNull(objArray40); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 1.0, -1.0]"); }
public void test555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test555"); double[] doubleArray3 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException(doubleArray3); java.lang.Throwable throwable5 = null; double[] doubleArray7 = new double[] { (byte) 100 }; java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(throwable5, doubleArray7, "hi!", objArray15); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair18 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray3, doubleArray7, true); double[] doubleArray19 = vectorialPointValuePair18.getPoint(); double[] doubleArray20 = vectorialPointValuePair18.getValue(); double[] doubleArray21 = vectorialPointValuePair18.getValue(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer22 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int23 = levenbergMarquardtOptimizer22.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer24 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker25 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer24.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker25); double[] doubleArray27 = levenbergMarquardtOptimizer24.residualsWeights; levenbergMarquardtOptimizer24.cost = 0.0d; double double30 = levenbergMarquardtOptimizer24.getChiSquare(); levenbergMarquardtOptimizer24.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer24.setCostRelativeTolerance((double) 1000); double[][] doubleArray35 = levenbergMarquardtOptimizer24.jacobian; double[] doubleArray36 = levenbergMarquardtOptimizer24.targetValues; int int37 = levenbergMarquardtOptimizer24.rows; double[] doubleArray41 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(doubleArray41); java.lang.Throwable throwable43 = null; double[] doubleArray45 = new double[] { (byte) 100 }; java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(throwable43, doubleArray45, "hi!", objArray53); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair56 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray45, true); double[] doubleArray57 = vectorialPointValuePair56.getPointRef(); levenbergMarquardtOptimizer24.point = doubleArray57; levenbergMarquardtOptimizer22.point = doubleArray57; org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair61 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray21, doubleArray57, false); double[] doubleArray62 = vectorialPointValuePair61.getValueRef(); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]"); org.junit.Assert.assertNotNull(objArray15); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]"); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647); org.junit.Assert.assertNull(doubleArray27); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNull(doubleArray35); org.junit.Assert.assertNull(doubleArray36); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]"); org.junit.Assert.assertNotNull(objArray53); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 1.0, -1.0]"); }
public void test556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test556"); org.apache.commons.math.MaxEvaluationsExceededException maxEvaluationsExceededException1 = new org.apache.commons.math.MaxEvaluationsExceededException((int) '4'); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer2.checker; levenbergMarquardtOptimizer2.cost = 1.0d; levenbergMarquardtOptimizer2.rows = '#'; java.lang.Throwable throwable14 = null; double[] doubleArray16 = new double[] { (byte) 100 }; java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(throwable14, doubleArray16, "hi!", objArray24); double[] doubleArray26 = functionEvaluationException25.getArgument(); java.lang.Object[] objArray35 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException36 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray35); java.lang.IllegalArgumentException illegalArgumentException37 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException36); java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException36, "", objArray40); org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray40); java.util.ConcurrentModificationException concurrentModificationException43 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray40); org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException25, "", objArray40); java.lang.Throwable throwable46 = null; double[] doubleArray48 = new double[] { (byte) 100 }; java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(throwable46, doubleArray48, "hi!", objArray56); org.apache.commons.math.MathRuntimeException mathRuntimeException58 = new org.apache.commons.math.MathRuntimeException(throwable46); java.lang.String str59 = mathRuntimeException58.getPattern(); java.lang.String str60 = mathRuntimeException58.getPattern(); org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathRuntimeException58); java.lang.Object[] objArray62 = mathRuntimeException58.getArguments(); org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException25, "hi!", objArray62); double[] doubleArray64 = functionEvaluationException25.getArgument(); levenbergMarquardtOptimizer2.residuals = doubleArray64; java.lang.Object[] objArray67 = null; org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) maxEvaluationsExceededException1, doubleArray64, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray67); int int69 = maxEvaluationsExceededException1.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]"); org.junit.Assert.assertNotNull(objArray24); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]"); org.junit.Assert.assertNotNull(objArray35); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException36); org.junit.Assert.assertNotNull(illegalArgumentException37); org.junit.Assert.assertNotNull(objArray40); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException43); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0]"); org.junit.Assert.assertNotNull(objArray56); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, ""); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNotNull(objArray62); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0]"); org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52); }
public void test557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test557"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker72 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer73 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker74 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer73.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker74); double[] doubleArray76 = levenbergMarquardtOptimizer73.residualsWeights; int int77 = levenbergMarquardtOptimizer73.getMaxIterations(); levenbergMarquardtOptimizer73.setMaxIterations(100); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker80 = levenbergMarquardtOptimizer73.getConvergenceChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker80); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertNotNull(vectorialConvergenceChecker72); org.junit.Assert.assertNull(doubleArray76); org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1000 + "'", int77 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker80); }
public void test558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test558"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; int int11 = levenbergMarquardtOptimizer7.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer7.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer7.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker13; int int15 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations(97); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer18 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker19 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer18.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker19); double[] doubleArray21 = levenbergMarquardtOptimizer18.residualsWeights; levenbergMarquardtOptimizer18.cols = 52; int int24 = levenbergMarquardtOptimizer18.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer25 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker26 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer25.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker26); levenbergMarquardtOptimizer25.cols = (short) 100; levenbergMarquardtOptimizer25.setCostRelativeTolerance((double) 0L); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer32 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker33 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer32.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker33); double[] doubleArray35 = levenbergMarquardtOptimizer32.residualsWeights; int int36 = levenbergMarquardtOptimizer32.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker37 = levenbergMarquardtOptimizer32.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer38 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker39 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer38.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker39); double[] doubleArray41 = levenbergMarquardtOptimizer38.residualsWeights; levenbergMarquardtOptimizer38.cost = 0.0d; double[] doubleArray44 = levenbergMarquardtOptimizer38.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker45 = levenbergMarquardtOptimizer38.getConvergenceChecker(); levenbergMarquardtOptimizer32.checker = vectorialConvergenceChecker45; levenbergMarquardtOptimizer25.setConvergenceChecker(vectorialConvergenceChecker45); levenbergMarquardtOptimizer18.checker = vectorialConvergenceChecker45; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker45); int int50 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647); org.junit.Assert.assertNull(doubleArray35); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1000 + "'", int36 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker37); org.junit.Assert.assertNull(doubleArray41); org.junit.Assert.assertNull(doubleArray44); org.junit.Assert.assertNotNull(vectorialConvergenceChecker45); org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97); }
public void test559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test559"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray4 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray5 = null; levenbergMarquardtOptimizer0.objective = doubleArray5; levenbergMarquardtOptimizer0.cost = 1000; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray4); }
public void test560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test560"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray10 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray10; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test561"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[][] doubleArray5 = levenbergMarquardtOptimizer0.jacobian; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNull(doubleArray6); }
public void test562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test562"); java.lang.Object[] objArray10 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException11 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray10); java.lang.IllegalArgumentException illegalArgumentException12 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException11); java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException11, "", objArray15); org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray15); java.util.ConcurrentModificationException concurrentModificationException18 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray15); java.util.ConcurrentModificationException concurrentModificationException19 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray15); org.apache.commons.math.MaxEvaluationsExceededException maxEvaluationsExceededException20 = new org.apache.commons.math.MaxEvaluationsExceededException(0, "", objArray15); org.apache.commons.math.MathRuntimeException mathRuntimeException21 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable) maxEvaluationsExceededException20); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer22 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker23 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer22.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker23); int int25 = levenbergMarquardtOptimizer22.getMaxIterations(); double[] doubleArray29 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(doubleArray29); java.lang.Throwable throwable31 = null; double[] doubleArray33 = new double[] { (byte) 100 }; java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(throwable31, doubleArray33, "hi!", objArray41); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair44 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray29, doubleArray33, true); java.lang.Throwable throwable45 = null; double[] doubleArray47 = new double[] { (byte) 100 }; java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(throwable45, doubleArray47, "hi!", objArray55); double[] doubleArray57 = functionEvaluationException56.getArgument(); java.lang.Throwable throwable58 = null; double[] doubleArray60 = new double[] { (byte) 100 }; java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(throwable58, doubleArray60, "hi!", objArray68); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair71 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray57, doubleArray60, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair73 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray29, doubleArray60, true); double[] doubleArray74 = vectorialPointValuePair73.getValue(); double[] doubleArray75 = vectorialPointValuePair73.getPoint(); levenbergMarquardtOptimizer22.point = doubleArray75; org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) mathRuntimeException21, doubleArray75); org.junit.Assert.assertNotNull(objArray10); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException11); org.junit.Assert.assertNotNull(illegalArgumentException12); org.junit.Assert.assertNotNull(objArray15); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException18); org.junit.Assert.assertNotNull(concurrentModificationException19); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1000 + "'", int25 == 1000); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]"); org.junit.Assert.assertNotNull(objArray41); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]"); org.junit.Assert.assertNotNull(objArray55); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]"); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, 1.0, -1.0]"); }
public void test563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test563"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; java.lang.Object[] objArray15 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException16 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray15); java.lang.IllegalArgumentException illegalArgumentException17 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException16); java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException16, "", objArray20); org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray20); double[] doubleArray26 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(doubleArray26); java.lang.Throwable throwable28 = null; double[] doubleArray30 = new double[] { (byte) 100 }; java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(throwable28, doubleArray30, "hi!", objArray38); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair41 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray26, doubleArray30, true); java.lang.Throwable throwable42 = null; double[] doubleArray44 = new double[] { (byte) 100 }; java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(throwable42, doubleArray44, "hi!", objArray52); double[] doubleArray54 = functionEvaluationException53.getArgument(); java.lang.Throwable throwable55 = null; double[] doubleArray57 = new double[] { (byte) 100 }; java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(throwable55, doubleArray57, "hi!", objArray65); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray54, doubleArray57, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray26, doubleArray57, true); java.lang.Throwable throwable71 = null; double[] doubleArray73 = new double[] { (byte) 100 }; java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException(throwable71, doubleArray73, "hi!", objArray81); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair83 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray57, doubleArray73); org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) convergenceException22, doubleArray73); levenbergMarquardtOptimizer0.residualsWeights = doubleArray73; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) '#'); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker88 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNotNull(objArray15); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException16); org.junit.Assert.assertNotNull(illegalArgumentException17); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]"); org.junit.Assert.assertNotNull(objArray38); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0]"); org.junit.Assert.assertNotNull(objArray65); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0]"); org.junit.Assert.assertNotNull(objArray81); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(vectorialConvergenceChecker88); }
public void test564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test564"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; int int72 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray73 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647); org.junit.Assert.assertNotNull(doubleArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0]"); }
public void test565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test565"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; int int72 = levenbergMarquardtOptimizer0.rows; double[] doubleArray73 = levenbergMarquardtOptimizer0.objective; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0); org.junit.Assert.assertNull(doubleArray73); }
public void test566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test566"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int5 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 32); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); }
public void test567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test567"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double double2 = levenbergMarquardtOptimizer0.getRMS(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertTrue(Double.isNaN(double2)); }
public void test568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test568"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray8 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException(doubleArray8); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair23 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray8, doubleArray12, true); double[] doubleArray24 = vectorialPointValuePair23.getPoint(); java.lang.Throwable throwable25 = null; double[] doubleArray27 = new double[] { (byte) 100 }; java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(throwable25, doubleArray27, "hi!", objArray35); double[] doubleArray37 = functionEvaluationException36.getArgument(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair38 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray24, doubleArray37); double[] doubleArray39 = vectorialPointValuePair38.getPoint(); java.lang.Throwable throwable41 = null; double[] doubleArray43 = new double[] { (byte) 100 }; java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException(throwable41, doubleArray43, "hi!", objArray51); double[] doubleArray53 = functionEvaluationException52.getArgument(); java.lang.Throwable throwable54 = null; double[] doubleArray56 = new double[] { (byte) 100 }; java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException(throwable54, doubleArray56, "hi!", objArray64); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair67 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray53, doubleArray56, false); org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException(doubleArray53); org.apache.commons.math.MathRuntimeException mathRuntimeException69 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable) functionEvaluationException68); java.lang.Object[] objArray70 = functionEvaluationException68.getArguments(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException(doubleArray39, "evaluation failed for argument = {0}", objArray70); levenbergMarquardtOptimizer0.objective = doubleArray39; org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0]"); org.junit.Assert.assertNotNull(objArray35); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0]"); org.junit.Assert.assertNotNull(objArray51); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0]"); org.junit.Assert.assertNotNull(objArray64); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray70); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[{100}]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[{100}]"); }
public void test569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test569"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int8 = levenbergMarquardtOptimizer7.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer9 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker10 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer9.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker10); double[] doubleArray12 = levenbergMarquardtOptimizer9.residualsWeights; levenbergMarquardtOptimizer9.cols = 52; levenbergMarquardtOptimizer9.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker16 = levenbergMarquardtOptimizer9.checker; levenbergMarquardtOptimizer7.checker = vectorialConvergenceChecker16; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker16; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 1); int int21 = levenbergMarquardtOptimizer0.getEvaluations(); int int22 = levenbergMarquardtOptimizer0.cols; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker16); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); }
public void test570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test570"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); double double6 = levenbergMarquardtOptimizer0.cost; levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) 10); double[] doubleArray9 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNull(doubleArray9); }
public void test571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test571"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int10 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int11 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations(0); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); }
public void test572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test572"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.rows = 'a'; levenbergMarquardtOptimizer0.setParRelativeTolerance(100.0d); levenbergMarquardtOptimizer0.setMaxEvaluations(0); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test573"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker2 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer1.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker2); double[] doubleArray4 = levenbergMarquardtOptimizer1.residualsWeights; levenbergMarquardtOptimizer1.cost = 0.0d; double double7 = levenbergMarquardtOptimizer1.getChiSquare(); int int8 = levenbergMarquardtOptimizer1.getIterations(); double[][] doubleArray9 = levenbergMarquardtOptimizer1.jacobian; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer1.getConvergenceChecker(); double[] doubleArray14 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(doubleArray14); levenbergMarquardtOptimizer1.residualsWeights = doubleArray14; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer25 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker26 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer25.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker26); double[] doubleArray28 = levenbergMarquardtOptimizer25.objective; double[] doubleArray29 = null; levenbergMarquardtOptimizer25.point = doubleArray29; double[] doubleArray31 = levenbergMarquardtOptimizer25.residualsWeights; int int32 = levenbergMarquardtOptimizer25.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer33 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker34 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer33.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker34); double[] doubleArray36 = levenbergMarquardtOptimizer33.residualsWeights; levenbergMarquardtOptimizer33.cols = 52; levenbergMarquardtOptimizer33.incrementIterationsCounter(); double[] doubleArray44 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray49 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray50 = new double[][] { doubleArray44, doubleArray49 }; levenbergMarquardtOptimizer33.jacobian = doubleArray50; levenbergMarquardtOptimizer25.jacobian = doubleArray50; java.text.ParseException parseException53 = org.apache.commons.math.MathRuntimeException.createParseException((int) (byte) 1, "Convergence failed", (java.lang.Object[]) doubleArray50); java.lang.ArithmeticException arithmeticException54 = org.apache.commons.math.MathRuntimeException.createArithmeticException("hi!", (java.lang.Object[]) doubleArray50); org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException55 = new org.apache.commons.math.linear.InvalidMatrixException("Convergence failed", (java.lang.Object[]) doubleArray50); org.apache.commons.math.MathRuntimeException mathRuntimeException56 = new org.apache.commons.math.MathRuntimeException("evaluation failed for argument = {0}", (java.lang.Object[]) doubleArray50); java.io.EOFException eOFException57 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) doubleArray50); java.text.ParseException parseException58 = org.apache.commons.math.MathRuntimeException.createParseException(100, "", (java.lang.Object[]) doubleArray50); levenbergMarquardtOptimizer1.jacobian = doubleArray50; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException60 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("org.apache.commons.math.MathException: ", (java.lang.Object[]) doubleArray50); org.junit.Assert.assertNull(doubleArray4); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNull(doubleArray28); org.junit.Assert.assertNull(doubleArray31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1000 + "'", int32 == 1000); org.junit.Assert.assertNull(doubleArray36); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertNotNull(parseException53); org.junit.Assert.assertNotNull(arithmeticException54); org.junit.Assert.assertNotNull(eOFException57); org.junit.Assert.assertNotNull(parseException58); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException60); }
public void test574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test574"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.residualsWeights; levenbergMarquardtOptimizer6.cost = 0.0d; double[] doubleArray12 = levenbergMarquardtOptimizer6.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer6.getConvergenceChecker(); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker13; double[] doubleArray15 = null; levenbergMarquardtOptimizer0.objective = doubleArray15; levenbergMarquardtOptimizer0.cols = (short) 100; double[] doubleArray22 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); java.lang.Throwable throwable24 = null; double[] doubleArray26 = new double[] { (byte) 100 }; java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException(throwable24, doubleArray26, "hi!", objArray34); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair37 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray22, doubleArray26, true); java.lang.Throwable throwable38 = null; double[] doubleArray40 = new double[] { (byte) 100 }; java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException(throwable38, doubleArray40, "hi!", objArray48); double[] doubleArray50 = functionEvaluationException49.getArgument(); java.lang.Throwable throwable51 = null; double[] doubleArray53 = new double[] { (byte) 100 }; java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException(throwable51, doubleArray53, "hi!", objArray61); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair64 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray50, doubleArray53, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair66 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray22, doubleArray53, true); java.lang.Throwable throwable67 = null; double[] doubleArray69 = new double[] { (byte) 100 }; java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException(throwable67, doubleArray69, "hi!", objArray77); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair79 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray53, doubleArray69); double[] doubleArray80 = vectorialPointValuePair79.getPointRef(); double[] doubleArray81 = vectorialPointValuePair79.getPoint(); levenbergMarquardtOptimizer0.point = doubleArray81; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]"); org.junit.Assert.assertNotNull(objArray34); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]"); org.junit.Assert.assertNotNull(objArray48); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]"); org.junit.Assert.assertNotNull(objArray61); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0]"); org.junit.Assert.assertNotNull(objArray77); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray80); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray81); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0]"); }
public void test575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test575"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; int int9 = levenbergMarquardtOptimizer0.getEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); double[] doubleArray13 = levenbergMarquardtOptimizer10.residualsWeights; int int14 = levenbergMarquardtOptimizer10.getMaxIterations(); levenbergMarquardtOptimizer10.setMaxIterations(100); levenbergMarquardtOptimizer10.setParRelativeTolerance((-1.0d)); double[] doubleArray22 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer10.residuals = doubleArray22; levenbergMarquardtOptimizer0.objective = doubleArray22; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 1.0, -1.0]"); }
public void test576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test576"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer2.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker9; int int11 = levenbergMarquardtOptimizer0.getIterations(); int int12 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations((int) 'a'); double double15 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); }
public void test577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test577"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); }
public void test578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test578"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 100L); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test579"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray14 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(doubleArray14); java.lang.Throwable throwable16 = null; double[] doubleArray18 = new double[] { (byte) 100 }; java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(throwable16, doubleArray18, "hi!", objArray26); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair29 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray14, doubleArray18, true); org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray31 = convergenceException30.getSuppressed(); double[] doubleArray37 = new double[] { (-1L), ' ', 'a', (short) 0, 2147483647 }; java.lang.Object[] objArray47 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException48 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray47); java.lang.IllegalArgumentException illegalArgumentException49 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException48); java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException48, "", objArray52); org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray52); java.util.ConcurrentModificationException concurrentModificationException55 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray52); java.lang.Object[] objArray63 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException64 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray63); java.lang.Object[] objArray74 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException75 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray74); java.lang.IllegalArgumentException illegalArgumentException76 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException75); java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException75, "", objArray79); org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray79); java.util.ConcurrentModificationException concurrentModificationException82 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray79); java.util.ConcurrentModificationException concurrentModificationException83 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray79); org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException64, "", objArray79); org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) concurrentModificationException55, (double) 10, "", objArray79); org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray79); org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) convergenceException30, doubleArray37, "org.apache.commons.math.MathRuntimeException$2: ", objArray79); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair88 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray14, doubleArray37); levenbergMarquardtOptimizer0.objective = doubleArray37; java.lang.Class<?> wildcardClass90 = doubleArray37.getClass(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]"); org.junit.Assert.assertNotNull(objArray26); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(throwableArray31); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 32.0, 97.0, 0.0, 2.147483647E9]"); org.junit.Assert.assertNotNull(objArray47); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException48); org.junit.Assert.assertNotNull(illegalArgumentException49); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException55); org.junit.Assert.assertNotNull(objArray63); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException64); org.junit.Assert.assertNotNull(objArray74); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException75); org.junit.Assert.assertNotNull(illegalArgumentException76); org.junit.Assert.assertNotNull(objArray79); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException82); org.junit.Assert.assertNotNull(concurrentModificationException83); org.junit.Assert.assertNotNull(wildcardClass90); }
public void test580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test580"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.cost = 1.0d; levenbergMarquardtOptimizer0.rows = '#'; levenbergMarquardtOptimizer0.cost = (byte) 100; double double14 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d); }
public void test581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test581"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.residualsWeights; levenbergMarquardtOptimizer6.cols = 52; int int12 = levenbergMarquardtOptimizer6.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer6.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cost = 0.0d; double[] doubleArray20 = levenbergMarquardtOptimizer14.targetValues; double[] doubleArray21 = levenbergMarquardtOptimizer14.residuals; int int22 = levenbergMarquardtOptimizer14.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cost = 0.0d; double[] doubleArray29 = levenbergMarquardtOptimizer23.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker30 = levenbergMarquardtOptimizer23.getConvergenceChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker(vectorialConvergenceChecker30); levenbergMarquardtOptimizer6.checker = vectorialConvergenceChecker30; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker30); int int34 = levenbergMarquardtOptimizer0.rows; int int35 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertNotNull(vectorialConvergenceChecker30); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1000 + "'", int35 == 1000); }
public void test582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test582"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; int int12 = levenbergMarquardtOptimizer8.getJacobianEvaluations(); levenbergMarquardtOptimizer8.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cols = 52; int int20 = levenbergMarquardtOptimizer14.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker21 = levenbergMarquardtOptimizer14.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer22 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker23 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer22.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker23); double[] doubleArray25 = levenbergMarquardtOptimizer22.residualsWeights; levenbergMarquardtOptimizer22.cost = 0.0d; double[] doubleArray28 = levenbergMarquardtOptimizer22.targetValues; double[] doubleArray29 = levenbergMarquardtOptimizer22.residuals; int int30 = levenbergMarquardtOptimizer22.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer31 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker32 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer31.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker32); double[] doubleArray34 = levenbergMarquardtOptimizer31.residualsWeights; levenbergMarquardtOptimizer31.cost = 0.0d; double[] doubleArray37 = levenbergMarquardtOptimizer31.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker38 = levenbergMarquardtOptimizer31.getConvergenceChecker(); levenbergMarquardtOptimizer22.setConvergenceChecker(vectorialConvergenceChecker38); levenbergMarquardtOptimizer14.checker = vectorialConvergenceChecker38; levenbergMarquardtOptimizer8.setConvergenceChecker(vectorialConvergenceChecker38); int int42 = levenbergMarquardtOptimizer8.rows; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer43 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker44 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer43.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker44); levenbergMarquardtOptimizer43.cols = (short) 100; levenbergMarquardtOptimizer43.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer43.setParRelativeTolerance((double) 2147483647); int int52 = levenbergMarquardtOptimizer43.getMaxEvaluations(); int int53 = levenbergMarquardtOptimizer43.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer54 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker55 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer54.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker55); double[] doubleArray57 = levenbergMarquardtOptimizer54.residualsWeights; levenbergMarquardtOptimizer54.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker60 = levenbergMarquardtOptimizer54.getConvergenceChecker(); levenbergMarquardtOptimizer54.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker63 = levenbergMarquardtOptimizer54.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer64 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker65 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer64.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker65); double[] doubleArray67 = levenbergMarquardtOptimizer64.residualsWeights; levenbergMarquardtOptimizer64.cols = 52; levenbergMarquardtOptimizer64.incrementIterationsCounter(); double[] doubleArray75 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray80 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray81 = new double[][] { doubleArray75, doubleArray80 }; levenbergMarquardtOptimizer64.jacobian = doubleArray81; levenbergMarquardtOptimizer54.jacobian = doubleArray81; levenbergMarquardtOptimizer43.jacobian = doubleArray81; levenbergMarquardtOptimizer8.jacobian = doubleArray81; levenbergMarquardtOptimizer0.jacobian = doubleArray81; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 10); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker21); org.junit.Assert.assertNull(doubleArray25); org.junit.Assert.assertNull(doubleArray28); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertNull(doubleArray34); org.junit.Assert.assertNull(doubleArray37); org.junit.Assert.assertNotNull(vectorialConvergenceChecker38); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647); org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100); org.junit.Assert.assertNull(doubleArray57); org.junit.Assert.assertNotNull(vectorialConvergenceChecker60); org.junit.Assert.assertNotNull(vectorialConvergenceChecker63); org.junit.Assert.assertNull(doubleArray67); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray80); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray81); }
public void test583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test583"); java.lang.Object[] objArray10 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException11 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray10); java.lang.IllegalArgumentException illegalArgumentException12 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException11); java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException11, "", objArray15); org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray15); java.util.ConcurrentModificationException concurrentModificationException18 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray15); java.util.ConcurrentModificationException concurrentModificationException19 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray15); java.lang.NullPointerException nullPointerException20 = org.apache.commons.math.MathRuntimeException.createNullPointerException("evaluation failed for argument = {0}", objArray15); java.lang.IllegalStateException illegalStateException21 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("", objArray15); java.lang.IllegalArgumentException illegalArgumentException22 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) illegalStateException21); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cols = 52; double double29 = levenbergMarquardtOptimizer23.getChiSquare(); levenbergMarquardtOptimizer23.cols = (byte) 1; double double32 = levenbergMarquardtOptimizer23.getRMS(); double[] doubleArray37 = new double[] { 52, 0.0f, 0L, 0L }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(doubleArray37); levenbergMarquardtOptimizer23.residuals = doubleArray37; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(doubleArray37); java.lang.RuntimeException runtimeException41 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable) functionEvaluationException40); illegalArgumentException22.addSuppressed((java.lang.Throwable) functionEvaluationException40); org.junit.Assert.assertNotNull(objArray10); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException11); org.junit.Assert.assertNotNull(illegalArgumentException12); org.junit.Assert.assertNotNull(objArray15); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException18); org.junit.Assert.assertNotNull(concurrentModificationException19); org.junit.Assert.assertNotNull(nullPointerException20); org.junit.Assert.assertNotNull(illegalStateException21); org.junit.Assert.assertNotNull(illegalArgumentException22); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double32)); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[52.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(runtimeException41); }
public void test584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test584"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.rows = 0; levenbergMarquardtOptimizer0.setMaxIterations(10); double[] doubleArray18 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(doubleArray18); java.lang.Throwable throwable20 = null; double[] doubleArray22 = new double[] { (byte) 100 }; java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(throwable20, doubleArray22, "hi!", objArray30); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair33 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray18, doubleArray22, true); java.lang.Throwable throwable34 = null; double[] doubleArray36 = new double[] { (byte) 100 }; java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException(throwable34, doubleArray36, "hi!", objArray44); double[] doubleArray46 = functionEvaluationException45.getArgument(); java.lang.Throwable throwable47 = null; double[] doubleArray49 = new double[] { (byte) 100 }; java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(throwable47, doubleArray49, "hi!", objArray57); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair60 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray46, doubleArray49, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair62 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray18, doubleArray49, true); java.lang.Throwable throwable63 = null; double[] doubleArray65 = new double[] { (byte) 100 }; java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(throwable63, doubleArray65, "hi!", objArray73); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair75 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray49, doubleArray65); double[] doubleArray76 = vectorialPointValuePair75.getPointRef(); double[] doubleArray77 = vectorialPointValuePair75.getPoint(); double[] doubleArray78 = vectorialPointValuePair75.getPointRef(); double[] doubleArray79 = vectorialPointValuePair75.getValue(); levenbergMarquardtOptimizer0.point = doubleArray79; levenbergMarquardtOptimizer0.setOrthoTolerance((double) (short) 100); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertNotNull(objArray30); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0]"); org.junit.Assert.assertNotNull(objArray44); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]"); org.junit.Assert.assertNotNull(objArray57); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0]"); org.junit.Assert.assertNotNull(objArray73); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); }
public void test585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test585"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test586"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int9 = levenbergMarquardtOptimizer0.cols; double[][] doubleArray10 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); }
public void test587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test587"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = (byte) 1; double double9 = levenbergMarquardtOptimizer0.getRMS(); double[] doubleArray14 = new double[] { 52, 0.0f, 0L, 0L }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(doubleArray14); levenbergMarquardtOptimizer0.residuals = doubleArray14; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int18 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double9)); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[52.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); }
public void test588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test588"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.cols; double[][] doubleArray9 = levenbergMarquardtOptimizer0.jacobian; levenbergMarquardtOptimizer0.setMaxEvaluations((int) '4'); levenbergMarquardtOptimizer0.setMaxEvaluations(2147483647); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(doubleArray9); }
public void test589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test589"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray9 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); double[] doubleArray12 = levenbergMarquardtOptimizer0.residuals; org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction13 = null; org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException(0); double[] doubleArray19 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(doubleArray19); java.lang.Throwable throwable21 = null; double[] doubleArray23 = new double[] { (byte) 100 }; java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(throwable21, doubleArray23, "hi!", objArray31); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair34 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray19, doubleArray23, true); double[] doubleArray35 = vectorialPointValuePair34.getPoint(); java.lang.Throwable throwable36 = null; double[] doubleArray38 = new double[] { (byte) 100 }; java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException(throwable36, doubleArray38, "hi!", objArray46); double[] doubleArray48 = functionEvaluationException47.getArgument(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair49 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray35, doubleArray48); double[] doubleArray50 = vectorialPointValuePair49.getPoint(); double[] doubleArray51 = vectorialPointValuePair49.getPointRef(); double[] doubleArray56 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(doubleArray56); java.lang.Throwable throwable58 = null; double[] doubleArray60 = new double[] { (byte) 100 }; java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(throwable58, doubleArray60, "hi!", objArray68); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair71 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray56, doubleArray60, true); double[] doubleArray72 = vectorialPointValuePair71.getPoint(); org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray75 = convergenceException74.getSuppressed(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(doubleArray72, "", (java.lang.Object[]) throwableArray75); org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) maxIterationsExceededException15, doubleArray51, "org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) throwableArray75); double[] doubleArray78 = null; double[] doubleArray79 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair80 = levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction13, doubleArray51, doubleArray78, doubleArray79); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0]"); org.junit.Assert.assertNotNull(objArray31); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]"); org.junit.Assert.assertNotNull(objArray46); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]"); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(throwableArray75); }
public void test590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test590"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 100); double[] doubleArray11 = levenbergMarquardtOptimizer0.residuals; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); }
public void test591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test591"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; levenbergMarquardtOptimizer8.cost = 0.0d; double[] doubleArray14 = levenbergMarquardtOptimizer8.targetValues; double[] doubleArray15 = levenbergMarquardtOptimizer8.residuals; int int16 = levenbergMarquardtOptimizer8.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer17 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker18 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer17.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker18); double[] doubleArray20 = levenbergMarquardtOptimizer17.residualsWeights; levenbergMarquardtOptimizer17.cost = 0.0d; double[] doubleArray23 = levenbergMarquardtOptimizer17.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker24 = levenbergMarquardtOptimizer17.getConvergenceChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker(vectorialConvergenceChecker24); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker24; java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); double[] doubleArray57 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(doubleArray57); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair60 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray57, true); levenbergMarquardtOptimizer0.residualsWeights = doubleArray42; int int62 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray23); org.junit.Assert.assertNotNull(vectorialConvergenceChecker24); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1000 + "'", int62 == 1000); }
public void test592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test592"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray2 = levenbergMarquardtOptimizer1.targetValues; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; levenbergMarquardtOptimizer7.cols = 52; levenbergMarquardtOptimizer7.incrementIterationsCounter(); double[] doubleArray18 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray23 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray24 = new double[][] { doubleArray18, doubleArray23 }; levenbergMarquardtOptimizer7.jacobian = doubleArray24; java.lang.IllegalStateException illegalStateException26 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("Convergence failed", (java.lang.Object[]) doubleArray24); org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException: ", (java.lang.Object[]) doubleArray24); org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) doubleArray24); java.util.NoSuchElementException noSuchElementException29 = org.apache.commons.math.MathRuntimeException.createNoSuchElementException("org.apache.commons.math.MathRuntimeException$8: org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) doubleArray24); levenbergMarquardtOptimizer1.jacobian = doubleArray24; org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException31 = new org.apache.commons.math.linear.InvalidMatrixException("org.apache.commons.math.MathRuntimeException$8: evaluation failed for argument = 100", (java.lang.Object[]) doubleArray24); org.junit.Assert.assertNull(doubleArray2); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertNotNull(illegalStateException26); org.junit.Assert.assertNotNull(noSuchElementException29); }
public void test593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test593"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[][] doubleArray7 = levenbergMarquardtOptimizer0.jacobian; double[] doubleArray8 = levenbergMarquardtOptimizer0.residuals; org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker((double) 100, 0.0d); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); int int13 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647); }
public void test594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test594"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setCostRelativeTolerance(0.0d); }
public void test595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test595"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer3 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker4 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer3.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker4); double[] doubleArray6 = levenbergMarquardtOptimizer3.residualsWeights; levenbergMarquardtOptimizer3.cols = 52; levenbergMarquardtOptimizer3.incrementIterationsCounter(); double[] doubleArray14 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray19 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray20 = new double[][] { doubleArray14, doubleArray19 }; levenbergMarquardtOptimizer3.jacobian = doubleArray20; java.lang.IllegalStateException illegalStateException22 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("Convergence failed", (java.lang.Object[]) doubleArray20); org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException(); org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray35 = convergenceException34.getSuppressed(); org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) throwableArray35); java.io.EOFException eOFException37 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray35); java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException38 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", (java.lang.Object[]) throwableArray35); java.text.ParseException parseException39 = org.apache.commons.math.MathRuntimeException.createParseException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray35); java.lang.NullPointerException nullPointerException40 = org.apache.commons.math.MathRuntimeException.createNullPointerException("", (java.lang.Object[]) throwableArray35); org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException26, "hi!", (java.lang.Object[]) throwableArray35); org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException42 = new org.apache.commons.math.MaxIterationsExceededException(1, "org.apache.commons.math.MathRuntimeException: ", (java.lang.Object[]) throwableArray35); java.lang.Object[] objArray43 = maxIterationsExceededException42.getArguments(); org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException((java.lang.Throwable) illegalStateException22, "evaluation failed for argument = {0}", objArray43); java.text.ParseException parseException45 = org.apache.commons.math.MathRuntimeException.createParseException((int) ' ', "org.apache.commons.math.MathRuntimeException$5: hi!", objArray43); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertNotNull(illegalStateException22); org.junit.Assert.assertNotNull(throwableArray35); org.junit.Assert.assertNotNull(eOFException37); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException38); org.junit.Assert.assertNotNull(parseException39); org.junit.Assert.assertNotNull(nullPointerException40); org.junit.Assert.assertNotNull(objArray43); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]"); org.junit.Assert.assertNotNull(parseException45); }
public void test596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test596"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double double9 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 1); levenbergMarquardtOptimizer0.cols = (short) 0; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test597"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; int int6 = levenbergMarquardtOptimizer2.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer2.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; levenbergMarquardtOptimizer8.cost = 0.0d; double[] doubleArray14 = levenbergMarquardtOptimizer8.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker15 = levenbergMarquardtOptimizer8.getConvergenceChecker(); levenbergMarquardtOptimizer2.checker = vectorialConvergenceChecker15; double[] doubleArray17 = null; levenbergMarquardtOptimizer2.objective = doubleArray17; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer19 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker20 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer19.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker20); double[] doubleArray22 = levenbergMarquardtOptimizer19.residualsWeights; levenbergMarquardtOptimizer19.cols = 52; levenbergMarquardtOptimizer19.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker26 = levenbergMarquardtOptimizer19.checker; levenbergMarquardtOptimizer19.cost = 1.0d; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer31 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker32 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer31.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker32); double[] doubleArray34 = levenbergMarquardtOptimizer31.residualsWeights; levenbergMarquardtOptimizer31.cols = 52; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer37 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker38 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer37.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker38); double[] doubleArray40 = levenbergMarquardtOptimizer37.residualsWeights; levenbergMarquardtOptimizer37.cols = 52; levenbergMarquardtOptimizer37.incrementIterationsCounter(); double[] doubleArray48 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray53 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray54 = new double[][] { doubleArray48, doubleArray53 }; levenbergMarquardtOptimizer37.jacobian = doubleArray54; levenbergMarquardtOptimizer31.jacobian = doubleArray54; org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((double) 2147483647, "", (java.lang.Object[]) doubleArray54); levenbergMarquardtOptimizer19.jacobian = doubleArray54; levenbergMarquardtOptimizer2.jacobian = doubleArray54; org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) doubleArray54); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNotNull(vectorialConvergenceChecker15); org.junit.Assert.assertNull(doubleArray22); org.junit.Assert.assertNotNull(vectorialConvergenceChecker26); org.junit.Assert.assertNull(doubleArray34); org.junit.Assert.assertNull(doubleArray40); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray54); }
public void test598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test598"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 'a'); levenbergMarquardtOptimizer0.cols = 10; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test599"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setMaxIterations((int) ' '); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertNull(doubleArray10); }
public void test600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test600"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) -1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) 'a'); levenbergMarquardtOptimizer0.setOrthoTolerance((double) 52); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test601"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) -1); org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction10 = null; java.lang.Throwable throwable11 = null; double[] doubleArray13 = new double[] { (byte) 100 }; java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException(throwable11, doubleArray13, "hi!", objArray21); double[] doubleArray23 = functionEvaluationException22.getArgument(); java.lang.Object[] objArray32 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException33 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray32); java.lang.IllegalArgumentException illegalArgumentException34 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException33); java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException33, "", objArray37); org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray37); java.util.ConcurrentModificationException concurrentModificationException40 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray37); org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException22, "", objArray37); java.lang.Throwable throwable43 = null; double[] doubleArray45 = new double[] { (byte) 100 }; java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(throwable43, doubleArray45, "hi!", objArray53); org.apache.commons.math.MathRuntimeException mathRuntimeException55 = new org.apache.commons.math.MathRuntimeException(throwable43); java.lang.String str56 = mathRuntimeException55.getPattern(); java.lang.String str57 = mathRuntimeException55.getPattern(); org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathRuntimeException55); java.lang.Object[] objArray59 = mathRuntimeException55.getArguments(); org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException22, "hi!", objArray59); double[] doubleArray61 = functionEvaluationException22.getArgument(); double[] doubleArray65 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(doubleArray65); java.lang.Throwable throwable67 = null; double[] doubleArray69 = new double[] { (byte) 100 }; java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException(throwable67, doubleArray69, "hi!", objArray77); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair80 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray65, doubleArray69, true); double[] doubleArray81 = vectorialPointValuePair80.getPoint(); double[] doubleArray82 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair83 = levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction10, doubleArray61, doubleArray81, doubleArray82); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: dimension mismatch 1 != 3"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0]"); org.junit.Assert.assertNotNull(objArray21); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0]"); org.junit.Assert.assertNotNull(objArray32); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException33); org.junit.Assert.assertNotNull(illegalArgumentException34); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException40); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]"); org.junit.Assert.assertNotNull(objArray53); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, ""); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, ""); org.junit.Assert.assertNotNull(objArray59); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]"); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0]"); org.junit.Assert.assertNotNull(objArray77); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray81); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, 1.0, -1.0]"); }
public void test602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test602"); java.lang.Throwable throwable0 = null; double[] doubleArray4 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(doubleArray4); org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray8 = convergenceException7.getSuppressed(); org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException5, "", (java.lang.Object[]) throwableArray8); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); double[] doubleArray13 = levenbergMarquardtOptimizer10.residualsWeights; levenbergMarquardtOptimizer10.cost = 0.0d; double[] doubleArray16 = levenbergMarquardtOptimizer10.targetValues; double[] doubleArray17 = levenbergMarquardtOptimizer10.residuals; double[] doubleArray21 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException(doubleArray21); java.lang.Throwable throwable23 = null; double[] doubleArray25 = new double[] { (byte) 100 }; java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(throwable23, doubleArray25, "hi!", objArray33); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair36 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray21, doubleArray25, true); java.lang.Throwable throwable37 = null; double[] doubleArray39 = new double[] { (byte) 100 }; java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException(throwable37, doubleArray39, "hi!", objArray47); double[] doubleArray49 = functionEvaluationException48.getArgument(); java.lang.Throwable throwable50 = null; double[] doubleArray52 = new double[] { (byte) 100 }; java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException(throwable50, doubleArray52, "hi!", objArray60); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair63 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray49, doubleArray52, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair65 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray21, doubleArray52, true); java.lang.Throwable throwable66 = null; double[] doubleArray68 = new double[] { (byte) 100 }; java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException(throwable66, doubleArray68, "hi!", objArray76); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray52, doubleArray68); org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException(doubleArray52); levenbergMarquardtOptimizer10.targetValues = doubleArray52; double double81 = levenbergMarquardtOptimizer10.getChiSquare(); double[] doubleArray82 = levenbergMarquardtOptimizer10.targetValues; org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) convergenceException9, doubleArray82); org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException(throwable0, doubleArray82); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(throwableArray8); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertNull(doubleArray16); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0]"); org.junit.Assert.assertNotNull(objArray33); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(objArray47); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0]"); org.junit.Assert.assertNotNull(objArray60); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray68); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0]"); org.junit.Assert.assertNotNull(objArray76); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d); org.junit.Assert.assertNotNull(doubleArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0]"); }
public void test603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test603"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; levenbergMarquardtOptimizer0.setParRelativeTolerance(Double.NaN); int int73 = levenbergMarquardtOptimizer0.rows; // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair74 = levenbergMarquardtOptimizer0.doOptimize(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0); }
public void test604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test604"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker2 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer1.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker2); double[] doubleArray4 = levenbergMarquardtOptimizer1.residualsWeights; levenbergMarquardtOptimizer1.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer1.getConvergenceChecker(); levenbergMarquardtOptimizer1.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer1.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer11 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker12 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer11.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker12); double[] doubleArray14 = levenbergMarquardtOptimizer11.residualsWeights; levenbergMarquardtOptimizer11.cols = 52; levenbergMarquardtOptimizer11.incrementIterationsCounter(); double[] doubleArray22 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray27 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray28 = new double[][] { doubleArray22, doubleArray27 }; levenbergMarquardtOptimizer11.jacobian = doubleArray28; levenbergMarquardtOptimizer1.jacobian = doubleArray28; java.lang.IllegalStateException illegalStateException31 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.MaxEvaluationsExceededException: Maximal number of evaluations (10) exceeded", (java.lang.Object[]) doubleArray28); org.junit.Assert.assertNull(doubleArray4); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertNotNull(illegalStateException31); }
public void test605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test605"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray9 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray9; int int11 = levenbergMarquardtOptimizer0.getMaxIterations(); int int12 = levenbergMarquardtOptimizer0.getIterations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair13 = levenbergMarquardtOptimizer0.doOptimize(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); }
public void test606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test606"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int8 = levenbergMarquardtOptimizer7.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer9 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker10 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer9.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker10); double[] doubleArray12 = levenbergMarquardtOptimizer9.residualsWeights; levenbergMarquardtOptimizer9.cols = 52; levenbergMarquardtOptimizer9.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker16 = levenbergMarquardtOptimizer9.checker; levenbergMarquardtOptimizer7.checker = vectorialConvergenceChecker16; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker16; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 1); int int21 = levenbergMarquardtOptimizer0.getEvaluations(); double double22 = levenbergMarquardtOptimizer0.getRMS(); int int23 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker16); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertTrue(Double.isNaN(double22)); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); }
public void test607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test607"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; levenbergMarquardtOptimizer8.cost = 0.0d; double[] doubleArray14 = levenbergMarquardtOptimizer8.targetValues; double[] doubleArray15 = levenbergMarquardtOptimizer8.residuals; int int16 = levenbergMarquardtOptimizer8.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer17 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker18 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer17.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker18); double[] doubleArray20 = levenbergMarquardtOptimizer17.residualsWeights; levenbergMarquardtOptimizer17.cost = 0.0d; double[] doubleArray23 = levenbergMarquardtOptimizer17.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker24 = levenbergMarquardtOptimizer17.getConvergenceChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker(vectorialConvergenceChecker24); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker24; java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); double[] doubleArray57 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(doubleArray57); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair60 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray57, true); levenbergMarquardtOptimizer0.residualsWeights = doubleArray42; int int62 = levenbergMarquardtOptimizer0.getIterations(); double double63 = levenbergMarquardtOptimizer0.getRMS(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray23); org.junit.Assert.assertNotNull(vectorialConvergenceChecker24); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0); org.junit.Assert.assertTrue(Double.isNaN(double63)); }
public void test608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test608"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; int int11 = levenbergMarquardtOptimizer7.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer7.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer13 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker14 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer13.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker14); double[] doubleArray16 = levenbergMarquardtOptimizer13.residualsWeights; levenbergMarquardtOptimizer13.cost = 0.0d; double[] doubleArray19 = levenbergMarquardtOptimizer13.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker20 = levenbergMarquardtOptimizer13.getConvergenceChecker(); levenbergMarquardtOptimizer7.checker = vectorialConvergenceChecker20; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker20); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cost = 0.0d; double[] doubleArray29 = levenbergMarquardtOptimizer23.targetValues; double[] doubleArray30 = levenbergMarquardtOptimizer23.residuals; double[] doubleArray34 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException(doubleArray34); java.lang.Throwable throwable36 = null; double[] doubleArray38 = new double[] { (byte) 100 }; java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException(throwable36, doubleArray38, "hi!", objArray46); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair49 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray34, doubleArray38, true); java.lang.Throwable throwable50 = null; double[] doubleArray52 = new double[] { (byte) 100 }; java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException(throwable50, doubleArray52, "hi!", objArray60); double[] doubleArray62 = functionEvaluationException61.getArgument(); java.lang.Throwable throwable63 = null; double[] doubleArray65 = new double[] { (byte) 100 }; java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(throwable63, doubleArray65, "hi!", objArray73); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair76 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray62, doubleArray65, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray34, doubleArray65, true); java.lang.Throwable throwable79 = null; double[] doubleArray81 = new double[] { (byte) 100 }; java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException(throwable79, doubleArray81, "hi!", objArray89); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair91 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray65, doubleArray81); org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(doubleArray65); levenbergMarquardtOptimizer23.targetValues = doubleArray65; double[] doubleArray94 = levenbergMarquardtOptimizer23.point; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker95 = levenbergMarquardtOptimizer23.checker; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker95); int int97 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); org.junit.Assert.assertNull(doubleArray16); org.junit.Assert.assertNull(doubleArray19); org.junit.Assert.assertNotNull(vectorialConvergenceChecker20); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertNull(doubleArray30); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]"); org.junit.Assert.assertNotNull(objArray46); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0]"); org.junit.Assert.assertNotNull(objArray60); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0]"); org.junit.Assert.assertNotNull(objArray73); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray81); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0]"); org.junit.Assert.assertNotNull(objArray89); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray94); org.junit.Assert.assertNotNull(vectorialConvergenceChecker95); org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0); }
public void test609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test609"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray8 = levenbergMarquardtOptimizer0.residualsWeights; int int9 = levenbergMarquardtOptimizer0.cols; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test610"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker2 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer1.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker2); double[] doubleArray4 = levenbergMarquardtOptimizer1.residualsWeights; levenbergMarquardtOptimizer1.cols = 52; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; levenbergMarquardtOptimizer7.cols = 52; levenbergMarquardtOptimizer7.incrementIterationsCounter(); double[] doubleArray18 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray23 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray24 = new double[][] { doubleArray18, doubleArray23 }; levenbergMarquardtOptimizer7.jacobian = doubleArray24; levenbergMarquardtOptimizer1.jacobian = doubleArray24; org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.MathRuntimeException$6: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) doubleArray24); org.junit.Assert.assertNull(doubleArray4); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray24); }
public void test611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test611"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations(52); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 0); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test612"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test613"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; int int26 = levenbergMarquardtOptimizer0.cols; double[] doubleArray27 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray28 = levenbergMarquardtOptimizer0.residuals; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertNull(doubleArray27); org.junit.Assert.assertNull(doubleArray28); }
public void test614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test614"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; int int12 = levenbergMarquardtOptimizer8.getJacobianEvaluations(); levenbergMarquardtOptimizer8.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cols = 52; int int20 = levenbergMarquardtOptimizer14.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker21 = levenbergMarquardtOptimizer14.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer22 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker23 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer22.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker23); double[] doubleArray25 = levenbergMarquardtOptimizer22.residualsWeights; levenbergMarquardtOptimizer22.cost = 0.0d; double[] doubleArray28 = levenbergMarquardtOptimizer22.targetValues; double[] doubleArray29 = levenbergMarquardtOptimizer22.residuals; int int30 = levenbergMarquardtOptimizer22.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer31 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker32 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer31.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker32); double[] doubleArray34 = levenbergMarquardtOptimizer31.residualsWeights; levenbergMarquardtOptimizer31.cost = 0.0d; double[] doubleArray37 = levenbergMarquardtOptimizer31.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker38 = levenbergMarquardtOptimizer31.getConvergenceChecker(); levenbergMarquardtOptimizer22.setConvergenceChecker(vectorialConvergenceChecker38); levenbergMarquardtOptimizer14.checker = vectorialConvergenceChecker38; levenbergMarquardtOptimizer8.setConvergenceChecker(vectorialConvergenceChecker38); int int42 = levenbergMarquardtOptimizer8.rows; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer43 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker44 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer43.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker44); levenbergMarquardtOptimizer43.cols = (short) 100; levenbergMarquardtOptimizer43.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer43.setParRelativeTolerance((double) 2147483647); int int52 = levenbergMarquardtOptimizer43.getMaxEvaluations(); int int53 = levenbergMarquardtOptimizer43.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer54 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker55 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer54.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker55); double[] doubleArray57 = levenbergMarquardtOptimizer54.residualsWeights; levenbergMarquardtOptimizer54.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker60 = levenbergMarquardtOptimizer54.getConvergenceChecker(); levenbergMarquardtOptimizer54.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker63 = levenbergMarquardtOptimizer54.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer64 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker65 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer64.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker65); double[] doubleArray67 = levenbergMarquardtOptimizer64.residualsWeights; levenbergMarquardtOptimizer64.cols = 52; levenbergMarquardtOptimizer64.incrementIterationsCounter(); double[] doubleArray75 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray80 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray81 = new double[][] { doubleArray75, doubleArray80 }; levenbergMarquardtOptimizer64.jacobian = doubleArray81; levenbergMarquardtOptimizer54.jacobian = doubleArray81; levenbergMarquardtOptimizer43.jacobian = doubleArray81; levenbergMarquardtOptimizer8.jacobian = doubleArray81; levenbergMarquardtOptimizer0.jacobian = doubleArray81; levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) 0); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker21); org.junit.Assert.assertNull(doubleArray25); org.junit.Assert.assertNull(doubleArray28); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertNull(doubleArray34); org.junit.Assert.assertNull(doubleArray37); org.junit.Assert.assertNotNull(vectorialConvergenceChecker38); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647); org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100); org.junit.Assert.assertNull(doubleArray57); org.junit.Assert.assertNotNull(vectorialConvergenceChecker60); org.junit.Assert.assertNotNull(vectorialConvergenceChecker63); org.junit.Assert.assertNull(doubleArray67); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray80); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray81); }
public void test615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test615"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; int int72 = levenbergMarquardtOptimizer0.rows; int int73 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray74 = null; levenbergMarquardtOptimizer0.residualsWeights = doubleArray74; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0); }
public void test616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test616"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; levenbergMarquardtOptimizer8.cost = 0.0d; double[] doubleArray14 = levenbergMarquardtOptimizer8.targetValues; double[] doubleArray15 = levenbergMarquardtOptimizer8.residuals; int int16 = levenbergMarquardtOptimizer8.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer17 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker18 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer17.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker18); double[] doubleArray20 = levenbergMarquardtOptimizer17.residualsWeights; levenbergMarquardtOptimizer17.cost = 0.0d; double[] doubleArray23 = levenbergMarquardtOptimizer17.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker24 = levenbergMarquardtOptimizer17.getConvergenceChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker(vectorialConvergenceChecker24); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker24; double[] doubleArray27 = levenbergMarquardtOptimizer0.objective; double double28 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray23); org.junit.Assert.assertNotNull(vectorialConvergenceChecker24); org.junit.Assert.assertNull(doubleArray27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); }
public void test617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test617"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test618"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer2.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker9; int int11 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = null; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker13; double[] doubleArray15 = levenbergMarquardtOptimizer0.targetValues; int int16 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1000 + "'", int16 == 1000); }
public void test619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test619"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); int int12 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 2147483647); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) (short) 10); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); }
public void test620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test620"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker4 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer5 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker6 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer5.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker6); double[] doubleArray8 = levenbergMarquardtOptimizer5.residualsWeights; levenbergMarquardtOptimizer5.cols = 52; levenbergMarquardtOptimizer5.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer5.checker; double[][] doubleArray13 = levenbergMarquardtOptimizer5.jacobian; java.lang.Throwable throwable14 = null; double[] doubleArray16 = new double[] { (byte) 100 }; java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(throwable14, doubleArray16, "hi!", objArray24); double[] doubleArray26 = functionEvaluationException25.getArgument(); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair40 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray26, doubleArray29, false); org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(doubleArray26); java.lang.Object[] objArray43 = null; org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(doubleArray26, "org.apache.commons.math.MathRuntimeException$2: ", objArray43); levenbergMarquardtOptimizer5.point = doubleArray26; levenbergMarquardtOptimizer0.residuals = doubleArray26; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker4); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]"); org.junit.Assert.assertNotNull(objArray24); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); }
public void test621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test621"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.setMaxEvaluations(0); double[] doubleArray13 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNull(doubleArray13); }
public void test622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test622"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.rows = (byte) -1; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 52); levenbergMarquardtOptimizer0.setMaxIterations(52); double double15 = levenbergMarquardtOptimizer0.getChiSquare(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); }
public void test623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test623"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (-1.0f)); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); }
public void test624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test624"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.incrementIterationsCounter(); double[] doubleArray12 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.cost = (byte) 1; org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100); org.junit.Assert.assertNull(doubleArray12); }
public void test625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test625"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; int int2 = levenbergMarquardtOptimizer0.getMaxIterations(); double double3 = levenbergMarquardtOptimizer0.getRMS(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) 1L); org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000); org.junit.Assert.assertTrue(Double.isNaN(double3)); }
public void test626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test626"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 'a'); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 52); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(Double.NaN, 0.0d); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer0.point; double[][] doubleArray18 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNull(doubleArray18); }
public void test627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test627"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.cost = 1.0d; levenbergMarquardtOptimizer0.rows = '#'; java.lang.Throwable throwable12 = null; double[] doubleArray14 = new double[] { (byte) 100 }; java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(throwable12, doubleArray14, "hi!", objArray22); double[] doubleArray24 = functionEvaluationException23.getArgument(); java.lang.Object[] objArray33 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException34 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray33); java.lang.IllegalArgumentException illegalArgumentException35 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException34); java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException34, "", objArray38); org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray38); java.util.ConcurrentModificationException concurrentModificationException41 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray38); org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException23, "", objArray38); java.lang.Throwable throwable44 = null; double[] doubleArray46 = new double[] { (byte) 100 }; java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException(throwable44, doubleArray46, "hi!", objArray54); org.apache.commons.math.MathRuntimeException mathRuntimeException56 = new org.apache.commons.math.MathRuntimeException(throwable44); java.lang.String str57 = mathRuntimeException56.getPattern(); java.lang.String str58 = mathRuntimeException56.getPattern(); org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathRuntimeException56); java.lang.Object[] objArray60 = mathRuntimeException56.getArguments(); org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException23, "hi!", objArray60); double[] doubleArray62 = functionEvaluationException23.getArgument(); levenbergMarquardtOptimizer0.residuals = doubleArray62; levenbergMarquardtOptimizer0.cols = 1000; int int66 = levenbergMarquardtOptimizer0.cols; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]"); org.junit.Assert.assertNotNull(objArray22); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]"); org.junit.Assert.assertNotNull(objArray33); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException34); org.junit.Assert.assertNotNull(illegalArgumentException35); org.junit.Assert.assertNotNull(objArray38); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException41); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]"); org.junit.Assert.assertNotNull(objArray54); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, ""); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, ""); org.junit.Assert.assertNotNull(objArray60); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]"); org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1000 + "'", int66 == 1000); }
public void test628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test628"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); }
public void test629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test629"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer13 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker14 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer13.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker14); double[] doubleArray16 = levenbergMarquardtOptimizer13.objective; double[] doubleArray17 = null; levenbergMarquardtOptimizer13.point = doubleArray17; double[] doubleArray19 = levenbergMarquardtOptimizer13.residualsWeights; int int20 = levenbergMarquardtOptimizer13.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer21 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker22 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer21.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker22); double[] doubleArray24 = levenbergMarquardtOptimizer21.residualsWeights; levenbergMarquardtOptimizer21.cols = 52; levenbergMarquardtOptimizer21.incrementIterationsCounter(); double[] doubleArray32 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray37 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray38 = new double[][] { doubleArray32, doubleArray37 }; levenbergMarquardtOptimizer21.jacobian = doubleArray38; levenbergMarquardtOptimizer13.jacobian = doubleArray38; java.text.ParseException parseException41 = org.apache.commons.math.MathRuntimeException.createParseException((int) (byte) 1, "Convergence failed", (java.lang.Object[]) doubleArray38); org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("evaluation failed for argument = {0}", (java.lang.Object[]) doubleArray38); org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) doubleArray38); levenbergMarquardtOptimizer0.jacobian = doubleArray38; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(doubleArray16); org.junit.Assert.assertNull(doubleArray19); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1000 + "'", int20 == 1000); org.junit.Assert.assertNull(doubleArray24); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertNotNull(parseException41); }
public void test630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test630"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = (byte) 1; double double9 = levenbergMarquardtOptimizer0.getRMS(); double[] doubleArray14 = new double[] { 52, 0.0f, 0L, 0L }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(doubleArray14); levenbergMarquardtOptimizer0.residuals = doubleArray14; levenbergMarquardtOptimizer0.incrementIterationsCounter(); double[][] doubleArray18 = levenbergMarquardtOptimizer0.jacobian; levenbergMarquardtOptimizer0.cost = 1L; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double9)); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[52.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNull(doubleArray18); }
public void test631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test631"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; double[] doubleArray10 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setMaxIterations(97); int int13 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray14 = null; levenbergMarquardtOptimizer0.residuals = doubleArray14; double double16 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); }
public void test632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test632"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.objective; double[] doubleArray6 = null; levenbergMarquardtOptimizer2.point = doubleArray6; double[] doubleArray8 = levenbergMarquardtOptimizer2.residualsWeights; int int9 = levenbergMarquardtOptimizer2.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); double[] doubleArray13 = levenbergMarquardtOptimizer10.residualsWeights; levenbergMarquardtOptimizer10.cols = 52; levenbergMarquardtOptimizer10.incrementIterationsCounter(); double[] doubleArray21 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray26 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 }; levenbergMarquardtOptimizer10.jacobian = doubleArray27; levenbergMarquardtOptimizer2.jacobian = doubleArray27; java.lang.NullPointerException nullPointerException30 = org.apache.commons.math.MathRuntimeException.createNullPointerException("org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) doubleArray27); org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException31 = new org.apache.commons.math.linear.InvalidMatrixException("org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Object[]) doubleArray27); java.lang.Throwable throwable37 = null; double[] doubleArray39 = new double[] { (byte) 100 }; java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException(throwable37, doubleArray39, "hi!", objArray47); org.apache.commons.math.MathRuntimeException mathRuntimeException49 = new org.apache.commons.math.MathRuntimeException(throwable37); java.lang.String str50 = mathRuntimeException49.getPattern(); java.lang.String str51 = mathRuntimeException49.getPattern(); org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathRuntimeException49); java.lang.Object[] objArray53 = mathRuntimeException49.getArguments(); java.lang.Object[] objArray54 = mathRuntimeException49.getArguments(); org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException((java.lang.Throwable) mathRuntimeException49); java.lang.Object[] objArray67 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException68 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray67); java.lang.IllegalArgumentException illegalArgumentException69 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException68); java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException68, "", objArray72); org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray72); java.util.ConcurrentModificationException concurrentModificationException75 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray72); java.io.EOFException eOFException76 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.MathRuntimeException$2: ", objArray72); java.lang.ArithmeticException arithmeticException77 = org.apache.commons.math.MathRuntimeException.createArithmeticException("", objArray72); org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) mathRuntimeException49, (double) (-1L), "evaluation failed for argument = {0}", objArray72); org.apache.commons.math.MathRuntimeException mathRuntimeException79 = new org.apache.commons.math.MathRuntimeException("org.apache.commons.math.MathException: ", objArray72); java.text.ParseException parseException80 = org.apache.commons.math.MathRuntimeException.createParseException((int) (byte) 100, "org.apache.commons.math.MathRuntimeException$8: org.apache.commons.math.MathRuntimeException$2: ", objArray72); java.lang.IllegalStateException illegalStateException81 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.MathRuntimeException$6: org.apache.commons.math.MathRuntimeException$2: ", objArray72); org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException((java.lang.Throwable) invalidMatrixException31, "org.apache.commons.math.MathException: evaluation failed for argument = 100", objArray72); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertNotNull(nullPointerException30); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(objArray47); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, ""); org.junit.Assert.assertNotNull(objArray53); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]"); org.junit.Assert.assertNotNull(objArray54); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]"); org.junit.Assert.assertNotNull(objArray67); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException68); org.junit.Assert.assertNotNull(illegalArgumentException69); org.junit.Assert.assertNotNull(objArray72); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException75); org.junit.Assert.assertNotNull(eOFException76); org.junit.Assert.assertNotNull(arithmeticException77); org.junit.Assert.assertNotNull(parseException80); org.junit.Assert.assertNotNull(illegalStateException81); }
public void test633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test633"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = (byte) 1; double double9 = levenbergMarquardtOptimizer0.getRMS(); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 0); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double9)); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); }
public void test634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test634"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int8 = levenbergMarquardtOptimizer0.cols; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); }
public void test635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test635"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; int int12 = levenbergMarquardtOptimizer8.getJacobianEvaluations(); levenbergMarquardtOptimizer8.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cols = 52; int int20 = levenbergMarquardtOptimizer14.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker21 = levenbergMarquardtOptimizer14.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer22 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker23 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer22.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker23); double[] doubleArray25 = levenbergMarquardtOptimizer22.residualsWeights; levenbergMarquardtOptimizer22.cost = 0.0d; double[] doubleArray28 = levenbergMarquardtOptimizer22.targetValues; double[] doubleArray29 = levenbergMarquardtOptimizer22.residuals; int int30 = levenbergMarquardtOptimizer22.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer31 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker32 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer31.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker32); double[] doubleArray34 = levenbergMarquardtOptimizer31.residualsWeights; levenbergMarquardtOptimizer31.cost = 0.0d; double[] doubleArray37 = levenbergMarquardtOptimizer31.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker38 = levenbergMarquardtOptimizer31.getConvergenceChecker(); levenbergMarquardtOptimizer22.setConvergenceChecker(vectorialConvergenceChecker38); levenbergMarquardtOptimizer14.checker = vectorialConvergenceChecker38; levenbergMarquardtOptimizer8.setConvergenceChecker(vectorialConvergenceChecker38); int int42 = levenbergMarquardtOptimizer8.rows; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer43 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker44 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer43.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker44); levenbergMarquardtOptimizer43.cols = (short) 100; levenbergMarquardtOptimizer43.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer43.setParRelativeTolerance((double) 2147483647); int int52 = levenbergMarquardtOptimizer43.getMaxEvaluations(); int int53 = levenbergMarquardtOptimizer43.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer54 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker55 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer54.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker55); double[] doubleArray57 = levenbergMarquardtOptimizer54.residualsWeights; levenbergMarquardtOptimizer54.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker60 = levenbergMarquardtOptimizer54.getConvergenceChecker(); levenbergMarquardtOptimizer54.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker63 = levenbergMarquardtOptimizer54.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer64 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker65 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer64.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker65); double[] doubleArray67 = levenbergMarquardtOptimizer64.residualsWeights; levenbergMarquardtOptimizer64.cols = 52; levenbergMarquardtOptimizer64.incrementIterationsCounter(); double[] doubleArray75 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray80 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray81 = new double[][] { doubleArray75, doubleArray80 }; levenbergMarquardtOptimizer64.jacobian = doubleArray81; levenbergMarquardtOptimizer54.jacobian = doubleArray81; levenbergMarquardtOptimizer43.jacobian = doubleArray81; levenbergMarquardtOptimizer8.jacobian = doubleArray81; levenbergMarquardtOptimizer0.jacobian = doubleArray81; levenbergMarquardtOptimizer0.setMaxEvaluations((int) 'a'); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker21); org.junit.Assert.assertNull(doubleArray25); org.junit.Assert.assertNull(doubleArray28); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertNull(doubleArray34); org.junit.Assert.assertNull(doubleArray37); org.junit.Assert.assertNotNull(vectorialConvergenceChecker38); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647); org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100); org.junit.Assert.assertNull(doubleArray57); org.junit.Assert.assertNotNull(vectorialConvergenceChecker60); org.junit.Assert.assertNotNull(vectorialConvergenceChecker63); org.junit.Assert.assertNull(doubleArray67); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray80); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray81); }
public void test636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test636"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double double10 = levenbergMarquardtOptimizer0.cost; double[] doubleArray11 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setOrthoTolerance((double) 10L); double[] doubleArray14 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNull(doubleArray14); }
public void test637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test637"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); }
public void test638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test638"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.cost = 1.0d; levenbergMarquardtOptimizer0.rows = '#'; levenbergMarquardtOptimizer0.cost = (byte) 100; levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 'a'); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); }
public void test639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test639"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int6 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000); }
public void test640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test640"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.rows = (byte) -1; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 52); double[] doubleArray13 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertNull(doubleArray13); }
public void test641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test641"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.cols; java.lang.Throwable throwable9 = null; double[] doubleArray11 = new double[] { (byte) 100 }; java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(throwable9, doubleArray11, "hi!", objArray19); org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); double[] doubleArray25 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(doubleArray25); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair40 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray25, doubleArray29, true); double[] doubleArray41 = vectorialPointValuePair40.getValue(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair43 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray41, true); double[] doubleArray44 = vectorialPointValuePair43.getValue(); levenbergMarquardtOptimizer0.objective = doubleArray44; int int46 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int47 = levenbergMarquardtOptimizer0.cols; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0]"); org.junit.Assert.assertNotNull(objArray19); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); }
public void test642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test642"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double[] doubleArray6 = levenbergMarquardtOptimizer0.residuals; int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000); }
public void test643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test643"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = ' '; int int8 = levenbergMarquardtOptimizer0.rows; int int9 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.cols = (short) 0; double[] doubleArray12 = levenbergMarquardtOptimizer0.targetValues; levenbergMarquardtOptimizer0.setMaxIterations(100); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray12); }
public void test644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test644"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer5 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker6 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer5.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker6); double[] doubleArray8 = levenbergMarquardtOptimizer5.objective; double[] doubleArray9 = null; levenbergMarquardtOptimizer5.point = doubleArray9; double[] doubleArray11 = levenbergMarquardtOptimizer5.residualsWeights; double[] doubleArray14 = new double[] { (byte) -1, (byte) 10 }; double[] doubleArray17 = new double[] { (byte) -1, (byte) 10 }; double[] doubleArray20 = new double[] { (byte) -1, (byte) 10 }; double[][] doubleArray21 = new double[][] { doubleArray14, doubleArray17, doubleArray20 }; levenbergMarquardtOptimizer5.jacobian = doubleArray21; org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) doubleArray21); org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException24 = new org.apache.commons.math.linear.InvalidMatrixException("evaluation failed for argument = {0}", (java.lang.Object[]) doubleArray21); org.apache.commons.math.MaxEvaluationsExceededException maxEvaluationsExceededException25 = new org.apache.commons.math.MaxEvaluationsExceededException((-1), "org.apache.commons.math.MathRuntimeException$5: hi!", (java.lang.Object[]) doubleArray21); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray21); }
public void test645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test645"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.cost = 1.0d; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer12 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker13 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer12.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker13); double[] doubleArray15 = levenbergMarquardtOptimizer12.residualsWeights; levenbergMarquardtOptimizer12.cols = 52; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer18 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker19 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer18.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker19); double[] doubleArray21 = levenbergMarquardtOptimizer18.residualsWeights; levenbergMarquardtOptimizer18.cols = 52; levenbergMarquardtOptimizer18.incrementIterationsCounter(); double[] doubleArray29 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray34 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray35 = new double[][] { doubleArray29, doubleArray34 }; levenbergMarquardtOptimizer18.jacobian = doubleArray35; levenbergMarquardtOptimizer12.jacobian = doubleArray35; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) 2147483647, "", (java.lang.Object[]) doubleArray35); levenbergMarquardtOptimizer0.jacobian = doubleArray35; int int40 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); }
public void test646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test646"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double double71 = levenbergMarquardtOptimizer0.getChiSquare(); double[] doubleArray72 = levenbergMarquardtOptimizer0.targetValues; levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0d); int int75 = levenbergMarquardtOptimizer0.getEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker76 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker76); }
public void test647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test647"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 'a'); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 52); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(Double.NaN, 0.0d); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer0.point; levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 0L); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(doubleArray17); }
public void test648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test648"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray4 = levenbergMarquardtOptimizer0.residualsWeights; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); int int6 = levenbergMarquardtOptimizer0.getMaxIterations(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test649"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker72 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setMaxEvaluations(100); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer75 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker76 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer75.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker76); double[] doubleArray78 = levenbergMarquardtOptimizer75.residualsWeights; levenbergMarquardtOptimizer75.cost = 0.0d; double double81 = levenbergMarquardtOptimizer75.getChiSquare(); int int82 = levenbergMarquardtOptimizer75.getIterations(); int int83 = levenbergMarquardtOptimizer75.getIterations(); int int84 = levenbergMarquardtOptimizer75.getIterations(); int int85 = levenbergMarquardtOptimizer75.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker86 = levenbergMarquardtOptimizer75.getConvergenceChecker(); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker86; levenbergMarquardtOptimizer0.setOrthoTolerance((double) (short) 10); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertNotNull(vectorialConvergenceChecker72); org.junit.Assert.assertNull(doubleArray78); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d); org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0); org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0); org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0); org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker86); }
public void test650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test650"); java.lang.Object[] objArray9 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException10 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray9); java.lang.IllegalArgumentException illegalArgumentException11 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException10); java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException10, "", objArray14); org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray14); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer18 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker19 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer18.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker19); double[] doubleArray21 = levenbergMarquardtOptimizer18.residualsWeights; levenbergMarquardtOptimizer18.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker24 = levenbergMarquardtOptimizer18.getConvergenceChecker(); levenbergMarquardtOptimizer18.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker27 = levenbergMarquardtOptimizer18.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer28 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker29 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer28.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker29); double[] doubleArray31 = levenbergMarquardtOptimizer28.residualsWeights; levenbergMarquardtOptimizer28.cols = 52; levenbergMarquardtOptimizer28.incrementIterationsCounter(); double[] doubleArray39 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray44 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray45 = new double[][] { doubleArray39, doubleArray44 }; levenbergMarquardtOptimizer28.jacobian = doubleArray45; levenbergMarquardtOptimizer18.jacobian = doubleArray45; org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException16, "", (java.lang.Object[]) doubleArray45); java.lang.IllegalStateException illegalStateException49 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("hi!", (java.lang.Object[]) doubleArray45); org.apache.commons.math.optimization.OptimizationException optimizationException50 = new org.apache.commons.math.optimization.OptimizationException("org.apache.commons.math.MaxEvaluationsExceededException: Maximal number of evaluations (10) exceeded", (java.lang.Object[]) doubleArray45); java.lang.NullPointerException nullPointerException51 = org.apache.commons.math.MathRuntimeException.createNullPointerException("", (java.lang.Object[]) doubleArray45); org.junit.Assert.assertNotNull(objArray9); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException10); org.junit.Assert.assertNotNull(illegalArgumentException11); org.junit.Assert.assertNotNull(objArray14); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0]"); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertNotNull(vectorialConvergenceChecker24); org.junit.Assert.assertNotNull(vectorialConvergenceChecker27); org.junit.Assert.assertNull(doubleArray31); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertNotNull(illegalStateException49); org.junit.Assert.assertNotNull(nullPointerException51); }
public void test651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test651"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer9 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker10 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer9.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker10); double[] doubleArray12 = levenbergMarquardtOptimizer9.residualsWeights; levenbergMarquardtOptimizer9.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker15 = levenbergMarquardtOptimizer9.getConvergenceChecker(); levenbergMarquardtOptimizer9.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker18 = levenbergMarquardtOptimizer9.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer19 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker20 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer19.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker20); double[] doubleArray22 = levenbergMarquardtOptimizer19.residualsWeights; levenbergMarquardtOptimizer19.cols = 52; levenbergMarquardtOptimizer19.incrementIterationsCounter(); double[] doubleArray30 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray35 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray36 = new double[][] { doubleArray30, doubleArray35 }; levenbergMarquardtOptimizer19.jacobian = doubleArray36; levenbergMarquardtOptimizer9.jacobian = doubleArray36; levenbergMarquardtOptimizer0.jacobian = doubleArray36; int int40 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker41 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker15); org.junit.Assert.assertNotNull(vectorialConvergenceChecker18); org.junit.Assert.assertNull(doubleArray22); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker41); }
public void test652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test652"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (byte) 1); double[][] doubleArray10 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray10); }
public void test653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test653"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; levenbergMarquardtOptimizer8.cost = 0.0d; double[] doubleArray14 = levenbergMarquardtOptimizer8.targetValues; double[] doubleArray15 = levenbergMarquardtOptimizer8.residuals; int int16 = levenbergMarquardtOptimizer8.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer17 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker18 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer17.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker18); double[] doubleArray20 = levenbergMarquardtOptimizer17.residualsWeights; levenbergMarquardtOptimizer17.cost = 0.0d; double[] doubleArray23 = levenbergMarquardtOptimizer17.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker24 = levenbergMarquardtOptimizer17.getConvergenceChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker(vectorialConvergenceChecker24); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker24; double[] doubleArray27 = levenbergMarquardtOptimizer0.objective; double double28 = levenbergMarquardtOptimizer0.getChiSquare(); int int29 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker30 = null; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker30); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray23); org.junit.Assert.assertNotNull(vectorialConvergenceChecker24); org.junit.Assert.assertNull(doubleArray27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647); }
public void test654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test654"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double double9 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 1); double[][] doubleArray12 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNull(doubleArray12); }
public void test655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test655"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray9 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray9; int int11 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray12 = levenbergMarquardtOptimizer0.objective; double double13 = levenbergMarquardtOptimizer0.getChiSquare(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); }
public void test656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test656"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 100); int int7 = levenbergMarquardtOptimizer0.rows; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray9 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); org.junit.Assert.assertNull(doubleArray9); }
public void test657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test657"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double double8 = levenbergMarquardtOptimizer0.cost; int int9 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000); }
public void test658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test658"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = ' '; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.cost = 10; org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); }
public void test659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test659"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.cols; int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); double[] doubleArray13 = levenbergMarquardtOptimizer10.residualsWeights; levenbergMarquardtOptimizer10.cost = 0.0d; double[] doubleArray16 = levenbergMarquardtOptimizer10.targetValues; double[] doubleArray17 = levenbergMarquardtOptimizer10.residuals; int int18 = levenbergMarquardtOptimizer10.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer19 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker20 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer19.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker20); double[] doubleArray22 = levenbergMarquardtOptimizer19.residualsWeights; levenbergMarquardtOptimizer19.cost = 0.0d; double[] doubleArray25 = levenbergMarquardtOptimizer19.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker26 = levenbergMarquardtOptimizer19.getConvergenceChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker(vectorialConvergenceChecker26); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker26); double[] doubleArray32 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(doubleArray32); java.lang.Throwable throwable34 = null; double[] doubleArray36 = new double[] { (byte) 100 }; java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException(throwable34, doubleArray36, "hi!", objArray44); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair47 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray32, doubleArray36, true); java.lang.Throwable throwable48 = null; double[] doubleArray50 = new double[] { (byte) 100 }; java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException(throwable48, doubleArray50, "hi!", objArray58); double[] doubleArray60 = functionEvaluationException59.getArgument(); java.lang.Throwable throwable61 = null; double[] doubleArray63 = new double[] { (byte) 100 }; java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException(throwable61, doubleArray63, "hi!", objArray71); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair74 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray60, doubleArray63, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair76 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray32, doubleArray63, true); java.lang.Throwable throwable77 = null; double[] doubleArray79 = new double[] { (byte) 100 }; java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(throwable77, doubleArray79, "hi!", objArray87); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair89 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray63, doubleArray79); double[] doubleArray90 = vectorialPointValuePair89.getPointRef(); double[] doubleArray91 = vectorialPointValuePair89.getPoint(); double[] doubleArray92 = vectorialPointValuePair89.getPointRef(); levenbergMarquardtOptimizer0.objective = doubleArray92; double double94 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertNull(doubleArray16); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNull(doubleArray22); org.junit.Assert.assertNull(doubleArray25); org.junit.Assert.assertNotNull(vectorialConvergenceChecker26); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0]"); org.junit.Assert.assertNotNull(objArray44); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]"); org.junit.Assert.assertNotNull(objArray58); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0]"); org.junit.Assert.assertNotNull(objArray71); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); org.junit.Assert.assertNotNull(objArray87); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray90); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray91); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray92); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0]"); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d); }
public void test660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test660"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 1L); int int7 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations(1000); levenbergMarquardtOptimizer0.setMaxIterations((int) '4'); int int12 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000); }
public void test661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test661"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray15 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(doubleArray15); java.lang.Throwable throwable17 = null; double[] doubleArray19 = new double[] { (byte) 100 }; java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(throwable17, doubleArray19, "hi!", objArray27); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair30 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray15, doubleArray19, true); double[] doubleArray31 = vectorialPointValuePair30.getValue(); double[] doubleArray32 = vectorialPointValuePair30.getPoint(); double[] doubleArray36 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(doubleArray36); java.lang.Throwable throwable38 = null; double[] doubleArray40 = new double[] { (byte) 100 }; java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException(throwable38, doubleArray40, "hi!", objArray48); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair51 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray36, doubleArray40, true); java.lang.Throwable throwable52 = null; double[] doubleArray54 = new double[] { (byte) 100 }; java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException(throwable52, doubleArray54, "hi!", objArray62); double[] doubleArray64 = functionEvaluationException63.getArgument(); java.lang.Throwable throwable65 = null; double[] doubleArray67 = new double[] { (byte) 100 }; java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(throwable65, doubleArray67, "hi!", objArray75); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray64, doubleArray67, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair80 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray36, doubleArray67, true); java.lang.Throwable throwable81 = null; double[] doubleArray83 = new double[] { (byte) 100 }; java.lang.Object[] objArray91 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(throwable81, doubleArray83, "hi!", objArray91); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair93 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray67, doubleArray83); double[] doubleArray94 = vectorialPointValuePair93.getPointRef(); double[] doubleArray95 = vectorialPointValuePair93.getPoint(); boolean boolean96 = vectorialConvergenceChecker10.converged((int) (byte) 10, vectorialPointValuePair30, vectorialPointValuePair93); double[] doubleArray97 = vectorialPointValuePair93.getPoint(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]"); org.junit.Assert.assertNotNull(objArray27); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]"); org.junit.Assert.assertNotNull(objArray48); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0]"); org.junit.Assert.assertNotNull(objArray62); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0]"); org.junit.Assert.assertNotNull(objArray75); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray83); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0]"); org.junit.Assert.assertNotNull(objArray91); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray94); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray95); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[100.0]"); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true); org.junit.Assert.assertNotNull(doubleArray97); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[100.0]"); }
public void test662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test662"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; double[] doubleArray72 = levenbergMarquardtOptimizer0.objective; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer73 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int74 = levenbergMarquardtOptimizer73.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer75 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker76 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer75.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker76); double[] doubleArray78 = levenbergMarquardtOptimizer75.residualsWeights; levenbergMarquardtOptimizer75.cols = 52; levenbergMarquardtOptimizer75.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker82 = levenbergMarquardtOptimizer75.checker; levenbergMarquardtOptimizer73.checker = vectorialConvergenceChecker82; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker82); levenbergMarquardtOptimizer0.setOrthoTolerance((double) '#'); int int87 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertNull(doubleArray72); org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647); org.junit.Assert.assertNull(doubleArray78); org.junit.Assert.assertNotNull(vectorialConvergenceChecker82); org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0); }
public void test663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test663"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.setMaxEvaluations(0); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test664"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0d); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 1.0f); int int10 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations(0); int int13 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); }
public void test665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test665"); java.lang.Throwable throwable0 = null; double[] doubleArray2 = new double[] { (byte) 100 }; java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(throwable0, doubleArray2, "hi!", objArray10); double[] doubleArray12 = functionEvaluationException11.getArgument(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer13 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker14 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer13.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker14); double[] doubleArray16 = levenbergMarquardtOptimizer13.residualsWeights; levenbergMarquardtOptimizer13.cost = 0.0d; double double19 = levenbergMarquardtOptimizer13.getChiSquare(); int int20 = levenbergMarquardtOptimizer13.getIterations(); int int21 = levenbergMarquardtOptimizer13.getIterations(); int int22 = levenbergMarquardtOptimizer13.getIterations(); java.lang.Throwable throwable23 = null; double[] doubleArray25 = new double[] { (byte) 100 }; java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(throwable23, doubleArray25, "hi!", objArray33); double[] doubleArray35 = functionEvaluationException34.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(doubleArray35); org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(doubleArray35); levenbergMarquardtOptimizer13.targetValues = doubleArray35; org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException11, doubleArray35); double[] doubleArray40 = functionEvaluationException39.getArgument(); org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]"); org.junit.Assert.assertNotNull(objArray10); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNull(doubleArray16); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0]"); org.junit.Assert.assertNotNull(objArray33); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]"); }
public void test666() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test666"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int8 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (-1.0f)); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test667() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test667"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray2 = levenbergMarquardtOptimizer0.residuals; int int3 = levenbergMarquardtOptimizer0.getEvaluations(); int int4 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertNull(doubleArray2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test668() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test668"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); int int12 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 2147483647); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker16 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker17 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertNotNull(vectorialConvergenceChecker16); org.junit.Assert.assertNotNull(vectorialConvergenceChecker17); }
public void test669() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test669"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; double[] doubleArray10 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setMaxIterations(97); double[][] doubleArray13 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNull(doubleArray13); }
public void test670() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test670"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); int int7 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); }
public void test671() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test671"); java.lang.Object[] objArray6 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException7 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray6); java.lang.IllegalArgumentException illegalArgumentException8 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException7); java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException7, "", objArray11); org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray11); double[] doubleArray17 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(doubleArray17); java.lang.Throwable throwable19 = null; double[] doubleArray21 = new double[] { (byte) 100 }; java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(throwable19, doubleArray21, "hi!", objArray29); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair32 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray17, doubleArray21, true); java.lang.Throwable throwable33 = null; double[] doubleArray35 = new double[] { (byte) 100 }; java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(throwable33, doubleArray35, "hi!", objArray43); double[] doubleArray45 = functionEvaluationException44.getArgument(); java.lang.Throwable throwable46 = null; double[] doubleArray48 = new double[] { (byte) 100 }; java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(throwable46, doubleArray48, "hi!", objArray56); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair59 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray45, doubleArray48, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair61 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray17, doubleArray48, true); java.lang.Throwable throwable62 = null; double[] doubleArray64 = new double[] { (byte) 100 }; java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException(throwable62, doubleArray64, "hi!", objArray72); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair74 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray48, doubleArray64); org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) convergenceException13, doubleArray64); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer76 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker77 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer76.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker77); double[] doubleArray79 = levenbergMarquardtOptimizer76.residualsWeights; levenbergMarquardtOptimizer76.cols = 52; double double82 = levenbergMarquardtOptimizer76.getChiSquare(); levenbergMarquardtOptimizer76.cols = (byte) 1; double double85 = levenbergMarquardtOptimizer76.getRMS(); double[] doubleArray90 = new double[] { 52, 0.0f, 0L, 0L }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException(doubleArray90); levenbergMarquardtOptimizer76.residuals = doubleArray90; org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException(doubleArray90); org.apache.commons.math.FunctionEvaluationException functionEvaluationException94 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException75, doubleArray90); java.io.IOException iOException95 = org.apache.commons.math.MathRuntimeException.createIOException((java.lang.Throwable) functionEvaluationException75); org.junit.Assert.assertNotNull(objArray6); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException7); org.junit.Assert.assertNotNull(illegalArgumentException8); org.junit.Assert.assertNotNull(objArray11); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]"); org.junit.Assert.assertNotNull(objArray29); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]"); org.junit.Assert.assertNotNull(objArray43); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0]"); org.junit.Assert.assertNotNull(objArray56); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0]"); org.junit.Assert.assertNotNull(objArray72); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray79); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double85)); org.junit.Assert.assertNotNull(doubleArray90); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[52.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(iOException95); }
public void test672() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test672"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 1000); double[] doubleArray11 = levenbergMarquardtOptimizer0.point; double[] doubleArray15 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(doubleArray15); java.lang.Throwable throwable17 = null; double[] doubleArray19 = new double[] { (byte) 100 }; java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(throwable17, doubleArray19, "hi!", objArray27); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair30 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray15, doubleArray19, true); java.lang.Throwable throwable31 = null; double[] doubleArray33 = new double[] { (byte) 100 }; java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(throwable31, doubleArray33, "hi!", objArray41); double[] doubleArray43 = functionEvaluationException42.getArgument(); java.lang.Throwable throwable44 = null; double[] doubleArray46 = new double[] { (byte) 100 }; java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException(throwable44, doubleArray46, "hi!", objArray54); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray43, doubleArray46, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair59 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray15, doubleArray46, true); java.lang.Throwable throwable60 = null; double[] doubleArray62 = new double[] { (byte) 100 }; java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException(throwable60, doubleArray62, "hi!", objArray70); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair72 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray46, doubleArray62); levenbergMarquardtOptimizer0.objective = doubleArray46; levenbergMarquardtOptimizer0.setMaxEvaluations(2147483647); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]"); org.junit.Assert.assertNotNull(objArray27); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]"); org.junit.Assert.assertNotNull(objArray41); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]"); org.junit.Assert.assertNotNull(objArray54); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]"); org.junit.Assert.assertNotNull(objArray70); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 4, true, true, 100.0, 100]"); }
public void test673() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test673"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker2 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer1.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker2); double[] doubleArray4 = levenbergMarquardtOptimizer1.residualsWeights; levenbergMarquardtOptimizer1.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer1.getConvergenceChecker(); levenbergMarquardtOptimizer1.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer1.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer11 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker12 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer11.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker12); double[] doubleArray14 = levenbergMarquardtOptimizer11.residualsWeights; levenbergMarquardtOptimizer11.cols = 52; levenbergMarquardtOptimizer11.incrementIterationsCounter(); double[] doubleArray22 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray27 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray28 = new double[][] { doubleArray22, doubleArray27 }; levenbergMarquardtOptimizer11.jacobian = doubleArray28; levenbergMarquardtOptimizer1.jacobian = doubleArray28; org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) doubleArray28); java.lang.Object[] objArray42 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException43 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray42); java.lang.IllegalArgumentException illegalArgumentException44 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException43); java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException43, "", objArray47); org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray47); java.util.ConcurrentModificationException concurrentModificationException50 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray47); java.io.EOFException eOFException51 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.MathRuntimeException$2: ", objArray47); java.lang.IllegalStateException illegalStateException52 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.MathRuntimeException$2: ", objArray47); java.lang.Object[] objArray64 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException65 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray64); java.lang.IllegalArgumentException illegalArgumentException66 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException65); java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException65, "", objArray69); org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray69); java.lang.IllegalArgumentException illegalArgumentException72 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray69); org.apache.commons.math.MathRuntimeException mathRuntimeException73 = new org.apache.commons.math.MathRuntimeException("org.apache.commons.math.MathRuntimeException$2: ", objArray69); java.text.ParseException parseException74 = org.apache.commons.math.MathRuntimeException.createParseException(100, "Convergence failed", objArray69); org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException((java.lang.Throwable) illegalStateException52, "evaluation failed for argument = {0}", objArray69); java.lang.Throwable[] throwableArray76 = mathException75.getSuppressed(); org.apache.commons.math.MathRuntimeException mathRuntimeException77 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable) convergenceException31, "org.apache.commons.math.MathRuntimeException$5: hi!", (java.lang.Object[]) throwableArray76); org.junit.Assert.assertNull(doubleArray4); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertNotNull(objArray42); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException43); org.junit.Assert.assertNotNull(illegalArgumentException44); org.junit.Assert.assertNotNull(objArray47); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException50); org.junit.Assert.assertNotNull(eOFException51); org.junit.Assert.assertNotNull(illegalStateException52); org.junit.Assert.assertNotNull(objArray64); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException65); org.junit.Assert.assertNotNull(illegalArgumentException66); org.junit.Assert.assertNotNull(objArray69); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException72); org.junit.Assert.assertNotNull(parseException74); org.junit.Assert.assertNotNull(throwableArray76); }
public void test674() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test674"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); java.lang.Throwable throwable8 = null; double[] doubleArray10 = new double[] { (byte) 100 }; java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(throwable8, doubleArray10, "hi!", objArray18); double[] doubleArray20 = functionEvaluationException19.getArgument(); java.lang.Throwable throwable21 = null; double[] doubleArray23 = new double[] { (byte) 100 }; java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(throwable21, doubleArray23, "hi!", objArray31); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair34 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray20, doubleArray23, false); levenbergMarquardtOptimizer0.point = doubleArray23; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 1); double[] doubleArray38 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((-1)); // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair41 = levenbergMarquardtOptimizer0.doOptimize(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.FunctionEvaluationException; message: "); } catch (org.apache.commons.math.FunctionEvaluationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0]"); org.junit.Assert.assertNotNull(objArray18); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0]"); org.junit.Assert.assertNotNull(objArray31); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray38); }
public void test675() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test675"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 1); levenbergMarquardtOptimizer0.setMaxEvaluations(0); // The following exception was thrown during execution in test generation try { double[] doubleArray14 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 100 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test676() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test676"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[][] doubleArray8 = new double[][] {}; levenbergMarquardtOptimizer0.jacobian = doubleArray8; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); }
public void test677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test677"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); int int6 = levenbergMarquardtOptimizer0.rows; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int8 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int10 = levenbergMarquardtOptimizer0.getMaxEvaluations(); java.lang.Throwable throwable11 = null; double[] doubleArray13 = new double[] { (byte) 100 }; java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException(throwable11, doubleArray13, "hi!", objArray21); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); double[] doubleArray27 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(doubleArray27); java.lang.Throwable throwable29 = null; double[] doubleArray31 = new double[] { (byte) 100 }; java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(throwable29, doubleArray31, "hi!", objArray39); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair42 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray27, doubleArray31, true); double[] doubleArray43 = vectorialPointValuePair42.getValue(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair45 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray43, true); double[] doubleArray46 = vectorialPointValuePair45.getValue(); double[] doubleArray47 = vectorialPointValuePair45.getValue(); levenbergMarquardtOptimizer0.residualsWeights = doubleArray47; org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0]"); org.junit.Assert.assertNotNull(objArray21); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(objArray39); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]"); }
public void test678() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test678"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int8 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.cost = (short) -1; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52); }
public void test679() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test679"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker2 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer1.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker2); double[] doubleArray4 = levenbergMarquardtOptimizer1.residualsWeights; int int5 = levenbergMarquardtOptimizer1.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer1.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer1.checker; int int8 = levenbergMarquardtOptimizer1.getMaxEvaluations(); double[] doubleArray13 = new double[] { 52, 0.0f, 0L, 0L }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); levenbergMarquardtOptimizer1.objective = doubleArray13; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer20 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker21 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer20.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker21); double[] doubleArray23 = levenbergMarquardtOptimizer20.residualsWeights; levenbergMarquardtOptimizer20.cols = 52; levenbergMarquardtOptimizer20.incrementIterationsCounter(); double[] doubleArray31 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray36 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray37 = new double[][] { doubleArray31, doubleArray36 }; levenbergMarquardtOptimizer20.jacobian = doubleArray37; java.lang.IllegalStateException illegalStateException39 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("Convergence failed", (java.lang.Object[]) doubleArray37); org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) 10, "", (java.lang.Object[]) doubleArray37); org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13, "org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) doubleArray37); java.lang.IllegalArgumentException illegalArgumentException42 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("org.apache.commons.math.MathRuntimeException$5: hi!", (java.lang.Object[]) doubleArray37); org.junit.Assert.assertNull(doubleArray4); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1000 + "'", int5 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[52.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNull(doubleArray23); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertNotNull(illegalStateException39); org.junit.Assert.assertNotNull(illegalArgumentException42); }
public void test680() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test680"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.cols; int int8 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 1000); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test681"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer2.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker9; double[] doubleArray15 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(doubleArray15); java.lang.Throwable throwable17 = null; double[] doubleArray19 = new double[] { (byte) 100 }; java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(throwable17, doubleArray19, "hi!", objArray27); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair30 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray15, doubleArray19, true); java.lang.Throwable throwable31 = null; double[] doubleArray33 = new double[] { (byte) 100 }; java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(throwable31, doubleArray33, "hi!", objArray41); double[] doubleArray43 = functionEvaluationException42.getArgument(); java.lang.Throwable throwable44 = null; double[] doubleArray46 = new double[] { (byte) 100 }; java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException(throwable44, doubleArray46, "hi!", objArray54); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray43, doubleArray46, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair59 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray15, doubleArray46, true); double[] doubleArray63 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException(doubleArray63); java.lang.Throwable throwable65 = null; double[] doubleArray67 = new double[] { (byte) 100 }; java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(throwable65, doubleArray67, "hi!", objArray75); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray63, doubleArray67, true); double[] doubleArray79 = vectorialPointValuePair78.getPoint(); java.lang.Throwable throwable80 = null; double[] doubleArray82 = new double[] { (byte) 100 }; java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException(throwable80, doubleArray82, "hi!", objArray90); double[] doubleArray92 = functionEvaluationException91.getArgument(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair93 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray79, doubleArray92); double[] doubleArray94 = vectorialPointValuePair93.getPoint(); double[] doubleArray95 = vectorialPointValuePair93.getPointRef(); double[] doubleArray96 = vectorialPointValuePair93.getValue(); boolean boolean97 = vectorialConvergenceChecker9.converged((int) '#', vectorialPointValuePair59, vectorialPointValuePair93); double[] doubleArray98 = vectorialPointValuePair59.getPoint(); double[] doubleArray99 = vectorialPointValuePair59.getValue(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]"); org.junit.Assert.assertNotNull(objArray27); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]"); org.junit.Assert.assertNotNull(objArray41); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]"); org.junit.Assert.assertNotNull(objArray54); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0]"); org.junit.Assert.assertNotNull(objArray75); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0]"); org.junit.Assert.assertNotNull(objArray90); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray92); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray94); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray95); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray96); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[100.0]"); org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true); org.junit.Assert.assertNotNull(doubleArray98); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray99); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[100.0]"); }
public void test682() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test682"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.residualsWeights; levenbergMarquardtOptimizer6.cols = 52; int int12 = levenbergMarquardtOptimizer6.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer6.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cost = 0.0d; double[] doubleArray20 = levenbergMarquardtOptimizer14.targetValues; double[] doubleArray21 = levenbergMarquardtOptimizer14.residuals; int int22 = levenbergMarquardtOptimizer14.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cost = 0.0d; double[] doubleArray29 = levenbergMarquardtOptimizer23.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker30 = levenbergMarquardtOptimizer23.getConvergenceChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker(vectorialConvergenceChecker30); levenbergMarquardtOptimizer6.checker = vectorialConvergenceChecker30; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker30); int int34 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertNotNull(vectorialConvergenceChecker30); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); }
public void test683() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test683"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); double[] doubleArray7 = levenbergMarquardtOptimizer0.objective; double[] doubleArray8 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNull(doubleArray8); }
public void test684() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test684"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double double7 = levenbergMarquardtOptimizer0.cost; double[] doubleArray8 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations(0); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNull(doubleArray8); }
public void test685() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test685"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int10 = levenbergMarquardtOptimizer0.cols; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); double double12 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); }
public void test686() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test686"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); int int10 = levenbergMarquardtOptimizer0.rows; levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test687() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test687"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; int int72 = levenbergMarquardtOptimizer0.rows; int int73 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations(0); double[] doubleArray76 = levenbergMarquardtOptimizer0.residuals; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0); org.junit.Assert.assertNull(doubleArray76); }
public void test688() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test688"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int10 = levenbergMarquardtOptimizer0.getMaxEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) 0); int int13 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); }
public void test689() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test689"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getMaxEvaluations(); levenbergMarquardtOptimizer0.rows = 0; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); }
public void test690() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test690"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); int int6 = levenbergMarquardtOptimizer0.rows; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int8 = levenbergMarquardtOptimizer0.getMaxEvaluations(); java.lang.Throwable throwable9 = null; double[] doubleArray11 = new double[] { (byte) 100 }; java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(throwable9, doubleArray11, "hi!", objArray19); double[] doubleArray21 = functionEvaluationException20.getArgument(); java.lang.Throwable throwable22 = null; double[] doubleArray24 = new double[] { (byte) 100 }; java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(throwable22, doubleArray24, "hi!", objArray32); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair35 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray21, doubleArray24, false); levenbergMarquardtOptimizer0.residuals = doubleArray24; org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0]"); org.junit.Assert.assertNotNull(objArray19); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]"); org.junit.Assert.assertNotNull(objArray32); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 4, true, true, 100.0, 100]"); }
public void test691() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test691"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.checker; int int7 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); double[] doubleArray13 = levenbergMarquardtOptimizer10.residualsWeights; double[] doubleArray14 = levenbergMarquardtOptimizer10.residualsWeights; double[] doubleArray15 = null; levenbergMarquardtOptimizer10.objective = doubleArray15; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer17 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker18 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer17.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker18); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker22 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer17.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker22); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker24 = levenbergMarquardtOptimizer17.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer25 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker26 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer25.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker26); levenbergMarquardtOptimizer25.cols = (short) 100; levenbergMarquardtOptimizer25.setCostRelativeTolerance((double) 0L); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker34 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker((double) 32, (double) (short) -1); levenbergMarquardtOptimizer25.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker34); levenbergMarquardtOptimizer17.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker34); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker34); levenbergMarquardtOptimizer0.checker = simpleVectorialValueChecker34; // The following exception was thrown during execution in test generation try { double[] doubleArray39 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNotNull(vectorialConvergenceChecker24); }
public void test692() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test692"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray7 = levenbergMarquardtOptimizer0.targetValues; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test693() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test693"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); int int6 = levenbergMarquardtOptimizer0.rows; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int8 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer9 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker10 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer9.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker10); double[] doubleArray12 = levenbergMarquardtOptimizer9.residualsWeights; levenbergMarquardtOptimizer9.cols = 52; levenbergMarquardtOptimizer9.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker16 = levenbergMarquardtOptimizer9.checker; levenbergMarquardtOptimizer9.setInitialStepBoundFactor((double) '4'); double[] doubleArray19 = levenbergMarquardtOptimizer9.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker20 = levenbergMarquardtOptimizer9.getConvergenceChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker20); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker16); org.junit.Assert.assertNull(doubleArray19); org.junit.Assert.assertNotNull(vectorialConvergenceChecker20); }
public void test694() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test694"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations(52); int int10 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray11 = levenbergMarquardtOptimizer0.residualsWeights; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52); org.junit.Assert.assertNull(doubleArray11); }
public void test695() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test695"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; double[] doubleArray8 = levenbergMarquardtOptimizer0.objective; double[][] doubleArray9 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNull(doubleArray9); }
public void test696() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test696"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cost = 0.0d; double[] doubleArray8 = levenbergMarquardtOptimizer2.targetValues; double[] doubleArray9 = levenbergMarquardtOptimizer2.residuals; int int10 = levenbergMarquardtOptimizer2.getMaxIterations(); int int11 = levenbergMarquardtOptimizer2.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer12 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker13 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer12.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker13); levenbergMarquardtOptimizer12.cols = (short) 100; levenbergMarquardtOptimizer12.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer12.setParRelativeTolerance((double) 2147483647); int int21 = levenbergMarquardtOptimizer12.getMaxEvaluations(); int int22 = levenbergMarquardtOptimizer12.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker29 = levenbergMarquardtOptimizer23.getConvergenceChecker(); levenbergMarquardtOptimizer23.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker32 = levenbergMarquardtOptimizer23.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer33 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker34 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer33.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker34); double[] doubleArray36 = levenbergMarquardtOptimizer33.residualsWeights; levenbergMarquardtOptimizer33.cols = 52; levenbergMarquardtOptimizer33.incrementIterationsCounter(); double[] doubleArray44 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray49 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray50 = new double[][] { doubleArray44, doubleArray49 }; levenbergMarquardtOptimizer33.jacobian = doubleArray50; levenbergMarquardtOptimizer23.jacobian = doubleArray50; levenbergMarquardtOptimizer12.jacobian = doubleArray50; levenbergMarquardtOptimizer2.jacobian = doubleArray50; java.io.EOFException eOFException55 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Object[]) doubleArray50); org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.MathRuntimeException$4: org.apache.commons.math.MathRuntimeException: ", (java.lang.Object[]) doubleArray50); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1000 + "'", int10 == 1000); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNotNull(vectorialConvergenceChecker29); org.junit.Assert.assertNotNull(vectorialConvergenceChecker32); org.junit.Assert.assertNull(doubleArray36); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertNotNull(eOFException55); }
public void test697() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test697"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) -1); levenbergMarquardtOptimizer0.setMaxEvaluations(0); levenbergMarquardtOptimizer0.setMaxIterations(0); int int14 = levenbergMarquardtOptimizer0.getMaxIterations(); int int15 = levenbergMarquardtOptimizer0.getIterations(); int int16 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); }
public void test698() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test698"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setParRelativeTolerance((double) (-1L)); double[] doubleArray6 = levenbergMarquardtOptimizer0.point; double[] doubleArray7 = levenbergMarquardtOptimizer0.objective; int int8 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test699() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test699"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.residualsWeights; levenbergMarquardtOptimizer6.cols = 52; int int12 = levenbergMarquardtOptimizer6.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer6.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cost = 0.0d; double[] doubleArray20 = levenbergMarquardtOptimizer14.targetValues; double[] doubleArray21 = levenbergMarquardtOptimizer14.residuals; int int22 = levenbergMarquardtOptimizer14.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cost = 0.0d; double[] doubleArray29 = levenbergMarquardtOptimizer23.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker30 = levenbergMarquardtOptimizer23.getConvergenceChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker(vectorialConvergenceChecker30); levenbergMarquardtOptimizer6.checker = vectorialConvergenceChecker30; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker30); int int34 = levenbergMarquardtOptimizer0.rows; java.lang.Throwable throwable35 = null; double[] doubleArray37 = new double[] { (byte) 100 }; java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException(throwable35, doubleArray37, "hi!", objArray45); org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException(doubleArray37); org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable50 = null; double[] doubleArray52 = new double[] { (byte) 100 }; java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException(throwable50, doubleArray52, "hi!", objArray60); double[] doubleArray62 = functionEvaluationException61.getArgument(); java.lang.Throwable throwable63 = null; double[] doubleArray65 = new double[] { (byte) 100 }; java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(throwable63, doubleArray65, "hi!", objArray73); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair76 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray62, doubleArray65, false); java.lang.Object[] objArray85 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException86 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray85); java.lang.IllegalArgumentException illegalArgumentException87 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException86); java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException86, "", objArray90); org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray90); java.lang.IllegalArgumentException illegalArgumentException93 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray90); org.apache.commons.math.FunctionEvaluationException functionEvaluationException94 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException49, doubleArray62, "", objArray90); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair95 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray37, doubleArray62); double[] doubleArray96 = vectorialPointValuePair95.getPoint(); levenbergMarquardtOptimizer0.residualsWeights = doubleArray96; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertNotNull(vectorialConvergenceChecker30); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]"); org.junit.Assert.assertNotNull(objArray45); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0]"); org.junit.Assert.assertNotNull(objArray60); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0]"); org.junit.Assert.assertNotNull(objArray73); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray85); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException86); org.junit.Assert.assertNotNull(illegalArgumentException87); org.junit.Assert.assertNotNull(objArray90); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException93); org.junit.Assert.assertNotNull(doubleArray96); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[100.0]"); }
public void test700() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test700"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer11 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker12 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer11.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker12); double[] doubleArray14 = levenbergMarquardtOptimizer11.residualsWeights; levenbergMarquardtOptimizer11.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker17 = levenbergMarquardtOptimizer11.getConvergenceChecker(); levenbergMarquardtOptimizer11.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker20 = levenbergMarquardtOptimizer11.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer21 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker22 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer21.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker22); double[] doubleArray24 = levenbergMarquardtOptimizer21.residualsWeights; levenbergMarquardtOptimizer21.cols = 52; levenbergMarquardtOptimizer21.incrementIterationsCounter(); double[] doubleArray32 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray37 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray38 = new double[][] { doubleArray32, doubleArray37 }; levenbergMarquardtOptimizer21.jacobian = doubleArray38; levenbergMarquardtOptimizer11.jacobian = doubleArray38; levenbergMarquardtOptimizer0.jacobian = doubleArray38; int int42 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray43 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray43; levenbergMarquardtOptimizer0.setMaxEvaluations(1000); int int47 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNotNull(vectorialConvergenceChecker17); org.junit.Assert.assertNotNull(vectorialConvergenceChecker20); org.junit.Assert.assertNull(doubleArray24); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); }
public void test701() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test701"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(1000); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 0); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100); }
public void test702() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test702"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray2 = levenbergMarquardtOptimizer0.point; double[] doubleArray3 = levenbergMarquardtOptimizer0.point; int int4 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertNull(doubleArray2); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test703() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test703"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 100); int int7 = levenbergMarquardtOptimizer0.rows; int int8 = levenbergMarquardtOptimizer0.getMaxEvaluations(); levenbergMarquardtOptimizer0.setCostRelativeTolerance(35.0d); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100); }
public void test704() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test704"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) -1); double[] doubleArray10 = levenbergMarquardtOptimizer0.targetValues; int int11 = levenbergMarquardtOptimizer0.cols; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test705() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test705"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0); int int12 = levenbergMarquardtOptimizer0.getEvaluations(); int int13 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.cols = 0; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer22 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker23 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer22.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker23); double[] doubleArray25 = levenbergMarquardtOptimizer22.objective; double[] doubleArray26 = null; levenbergMarquardtOptimizer22.point = doubleArray26; double[] doubleArray28 = levenbergMarquardtOptimizer22.residualsWeights; int int29 = levenbergMarquardtOptimizer22.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer30 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker31 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer30.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker31); double[] doubleArray33 = levenbergMarquardtOptimizer30.residualsWeights; levenbergMarquardtOptimizer30.cols = 52; levenbergMarquardtOptimizer30.incrementIterationsCounter(); double[] doubleArray41 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray46 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray47 = new double[][] { doubleArray41, doubleArray46 }; levenbergMarquardtOptimizer30.jacobian = doubleArray47; levenbergMarquardtOptimizer22.jacobian = doubleArray47; java.text.ParseException parseException50 = org.apache.commons.math.MathRuntimeException.createParseException((int) (byte) 1, "Convergence failed", (java.lang.Object[]) doubleArray47); org.apache.commons.math.MaxEvaluationsExceededException maxEvaluationsExceededException51 = new org.apache.commons.math.MaxEvaluationsExceededException((int) (short) 1, "Convergence failed", (java.lang.Object[]) doubleArray47); org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException52 = new org.apache.commons.math.MaxIterationsExceededException(1, "", (java.lang.Object[]) doubleArray47); levenbergMarquardtOptimizer0.jacobian = doubleArray47; int int54 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNull(doubleArray25); org.junit.Assert.assertNull(doubleArray28); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1000 + "'", int29 == 1000); org.junit.Assert.assertNull(doubleArray33); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertNotNull(parseException50); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0); }
public void test706() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test706"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.cols; java.lang.Throwable throwable9 = null; double[] doubleArray11 = new double[] { (byte) 100 }; java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(throwable9, doubleArray11, "hi!", objArray19); org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); double[] doubleArray25 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(doubleArray25); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair40 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray25, doubleArray29, true); double[] doubleArray41 = vectorialPointValuePair40.getValue(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair43 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray41, true); double[] doubleArray44 = vectorialPointValuePair43.getValue(); levenbergMarquardtOptimizer0.objective = doubleArray44; int int46 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray47 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0]"); org.junit.Assert.assertNotNull(objArray19); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertNull(doubleArray47); }
public void test707() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test707"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray9 = new double[] { (byte) -1, (byte) 10 }; double[] doubleArray12 = new double[] { (byte) -1, (byte) 10 }; double[] doubleArray15 = new double[] { (byte) -1, (byte) 10 }; double[][] doubleArray16 = new double[][] { doubleArray9, doubleArray12, doubleArray15 }; levenbergMarquardtOptimizer0.jacobian = doubleArray16; int int18 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.cost = (byte) 0; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cols = 52; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer29 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker30 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer29.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker30); double[] doubleArray32 = levenbergMarquardtOptimizer29.residualsWeights; levenbergMarquardtOptimizer29.cols = 52; levenbergMarquardtOptimizer29.incrementIterationsCounter(); double[] doubleArray40 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray45 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray46 = new double[][] { doubleArray40, doubleArray45 }; levenbergMarquardtOptimizer29.jacobian = doubleArray46; levenbergMarquardtOptimizer23.jacobian = doubleArray46; org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) 2147483647, "", (java.lang.Object[]) doubleArray46); levenbergMarquardtOptimizer0.jacobian = doubleArray46; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNull(doubleArray32); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray46); }
public void test708() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test708"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = (byte) 1; double double9 = levenbergMarquardtOptimizer0.getRMS(); double[] doubleArray14 = new double[] { 52, 0.0f, 0L, 0L }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(doubleArray14); levenbergMarquardtOptimizer0.residuals = doubleArray14; org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException(doubleArray14); java.lang.RuntimeException runtimeException18 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable) functionEvaluationException17); double[] doubleArray19 = functionEvaluationException17.getArgument(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double9)); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[52.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(runtimeException18); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[52.0, 0.0, 0.0, 0.0]"); }
public void test709() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test709"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 100); org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray8 = convergenceException7.getSuppressed(); java.lang.RuntimeException runtimeException9 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable) convergenceException7); double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); java.lang.Throwable throwable15 = null; double[] doubleArray17 = new double[] { (byte) 100 }; java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(throwable15, doubleArray17, "hi!", objArray25); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray17, true); java.lang.Throwable throwable29 = null; double[] doubleArray31 = new double[] { (byte) 100 }; java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(throwable29, doubleArray31, "hi!", objArray39); double[] doubleArray41 = functionEvaluationException40.getArgument(); java.lang.Throwable throwable42 = null; double[] doubleArray44 = new double[] { (byte) 100 }; java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(throwable42, doubleArray44, "hi!", objArray52); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray44, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray44, true); java.lang.Throwable throwable58 = null; double[] doubleArray60 = new double[] { (byte) 100 }; java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(throwable58, doubleArray60, "hi!", objArray68); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray60); double[] doubleArray71 = vectorialPointValuePair70.getValueRef(); java.lang.Throwable throwable76 = null; double[] doubleArray78 = new double[] { (byte) 100 }; java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException(throwable76, doubleArray78, "hi!", objArray86); org.apache.commons.math.MathRuntimeException mathRuntimeException88 = new org.apache.commons.math.MathRuntimeException(throwable76); java.lang.String str89 = mathRuntimeException88.getPattern(); java.lang.String str90 = mathRuntimeException88.getPattern(); java.lang.Object[] objArray91 = mathRuntimeException88.getArguments(); java.lang.NullPointerException nullPointerException92 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray91); java.lang.IllegalStateException illegalStateException93 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray91); org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("hi!", objArray91); org.apache.commons.math.FunctionEvaluationException functionEvaluationException95 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) runtimeException9, doubleArray71, "Convergence failed", objArray91); levenbergMarquardtOptimizer0.objective = doubleArray71; levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.updateResidualsAndCost(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(throwableArray8); org.junit.Assert.assertNotNull(runtimeException9); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]"); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(objArray39); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]"); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]"); org.junit.Assert.assertNotNull(objArray86); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, ""); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, ""); org.junit.Assert.assertNotNull(objArray91); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]"); org.junit.Assert.assertNotNull(nullPointerException92); org.junit.Assert.assertNotNull(illegalStateException93); }
public void test710() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test710"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double double7 = levenbergMarquardtOptimizer0.getRMS(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue(Double.isNaN(double7)); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); }
public void test001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test001"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction5 = null; double[] doubleArray12 = new double[] { 0L, 1, 1L, 100.0f, (-1), '#' }; java.lang.Throwable throwable15 = null; double[] doubleArray17 = new double[] { (byte) 100 }; java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(throwable15, doubleArray17, "hi!", objArray25); org.apache.commons.math.MathRuntimeException mathRuntimeException27 = new org.apache.commons.math.MathRuntimeException(throwable15); java.lang.String str28 = mathRuntimeException27.getPattern(); java.lang.String str29 = mathRuntimeException27.getPattern(); java.lang.Object[] objArray30 = mathRuntimeException27.getArguments(); java.lang.NullPointerException nullPointerException31 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray30); org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(doubleArray12, "org.apache.commons.math.MathRuntimeException$2: ", objArray30); double[] doubleArray36 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(doubleArray36); java.lang.Throwable throwable38 = null; double[] doubleArray40 = new double[] { (byte) 100 }; java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException(throwable38, doubleArray40, "hi!", objArray48); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair51 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray36, doubleArray40, true); java.lang.Throwable throwable52 = null; double[] doubleArray54 = new double[] { (byte) 100 }; java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException(throwable52, doubleArray54, "hi!", objArray62); double[] doubleArray64 = functionEvaluationException63.getArgument(); java.lang.Throwable throwable65 = null; double[] doubleArray67 = new double[] { (byte) 100 }; java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(throwable65, doubleArray67, "hi!", objArray75); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray64, doubleArray67, false); double[] doubleArray82 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException(doubleArray82); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair85 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray67, doubleArray82, true); // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair86 = levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction5, doubleArray12, doubleArray36, doubleArray82); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: dimension mismatch 6 != 3"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0, 1.0, 100.0, -1.0, 35.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]"); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, ""); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(objArray30); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]"); org.junit.Assert.assertNotNull(nullPointerException31); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]"); org.junit.Assert.assertNotNull(objArray48); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0]"); org.junit.Assert.assertNotNull(objArray62); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0]"); org.junit.Assert.assertNotNull(objArray75); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, 1.0, -1.0]"); }
public void test002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test002"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); // The following exception was thrown during execution in test generation try { double[] doubleArray1 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } }
public void test003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test003"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray10 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(doubleArray10); java.lang.Throwable throwable12 = null; double[] doubleArray14 = new double[] { (byte) 100 }; java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(throwable12, doubleArray14, "hi!", objArray22); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair25 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray10, doubleArray14, true); java.lang.Throwable throwable26 = null; double[] doubleArray28 = new double[] { (byte) 100 }; java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(throwable26, doubleArray28, "hi!", objArray36); double[] doubleArray38 = functionEvaluationException37.getArgument(); java.lang.Throwable throwable39 = null; double[] doubleArray41 = new double[] { (byte) 100 }; java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException(throwable39, doubleArray41, "hi!", objArray49); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair52 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray38, doubleArray41, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair54 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray10, doubleArray41, true); java.lang.Throwable throwable55 = null; double[] doubleArray57 = new double[] { (byte) 100 }; java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(throwable55, doubleArray57, "hi!", objArray65); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair67 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray57); double[] doubleArray74 = new double[] { 0L, 1, 1L, 100.0f, (-1), '#' }; java.lang.Throwable throwable77 = null; double[] doubleArray79 = new double[] { (byte) 100 }; java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(throwable77, doubleArray79, "hi!", objArray87); org.apache.commons.math.MathRuntimeException mathRuntimeException89 = new org.apache.commons.math.MathRuntimeException(throwable77); java.lang.String str90 = mathRuntimeException89.getPattern(); java.lang.String str91 = mathRuntimeException89.getPattern(); java.lang.Object[] objArray92 = mathRuntimeException89.getArguments(); java.lang.NullPointerException nullPointerException93 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray92); org.apache.commons.math.FunctionEvaluationException functionEvaluationException94 = new org.apache.commons.math.FunctionEvaluationException(doubleArray74, "org.apache.commons.math.MathRuntimeException$2: ", objArray92); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair96 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray57, doubleArray74, true); levenbergMarquardtOptimizer0.residualsWeights = doubleArray57; // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair98 = levenbergMarquardtOptimizer0.doOptimize(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]"); org.junit.Assert.assertNotNull(objArray22); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]"); org.junit.Assert.assertNotNull(objArray36); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(objArray49); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0]"); org.junit.Assert.assertNotNull(objArray65); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 1.0, 1.0, 100.0, -1.0, 35.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); org.junit.Assert.assertNotNull(objArray87); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, ""); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, ""); org.junit.Assert.assertNotNull(objArray92); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]"); org.junit.Assert.assertNotNull(nullPointerException93); }
public void test004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test004"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction6 = null; java.lang.Throwable throwable7 = null; double[] doubleArray9 = new double[] { (byte) 100 }; java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(throwable7, doubleArray9, "hi!", objArray17); double[] doubleArray19 = functionEvaluationException18.getArgument(); java.lang.Throwable throwable20 = null; double[] doubleArray22 = new double[] { (byte) 100 }; java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(throwable20, doubleArray22, "hi!", objArray30); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair33 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray19, doubleArray22, false); double[] doubleArray37 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(doubleArray37); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair40 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray22, doubleArray37, true); java.lang.Throwable throwable41 = null; double[] doubleArray43 = new double[] { (byte) 100 }; java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException(throwable41, doubleArray43, "hi!", objArray51); double[] doubleArray53 = functionEvaluationException52.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(doubleArray53); java.lang.Throwable throwable55 = null; double[] doubleArray57 = new double[] { (byte) 100 }; java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(throwable55, doubleArray57, "hi!", objArray65); double[] doubleArray67 = functionEvaluationException66.getArgument(); java.lang.Throwable throwable68 = null; double[] doubleArray70 = new double[] { (byte) 100 }; java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException(throwable68, doubleArray70, "hi!", objArray78); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair81 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray67, doubleArray70, false); // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair82 = levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction6, doubleArray37, doubleArray53, doubleArray67); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: dimension mismatch 3 != 1"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]"); org.junit.Assert.assertNotNull(objArray17); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertNotNull(objArray30); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0]"); org.junit.Assert.assertNotNull(objArray51); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0]"); org.junit.Assert.assertNotNull(objArray65); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray70); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0]"); org.junit.Assert.assertNotNull(objArray78); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 4, true, true, 100.0, 100]"); }
public void test005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test005"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); // The following exception was thrown during execution in test generation try { double[] doubleArray5 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test006"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker4 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int5 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker4); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); }
public void test007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test007"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); double double6 = levenbergMarquardtOptimizer0.cost; org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction7 = null; double[] doubleArray8 = null; double[] doubleArray12 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(doubleArray12); java.lang.Throwable throwable14 = null; double[] doubleArray16 = new double[] { (byte) 100 }; java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(throwable14, doubleArray16, "hi!", objArray24); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair27 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray12, doubleArray16, true); java.lang.Throwable throwable30 = null; double[] doubleArray32 = new double[] { (byte) 100 }; java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(throwable30, doubleArray32, "hi!", objArray40); double[] doubleArray42 = functionEvaluationException41.getArgument(); java.lang.Object[] objArray51 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException52 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray51); java.lang.IllegalArgumentException illegalArgumentException53 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException52); java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException52, "", objArray56); org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray56); java.util.ConcurrentModificationException concurrentModificationException59 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray56); org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException41, "", objArray56); java.io.EOFException eOFException61 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.MathRuntimeException$2: ", objArray56); org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException(doubleArray12, "hi!", objArray56); double[] doubleArray66 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(doubleArray66); java.lang.Throwable throwable68 = null; double[] doubleArray70 = new double[] { (byte) 100 }; java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException(throwable68, doubleArray70, "hi!", objArray78); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair81 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray66, doubleArray70, true); // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair82 = levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction7, doubleArray8, doubleArray12, doubleArray66); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]"); org.junit.Assert.assertNotNull(objArray24); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]"); org.junit.Assert.assertNotNull(objArray40); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray51); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException52); org.junit.Assert.assertNotNull(illegalArgumentException53); org.junit.Assert.assertNotNull(objArray56); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException59); org.junit.Assert.assertNotNull(eOFException61); org.junit.Assert.assertNotNull(doubleArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray70); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0]"); org.junit.Assert.assertNotNull(objArray78); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 4, true, true, 100.0, 100]"); }
public void test008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test008"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair10 = levenbergMarquardtOptimizer0.doOptimize(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test009"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction7 = null; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); double[] doubleArray27 = vectorialPointValuePair26.getPoint(); org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray30 = convergenceException29.getSuppressed(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(doubleArray27, "", (java.lang.Object[]) throwableArray30); java.lang.Throwable throwable32 = null; double[] doubleArray34 = new double[] { (byte) 100 }; java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException(throwable32, doubleArray34, "hi!", objArray42); double[] doubleArray44 = functionEvaluationException43.getArgument(); java.lang.Throwable throwable45 = null; double[] doubleArray47 = new double[] { (byte) 100 }; java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(throwable45, doubleArray47, "hi!", objArray55); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair58 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray47, false); double[] doubleArray62 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException(doubleArray62); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair65 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray47, doubleArray62, true); double[] doubleArray66 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair67 = levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction7, doubleArray27, doubleArray62, doubleArray66); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(throwableArray30); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0]"); org.junit.Assert.assertNotNull(objArray42); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]"); org.junit.Assert.assertNotNull(objArray55); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 1.0, -1.0]"); }
public void test010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test010"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = (byte) 1; double double9 = levenbergMarquardtOptimizer0.getRMS(); double[] doubleArray14 = new double[] { 52, 0.0f, 0L, 0L }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(doubleArray14); levenbergMarquardtOptimizer0.residuals = doubleArray14; int int17 = levenbergMarquardtOptimizer0.rows; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double9)); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[52.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); }
public void test011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test011"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); double[] doubleArray9 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertNull(doubleArray9); }
public void test012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test012"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); // The following exception was thrown during execution in test generation try { double[] doubleArray9 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); }
public void test013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test013"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = ' '; levenbergMarquardtOptimizer0.setOrthoTolerance(0.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); }
public void test014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test014"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); double[] doubleArray7 = null; levenbergMarquardtOptimizer0.objective = doubleArray7; // The following exception was thrown during execution in test generation try { double[] doubleArray9 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 100 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } }
public void test015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test015"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setMaxIterations(0); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test016"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int11 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test017"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer5 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int6 = levenbergMarquardtOptimizer5.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; levenbergMarquardtOptimizer7.cols = 52; levenbergMarquardtOptimizer7.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker14 = levenbergMarquardtOptimizer7.checker; levenbergMarquardtOptimizer5.checker = vectorialConvergenceChecker14; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker14); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNotNull(vectorialConvergenceChecker14); }
public void test018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test018"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); int int5 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647); }
public void test019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test019"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 1000); double[][] doubleArray11 = levenbergMarquardtOptimizer0.jacobian; levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNull(doubleArray11); }
public void test020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test020"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); // The following exception was thrown during execution in test generation try { double[] doubleArray8 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 52 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000); }
public void test021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test021"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 0.0f); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test022"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; int int26 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); }
public void test023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test023"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; int int6 = levenbergMarquardtOptimizer0.cols; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test024"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair7 = levenbergMarquardtOptimizer0.doOptimize(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); }
public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int8 = levenbergMarquardtOptimizer7.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer9 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker10 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer9.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker10); double[] doubleArray12 = levenbergMarquardtOptimizer9.residualsWeights; levenbergMarquardtOptimizer9.cols = 52; levenbergMarquardtOptimizer9.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker16 = levenbergMarquardtOptimizer9.checker; levenbergMarquardtOptimizer7.checker = vectorialConvergenceChecker16; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker16; int int19 = levenbergMarquardtOptimizer0.rows; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker16); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); }
public void test026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test026"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int10 = levenbergMarquardtOptimizer0.rows; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test027"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray2 = levenbergMarquardtOptimizer0.point; levenbergMarquardtOptimizer0.setMaxEvaluations(0); org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertNull(doubleArray2); }
public void test028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test028"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; java.lang.Throwable throwable11 = null; double[] doubleArray13 = new double[] { (byte) 100 }; java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException(throwable11, doubleArray13, "hi!", objArray21); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable26 = null; double[] doubleArray28 = new double[] { (byte) 100 }; java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(throwable26, doubleArray28, "hi!", objArray36); double[] doubleArray38 = functionEvaluationException37.getArgument(); java.lang.Throwable throwable39 = null; double[] doubleArray41 = new double[] { (byte) 100 }; java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException(throwable39, doubleArray41, "hi!", objArray49); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair52 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray38, doubleArray41, false); java.lang.Object[] objArray61 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException62 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray61); java.lang.IllegalArgumentException illegalArgumentException63 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException62); java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException62, "", objArray66); org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray66); java.lang.IllegalArgumentException illegalArgumentException69 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray66); org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException25, doubleArray38, "", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair71 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray38); levenbergMarquardtOptimizer0.residuals = doubleArray38; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0]"); org.junit.Assert.assertNotNull(objArray21); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]"); org.junit.Assert.assertNotNull(objArray36); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(objArray49); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray61); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException62); org.junit.Assert.assertNotNull(illegalArgumentException63); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException69); }
public void test029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test029"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); java.lang.Class<?> wildcardClass5 = levenbergMarquardtOptimizer0.getClass(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(wildcardClass5); }
public void test030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test030"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; java.lang.Object[] objArray15 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException16 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray15); org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15); java.lang.Throwable throwable18 = null; double[] doubleArray20 = new double[] { (byte) 100 }; java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(throwable18, doubleArray20, "hi!", objArray28); double[] doubleArray30 = functionEvaluationException29.getArgument(); java.lang.Throwable throwable31 = null; double[] doubleArray33 = new double[] { (byte) 100 }; java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(throwable31, doubleArray33, "hi!", objArray41); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair44 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray30, doubleArray33, false); java.lang.Throwable throwable49 = null; double[] doubleArray51 = new double[] { (byte) 100 }; java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(throwable49, doubleArray51, "hi!", objArray59); org.apache.commons.math.MathRuntimeException mathRuntimeException61 = new org.apache.commons.math.MathRuntimeException(throwable49); java.lang.String str62 = mathRuntimeException61.getPattern(); java.lang.String str63 = mathRuntimeException61.getPattern(); java.lang.Object[] objArray64 = mathRuntimeException61.getArguments(); java.lang.NullPointerException nullPointerException65 = org.apache.commons.math.MathRuntimeException.createNullPointerException("org.apache.commons.math.MathRuntimeException$2: ", objArray64); org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException66 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray64); org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) mathException17, doubleArray33, "Convergence failed", objArray64); levenbergMarquardtOptimizer0.point = doubleArray33; // The following exception was thrown during execution in test generation try { double[] doubleArray69 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 100 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNotNull(objArray15); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException16); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]"); org.junit.Assert.assertNotNull(objArray28); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]"); org.junit.Assert.assertNotNull(objArray41); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]"); org.junit.Assert.assertNotNull(objArray59); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, ""); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, ""); org.junit.Assert.assertNotNull(objArray64); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]"); org.junit.Assert.assertNotNull(nullPointerException65); }
public void test031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test031"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; double[] doubleArray72 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) 100); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertNull(doubleArray72); }
public void test032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test032"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray4 = levenbergMarquardtOptimizer0.residualsWeights; // The following exception was thrown during execution in test generation try { double[] doubleArray5 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray4); }
public void test033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test033"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction7 = null; double[] doubleArray8 = null; double[] doubleArray12 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(doubleArray12); java.lang.Throwable throwable14 = null; double[] doubleArray16 = new double[] { (byte) 100 }; java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(throwable14, doubleArray16, "hi!", objArray24); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair27 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray12, doubleArray16, true); java.lang.Throwable throwable28 = null; double[] doubleArray30 = new double[] { (byte) 100 }; java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(throwable28, doubleArray30, "hi!", objArray38); double[] doubleArray40 = functionEvaluationException39.getArgument(); java.lang.Throwable throwable41 = null; double[] doubleArray43 = new double[] { (byte) 100 }; java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException(throwable41, doubleArray43, "hi!", objArray51); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair54 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray40, doubleArray43, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair56 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray12, doubleArray43, true); java.lang.Throwable throwable57 = null; double[] doubleArray59 = new double[] { (byte) 100 }; java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException(throwable57, doubleArray59, "hi!", objArray67); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair69 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray43, doubleArray59); double[] doubleArray70 = vectorialPointValuePair69.getPointRef(); double[] doubleArray71 = vectorialPointValuePair69.getPoint(); double[] doubleArray72 = vectorialPointValuePair69.getPointRef(); java.lang.Throwable throwable73 = null; double[] doubleArray75 = new double[] { (byte) 100 }; java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException(throwable73, doubleArray75, "hi!", objArray83); // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair85 = levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction7, doubleArray8, doubleArray72, doubleArray75); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]"); org.junit.Assert.assertNotNull(objArray24); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]"); org.junit.Assert.assertNotNull(objArray38); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0]"); org.junit.Assert.assertNotNull(objArray51); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0]"); org.junit.Assert.assertNotNull(objArray67); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray70); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0]"); org.junit.Assert.assertNotNull(objArray83); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 4, true, true, 100.0, 100]"); }
public void test034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test034"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray10 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(doubleArray10); java.lang.Throwable throwable12 = null; double[] doubleArray14 = new double[] { (byte) 100 }; java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(throwable12, doubleArray14, "hi!", objArray22); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair25 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray10, doubleArray14, true); java.lang.Throwable throwable26 = null; double[] doubleArray28 = new double[] { (byte) 100 }; java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(throwable26, doubleArray28, "hi!", objArray36); double[] doubleArray38 = functionEvaluationException37.getArgument(); java.lang.Throwable throwable39 = null; double[] doubleArray41 = new double[] { (byte) 100 }; java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException(throwable39, doubleArray41, "hi!", objArray49); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair52 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray38, doubleArray41, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair54 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray10, doubleArray41, true); java.lang.Throwable throwable55 = null; double[] doubleArray57 = new double[] { (byte) 100 }; java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(throwable55, doubleArray57, "hi!", objArray65); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair67 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray57); double[] doubleArray74 = new double[] { 0L, 1, 1L, 100.0f, (-1), '#' }; java.lang.Throwable throwable77 = null; double[] doubleArray79 = new double[] { (byte) 100 }; java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(throwable77, doubleArray79, "hi!", objArray87); org.apache.commons.math.MathRuntimeException mathRuntimeException89 = new org.apache.commons.math.MathRuntimeException(throwable77); java.lang.String str90 = mathRuntimeException89.getPattern(); java.lang.String str91 = mathRuntimeException89.getPattern(); java.lang.Object[] objArray92 = mathRuntimeException89.getArguments(); java.lang.NullPointerException nullPointerException93 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray92); org.apache.commons.math.FunctionEvaluationException functionEvaluationException94 = new org.apache.commons.math.FunctionEvaluationException(doubleArray74, "org.apache.commons.math.MathRuntimeException$2: ", objArray92); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair96 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray57, doubleArray74, true); levenbergMarquardtOptimizer0.residualsWeights = doubleArray57; // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.updateJacobian(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]"); org.junit.Assert.assertNotNull(objArray22); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]"); org.junit.Assert.assertNotNull(objArray36); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(objArray49); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0]"); org.junit.Assert.assertNotNull(objArray65); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 1.0, 1.0, 100.0, -1.0, 35.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); org.junit.Assert.assertNotNull(objArray87); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, ""); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, ""); org.junit.Assert.assertNotNull(objArray92); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]"); org.junit.Assert.assertNotNull(nullPointerException93); }
public void test035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test035"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; int int12 = levenbergMarquardtOptimizer8.getMaxIterations(); levenbergMarquardtOptimizer8.setMaxIterations(100); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker15 = levenbergMarquardtOptimizer8.getConvergenceChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker15); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) -1); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker15); }
public void test036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test036"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray8 = convergenceException7.getSuppressed(); java.lang.RuntimeException runtimeException9 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable) convergenceException7); double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); java.lang.Throwable throwable15 = null; double[] doubleArray17 = new double[] { (byte) 100 }; java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(throwable15, doubleArray17, "hi!", objArray25); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray17, true); java.lang.Throwable throwable29 = null; double[] doubleArray31 = new double[] { (byte) 100 }; java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(throwable29, doubleArray31, "hi!", objArray39); double[] doubleArray41 = functionEvaluationException40.getArgument(); java.lang.Throwable throwable42 = null; double[] doubleArray44 = new double[] { (byte) 100 }; java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(throwable42, doubleArray44, "hi!", objArray52); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray44, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray44, true); java.lang.Throwable throwable58 = null; double[] doubleArray60 = new double[] { (byte) 100 }; java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(throwable58, doubleArray60, "hi!", objArray68); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray60); double[] doubleArray71 = vectorialPointValuePair70.getValueRef(); java.lang.Throwable throwable76 = null; double[] doubleArray78 = new double[] { (byte) 100 }; java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException(throwable76, doubleArray78, "hi!", objArray86); org.apache.commons.math.MathRuntimeException mathRuntimeException88 = new org.apache.commons.math.MathRuntimeException(throwable76); java.lang.String str89 = mathRuntimeException88.getPattern(); java.lang.String str90 = mathRuntimeException88.getPattern(); java.lang.Object[] objArray91 = mathRuntimeException88.getArguments(); java.lang.NullPointerException nullPointerException92 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray91); java.lang.IllegalStateException illegalStateException93 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray91); org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("hi!", objArray91); org.apache.commons.math.FunctionEvaluationException functionEvaluationException95 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) runtimeException9, doubleArray71, "Convergence failed", objArray91); double[] doubleArray96 = functionEvaluationException95.getArgument(); levenbergMarquardtOptimizer0.targetValues = doubleArray96; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker98 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(throwableArray8); org.junit.Assert.assertNotNull(runtimeException9); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]"); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(objArray39); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]"); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]"); org.junit.Assert.assertNotNull(objArray86); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, ""); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, ""); org.junit.Assert.assertNotNull(objArray91); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]"); org.junit.Assert.assertNotNull(nullPointerException92); org.junit.Assert.assertNotNull(illegalStateException93); org.junit.Assert.assertNotNull(doubleArray96); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[100.0]"); org.junit.Assert.assertNotNull(vectorialConvergenceChecker98); }
public void test037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test037"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 10); levenbergMarquardtOptimizer0.setOrthoTolerance((double) 2147483647); double[][] doubleArray9 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNull(doubleArray9); }
public void test038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test038"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[][] doubleArray7 = levenbergMarquardtOptimizer0.jacobian; org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction8 = null; double[] doubleArray9 = null; double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); java.lang.Throwable throwable15 = null; double[] doubleArray17 = new double[] { (byte) 100 }; java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(throwable15, doubleArray17, "hi!", objArray25); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray17, true); java.lang.Throwable throwable29 = null; double[] doubleArray31 = new double[] { (byte) 100 }; java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(throwable29, doubleArray31, "hi!", objArray39); double[] doubleArray41 = functionEvaluationException40.getArgument(); java.lang.Throwable throwable42 = null; double[] doubleArray44 = new double[] { (byte) 100 }; java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(throwable42, doubleArray44, "hi!", objArray52); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray44, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray44, true); java.lang.Throwable throwable58 = null; double[] doubleArray60 = new double[] { (byte) 100 }; java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(throwable58, doubleArray60, "hi!", objArray68); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray60); double[] doubleArray71 = vectorialPointValuePair70.getPointRef(); double[] doubleArray72 = vectorialPointValuePair70.getPoint(); java.lang.Throwable throwable73 = null; double[] doubleArray75 = new double[] { (byte) 100 }; java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException(throwable73, doubleArray75, "hi!", objArray83); org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException(doubleArray75); // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair86 = levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction8, doubleArray9, doubleArray72, doubleArray75); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]"); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(objArray39); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]"); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0]"); org.junit.Assert.assertNotNull(objArray83); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 4, true, true, 100.0, 100]"); }
public void test039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test039"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 100); org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray8 = convergenceException7.getSuppressed(); java.lang.RuntimeException runtimeException9 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable) convergenceException7); double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); java.lang.Throwable throwable15 = null; double[] doubleArray17 = new double[] { (byte) 100 }; java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(throwable15, doubleArray17, "hi!", objArray25); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray17, true); java.lang.Throwable throwable29 = null; double[] doubleArray31 = new double[] { (byte) 100 }; java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(throwable29, doubleArray31, "hi!", objArray39); double[] doubleArray41 = functionEvaluationException40.getArgument(); java.lang.Throwable throwable42 = null; double[] doubleArray44 = new double[] { (byte) 100 }; java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(throwable42, doubleArray44, "hi!", objArray52); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray44, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray44, true); java.lang.Throwable throwable58 = null; double[] doubleArray60 = new double[] { (byte) 100 }; java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(throwable58, doubleArray60, "hi!", objArray68); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray60); double[] doubleArray71 = vectorialPointValuePair70.getValueRef(); java.lang.Throwable throwable76 = null; double[] doubleArray78 = new double[] { (byte) 100 }; java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException(throwable76, doubleArray78, "hi!", objArray86); org.apache.commons.math.MathRuntimeException mathRuntimeException88 = new org.apache.commons.math.MathRuntimeException(throwable76); java.lang.String str89 = mathRuntimeException88.getPattern(); java.lang.String str90 = mathRuntimeException88.getPattern(); java.lang.Object[] objArray91 = mathRuntimeException88.getArguments(); java.lang.NullPointerException nullPointerException92 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray91); java.lang.IllegalStateException illegalStateException93 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray91); org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("hi!", objArray91); org.apache.commons.math.FunctionEvaluationException functionEvaluationException95 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) runtimeException9, doubleArray71, "Convergence failed", objArray91); levenbergMarquardtOptimizer0.objective = doubleArray71; levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); int int99 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(throwableArray8); org.junit.Assert.assertNotNull(runtimeException9); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]"); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(objArray39); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]"); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]"); org.junit.Assert.assertNotNull(objArray86); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, ""); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, ""); org.junit.Assert.assertNotNull(objArray91); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]"); org.junit.Assert.assertNotNull(nullPointerException92); org.junit.Assert.assertNotNull(illegalStateException93); org.junit.Assert.assertTrue("'" + int99 + "' != '" + 100 + "'", int99 == 100); }
public void test040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test040"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); int int10 = levenbergMarquardtOptimizer0.getEvaluations(); int int11 = levenbergMarquardtOptimizer0.rows; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test041"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; levenbergMarquardtOptimizer0.setParRelativeTolerance((double) ' '); // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.updateResidualsAndCost(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); }
public void test042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test042"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.incrementIterationsCounter(); // The following exception was thrown during execution in test generation try { double[] doubleArray8 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 100 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } }
public void test043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test043"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); double double9 = levenbergMarquardtOptimizer0.getChiSquare(); double[][] doubleArray10 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNull(doubleArray10); }
public void test044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test044"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (byte) 0); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test045"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double double10 = levenbergMarquardtOptimizer0.cost; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) (-1)); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); }
public void test046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test046"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray9 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 100L); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNull(doubleArray9); }
public void test047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test047"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; levenbergMarquardtOptimizer8.cols = 52; levenbergMarquardtOptimizer8.incrementIterationsCounter(); double[] doubleArray19 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray24 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray25 = new double[][] { doubleArray19, doubleArray24 }; levenbergMarquardtOptimizer8.jacobian = doubleArray25; levenbergMarquardtOptimizer2.jacobian = doubleArray25; org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 2147483647, "", (java.lang.Object[]) doubleArray25); org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException28); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray25); }
public void test048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test048"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); // The following exception was thrown during execution in test generation try { double[] doubleArray6 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test049"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray9 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray9; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test050"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); java.lang.Throwable throwable15 = null; double[] doubleArray17 = new double[] { (byte) 100 }; java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(throwable15, doubleArray17, "hi!", objArray25); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray17, true); java.lang.Throwable throwable29 = null; double[] doubleArray31 = new double[] { (byte) 100 }; java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(throwable29, doubleArray31, "hi!", objArray39); double[] doubleArray41 = functionEvaluationException40.getArgument(); java.lang.Throwable throwable42 = null; double[] doubleArray44 = new double[] { (byte) 100 }; java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(throwable42, doubleArray44, "hi!", objArray52); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray44, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray44, true); java.lang.Throwable throwable58 = null; double[] doubleArray60 = new double[] { (byte) 100 }; java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(throwable58, doubleArray60, "hi!", objArray68); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray60); org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException(doubleArray44); double[] doubleArray72 = functionEvaluationException71.getArgument(); levenbergMarquardtOptimizer0.objective = doubleArray72; // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.updateResidualsAndCost(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]"); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(objArray39); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]"); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); }
public void test051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test051"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.cost = 1.0d; levenbergMarquardtOptimizer0.rows = '#'; java.lang.Throwable throwable12 = null; double[] doubleArray14 = new double[] { (byte) 100 }; java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(throwable12, doubleArray14, "hi!", objArray22); double[] doubleArray24 = functionEvaluationException23.getArgument(); java.lang.Object[] objArray33 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException34 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray33); java.lang.IllegalArgumentException illegalArgumentException35 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException34); java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException34, "", objArray38); org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray38); java.util.ConcurrentModificationException concurrentModificationException41 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray38); org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException23, "", objArray38); java.lang.Throwable throwable44 = null; double[] doubleArray46 = new double[] { (byte) 100 }; java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException(throwable44, doubleArray46, "hi!", objArray54); org.apache.commons.math.MathRuntimeException mathRuntimeException56 = new org.apache.commons.math.MathRuntimeException(throwable44); java.lang.String str57 = mathRuntimeException56.getPattern(); java.lang.String str58 = mathRuntimeException56.getPattern(); org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathRuntimeException56); java.lang.Object[] objArray60 = mathRuntimeException56.getArguments(); org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException23, "hi!", objArray60); double[] doubleArray62 = functionEvaluationException23.getArgument(); levenbergMarquardtOptimizer0.residuals = doubleArray62; int int64 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]"); org.junit.Assert.assertNotNull(objArray22); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]"); org.junit.Assert.assertNotNull(objArray33); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException34); org.junit.Assert.assertNotNull(illegalArgumentException35); org.junit.Assert.assertNotNull(objArray38); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException41); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]"); org.junit.Assert.assertNotNull(objArray54); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, ""); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, ""); org.junit.Assert.assertNotNull(objArray60); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]"); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); }
public void test052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test052"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray7 = levenbergMarquardtOptimizer0.targetValues; int int8 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) 0L); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test053"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.cols = 0; levenbergMarquardtOptimizer0.cost = 1.0f; double[] doubleArray13 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(doubleArray13); }
public void test054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test054"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.residualsWeights; levenbergMarquardtOptimizer6.cost = 0.0d; double[] doubleArray12 = levenbergMarquardtOptimizer6.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer6.getConvergenceChecker(); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker13; int int15 = levenbergMarquardtOptimizer0.getMaxIterations(); int int16 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int17 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); }
public void test055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test055"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); int int9 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable12 = null; double[] doubleArray14 = new double[] { (byte) 100 }; java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(throwable12, doubleArray14, "hi!", objArray22); double[] doubleArray24 = functionEvaluationException23.getArgument(); java.lang.Throwable throwable25 = null; double[] doubleArray27 = new double[] { (byte) 100 }; java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(throwable25, doubleArray27, "hi!", objArray35); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair38 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray24, doubleArray27, false); java.lang.Object[] objArray47 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException48 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray47); java.lang.IllegalArgumentException illegalArgumentException49 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException48); java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException48, "", objArray52); org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray52); java.lang.IllegalArgumentException illegalArgumentException55 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray52); org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException11, doubleArray24, "", objArray52); levenbergMarquardtOptimizer0.residuals = doubleArray24; double[][] doubleArray58 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]"); org.junit.Assert.assertNotNull(objArray22); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0]"); org.junit.Assert.assertNotNull(objArray35); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray47); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException48); org.junit.Assert.assertNotNull(illegalArgumentException49); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException55); org.junit.Assert.assertNull(doubleArray58); }
public void test056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test056"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double double9 = levenbergMarquardtOptimizer0.getChiSquare(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); double[] doubleArray13 = levenbergMarquardtOptimizer10.residualsWeights; levenbergMarquardtOptimizer10.cols = 52; levenbergMarquardtOptimizer10.incrementIterationsCounter(); int int17 = levenbergMarquardtOptimizer10.getJacobianEvaluations(); levenbergMarquardtOptimizer10.setMaxEvaluations(52); java.lang.Throwable throwable20 = null; double[] doubleArray22 = new double[] { (byte) 100 }; java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(throwable20, doubleArray22, "hi!", objArray30); org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable35 = null; double[] doubleArray37 = new double[] { (byte) 100 }; java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException(throwable35, doubleArray37, "hi!", objArray45); double[] doubleArray47 = functionEvaluationException46.getArgument(); java.lang.Throwable throwable48 = null; double[] doubleArray50 = new double[] { (byte) 100 }; java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException(throwable48, doubleArray50, "hi!", objArray58); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair61 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray47, doubleArray50, false); java.lang.Object[] objArray70 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException71 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray70); java.lang.IllegalArgumentException illegalArgumentException72 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException71); java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException71, "", objArray75); org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray75); java.lang.IllegalArgumentException illegalArgumentException78 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray75); org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException34, doubleArray47, "", objArray75); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair80 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray22, doubleArray47); double[] doubleArray81 = vectorialPointValuePair80.getPoint(); levenbergMarquardtOptimizer10.targetValues = doubleArray81; levenbergMarquardtOptimizer0.residuals = doubleArray81; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertNotNull(objArray30); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]"); org.junit.Assert.assertNotNull(objArray45); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]"); org.junit.Assert.assertNotNull(objArray58); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray70); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException71); org.junit.Assert.assertNotNull(illegalArgumentException72); org.junit.Assert.assertNotNull(objArray75); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException78); org.junit.Assert.assertNotNull(doubleArray81); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0]"); }
public void test057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test057"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); double[][] doubleArray12 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray12); }
public void test058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test058"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double double6 = levenbergMarquardtOptimizer0.cost; levenbergMarquardtOptimizer0.setMaxEvaluations(52); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test059"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; int int72 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray73 = null; levenbergMarquardtOptimizer0.objective = doubleArray73; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647); }
public void test060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test060"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.residualsWeights; levenbergMarquardtOptimizer6.cols = 52; int int12 = levenbergMarquardtOptimizer6.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer6.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cost = 0.0d; double[] doubleArray20 = levenbergMarquardtOptimizer14.targetValues; double[] doubleArray21 = levenbergMarquardtOptimizer14.residuals; int int22 = levenbergMarquardtOptimizer14.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cost = 0.0d; double[] doubleArray29 = levenbergMarquardtOptimizer23.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker30 = levenbergMarquardtOptimizer23.getConvergenceChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker(vectorialConvergenceChecker30); levenbergMarquardtOptimizer6.checker = vectorialConvergenceChecker30; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker30); int int34 = levenbergMarquardtOptimizer0.rows; int int35 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertNotNull(vectorialConvergenceChecker30); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1000 + "'", int35 == 1000); }
public void test061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test061"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer3 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker4 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer3.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker4); double[] doubleArray6 = levenbergMarquardtOptimizer3.residualsWeights; int int7 = levenbergMarquardtOptimizer3.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer3.getConvergenceChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker8); int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; int int26 = levenbergMarquardtOptimizer0.cols; int int27 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray28 = levenbergMarquardtOptimizer0.objective; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertNull(doubleArray28); }
public void test063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test063"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; double[][] doubleArray8 = levenbergMarquardtOptimizer0.jacobian; levenbergMarquardtOptimizer0.setMaxEvaluations(1); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray8); }
public void test064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test064"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int11 = levenbergMarquardtOptimizer0.rows; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); }
public void test065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test065"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = (byte) 1; double double9 = levenbergMarquardtOptimizer0.getRMS(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) ' '); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double9)); }
public void test066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test066"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int11 = levenbergMarquardtOptimizer0.rows; int int12 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); }
public void test067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test067"); double[] doubleArray3 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException(doubleArray3); java.lang.Throwable throwable5 = null; double[] doubleArray7 = new double[] { (byte) 100 }; java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(throwable5, doubleArray7, "hi!", objArray15); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair18 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray3, doubleArray7, true); double[] doubleArray19 = vectorialPointValuePair18.getPoint(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer20 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker21 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer20.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker21); double[] doubleArray23 = levenbergMarquardtOptimizer20.residualsWeights; double double24 = levenbergMarquardtOptimizer20.getChiSquare(); levenbergMarquardtOptimizer20.cols = 10; levenbergMarquardtOptimizer20.setInitialStepBoundFactor((double) (byte) 10); int int29 = levenbergMarquardtOptimizer20.getIterations(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable32 = null; double[] doubleArray34 = new double[] { (byte) 100 }; java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException(throwable32, doubleArray34, "hi!", objArray42); double[] doubleArray44 = functionEvaluationException43.getArgument(); java.lang.Throwable throwable45 = null; double[] doubleArray47 = new double[] { (byte) 100 }; java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(throwable45, doubleArray47, "hi!", objArray55); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair58 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray47, false); java.lang.Object[] objArray67 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException68 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray67); java.lang.IllegalArgumentException illegalArgumentException69 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException68); java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException68, "", objArray72); org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray72); java.lang.IllegalArgumentException illegalArgumentException75 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray72); org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException31, doubleArray44, "", objArray72); levenbergMarquardtOptimizer20.residuals = doubleArray44; org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray19, doubleArray44); double[] doubleArray79 = vectorialPointValuePair78.getPointRef(); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]"); org.junit.Assert.assertNotNull(objArray15); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNull(doubleArray23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0]"); org.junit.Assert.assertNotNull(objArray42); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]"); org.junit.Assert.assertNotNull(objArray55); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray67); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException68); org.junit.Assert.assertNotNull(illegalArgumentException69); org.junit.Assert.assertNotNull(objArray72); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException75); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, 1.0, -1.0]"); }
public void test068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test068"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(1000); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); double[] doubleArray12 = levenbergMarquardtOptimizer0.residualsWeights; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100); org.junit.Assert.assertNull(doubleArray12); }
public void test069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test069"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray10 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(doubleArray10); java.lang.Throwable throwable12 = null; double[] doubleArray14 = new double[] { (byte) 100 }; java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(throwable12, doubleArray14, "hi!", objArray22); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair25 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray10, doubleArray14, true); java.lang.Throwable throwable26 = null; double[] doubleArray28 = new double[] { (byte) 100 }; java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(throwable26, doubleArray28, "hi!", objArray36); double[] doubleArray38 = functionEvaluationException37.getArgument(); java.lang.Throwable throwable39 = null; double[] doubleArray41 = new double[] { (byte) 100 }; java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException(throwable39, doubleArray41, "hi!", objArray49); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair52 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray38, doubleArray41, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair54 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray10, doubleArray41, true); java.lang.Throwable throwable55 = null; double[] doubleArray57 = new double[] { (byte) 100 }; java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(throwable55, doubleArray57, "hi!", objArray65); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair67 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray57); double[] doubleArray74 = new double[] { 0L, 1, 1L, 100.0f, (-1), '#' }; java.lang.Throwable throwable77 = null; double[] doubleArray79 = new double[] { (byte) 100 }; java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(throwable77, doubleArray79, "hi!", objArray87); org.apache.commons.math.MathRuntimeException mathRuntimeException89 = new org.apache.commons.math.MathRuntimeException(throwable77); java.lang.String str90 = mathRuntimeException89.getPattern(); java.lang.String str91 = mathRuntimeException89.getPattern(); java.lang.Object[] objArray92 = mathRuntimeException89.getArguments(); java.lang.NullPointerException nullPointerException93 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray92); org.apache.commons.math.FunctionEvaluationException functionEvaluationException94 = new org.apache.commons.math.FunctionEvaluationException(doubleArray74, "org.apache.commons.math.MathRuntimeException$2: ", objArray92); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair96 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray57, doubleArray74, true); levenbergMarquardtOptimizer0.residualsWeights = doubleArray57; levenbergMarquardtOptimizer0.setMaxEvaluations(0); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]"); org.junit.Assert.assertNotNull(objArray22); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]"); org.junit.Assert.assertNotNull(objArray36); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(objArray49); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0]"); org.junit.Assert.assertNotNull(objArray65); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 1.0, 1.0, 100.0, -1.0, 35.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); org.junit.Assert.assertNotNull(objArray87); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, ""); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, ""); org.junit.Assert.assertNotNull(objArray92); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]"); org.junit.Assert.assertNotNull(nullPointerException93); }
public void test070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test070"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[][] doubleArray8 = levenbergMarquardtOptimizer0.jacobian; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); levenbergMarquardtOptimizer0.residualsWeights = doubleArray13; // The following exception was thrown during execution in test generation try { double[] doubleArray16 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); }
public void test071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test071"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 1000); levenbergMarquardtOptimizer0.setOrthoTolerance((double) 'a'); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test072"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; int int9 = levenbergMarquardtOptimizer0.rows; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); }
public void test073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test073"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; int int2 = levenbergMarquardtOptimizer0.getMaxIterations(); int int3 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double double4 = levenbergMarquardtOptimizer0.getChiSquare(); org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); }
public void test074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test074"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test075"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0); // The following exception was thrown during execution in test generation try { double[] doubleArray12 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test076"); double[] doubleArray3 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException(doubleArray3); java.lang.Throwable throwable5 = null; double[] doubleArray7 = new double[] { (byte) 100 }; java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(throwable5, doubleArray7, "hi!", objArray15); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair18 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray3, doubleArray7, true); double[] doubleArray19 = vectorialPointValuePair18.getPoint(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer20 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker21 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer20.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker21); double[] doubleArray23 = levenbergMarquardtOptimizer20.residualsWeights; double double24 = levenbergMarquardtOptimizer20.getChiSquare(); levenbergMarquardtOptimizer20.cols = 10; levenbergMarquardtOptimizer20.setInitialStepBoundFactor((double) (byte) 10); int int29 = levenbergMarquardtOptimizer20.getIterations(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable32 = null; double[] doubleArray34 = new double[] { (byte) 100 }; java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException(throwable32, doubleArray34, "hi!", objArray42); double[] doubleArray44 = functionEvaluationException43.getArgument(); java.lang.Throwable throwable45 = null; double[] doubleArray47 = new double[] { (byte) 100 }; java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(throwable45, doubleArray47, "hi!", objArray55); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair58 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray47, false); java.lang.Object[] objArray67 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException68 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray67); java.lang.IllegalArgumentException illegalArgumentException69 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException68); java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException68, "", objArray72); org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray72); java.lang.IllegalArgumentException illegalArgumentException75 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray72); org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException31, doubleArray44, "", objArray72); levenbergMarquardtOptimizer20.residuals = doubleArray44; org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray19, doubleArray44); org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException(doubleArray19); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]"); org.junit.Assert.assertNotNull(objArray15); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNull(doubleArray23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0]"); org.junit.Assert.assertNotNull(objArray42); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]"); org.junit.Assert.assertNotNull(objArray55); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray67); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException68); org.junit.Assert.assertNotNull(illegalArgumentException69); org.junit.Assert.assertNotNull(objArray72); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException75); }
public void test077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test077"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray8 = convergenceException7.getSuppressed(); java.lang.RuntimeException runtimeException9 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable) convergenceException7); double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); java.lang.Throwable throwable15 = null; double[] doubleArray17 = new double[] { (byte) 100 }; java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(throwable15, doubleArray17, "hi!", objArray25); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray17, true); java.lang.Throwable throwable29 = null; double[] doubleArray31 = new double[] { (byte) 100 }; java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(throwable29, doubleArray31, "hi!", objArray39); double[] doubleArray41 = functionEvaluationException40.getArgument(); java.lang.Throwable throwable42 = null; double[] doubleArray44 = new double[] { (byte) 100 }; java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(throwable42, doubleArray44, "hi!", objArray52); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray44, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray44, true); java.lang.Throwable throwable58 = null; double[] doubleArray60 = new double[] { (byte) 100 }; java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(throwable58, doubleArray60, "hi!", objArray68); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray60); double[] doubleArray71 = vectorialPointValuePair70.getValueRef(); java.lang.Throwable throwable76 = null; double[] doubleArray78 = new double[] { (byte) 100 }; java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException(throwable76, doubleArray78, "hi!", objArray86); org.apache.commons.math.MathRuntimeException mathRuntimeException88 = new org.apache.commons.math.MathRuntimeException(throwable76); java.lang.String str89 = mathRuntimeException88.getPattern(); java.lang.String str90 = mathRuntimeException88.getPattern(); java.lang.Object[] objArray91 = mathRuntimeException88.getArguments(); java.lang.NullPointerException nullPointerException92 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray91); java.lang.IllegalStateException illegalStateException93 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray91); org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("hi!", objArray91); org.apache.commons.math.FunctionEvaluationException functionEvaluationException95 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) runtimeException9, doubleArray71, "Convergence failed", objArray91); double[] doubleArray96 = functionEvaluationException95.getArgument(); levenbergMarquardtOptimizer0.targetValues = doubleArray96; int int98 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(throwableArray8); org.junit.Assert.assertNotNull(runtimeException9); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]"); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(objArray39); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]"); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]"); org.junit.Assert.assertNotNull(objArray86); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, ""); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, ""); org.junit.Assert.assertNotNull(objArray91); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]"); org.junit.Assert.assertNotNull(nullPointerException92); org.junit.Assert.assertNotNull(illegalStateException93); org.junit.Assert.assertNotNull(doubleArray96); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[100.0]"); org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1000 + "'", int98 == 1000); }
public void test078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test078"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) -1); levenbergMarquardtOptimizer0.setMaxEvaluations(0); levenbergMarquardtOptimizer0.setMaxIterations(0); int int14 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray15 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNull(doubleArray15); }
public void test079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test079"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer3 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker4 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer3.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker4); double[] doubleArray6 = levenbergMarquardtOptimizer3.residualsWeights; int int7 = levenbergMarquardtOptimizer3.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer3.getConvergenceChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker8); levenbergMarquardtOptimizer0.setOrthoTolerance((double) 'a'); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); }
public void test080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test080"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 100); org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray8 = convergenceException7.getSuppressed(); java.lang.RuntimeException runtimeException9 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable) convergenceException7); double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); java.lang.Throwable throwable15 = null; double[] doubleArray17 = new double[] { (byte) 100 }; java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(throwable15, doubleArray17, "hi!", objArray25); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray17, true); java.lang.Throwable throwable29 = null; double[] doubleArray31 = new double[] { (byte) 100 }; java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(throwable29, doubleArray31, "hi!", objArray39); double[] doubleArray41 = functionEvaluationException40.getArgument(); java.lang.Throwable throwable42 = null; double[] doubleArray44 = new double[] { (byte) 100 }; java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(throwable42, doubleArray44, "hi!", objArray52); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray44, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray44, true); java.lang.Throwable throwable58 = null; double[] doubleArray60 = new double[] { (byte) 100 }; java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(throwable58, doubleArray60, "hi!", objArray68); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray60); double[] doubleArray71 = vectorialPointValuePair70.getValueRef(); java.lang.Throwable throwable76 = null; double[] doubleArray78 = new double[] { (byte) 100 }; java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException(throwable76, doubleArray78, "hi!", objArray86); org.apache.commons.math.MathRuntimeException mathRuntimeException88 = new org.apache.commons.math.MathRuntimeException(throwable76); java.lang.String str89 = mathRuntimeException88.getPattern(); java.lang.String str90 = mathRuntimeException88.getPattern(); java.lang.Object[] objArray91 = mathRuntimeException88.getArguments(); java.lang.NullPointerException nullPointerException92 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray91); java.lang.IllegalStateException illegalStateException93 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray91); org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("hi!", objArray91); org.apache.commons.math.FunctionEvaluationException functionEvaluationException95 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) runtimeException9, doubleArray71, "Convergence failed", objArray91); levenbergMarquardtOptimizer0.objective = doubleArray71; levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker99 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(throwableArray8); org.junit.Assert.assertNotNull(runtimeException9); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]"); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(objArray39); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]"); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]"); org.junit.Assert.assertNotNull(objArray86); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, ""); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, ""); org.junit.Assert.assertNotNull(objArray91); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]"); org.junit.Assert.assertNotNull(nullPointerException92); org.junit.Assert.assertNotNull(illegalStateException93); org.junit.Assert.assertNotNull(vectorialConvergenceChecker99); }
public void test081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test081"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residuals; org.junit.Assert.assertNull(doubleArray3); }
public void test082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test082"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair9 = null; double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); java.lang.Throwable throwable15 = null; double[] doubleArray17 = new double[] { (byte) 100 }; java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(throwable15, doubleArray17, "hi!", objArray25); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray17, true); java.lang.Throwable throwable29 = null; double[] doubleArray31 = new double[] { (byte) 100 }; java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(throwable29, doubleArray31, "hi!", objArray39); double[] doubleArray41 = functionEvaluationException40.getArgument(); java.lang.Throwable throwable42 = null; double[] doubleArray44 = new double[] { (byte) 100 }; java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(throwable42, doubleArray44, "hi!", objArray52); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray44, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray44, true); java.lang.Throwable throwable58 = null; double[] doubleArray60 = new double[] { (byte) 100 }; java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(throwable58, doubleArray60, "hi!", objArray68); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray60); double[] doubleArray71 = vectorialPointValuePair70.getValueRef(); double[] doubleArray72 = vectorialPointValuePair70.getPoint(); // The following exception was thrown during execution in test generation try { boolean boolean73 = vectorialConvergenceChecker7.converged(0, vectorialPointValuePair9, vectorialPointValuePair70); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]"); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(objArray39); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]"); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); }
public void test083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test083"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 'a'); double[] doubleArray11 = null; levenbergMarquardtOptimizer0.residuals = doubleArray11; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test084"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.cols = 0; levenbergMarquardtOptimizer0.cost = 1.0f; double[][] doubleArray13 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(doubleArray13); }
public void test085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test085"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) -1); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) -1); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test086"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); // The following exception was thrown during execution in test generation try { double[] doubleArray10 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 100 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); }
public void test087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test087"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker2 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertNull(vectorialConvergenceChecker2); }
public void test088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test088"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[][] doubleArray8 = new double[][] {}; levenbergMarquardtOptimizer0.jacobian = doubleArray8; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); int int13 = levenbergMarquardtOptimizer10.getMaxIterations(); double[] doubleArray17 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(doubleArray17); java.lang.Throwable throwable19 = null; double[] doubleArray21 = new double[] { (byte) 100 }; java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(throwable19, doubleArray21, "hi!", objArray29); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair32 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray17, doubleArray21, true); java.lang.Throwable throwable33 = null; double[] doubleArray35 = new double[] { (byte) 100 }; java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(throwable33, doubleArray35, "hi!", objArray43); double[] doubleArray45 = functionEvaluationException44.getArgument(); java.lang.Throwable throwable46 = null; double[] doubleArray48 = new double[] { (byte) 100 }; java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(throwable46, doubleArray48, "hi!", objArray56); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair59 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray45, doubleArray48, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair61 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray17, doubleArray48, true); double[] doubleArray62 = vectorialPointValuePair61.getValue(); double[] doubleArray63 = vectorialPointValuePair61.getPoint(); levenbergMarquardtOptimizer10.point = doubleArray63; levenbergMarquardtOptimizer0.residuals = doubleArray63; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1000 + "'", int13 == 1000); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]"); org.junit.Assert.assertNotNull(objArray29); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]"); org.junit.Assert.assertNotNull(objArray43); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0]"); org.junit.Assert.assertNotNull(objArray56); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 1.0, -1.0]"); }
public void test089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test089"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray8 = levenbergMarquardtOptimizer0.residuals; int int9 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test090"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); }
public void test091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test091"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) 0); // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: "); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test092"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations((int) '4'); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); }
public void test093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test093"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair8 = levenbergMarquardtOptimizer0.doOptimize(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000); }
public void test094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test094"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int2 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 10L); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000); }
public void test095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test095"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker26 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertNotNull(vectorialConvergenceChecker26); }
public void test096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test096"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 10); levenbergMarquardtOptimizer0.setOrthoTolerance((double) 2147483647); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 32); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); }
public void test097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test097"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); java.lang.Throwable throwable8 = null; double[] doubleArray10 = new double[] { (byte) 100 }; java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(throwable8, doubleArray10, "hi!", objArray18); double[] doubleArray20 = functionEvaluationException19.getArgument(); java.lang.Throwable throwable21 = null; double[] doubleArray23 = new double[] { (byte) 100 }; java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(throwable21, doubleArray23, "hi!", objArray31); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair34 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray20, doubleArray23, false); double[] doubleArray38 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(doubleArray38); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair41 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray23, doubleArray38, true); levenbergMarquardtOptimizer0.residualsWeights = doubleArray23; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0]"); org.junit.Assert.assertNotNull(objArray18); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0]"); org.junit.Assert.assertNotNull(objArray31); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 1.0, -1.0]"); }
public void test098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test098"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); java.lang.Throwable throwable4 = null; double[] doubleArray6 = new double[] { (byte) 100 }; java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(throwable4, doubleArray6, "hi!", objArray14); org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(doubleArray6); double[] doubleArray20 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(doubleArray20); java.lang.Throwable throwable22 = null; double[] doubleArray24 = new double[] { (byte) 100 }; java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(throwable22, doubleArray24, "hi!", objArray32); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair35 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray20, doubleArray24, true); double[] doubleArray36 = vectorialPointValuePair35.getValue(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair38 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray6, doubleArray36, true); double[] doubleArray39 = vectorialPointValuePair38.getPoint(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair40 = null; // The following exception was thrown during execution in test generation try { boolean boolean41 = simpleVectorialValueChecker1.converged((int) (byte) 0, vectorialPointValuePair38, vectorialPointValuePair40); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]"); org.junit.Assert.assertNotNull(objArray14); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]"); org.junit.Assert.assertNotNull(objArray32); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); }
public void test099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test099"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; int int26 = levenbergMarquardtOptimizer0.cols; double[] doubleArray27 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray27; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); }
public void test100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test100"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray5 = levenbergMarquardtOptimizer0.residualsWeights; double double6 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test101"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray9 = levenbergMarquardtOptimizer0.objective; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); levenbergMarquardtOptimizer10.cols = (short) 100; double double15 = levenbergMarquardtOptimizer10.cost; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer16.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); levenbergMarquardtOptimizer16.cols = (short) 100; levenbergMarquardtOptimizer16.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; int int27 = levenbergMarquardtOptimizer23.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker28 = levenbergMarquardtOptimizer23.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker29 = levenbergMarquardtOptimizer23.checker; levenbergMarquardtOptimizer16.checker = vectorialConvergenceChecker29; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker31 = levenbergMarquardtOptimizer16.getConvergenceChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker(vectorialConvergenceChecker31); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker31); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair35 = null; double[] doubleArray39 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(doubleArray39); java.lang.Throwable throwable41 = null; double[] doubleArray43 = new double[] { (byte) 100 }; java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException(throwable41, doubleArray43, "hi!", objArray51); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair54 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray43, true); double[] doubleArray55 = vectorialPointValuePair54.getPoint(); double[] doubleArray56 = vectorialPointValuePair54.getValue(); // The following exception was thrown during execution in test generation try { boolean boolean57 = vectorialConvergenceChecker31.converged(2147483647, vectorialPointValuePair35, vectorialPointValuePair54); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1000 + "'", int27 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker28); org.junit.Assert.assertNotNull(vectorialConvergenceChecker29); org.junit.Assert.assertNotNull(vectorialConvergenceChecker31); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0]"); org.junit.Assert.assertNotNull(objArray51); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0]"); }
public void test102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test102"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.rows = (byte) -1; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer12 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker13 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer12.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker13); double[] doubleArray15 = levenbergMarquardtOptimizer12.residualsWeights; levenbergMarquardtOptimizer12.cost = 0.0d; double[] doubleArray18 = levenbergMarquardtOptimizer12.targetValues; double[] doubleArray19 = levenbergMarquardtOptimizer12.residuals; int int20 = levenbergMarquardtOptimizer12.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer21 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker22 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer21.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker22); double[] doubleArray24 = levenbergMarquardtOptimizer21.residualsWeights; levenbergMarquardtOptimizer21.cost = 0.0d; double[] doubleArray27 = levenbergMarquardtOptimizer21.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker28 = levenbergMarquardtOptimizer21.getConvergenceChecker(); levenbergMarquardtOptimizer12.setConvergenceChecker(vectorialConvergenceChecker28); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker28); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertNull(doubleArray18); org.junit.Assert.assertNull(doubleArray19); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNull(doubleArray24); org.junit.Assert.assertNull(doubleArray27); org.junit.Assert.assertNotNull(vectorialConvergenceChecker28); }
public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations(52); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException(doubleArray12); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable25 = null; double[] doubleArray27 = new double[] { (byte) 100 }; java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(throwable25, doubleArray27, "hi!", objArray35); double[] doubleArray37 = functionEvaluationException36.getArgument(); java.lang.Throwable throwable38 = null; double[] doubleArray40 = new double[] { (byte) 100 }; java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException(throwable38, doubleArray40, "hi!", objArray48); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair51 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray37, doubleArray40, false); java.lang.Object[] objArray60 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException61 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray60); java.lang.IllegalArgumentException illegalArgumentException62 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException61); java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException61, "", objArray65); org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray65); java.lang.IllegalArgumentException illegalArgumentException68 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray65); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException24, doubleArray37, "", objArray65); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray12, doubleArray37); double[] doubleArray71 = vectorialPointValuePair70.getPoint(); levenbergMarquardtOptimizer0.targetValues = doubleArray71; int int73 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0]"); org.junit.Assert.assertNotNull(objArray35); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]"); org.junit.Assert.assertNotNull(objArray48); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray60); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException61); org.junit.Assert.assertNotNull(illegalArgumentException62); org.junit.Assert.assertNotNull(objArray65); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException68); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0]"); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1); }
public void test104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test104"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(10.0d); int int12 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); }
public void test105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test105"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 1000); int int11 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test106"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int5 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) (byte) 0); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); }
public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker72 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (byte) -1); double double75 = levenbergMarquardtOptimizer0.getRMS(); int int76 = levenbergMarquardtOptimizer0.getEvaluations(); double[][] doubleArray77 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertNotNull(vectorialConvergenceChecker72); org.junit.Assert.assertTrue(Double.isNaN(double75)); org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0); org.junit.Assert.assertNull(doubleArray77); }
public void test108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test108"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); int int6 = levenbergMarquardtOptimizer0.rows; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; double double11 = levenbergMarquardtOptimizer7.getChiSquare(); levenbergMarquardtOptimizer7.cols = 10; levenbergMarquardtOptimizer7.setInitialStepBoundFactor((double) (byte) 10); int int16 = levenbergMarquardtOptimizer7.getIterations(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable19 = null; double[] doubleArray21 = new double[] { (byte) 100 }; java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(throwable19, doubleArray21, "hi!", objArray29); double[] doubleArray31 = functionEvaluationException30.getArgument(); java.lang.Throwable throwable32 = null; double[] doubleArray34 = new double[] { (byte) 100 }; java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException(throwable32, doubleArray34, "hi!", objArray42); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair45 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray31, doubleArray34, false); java.lang.Object[] objArray54 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException55 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray54); java.lang.IllegalArgumentException illegalArgumentException56 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException55); java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException55, "", objArray59); org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray59); java.lang.IllegalArgumentException illegalArgumentException62 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray59); org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException18, doubleArray31, "", objArray59); levenbergMarquardtOptimizer7.residuals = doubleArray31; int int65 = levenbergMarquardtOptimizer7.getJacobianEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker66 = levenbergMarquardtOptimizer7.checker; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker66); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker68 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]"); org.junit.Assert.assertNotNull(objArray29); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0]"); org.junit.Assert.assertNotNull(objArray42); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray54); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException55); org.junit.Assert.assertNotNull(illegalArgumentException56); org.junit.Assert.assertNotNull(objArray59); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException62); org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker66); org.junit.Assert.assertNotNull(vectorialConvergenceChecker68); }
public void test109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test109"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 1000); double[][] doubleArray11 = levenbergMarquardtOptimizer0.jacobian; double double12 = levenbergMarquardtOptimizer0.getRMS(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertTrue(Double.isNaN(double12)); }
public void test110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test110"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; int int72 = levenbergMarquardtOptimizer0.rows; levenbergMarquardtOptimizer0.setMaxEvaluations(1); int int75 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray76 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0); org.junit.Assert.assertNull(doubleArray76); }
public void test111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test111"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer4 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer4.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); double[] doubleArray7 = levenbergMarquardtOptimizer4.objective; double[] doubleArray8 = null; levenbergMarquardtOptimizer4.point = doubleArray8; double[] doubleArray10 = levenbergMarquardtOptimizer4.residualsWeights; int int11 = levenbergMarquardtOptimizer4.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer12 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker13 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer12.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker13); double[] doubleArray15 = levenbergMarquardtOptimizer12.residualsWeights; levenbergMarquardtOptimizer12.cols = 52; levenbergMarquardtOptimizer12.incrementIterationsCounter(); double[] doubleArray23 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray28 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray29 = new double[][] { doubleArray23, doubleArray28 }; levenbergMarquardtOptimizer12.jacobian = doubleArray29; levenbergMarquardtOptimizer4.jacobian = doubleArray29; java.text.ParseException parseException32 = org.apache.commons.math.MathRuntimeException.createParseException((int) (byte) 1, "Convergence failed", (java.lang.Object[]) doubleArray29); java.lang.ArithmeticException arithmeticException33 = org.apache.commons.math.MathRuntimeException.createArithmeticException("hi!", (java.lang.Object[]) doubleArray29); org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException34 = new org.apache.commons.math.linear.InvalidMatrixException("Convergence failed", (java.lang.Object[]) doubleArray29); java.lang.String str35 = invalidMatrixException34.getPattern(); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertNotNull(parseException32); org.junit.Assert.assertNotNull(arithmeticException33); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Convergence failed" + "'", str35, "Convergence failed"); }
public void test112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test112"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getEvaluations(); // The following exception was thrown during execution in test generation try { double[] doubleArray5 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test113"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.incrementIterationsCounter(); double[] doubleArray12 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.rows = 0; org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100); org.junit.Assert.assertNull(doubleArray12); }
public void test114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test114"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray8 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 1000); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker11 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNotNull(vectorialConvergenceChecker11); }
public void test115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test115"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); int int8 = levenbergMarquardtOptimizer0.cols; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52); }
public void test116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test116"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); double[] doubleArray13 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray18 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray19 = new double[][] { doubleArray13, doubleArray18 }; levenbergMarquardtOptimizer2.jacobian = doubleArray19; java.lang.IllegalStateException illegalStateException21 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("Convergence failed", (java.lang.Object[]) doubleArray19); org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException: ", (java.lang.Object[]) doubleArray19); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); levenbergMarquardtOptimizer23.cols = (short) 100; levenbergMarquardtOptimizer23.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer23.cols = (short) 100; int int32 = levenbergMarquardtOptimizer23.getEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer33 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker34 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer33.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker34); double[] doubleArray36 = levenbergMarquardtOptimizer33.residualsWeights; int int37 = levenbergMarquardtOptimizer33.getMaxIterations(); levenbergMarquardtOptimizer33.setMaxIterations(100); levenbergMarquardtOptimizer33.setParRelativeTolerance((-1.0d)); double[] doubleArray45 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException(doubleArray45); levenbergMarquardtOptimizer33.residuals = doubleArray45; levenbergMarquardtOptimizer23.objective = doubleArray45; org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray51 = convergenceException50.getSuppressed(); org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray55 = convergenceException54.getSuppressed(); org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) throwableArray55); org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException50, "", (java.lang.Object[]) throwableArray55); org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) convergenceException22, doubleArray45, "org.apache.commons.math.MathRuntimeException$8: org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) throwableArray55); java.lang.String str59 = convergenceException22.getPattern(); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertNotNull(illegalStateException21); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertNull(doubleArray36); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1000 + "'", int37 == 1000); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(throwableArray51); org.junit.Assert.assertNotNull(throwableArray55); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.apache.commons.math.MathRuntimeException: " + "'", str59, "org.apache.commons.math.MathRuntimeException: "); }
public void test117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test117"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) '4'); int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test118"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray10 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(doubleArray10); java.lang.Throwable throwable12 = null; double[] doubleArray14 = new double[] { (byte) 100 }; java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(throwable12, doubleArray14, "hi!", objArray22); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair25 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray10, doubleArray14, true); java.lang.Throwable throwable26 = null; double[] doubleArray28 = new double[] { (byte) 100 }; java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(throwable26, doubleArray28, "hi!", objArray36); double[] doubleArray38 = functionEvaluationException37.getArgument(); java.lang.Throwable throwable39 = null; double[] doubleArray41 = new double[] { (byte) 100 }; java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException(throwable39, doubleArray41, "hi!", objArray49); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair52 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray38, doubleArray41, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair54 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray10, doubleArray41, true); java.lang.Throwable throwable55 = null; double[] doubleArray57 = new double[] { (byte) 100 }; java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(throwable55, doubleArray57, "hi!", objArray65); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair67 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray57); double[] doubleArray74 = new double[] { 0L, 1, 1L, 100.0f, (-1), '#' }; java.lang.Throwable throwable77 = null; double[] doubleArray79 = new double[] { (byte) 100 }; java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(throwable77, doubleArray79, "hi!", objArray87); org.apache.commons.math.MathRuntimeException mathRuntimeException89 = new org.apache.commons.math.MathRuntimeException(throwable77); java.lang.String str90 = mathRuntimeException89.getPattern(); java.lang.String str91 = mathRuntimeException89.getPattern(); java.lang.Object[] objArray92 = mathRuntimeException89.getArguments(); java.lang.NullPointerException nullPointerException93 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray92); org.apache.commons.math.FunctionEvaluationException functionEvaluationException94 = new org.apache.commons.math.FunctionEvaluationException(doubleArray74, "org.apache.commons.math.MathRuntimeException$2: ", objArray92); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair96 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray57, doubleArray74, true); levenbergMarquardtOptimizer0.residualsWeights = doubleArray57; org.apache.commons.math.FunctionEvaluationException functionEvaluationException98 = new org.apache.commons.math.FunctionEvaluationException(doubleArray57); double[] doubleArray99 = functionEvaluationException98.getArgument(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]"); org.junit.Assert.assertNotNull(objArray22); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]"); org.junit.Assert.assertNotNull(objArray36); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(objArray49); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0]"); org.junit.Assert.assertNotNull(objArray65); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 1.0, 1.0, 100.0, -1.0, 35.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); org.junit.Assert.assertNotNull(objArray87); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, ""); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, ""); org.junit.Assert.assertNotNull(objArray92); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]"); org.junit.Assert.assertNotNull(nullPointerException93); org.junit.Assert.assertNotNull(doubleArray99); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[100.0]"); }
public void test119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test119"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); int int9 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable12 = null; double[] doubleArray14 = new double[] { (byte) 100 }; java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(throwable12, doubleArray14, "hi!", objArray22); double[] doubleArray24 = functionEvaluationException23.getArgument(); java.lang.Throwable throwable25 = null; double[] doubleArray27 = new double[] { (byte) 100 }; java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(throwable25, doubleArray27, "hi!", objArray35); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair38 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray24, doubleArray27, false); java.lang.Object[] objArray47 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException48 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray47); java.lang.IllegalArgumentException illegalArgumentException49 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException48); java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException48, "", objArray52); org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray52); java.lang.IllegalArgumentException illegalArgumentException55 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray52); org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException11, doubleArray24, "", objArray52); levenbergMarquardtOptimizer0.residuals = doubleArray24; int int58 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker59 = levenbergMarquardtOptimizer0.checker; double double60 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]"); org.junit.Assert.assertNotNull(objArray22); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0]"); org.junit.Assert.assertNotNull(objArray35); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray47); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException48); org.junit.Assert.assertNotNull(illegalArgumentException49); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException55); org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker59); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d); }
public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray21 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException(doubleArray21); java.lang.Throwable throwable23 = null; double[] doubleArray25 = new double[] { (byte) 100 }; java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(throwable23, doubleArray25, "hi!", objArray33); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair36 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray21, doubleArray25, true); double[] doubleArray37 = vectorialPointValuePair36.getPoint(); double[] doubleArray41 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(doubleArray41); java.lang.Throwable throwable43 = null; double[] doubleArray45 = new double[] { (byte) 100 }; java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(throwable43, doubleArray45, "hi!", objArray53); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair56 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray45, true); java.lang.Throwable throwable57 = null; double[] doubleArray59 = new double[] { (byte) 100 }; java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException(throwable57, doubleArray59, "hi!", objArray67); double[] doubleArray69 = functionEvaluationException68.getArgument(); java.lang.Throwable throwable70 = null; double[] doubleArray72 = new double[] { (byte) 100 }; java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException(throwable70, doubleArray72, "hi!", objArray80); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair83 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray69, doubleArray72, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair85 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray72, true); boolean boolean86 = simpleVectorialValueChecker15.converged(10, vectorialPointValuePair36, vectorialPointValuePair85); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0]"); org.junit.Assert.assertNotNull(objArray33); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]"); org.junit.Assert.assertNotNull(objArray53); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0]"); org.junit.Assert.assertNotNull(objArray67); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); org.junit.Assert.assertNotNull(objArray80); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true); }
public void test121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test121"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 1000); double[] doubleArray11 = levenbergMarquardtOptimizer0.point; int int12 = levenbergMarquardtOptimizer0.rows; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); }
public void test122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test122"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getMaxEvaluations(); levenbergMarquardtOptimizer0.cost = 100L; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); }
public void test123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test123"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; int int72 = levenbergMarquardtOptimizer0.rows; int int73 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.rows = 1000; int int76 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0); org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0); }
public void test124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test124"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0d); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 1.0f); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); double[] doubleArray13 = levenbergMarquardtOptimizer10.residualsWeights; levenbergMarquardtOptimizer10.cost = 0.0d; double[] doubleArray16 = levenbergMarquardtOptimizer10.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker17 = levenbergMarquardtOptimizer10.getConvergenceChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker17); double double19 = levenbergMarquardtOptimizer0.getRMS(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertNull(doubleArray16); org.junit.Assert.assertNotNull(vectorialConvergenceChecker17); org.junit.Assert.assertTrue(Double.isNaN(double19)); }
public void test125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test125"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); }
public void test126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test126"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(10.0d); double[] doubleArray12 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxIterations(1000); int int15 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); }
public void test127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test127"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.cost = '#'; double double13 = levenbergMarquardtOptimizer0.getRMS(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue(Double.isNaN(double13)); }
public void test128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test128"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); int int10 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) -1); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test129"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; double[] doubleArray8 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray8); }
public void test130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test130"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int2 = levenbergMarquardtOptimizer0.getIterations(); // The following exception was thrown during execution in test generation try { double[] doubleArray3 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test131"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; java.lang.Object[] objArray15 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException16 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray15); org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15); java.lang.Throwable throwable18 = null; double[] doubleArray20 = new double[] { (byte) 100 }; java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(throwable18, doubleArray20, "hi!", objArray28); double[] doubleArray30 = functionEvaluationException29.getArgument(); java.lang.Throwable throwable31 = null; double[] doubleArray33 = new double[] { (byte) 100 }; java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(throwable31, doubleArray33, "hi!", objArray41); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair44 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray30, doubleArray33, false); java.lang.Throwable throwable49 = null; double[] doubleArray51 = new double[] { (byte) 100 }; java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(throwable49, doubleArray51, "hi!", objArray59); org.apache.commons.math.MathRuntimeException mathRuntimeException61 = new org.apache.commons.math.MathRuntimeException(throwable49); java.lang.String str62 = mathRuntimeException61.getPattern(); java.lang.String str63 = mathRuntimeException61.getPattern(); java.lang.Object[] objArray64 = mathRuntimeException61.getArguments(); java.lang.NullPointerException nullPointerException65 = org.apache.commons.math.MathRuntimeException.createNullPointerException("org.apache.commons.math.MathRuntimeException$2: ", objArray64); org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException66 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray64); org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) mathException17, doubleArray33, "Convergence failed", objArray64); levenbergMarquardtOptimizer0.point = doubleArray33; double[] doubleArray69 = levenbergMarquardtOptimizer0.objective; org.junit.Assert.assertNotNull(objArray15); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException16); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]"); org.junit.Assert.assertNotNull(objArray28); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]"); org.junit.Assert.assertNotNull(objArray41); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]"); org.junit.Assert.assertNotNull(objArray59); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, ""); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, ""); org.junit.Assert.assertNotNull(objArray64); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]"); org.junit.Assert.assertNotNull(nullPointerException65); org.junit.Assert.assertNull(doubleArray69); }
public void test132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test132"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); int int9 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable12 = null; double[] doubleArray14 = new double[] { (byte) 100 }; java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(throwable12, doubleArray14, "hi!", objArray22); double[] doubleArray24 = functionEvaluationException23.getArgument(); java.lang.Throwable throwable25 = null; double[] doubleArray27 = new double[] { (byte) 100 }; java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(throwable25, doubleArray27, "hi!", objArray35); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair38 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray24, doubleArray27, false); java.lang.Object[] objArray47 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException48 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray47); java.lang.IllegalArgumentException illegalArgumentException49 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException48); java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException48, "", objArray52); org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray52); java.lang.IllegalArgumentException illegalArgumentException55 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray52); org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException11, doubleArray24, "", objArray52); levenbergMarquardtOptimizer0.residuals = doubleArray24; int int58 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker59 = levenbergMarquardtOptimizer0.checker; int int60 = levenbergMarquardtOptimizer0.cols; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]"); org.junit.Assert.assertNotNull(objArray22); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0]"); org.junit.Assert.assertNotNull(objArray35); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray47); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException48); org.junit.Assert.assertNotNull(illegalArgumentException49); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException55); org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker59); org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10); }
public void test133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test133"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker((double) 32, (double) (short) -1); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); levenbergMarquardtOptimizer0.incrementIterationsCounter(); }
public void test134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test134"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double double71 = levenbergMarquardtOptimizer0.getChiSquare(); double[] doubleArray72 = levenbergMarquardtOptimizer0.targetValues; levenbergMarquardtOptimizer0.rows = 32; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); }
public void test135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test135"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations(52); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException(doubleArray12); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable25 = null; double[] doubleArray27 = new double[] { (byte) 100 }; java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(throwable25, doubleArray27, "hi!", objArray35); double[] doubleArray37 = functionEvaluationException36.getArgument(); java.lang.Throwable throwable38 = null; double[] doubleArray40 = new double[] { (byte) 100 }; java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException(throwable38, doubleArray40, "hi!", objArray48); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair51 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray37, doubleArray40, false); java.lang.Object[] objArray60 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException61 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray60); java.lang.IllegalArgumentException illegalArgumentException62 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException61); java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException61, "", objArray65); org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray65); java.lang.IllegalArgumentException illegalArgumentException68 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray65); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException24, doubleArray37, "", objArray65); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray12, doubleArray37); double[] doubleArray71 = vectorialPointValuePair70.getPoint(); levenbergMarquardtOptimizer0.targetValues = doubleArray71; org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException(doubleArray71); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0]"); org.junit.Assert.assertNotNull(objArray35); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]"); org.junit.Assert.assertNotNull(objArray48); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray60); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException61); org.junit.Assert.assertNotNull(illegalArgumentException62); org.junit.Assert.assertNotNull(objArray65); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException68); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0]"); }
public void test136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test136"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.cols = '#'; int int10 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test137"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; levenbergMarquardtOptimizer0.setParRelativeTolerance(Double.NaN); int int73 = levenbergMarquardtOptimizer0.rows; levenbergMarquardtOptimizer0.setMaxEvaluations((int) '4'); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0); }
public void test138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test138"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations(0); double[] doubleArray13 = levenbergMarquardtOptimizer0.residuals; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNull(doubleArray13); }
public void test139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test139"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double double10 = levenbergMarquardtOptimizer0.cost; double[] doubleArray11 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNull(doubleArray11); }
public void test140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test140"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; double[] doubleArray10 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray10); }
public void test141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test141"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 10); double double7 = levenbergMarquardtOptimizer0.getChiSquare(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); }
public void test142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test142"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int5 = levenbergMarquardtOptimizer0.getIterations(); double double6 = levenbergMarquardtOptimizer0.getChiSquare(); double[][] doubleArray7 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNull(doubleArray7); }
public void test143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test143"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer11 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker12 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer11.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker12); double[] doubleArray14 = levenbergMarquardtOptimizer11.residualsWeights; levenbergMarquardtOptimizer11.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker17 = levenbergMarquardtOptimizer11.getConvergenceChecker(); levenbergMarquardtOptimizer11.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker20 = levenbergMarquardtOptimizer11.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer21 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker22 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer21.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker22); double[] doubleArray24 = levenbergMarquardtOptimizer21.residualsWeights; levenbergMarquardtOptimizer21.cols = 52; levenbergMarquardtOptimizer21.incrementIterationsCounter(); double[] doubleArray32 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray37 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray38 = new double[][] { doubleArray32, doubleArray37 }; levenbergMarquardtOptimizer21.jacobian = doubleArray38; levenbergMarquardtOptimizer11.jacobian = doubleArray38; levenbergMarquardtOptimizer0.jacobian = doubleArray38; int int42 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray43 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray43; int int45 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNotNull(vectorialConvergenceChecker17); org.junit.Assert.assertNotNull(vectorialConvergenceChecker20); org.junit.Assert.assertNull(doubleArray24); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647); }
public void test144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test144"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.residualsWeights; levenbergMarquardtOptimizer6.cols = 52; int int12 = levenbergMarquardtOptimizer6.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer6.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cost = 0.0d; double[] doubleArray20 = levenbergMarquardtOptimizer14.targetValues; double[] doubleArray21 = levenbergMarquardtOptimizer14.residuals; int int22 = levenbergMarquardtOptimizer14.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cost = 0.0d; double[] doubleArray29 = levenbergMarquardtOptimizer23.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker30 = levenbergMarquardtOptimizer23.getConvergenceChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker(vectorialConvergenceChecker30); levenbergMarquardtOptimizer6.checker = vectorialConvergenceChecker30; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker30); double[] doubleArray37 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(doubleArray37); java.lang.Throwable throwable39 = null; double[] doubleArray41 = new double[] { (byte) 100 }; java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException(throwable39, doubleArray41, "hi!", objArray49); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair52 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray37, doubleArray41, true); java.lang.Throwable throwable53 = null; double[] doubleArray55 = new double[] { (byte) 100 }; java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException(throwable53, doubleArray55, "hi!", objArray63); double[] doubleArray65 = functionEvaluationException64.getArgument(); java.lang.Throwable throwable66 = null; double[] doubleArray68 = new double[] { (byte) 100 }; java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException(throwable66, doubleArray68, "hi!", objArray76); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair79 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray65, doubleArray68, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair81 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray37, doubleArray68, true); java.lang.Throwable throwable82 = null; double[] doubleArray84 = new double[] { (byte) 100 }; java.lang.Object[] objArray92 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException(throwable82, doubleArray84, "hi!", objArray92); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair94 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray68, doubleArray84); double[] doubleArray95 = vectorialPointValuePair94.getPointRef(); double[] doubleArray96 = vectorialPointValuePair94.getPoint(); double[] doubleArray97 = vectorialPointValuePair94.getPointRef(); double[] doubleArray98 = vectorialPointValuePair94.getPointRef(); levenbergMarquardtOptimizer0.residuals = doubleArray98; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertNotNull(vectorialConvergenceChecker30); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(objArray49); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0]"); org.junit.Assert.assertNotNull(objArray63); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray68); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0]"); org.junit.Assert.assertNotNull(objArray76); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray84); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0]"); org.junit.Assert.assertNotNull(objArray92); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray95); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray96); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray97); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray98); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[100.0]"); }
public void test145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test145"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 1L); int int7 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (byte) 10); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (short) 100); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test146"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); int int9 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable12 = null; double[] doubleArray14 = new double[] { (byte) 100 }; java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(throwable12, doubleArray14, "hi!", objArray22); double[] doubleArray24 = functionEvaluationException23.getArgument(); java.lang.Throwable throwable25 = null; double[] doubleArray27 = new double[] { (byte) 100 }; java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(throwable25, doubleArray27, "hi!", objArray35); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair38 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray24, doubleArray27, false); java.lang.Object[] objArray47 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException48 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray47); java.lang.IllegalArgumentException illegalArgumentException49 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException48); java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException48, "", objArray52); org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray52); java.lang.IllegalArgumentException illegalArgumentException55 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray52); org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException11, doubleArray24, "", objArray52); levenbergMarquardtOptimizer0.residuals = doubleArray24; int int58 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]"); org.junit.Assert.assertNotNull(objArray22); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0]"); org.junit.Assert.assertNotNull(objArray35); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray47); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException48); org.junit.Assert.assertNotNull(illegalArgumentException49); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException55); org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1000 + "'", int58 == 1000); }
public void test147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test147"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); double double5 = levenbergMarquardtOptimizer0.getRMS(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue(Double.isNaN(double5)); }
public void test148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test148"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker4 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setMaxEvaluations(1); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); levenbergMarquardtOptimizer7.cols = (short) 100; double double12 = levenbergMarquardtOptimizer7.cost; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer13 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker14 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer13.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker14); levenbergMarquardtOptimizer13.cols = (short) 100; levenbergMarquardtOptimizer13.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer20 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker21 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer20.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker21); double[] doubleArray23 = levenbergMarquardtOptimizer20.residualsWeights; int int24 = levenbergMarquardtOptimizer20.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker25 = levenbergMarquardtOptimizer20.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker26 = levenbergMarquardtOptimizer20.checker; levenbergMarquardtOptimizer13.checker = vectorialConvergenceChecker26; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker28 = levenbergMarquardtOptimizer13.getConvergenceChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker(vectorialConvergenceChecker28); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker28; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker4); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNull(doubleArray23); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1000 + "'", int24 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker25); org.junit.Assert.assertNotNull(vectorialConvergenceChecker26); org.junit.Assert.assertNotNull(vectorialConvergenceChecker28); }
public void test149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test149"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int2 = levenbergMarquardtOptimizer0.getIterations(); double double3 = levenbergMarquardtOptimizer0.getChiSquare(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test150"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; levenbergMarquardtOptimizer8.cols = 52; levenbergMarquardtOptimizer8.incrementIterationsCounter(); double[] doubleArray19 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray24 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray25 = new double[][] { doubleArray19, doubleArray24 }; levenbergMarquardtOptimizer8.jacobian = doubleArray25; levenbergMarquardtOptimizer0.jacobian = doubleArray25; int int28 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1000 + "'", int28 == 1000); }
public void test151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test151"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; double[] doubleArray8 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray8); }
public void test152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test152"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; levenbergMarquardtOptimizer8.cost = 0.0d; double[] doubleArray14 = levenbergMarquardtOptimizer8.targetValues; double[] doubleArray15 = levenbergMarquardtOptimizer8.residuals; int int16 = levenbergMarquardtOptimizer8.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer17 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker18 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer17.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker18); double[] doubleArray20 = levenbergMarquardtOptimizer17.residualsWeights; levenbergMarquardtOptimizer17.cost = 0.0d; double[] doubleArray23 = levenbergMarquardtOptimizer17.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker24 = levenbergMarquardtOptimizer17.getConvergenceChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker(vectorialConvergenceChecker24); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker24; java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); double[] doubleArray57 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(doubleArray57); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair60 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray57, true); levenbergMarquardtOptimizer0.residualsWeights = doubleArray42; int int62 = levenbergMarquardtOptimizer0.cols; java.lang.Throwable throwable63 = null; double[] doubleArray65 = new double[] { (byte) 100 }; java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(throwable63, doubleArray65, "hi!", objArray73); java.lang.Throwable[] throwableArray75 = functionEvaluationException74.getSuppressed(); double[] doubleArray76 = functionEvaluationException74.getArgument(); levenbergMarquardtOptimizer0.targetValues = doubleArray76; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray23); org.junit.Assert.assertNotNull(vectorialConvergenceChecker24); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0]"); org.junit.Assert.assertNotNull(objArray73); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(throwableArray75); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0]"); }
public void test153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test153"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker72 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (byte) -1); double double75 = levenbergMarquardtOptimizer0.getRMS(); int int76 = levenbergMarquardtOptimizer0.getEvaluations(); int int77 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = levenbergMarquardtOptimizer0.doOptimize(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertNotNull(vectorialConvergenceChecker72); org.junit.Assert.assertTrue(Double.isNaN(double75)); org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0); org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0); }
public void test154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test154"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = ' '; int int8 = levenbergMarquardtOptimizer0.rows; double[][] doubleArray9 = levenbergMarquardtOptimizer0.jacobian; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(doubleArray9); }
public void test155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test155"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); double[] doubleArray13 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray18 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray19 = new double[][] { doubleArray13, doubleArray18 }; levenbergMarquardtOptimizer2.jacobian = doubleArray19; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) doubleArray19); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray19); }
public void test156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test156"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; int int11 = levenbergMarquardtOptimizer7.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer7.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer7.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker13; levenbergMarquardtOptimizer0.setMaxEvaluations(10); levenbergMarquardtOptimizer0.cols = (short) 0; org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); }
public void test157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test157"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); double double9 = levenbergMarquardtOptimizer0.getChiSquare(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNull(doubleArray10); }
public void test158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test158"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[][] doubleArray8 = levenbergMarquardtOptimizer0.jacobian; // The following exception was thrown during execution in test generation try { double[] doubleArray9 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 52 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertNull(doubleArray8); }
public void test159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test159"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; int int72 = levenbergMarquardtOptimizer0.rows; int int73 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.rows = 1000; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker76 = null; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker76); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0); }
public void test160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test160"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; levenbergMarquardtOptimizer8.cost = 0.0d; double[] doubleArray14 = levenbergMarquardtOptimizer8.targetValues; double[] doubleArray15 = levenbergMarquardtOptimizer8.residuals; int int16 = levenbergMarquardtOptimizer8.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer17 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker18 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer17.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker18); double[] doubleArray20 = levenbergMarquardtOptimizer17.residualsWeights; levenbergMarquardtOptimizer17.cost = 0.0d; double[] doubleArray23 = levenbergMarquardtOptimizer17.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker24 = levenbergMarquardtOptimizer17.getConvergenceChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker(vectorialConvergenceChecker24); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker24; double[] doubleArray27 = levenbergMarquardtOptimizer0.objective; // The following exception was thrown during execution in test generation try { double[] doubleArray28 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 52 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray23); org.junit.Assert.assertNotNull(vectorialConvergenceChecker24); org.junit.Assert.assertNull(doubleArray27); }
public void test161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test161"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; int int26 = levenbergMarquardtOptimizer0.cols; int int27 = levenbergMarquardtOptimizer0.getIterations(); // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.updateResidualsAndCost(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); }
public void test162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test162"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; levenbergMarquardtOptimizer0.setMaxEvaluations(1); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); }
public void test163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test163"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); levenbergMarquardtOptimizer0.cost = '4'; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test164"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray5 = levenbergMarquardtOptimizer0.objective; org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray5); }
public void test165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test165"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction6 = null; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; levenbergMarquardtOptimizer7.cols = 52; levenbergMarquardtOptimizer7.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker14 = levenbergMarquardtOptimizer7.checker; levenbergMarquardtOptimizer7.cost = 1.0d; levenbergMarquardtOptimizer7.rows = '#'; java.lang.Throwable throwable19 = null; double[] doubleArray21 = new double[] { (byte) 100 }; java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(throwable19, doubleArray21, "hi!", objArray29); double[] doubleArray31 = functionEvaluationException30.getArgument(); java.lang.Object[] objArray40 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException41 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray40); java.lang.IllegalArgumentException illegalArgumentException42 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException41); java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException41, "", objArray45); org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray45); java.util.ConcurrentModificationException concurrentModificationException48 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray45); org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException30, "", objArray45); java.lang.Throwable throwable51 = null; double[] doubleArray53 = new double[] { (byte) 100 }; java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException(throwable51, doubleArray53, "hi!", objArray61); org.apache.commons.math.MathRuntimeException mathRuntimeException63 = new org.apache.commons.math.MathRuntimeException(throwable51); java.lang.String str64 = mathRuntimeException63.getPattern(); java.lang.String str65 = mathRuntimeException63.getPattern(); org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathRuntimeException63); java.lang.Object[] objArray67 = mathRuntimeException63.getArguments(); org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException30, "hi!", objArray67); double[] doubleArray69 = functionEvaluationException30.getArgument(); levenbergMarquardtOptimizer7.residuals = doubleArray69; double[] doubleArray71 = null; double[] doubleArray75 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(doubleArray75); java.lang.Throwable throwable77 = null; double[] doubleArray79 = new double[] { (byte) 100 }; java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(throwable77, doubleArray79, "hi!", objArray87); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair90 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray75, doubleArray79, true); double[] doubleArray91 = vectorialPointValuePair90.getPoint(); double[] doubleArray92 = vectorialPointValuePair90.getValue(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException(doubleArray92); // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair94 = levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction6, doubleArray69, doubleArray71, doubleArray92); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNotNull(vectorialConvergenceChecker14); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]"); org.junit.Assert.assertNotNull(objArray29); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(objArray40); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException41); org.junit.Assert.assertNotNull(illegalArgumentException42); org.junit.Assert.assertNotNull(objArray45); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException48); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]"); org.junit.Assert.assertNotNull(objArray61); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, ""); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, ""); org.junit.Assert.assertNotNull(objArray67); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]"); org.junit.Assert.assertNotNull(doubleArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); org.junit.Assert.assertNotNull(objArray87); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray91); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray92); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0]"); }
public void test166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test166"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; double double26 = levenbergMarquardtOptimizer0.getRMS(); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 1000); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker29 = levenbergMarquardtOptimizer0.checker; int int30 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue(Double.isNaN(double26)); org.junit.Assert.assertNotNull(vectorialConvergenceChecker29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); }
public void test167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test167"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; int int2 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray3 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000); org.junit.Assert.assertNull(doubleArray3); }
public void test168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test168"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.setMaxEvaluations(0); levenbergMarquardtOptimizer0.rows = 0; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); }
public void test169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test169"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0d); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 1.0f); int int10 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations(0); double[] doubleArray16 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException(doubleArray16); java.lang.Throwable throwable18 = null; double[] doubleArray20 = new double[] { (byte) 100 }; java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(throwable18, doubleArray20, "hi!", objArray28); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair31 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray16, doubleArray20, true); java.lang.Throwable throwable32 = null; double[] doubleArray34 = new double[] { (byte) 100 }; java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException(throwable32, doubleArray34, "hi!", objArray42); double[] doubleArray44 = functionEvaluationException43.getArgument(); java.lang.Throwable throwable45 = null; double[] doubleArray47 = new double[] { (byte) 100 }; java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(throwable45, doubleArray47, "hi!", objArray55); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair58 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray47, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair60 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray16, doubleArray47, true); java.lang.Throwable throwable61 = null; double[] doubleArray63 = new double[] { (byte) 100 }; java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException(throwable61, doubleArray63, "hi!", objArray71); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair73 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray47, doubleArray63); double[] doubleArray74 = vectorialPointValuePair73.getValueRef(); double[] doubleArray78 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException(doubleArray78); java.lang.Throwable throwable80 = null; double[] doubleArray82 = new double[] { (byte) 100 }; java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException(throwable80, doubleArray82, "hi!", objArray90); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair93 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray78, doubleArray82, true); double[] doubleArray94 = vectorialPointValuePair93.getValue(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair95 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray74, doubleArray94); levenbergMarquardtOptimizer0.point = doubleArray94; levenbergMarquardtOptimizer0.setMaxEvaluations(1000); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]"); org.junit.Assert.assertNotNull(objArray28); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0]"); org.junit.Assert.assertNotNull(objArray42); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]"); org.junit.Assert.assertNotNull(objArray55); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0]"); org.junit.Assert.assertNotNull(objArray71); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0]"); org.junit.Assert.assertNotNull(objArray90); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray94); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[100.0]"); }
public void test170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test170"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); double[] doubleArray27 = vectorialPointValuePair26.getPoint(); double[] doubleArray31 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(doubleArray31); java.lang.Throwable throwable33 = null; double[] doubleArray35 = new double[] { (byte) 100 }; java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(throwable33, doubleArray35, "hi!", objArray43); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair46 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray31, doubleArray35, true); java.lang.Throwable throwable47 = null; double[] doubleArray49 = new double[] { (byte) 100 }; java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(throwable47, doubleArray49, "hi!", objArray57); double[] doubleArray59 = functionEvaluationException58.getArgument(); java.lang.Throwable throwable60 = null; double[] doubleArray62 = new double[] { (byte) 100 }; java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException(throwable60, doubleArray62, "hi!", objArray70); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair73 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray59, doubleArray62, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair75 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray31, doubleArray62, true); boolean boolean76 = simpleVectorialValueChecker5.converged(10, vectorialPointValuePair26, vectorialPointValuePair75); java.lang.Class<?> wildcardClass77 = vectorialPointValuePair26.getClass(); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]"); org.junit.Assert.assertNotNull(objArray43); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]"); org.junit.Assert.assertNotNull(objArray57); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]"); org.junit.Assert.assertNotNull(objArray70); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true); org.junit.Assert.assertNotNull(wildcardClass77); }
public void test171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test171"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; double double9 = levenbergMarquardtOptimizer0.getChiSquare(); int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test172"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (byte) 1); int int12 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray13 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNull(doubleArray13); }
public void test173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test173"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker11 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNotNull(vectorialConvergenceChecker11); }
public void test174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test174"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.residualsWeights; levenbergMarquardtOptimizer6.cols = 52; int int12 = levenbergMarquardtOptimizer6.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer6.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cost = 0.0d; double[] doubleArray20 = levenbergMarquardtOptimizer14.targetValues; double[] doubleArray21 = levenbergMarquardtOptimizer14.residuals; int int22 = levenbergMarquardtOptimizer14.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cost = 0.0d; double[] doubleArray29 = levenbergMarquardtOptimizer23.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker30 = levenbergMarquardtOptimizer23.getConvergenceChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker(vectorialConvergenceChecker30); levenbergMarquardtOptimizer6.checker = vectorialConvergenceChecker30; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker30); int int34 = levenbergMarquardtOptimizer0.getMaxEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) 100); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertNotNull(vectorialConvergenceChecker30); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647); }
public void test175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test175"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0d); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 'a'); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); }
public void test176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test176"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray4 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxIterations((int) '4'); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; levenbergMarquardtOptimizer7.cost = 0.0d; double[] doubleArray13 = levenbergMarquardtOptimizer7.targetValues; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int15 = levenbergMarquardtOptimizer14.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer16.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); double[] doubleArray19 = levenbergMarquardtOptimizer16.residualsWeights; levenbergMarquardtOptimizer16.cols = 52; levenbergMarquardtOptimizer16.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker23 = levenbergMarquardtOptimizer16.checker; levenbergMarquardtOptimizer14.checker = vectorialConvergenceChecker23; levenbergMarquardtOptimizer7.checker = vectorialConvergenceChecker23; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker23); int int27 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray4); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647); org.junit.Assert.assertNull(doubleArray19); org.junit.Assert.assertNotNull(vectorialConvergenceChecker23); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647); }
public void test177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test177"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray15 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(doubleArray15); java.lang.Throwable throwable17 = null; double[] doubleArray19 = new double[] { (byte) 100 }; java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(throwable17, doubleArray19, "hi!", objArray27); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair30 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray15, doubleArray19, true); double[] doubleArray31 = vectorialPointValuePair30.getValue(); double[] doubleArray32 = vectorialPointValuePair30.getPoint(); double[] doubleArray36 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(doubleArray36); java.lang.Throwable throwable38 = null; double[] doubleArray40 = new double[] { (byte) 100 }; java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException(throwable38, doubleArray40, "hi!", objArray48); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair51 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray36, doubleArray40, true); java.lang.Throwable throwable52 = null; double[] doubleArray54 = new double[] { (byte) 100 }; java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException(throwable52, doubleArray54, "hi!", objArray62); double[] doubleArray64 = functionEvaluationException63.getArgument(); java.lang.Throwable throwable65 = null; double[] doubleArray67 = new double[] { (byte) 100 }; java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(throwable65, doubleArray67, "hi!", objArray75); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray64, doubleArray67, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair80 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray36, doubleArray67, true); java.lang.Throwable throwable81 = null; double[] doubleArray83 = new double[] { (byte) 100 }; java.lang.Object[] objArray91 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(throwable81, doubleArray83, "hi!", objArray91); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair93 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray67, doubleArray83); double[] doubleArray94 = vectorialPointValuePair93.getPointRef(); double[] doubleArray95 = vectorialPointValuePair93.getPoint(); boolean boolean96 = vectorialConvergenceChecker10.converged((int) (byte) 10, vectorialPointValuePair30, vectorialPointValuePair93); double[] doubleArray97 = vectorialPointValuePair93.getValueRef(); double[] doubleArray98 = vectorialPointValuePair93.getPointRef(); double[] doubleArray99 = vectorialPointValuePair93.getPoint(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]"); org.junit.Assert.assertNotNull(objArray27); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]"); org.junit.Assert.assertNotNull(objArray48); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0]"); org.junit.Assert.assertNotNull(objArray62); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0]"); org.junit.Assert.assertNotNull(objArray75); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray83); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0]"); org.junit.Assert.assertNotNull(objArray91); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray94); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray95); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[100.0]"); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true); org.junit.Assert.assertNotNull(doubleArray97); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray98); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray99); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[100.0]"); }
public void test178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test178"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double double9 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 1); levenbergMarquardtOptimizer0.setOrthoTolerance((double) 52); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test179"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[][] doubleArray8 = levenbergMarquardtOptimizer0.jacobian; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); levenbergMarquardtOptimizer0.residualsWeights = doubleArray13; double double16 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); }
public void test180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test180"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray14 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(doubleArray14); java.lang.Throwable throwable16 = null; double[] doubleArray18 = new double[] { (byte) 100 }; java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(throwable16, doubleArray18, "hi!", objArray26); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair29 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray14, doubleArray18, true); double[] doubleArray30 = vectorialPointValuePair29.getValue(); double[] doubleArray31 = vectorialPointValuePair29.getPoint(); double[] doubleArray35 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(doubleArray35); java.lang.Throwable throwable37 = null; double[] doubleArray39 = new double[] { (byte) 100 }; java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException(throwable37, doubleArray39, "hi!", objArray47); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair50 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray35, doubleArray39, true); java.lang.Throwable throwable51 = null; double[] doubleArray53 = new double[] { (byte) 100 }; java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException(throwable51, doubleArray53, "hi!", objArray61); double[] doubleArray63 = functionEvaluationException62.getArgument(); java.lang.Throwable throwable64 = null; double[] doubleArray66 = new double[] { (byte) 100 }; java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException(throwable64, doubleArray66, "hi!", objArray74); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair77 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray63, doubleArray66, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair79 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray35, doubleArray66, true); java.lang.Throwable throwable80 = null; double[] doubleArray82 = new double[] { (byte) 100 }; java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException(throwable80, doubleArray82, "hi!", objArray90); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair92 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray66, doubleArray82); double[] doubleArray93 = vectorialPointValuePair92.getPointRef(); double[] doubleArray94 = vectorialPointValuePair92.getPoint(); double[] doubleArray95 = vectorialPointValuePair92.getPointRef(); double[] doubleArray96 = vectorialPointValuePair92.getPointRef(); double[] doubleArray97 = vectorialPointValuePair92.getValueRef(); boolean boolean98 = vectorialConvergenceChecker9.converged((int) (byte) 1, vectorialPointValuePair29, vectorialPointValuePair92); double[] doubleArray99 = vectorialPointValuePair29.getPointRef(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]"); org.junit.Assert.assertNotNull(objArray26); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(objArray47); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]"); org.junit.Assert.assertNotNull(objArray61); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0]"); org.junit.Assert.assertNotNull(objArray74); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0]"); org.junit.Assert.assertNotNull(objArray90); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray93); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray94); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray95); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray96); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray97); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[100.0]"); org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true); org.junit.Assert.assertNotNull(doubleArray99); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[10.0, 1.0, -1.0]"); }
public void test181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test181"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int8 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test182"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double double8 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) (-1.0f)); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); }
public void test183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test183"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); double[] doubleArray56 = vectorialPointValuePair55.getValue(); levenbergMarquardtOptimizer0.residuals = doubleArray56; levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 1); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0]"); }
public void test184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test184"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 'a'); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 52); double[] doubleArray13 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(doubleArray13); }
public void test185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test185"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; double double26 = levenbergMarquardtOptimizer0.getRMS(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 0); // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.updateResidualsAndCost(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue(Double.isNaN(double26)); }
public void test186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test186"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); int int8 = levenbergMarquardtOptimizer0.cols; int int9 = levenbergMarquardtOptimizer0.rows; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test187"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; levenbergMarquardtOptimizer8.cost = 0.0d; double[] doubleArray14 = levenbergMarquardtOptimizer8.targetValues; double[] doubleArray15 = levenbergMarquardtOptimizer8.residuals; int int16 = levenbergMarquardtOptimizer8.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer17 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker18 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer17.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker18); double[] doubleArray20 = levenbergMarquardtOptimizer17.residualsWeights; levenbergMarquardtOptimizer17.cost = 0.0d; double[] doubleArray23 = levenbergMarquardtOptimizer17.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker24 = levenbergMarquardtOptimizer17.getConvergenceChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker(vectorialConvergenceChecker24); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker24; java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); double[] doubleArray57 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(doubleArray57); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair60 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray57, true); levenbergMarquardtOptimizer0.residualsWeights = doubleArray42; int int62 = levenbergMarquardtOptimizer0.cols; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker63 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray23); org.junit.Assert.assertNotNull(vectorialConvergenceChecker24); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52); org.junit.Assert.assertNotNull(vectorialConvergenceChecker63); }
public void test188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test188"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; double double26 = levenbergMarquardtOptimizer0.getRMS(); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 1000); int int29 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue(Double.isNaN(double26)); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1000 + "'", int29 == 1000); }
public void test189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test189"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) ' '); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); java.lang.Throwable throwable15 = null; double[] doubleArray17 = new double[] { (byte) 100 }; java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(throwable15, doubleArray17, "hi!", objArray25); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray17, true); double[] doubleArray29 = vectorialPointValuePair28.getPoint(); double[] doubleArray30 = vectorialPointValuePair28.getValue(); double[] doubleArray34 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException(doubleArray34); java.lang.Throwable throwable36 = null; double[] doubleArray38 = new double[] { (byte) 100 }; java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException(throwable36, doubleArray38, "hi!", objArray46); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair49 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray34, doubleArray38, true); java.lang.Throwable throwable50 = null; double[] doubleArray52 = new double[] { (byte) 100 }; java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException(throwable50, doubleArray52, "hi!", objArray60); double[] doubleArray62 = functionEvaluationException61.getArgument(); java.lang.Throwable throwable63 = null; double[] doubleArray65 = new double[] { (byte) 100 }; java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(throwable63, doubleArray65, "hi!", objArray73); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair76 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray62, doubleArray65, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray34, doubleArray65, true); java.lang.Throwable throwable79 = null; double[] doubleArray81 = new double[] { (byte) 100 }; java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException(throwable79, doubleArray81, "hi!", objArray89); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair91 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray65, doubleArray81); double[] doubleArray92 = vectorialPointValuePair91.getPointRef(); double[] doubleArray93 = vectorialPointValuePair91.getValue(); boolean boolean94 = vectorialConvergenceChecker8.converged(0, vectorialPointValuePair28, vectorialPointValuePair91); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]"); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]"); org.junit.Assert.assertNotNull(objArray46); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0]"); org.junit.Assert.assertNotNull(objArray60); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0]"); org.junit.Assert.assertNotNull(objArray73); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray81); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0]"); org.junit.Assert.assertNotNull(objArray89); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray92); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray93); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[100.0]"); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true); }
public void test190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test190"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; int int6 = levenbergMarquardtOptimizer0.getMaxIterations(); int int7 = levenbergMarquardtOptimizer0.rows; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test191"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.rows = (byte) -1; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 52); int int13 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1000 + "'", int13 == 1000); }
public void test192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test192"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray7 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(doubleArray7); java.lang.Throwable throwable9 = null; double[] doubleArray11 = new double[] { (byte) 100 }; java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(throwable9, doubleArray11, "hi!", objArray19); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair22 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray7, doubleArray11, true); java.lang.Throwable throwable23 = null; double[] doubleArray25 = new double[] { (byte) 100 }; java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(throwable23, doubleArray25, "hi!", objArray33); double[] doubleArray35 = functionEvaluationException34.getArgument(); java.lang.Throwable throwable36 = null; double[] doubleArray38 = new double[] { (byte) 100 }; java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException(throwable36, doubleArray38, "hi!", objArray46); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair49 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray35, doubleArray38, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair51 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray7, doubleArray38, true); double[] doubleArray52 = vectorialPointValuePair51.getValue(); double[] doubleArray53 = vectorialPointValuePair51.getPoint(); levenbergMarquardtOptimizer0.point = doubleArray53; levenbergMarquardtOptimizer0.cost = (byte) 100; levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0]"); org.junit.Assert.assertNotNull(objArray19); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0]"); org.junit.Assert.assertNotNull(objArray33); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]"); org.junit.Assert.assertNotNull(objArray46); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 1.0, -1.0]"); }
public void test193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test193"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double double10 = levenbergMarquardtOptimizer0.cost; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 32); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); }
public void test194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test194"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer3 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker4 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer3.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker4); double[] doubleArray6 = levenbergMarquardtOptimizer3.residualsWeights; int int7 = levenbergMarquardtOptimizer3.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer3.getConvergenceChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker8); java.lang.Object[] objArray16 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException17 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray16); org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray16); java.lang.Throwable throwable19 = null; double[] doubleArray21 = new double[] { (byte) 100 }; java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(throwable19, doubleArray21, "hi!", objArray29); double[] doubleArray31 = functionEvaluationException30.getArgument(); java.lang.Throwable throwable32 = null; double[] doubleArray34 = new double[] { (byte) 100 }; java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException(throwable32, doubleArray34, "hi!", objArray42); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair45 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray31, doubleArray34, false); java.lang.Throwable throwable50 = null; double[] doubleArray52 = new double[] { (byte) 100 }; java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException(throwable50, doubleArray52, "hi!", objArray60); org.apache.commons.math.MathRuntimeException mathRuntimeException62 = new org.apache.commons.math.MathRuntimeException(throwable50); java.lang.String str63 = mathRuntimeException62.getPattern(); java.lang.String str64 = mathRuntimeException62.getPattern(); java.lang.Object[] objArray65 = mathRuntimeException62.getArguments(); java.lang.NullPointerException nullPointerException66 = org.apache.commons.math.MathRuntimeException.createNullPointerException("org.apache.commons.math.MathRuntimeException$2: ", objArray65); org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException67 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray65); org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) mathException18, doubleArray34, "Convergence failed", objArray65); levenbergMarquardtOptimizer0.targetValues = doubleArray34; java.lang.Class<?> wildcardClass70 = levenbergMarquardtOptimizer0.getClass(); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); org.junit.Assert.assertNotNull(objArray16); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException17); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]"); org.junit.Assert.assertNotNull(objArray29); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0]"); org.junit.Assert.assertNotNull(objArray42); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0]"); org.junit.Assert.assertNotNull(objArray60); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, ""); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, ""); org.junit.Assert.assertNotNull(objArray65); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]"); org.junit.Assert.assertNotNull(nullPointerException66); org.junit.Assert.assertNotNull(wildcardClass70); }
public void test195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test195"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; int int26 = levenbergMarquardtOptimizer0.cols; // The following exception was thrown during execution in test generation try { double[][] doubleArray27 = levenbergMarquardtOptimizer0.getCovariances(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); }
public void test196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test196"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int8 = levenbergMarquardtOptimizer0.cols; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10); }
public void test197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test197"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxEvaluations(52); levenbergMarquardtOptimizer0.setMaxIterations(1000); }
public void test198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test198"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 10); levenbergMarquardtOptimizer0.setOrthoTolerance((double) 2147483647); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer9 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker10 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer9.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker10); levenbergMarquardtOptimizer9.cols = (short) 100; levenbergMarquardtOptimizer9.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer16.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); double[] doubleArray19 = levenbergMarquardtOptimizer16.residualsWeights; int int20 = levenbergMarquardtOptimizer16.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker21 = levenbergMarquardtOptimizer16.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker22 = levenbergMarquardtOptimizer16.checker; levenbergMarquardtOptimizer9.checker = vectorialConvergenceChecker22; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker22); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNull(doubleArray19); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1000 + "'", int20 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker21); org.junit.Assert.assertNotNull(vectorialConvergenceChecker22); }
public void test199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test199"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; int int26 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.cost = (short) -1; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1000 + "'", int26 == 1000); }
public void test200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test200"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); java.lang.Throwable throwable15 = null; double[] doubleArray17 = new double[] { (byte) 100 }; java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(throwable15, doubleArray17, "hi!", objArray25); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray17, true); java.lang.Throwable throwable29 = null; double[] doubleArray31 = new double[] { (byte) 100 }; java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(throwable29, doubleArray31, "hi!", objArray39); double[] doubleArray41 = functionEvaluationException40.getArgument(); java.lang.Throwable throwable42 = null; double[] doubleArray44 = new double[] { (byte) 100 }; java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(throwable42, doubleArray44, "hi!", objArray52); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray44, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray44, true); java.lang.Throwable throwable58 = null; double[] doubleArray60 = new double[] { (byte) 100 }; java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(throwable58, doubleArray60, "hi!", objArray68); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray60); org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException(doubleArray44); double[] doubleArray72 = functionEvaluationException71.getArgument(); levenbergMarquardtOptimizer0.objective = doubleArray72; double[] doubleArray74 = levenbergMarquardtOptimizer0.residualsWeights; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]"); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(objArray39); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]"); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); org.junit.Assert.assertNull(doubleArray74); }
public void test201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test201"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.setMaxEvaluations(0); int int9 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test202"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int8 = levenbergMarquardtOptimizer7.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer9 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker10 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer9.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker10); double[] doubleArray12 = levenbergMarquardtOptimizer9.residualsWeights; levenbergMarquardtOptimizer9.cols = 52; levenbergMarquardtOptimizer9.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker16 = levenbergMarquardtOptimizer9.checker; levenbergMarquardtOptimizer7.checker = vectorialConvergenceChecker16; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker16; double[] doubleArray19 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker16); org.junit.Assert.assertNull(doubleArray19); }
public void test203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test203"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(1000); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100); org.junit.Assert.assertNull(doubleArray10); }
public void test204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test204"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxEvaluations(52); double[] doubleArray7 = null; levenbergMarquardtOptimizer0.objective = doubleArray7; double[] doubleArray9 = levenbergMarquardtOptimizer0.objective; org.junit.Assert.assertNull(doubleArray9); }
public void test205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test205"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double double5 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); }
public void test206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test206"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; double[] doubleArray8 = levenbergMarquardtOptimizer2.residuals; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer15 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker16 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer15.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker16); double[] doubleArray18 = levenbergMarquardtOptimizer15.objective; double[] doubleArray19 = null; levenbergMarquardtOptimizer15.point = doubleArray19; double[] doubleArray21 = levenbergMarquardtOptimizer15.residualsWeights; int int22 = levenbergMarquardtOptimizer15.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cols = 52; levenbergMarquardtOptimizer23.incrementIterationsCounter(); double[] doubleArray34 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray39 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray40 = new double[][] { doubleArray34, doubleArray39 }; levenbergMarquardtOptimizer23.jacobian = doubleArray40; levenbergMarquardtOptimizer15.jacobian = doubleArray40; java.text.ParseException parseException43 = org.apache.commons.math.MathRuntimeException.createParseException((int) (byte) 1, "Convergence failed", (java.lang.Object[]) doubleArray40); java.lang.ArithmeticException arithmeticException44 = org.apache.commons.math.MathRuntimeException.createArithmeticException("hi!", (java.lang.Object[]) doubleArray40); org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException45 = new org.apache.commons.math.linear.InvalidMatrixException("Convergence failed", (java.lang.Object[]) doubleArray40); org.apache.commons.math.MathRuntimeException mathRuntimeException46 = new org.apache.commons.math.MathRuntimeException("evaluation failed for argument = {0}", (java.lang.Object[]) doubleArray40); java.io.EOFException eOFException47 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) doubleArray40); levenbergMarquardtOptimizer2.jacobian = doubleArray40; org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "org.apache.commons.math.MathRuntimeException$8: org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) doubleArray40); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNull(doubleArray18); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1000 + "'", int22 == 1000); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertNotNull(parseException43); org.junit.Assert.assertNotNull(arithmeticException44); org.junit.Assert.assertNotNull(eOFException47); }
public void test207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test207"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; int int12 = levenbergMarquardtOptimizer8.getJacobianEvaluations(); levenbergMarquardtOptimizer8.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cols = 52; int int20 = levenbergMarquardtOptimizer14.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker21 = levenbergMarquardtOptimizer14.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer22 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker23 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer22.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker23); double[] doubleArray25 = levenbergMarquardtOptimizer22.residualsWeights; levenbergMarquardtOptimizer22.cost = 0.0d; double[] doubleArray28 = levenbergMarquardtOptimizer22.targetValues; double[] doubleArray29 = levenbergMarquardtOptimizer22.residuals; int int30 = levenbergMarquardtOptimizer22.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer31 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker32 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer31.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker32); double[] doubleArray34 = levenbergMarquardtOptimizer31.residualsWeights; levenbergMarquardtOptimizer31.cost = 0.0d; double[] doubleArray37 = levenbergMarquardtOptimizer31.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker38 = levenbergMarquardtOptimizer31.getConvergenceChecker(); levenbergMarquardtOptimizer22.setConvergenceChecker(vectorialConvergenceChecker38); levenbergMarquardtOptimizer14.checker = vectorialConvergenceChecker38; levenbergMarquardtOptimizer8.setConvergenceChecker(vectorialConvergenceChecker38); int int42 = levenbergMarquardtOptimizer8.rows; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer43 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker44 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer43.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker44); levenbergMarquardtOptimizer43.cols = (short) 100; levenbergMarquardtOptimizer43.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer43.setParRelativeTolerance((double) 2147483647); int int52 = levenbergMarquardtOptimizer43.getMaxEvaluations(); int int53 = levenbergMarquardtOptimizer43.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer54 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker55 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer54.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker55); double[] doubleArray57 = levenbergMarquardtOptimizer54.residualsWeights; levenbergMarquardtOptimizer54.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker60 = levenbergMarquardtOptimizer54.getConvergenceChecker(); levenbergMarquardtOptimizer54.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker63 = levenbergMarquardtOptimizer54.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer64 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker65 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer64.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker65); double[] doubleArray67 = levenbergMarquardtOptimizer64.residualsWeights; levenbergMarquardtOptimizer64.cols = 52; levenbergMarquardtOptimizer64.incrementIterationsCounter(); double[] doubleArray75 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray80 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray81 = new double[][] { doubleArray75, doubleArray80 }; levenbergMarquardtOptimizer64.jacobian = doubleArray81; levenbergMarquardtOptimizer54.jacobian = doubleArray81; levenbergMarquardtOptimizer43.jacobian = doubleArray81; levenbergMarquardtOptimizer8.jacobian = doubleArray81; levenbergMarquardtOptimizer0.jacobian = doubleArray81; double[] doubleArray87 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setOrthoTolerance((double) (-1.0f)); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker21); org.junit.Assert.assertNull(doubleArray25); org.junit.Assert.assertNull(doubleArray28); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertNull(doubleArray34); org.junit.Assert.assertNull(doubleArray37); org.junit.Assert.assertNotNull(vectorialConvergenceChecker38); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647); org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100); org.junit.Assert.assertNull(doubleArray57); org.junit.Assert.assertNotNull(vectorialConvergenceChecker60); org.junit.Assert.assertNotNull(vectorialConvergenceChecker63); org.junit.Assert.assertNull(doubleArray67); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray80); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray81); org.junit.Assert.assertNull(doubleArray87); }
public void test208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test208"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0d); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 'a'); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 1); levenbergMarquardtOptimizer0.setMaxEvaluations((int) 'a'); org.junit.Assert.assertNull(doubleArray3); }
public void test209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test209"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); double[] doubleArray7 = null; levenbergMarquardtOptimizer0.objective = doubleArray7; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.updateJacobian(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); }
public void test210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test210"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.cost = 1.0d; levenbergMarquardtOptimizer0.rows = '#'; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); }
public void test211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test211"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double double9 = levenbergMarquardtOptimizer0.getChiSquare(); double[] doubleArray10 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = (-1.0f); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNull(doubleArray10); }
public void test212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test212"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double[] doubleArray6 = levenbergMarquardtOptimizer0.point; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; levenbergMarquardtOptimizer7.cols = 52; levenbergMarquardtOptimizer7.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker14 = levenbergMarquardtOptimizer7.checker; double[][] doubleArray15 = levenbergMarquardtOptimizer7.jacobian; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer16.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); levenbergMarquardtOptimizer16.cols = (short) 100; levenbergMarquardtOptimizer16.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; int int27 = levenbergMarquardtOptimizer23.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker28 = levenbergMarquardtOptimizer23.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker29 = levenbergMarquardtOptimizer23.checker; levenbergMarquardtOptimizer16.checker = vectorialConvergenceChecker29; levenbergMarquardtOptimizer7.checker = vectorialConvergenceChecker29; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker29); double[] doubleArray33 = levenbergMarquardtOptimizer0.objective; double double34 = levenbergMarquardtOptimizer0.getRMS(); java.lang.Class<?> wildcardClass35 = levenbergMarquardtOptimizer0.getClass(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNotNull(vectorialConvergenceChecker14); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1000 + "'", int27 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker28); org.junit.Assert.assertNotNull(vectorialConvergenceChecker29); org.junit.Assert.assertNull(doubleArray33); org.junit.Assert.assertTrue(Double.isNaN(double34)); org.junit.Assert.assertNotNull(wildcardClass35); }
public void test213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test213"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int10 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1000 + "'", int10 == 1000); }
public void test214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test214"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double double10 = levenbergMarquardtOptimizer0.cost; double[] doubleArray11 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) -1); int int14 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); }
public void test215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test215"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[][] doubleArray8 = levenbergMarquardtOptimizer0.jacobian; levenbergMarquardtOptimizer0.cost = 10.0f; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertNull(doubleArray8); }
public void test216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test216"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); double[] doubleArray12 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = (byte) -1; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker15 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker15); }
public void test217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test217"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); }
public void test218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test218"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; double double26 = levenbergMarquardtOptimizer0.getRMS(); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 1000); double double29 = levenbergMarquardtOptimizer0.getChiSquare(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker30 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue(Double.isNaN(double26)); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(vectorialConvergenceChecker30); }
public void test219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test219"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) -1); int int11 = levenbergMarquardtOptimizer0.getEvaluations(); int int12 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); }
public void test220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test220"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.rows = 'a'; double[] doubleArray13 = levenbergMarquardtOptimizer0.residuals; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNull(doubleArray13); }
public void test221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test221"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); double[] doubleArray56 = vectorialPointValuePair55.getValue(); levenbergMarquardtOptimizer0.residuals = doubleArray56; int int58 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0]"); org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647); }
public void test222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test222"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) 0); levenbergMarquardtOptimizer0.cost = (byte) 0; double[] doubleArray15 = levenbergMarquardtOptimizer0.residualsWeights; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNull(doubleArray15); }
public void test223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test223"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int8 = levenbergMarquardtOptimizer7.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer9 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker10 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer9.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker10); double[] doubleArray12 = levenbergMarquardtOptimizer9.residualsWeights; levenbergMarquardtOptimizer9.cols = 52; levenbergMarquardtOptimizer9.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker16 = levenbergMarquardtOptimizer9.checker; levenbergMarquardtOptimizer7.checker = vectorialConvergenceChecker16; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker16; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 1); double[] doubleArray21 = levenbergMarquardtOptimizer0.residuals; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker16); org.junit.Assert.assertNull(doubleArray21); }
public void test224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test224"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0d); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 1.0f); // The following exception was thrown during execution in test generation try { double[][] doubleArray10 = levenbergMarquardtOptimizer0.getCovariances(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); }
public void test225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test225"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer9 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker10 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer9.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker10); double[] doubleArray12 = levenbergMarquardtOptimizer9.residualsWeights; int int13 = levenbergMarquardtOptimizer9.getJacobianEvaluations(); levenbergMarquardtOptimizer9.incrementIterationsCounter(); double[] doubleArray15 = levenbergMarquardtOptimizer9.point; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer16.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); double[] doubleArray19 = levenbergMarquardtOptimizer16.residualsWeights; levenbergMarquardtOptimizer16.cols = 52; levenbergMarquardtOptimizer16.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker23 = levenbergMarquardtOptimizer16.checker; double[][] doubleArray24 = levenbergMarquardtOptimizer16.jacobian; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer25 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker26 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer25.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker26); levenbergMarquardtOptimizer25.cols = (short) 100; levenbergMarquardtOptimizer25.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer32 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker33 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer32.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker33); double[] doubleArray35 = levenbergMarquardtOptimizer32.residualsWeights; int int36 = levenbergMarquardtOptimizer32.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker37 = levenbergMarquardtOptimizer32.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker38 = levenbergMarquardtOptimizer32.checker; levenbergMarquardtOptimizer25.checker = vectorialConvergenceChecker38; levenbergMarquardtOptimizer16.checker = vectorialConvergenceChecker38; levenbergMarquardtOptimizer9.setConvergenceChecker(vectorialConvergenceChecker38); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker38; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertNull(doubleArray19); org.junit.Assert.assertNotNull(vectorialConvergenceChecker23); org.junit.Assert.assertNull(doubleArray24); org.junit.Assert.assertNull(doubleArray35); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1000 + "'", int36 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker37); org.junit.Assert.assertNotNull(vectorialConvergenceChecker38); }
public void test226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test226"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 'a'); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 52); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(Double.NaN, 0.0d); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); levenbergMarquardtOptimizer0.setMaxEvaluations((-1)); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test227"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 100); org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray8 = convergenceException7.getSuppressed(); java.lang.RuntimeException runtimeException9 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable) convergenceException7); double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); java.lang.Throwable throwable15 = null; double[] doubleArray17 = new double[] { (byte) 100 }; java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(throwable15, doubleArray17, "hi!", objArray25); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray17, true); java.lang.Throwable throwable29 = null; double[] doubleArray31 = new double[] { (byte) 100 }; java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(throwable29, doubleArray31, "hi!", objArray39); double[] doubleArray41 = functionEvaluationException40.getArgument(); java.lang.Throwable throwable42 = null; double[] doubleArray44 = new double[] { (byte) 100 }; java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(throwable42, doubleArray44, "hi!", objArray52); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray44, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray44, true); java.lang.Throwable throwable58 = null; double[] doubleArray60 = new double[] { (byte) 100 }; java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(throwable58, doubleArray60, "hi!", objArray68); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray60); double[] doubleArray71 = vectorialPointValuePair70.getValueRef(); java.lang.Throwable throwable76 = null; double[] doubleArray78 = new double[] { (byte) 100 }; java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException(throwable76, doubleArray78, "hi!", objArray86); org.apache.commons.math.MathRuntimeException mathRuntimeException88 = new org.apache.commons.math.MathRuntimeException(throwable76); java.lang.String str89 = mathRuntimeException88.getPattern(); java.lang.String str90 = mathRuntimeException88.getPattern(); java.lang.Object[] objArray91 = mathRuntimeException88.getArguments(); java.lang.NullPointerException nullPointerException92 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray91); java.lang.IllegalStateException illegalStateException93 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray91); org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("hi!", objArray91); org.apache.commons.math.FunctionEvaluationException functionEvaluationException95 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) runtimeException9, doubleArray71, "Convergence failed", objArray91); levenbergMarquardtOptimizer0.objective = doubleArray71; levenbergMarquardtOptimizer0.cols = 0; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker99 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(throwableArray8); org.junit.Assert.assertNotNull(runtimeException9); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]"); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(objArray39); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]"); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]"); org.junit.Assert.assertNotNull(objArray86); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, ""); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, ""); org.junit.Assert.assertNotNull(objArray91); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]"); org.junit.Assert.assertNotNull(nullPointerException92); org.junit.Assert.assertNotNull(illegalStateException93); org.junit.Assert.assertNotNull(vectorialConvergenceChecker99); }
public void test228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test228"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double double6 = levenbergMarquardtOptimizer0.cost; int int7 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); }
public void test229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test229"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); double[] doubleArray11 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray16 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray17 = new double[][] { doubleArray11, doubleArray16 }; levenbergMarquardtOptimizer0.jacobian = doubleArray17; int int19 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); }
public void test230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test230"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray9 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray9; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker11 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair13 = null; double[] doubleArray17 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(doubleArray17); java.lang.Throwable throwable19 = null; double[] doubleArray21 = new double[] { (byte) 100 }; java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(throwable19, doubleArray21, "hi!", objArray29); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair32 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray17, doubleArray21, true); java.lang.Throwable throwable33 = null; double[] doubleArray35 = new double[] { (byte) 100 }; java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(throwable33, doubleArray35, "hi!", objArray43); double[] doubleArray45 = functionEvaluationException44.getArgument(); java.lang.Throwable throwable46 = null; double[] doubleArray48 = new double[] { (byte) 100 }; java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(throwable46, doubleArray48, "hi!", objArray56); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair59 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray45, doubleArray48, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair61 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray17, doubleArray48, true); java.lang.Throwable throwable62 = null; double[] doubleArray64 = new double[] { (byte) 100 }; java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException(throwable62, doubleArray64, "hi!", objArray72); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair74 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray48, doubleArray64); double[] doubleArray75 = vectorialPointValuePair74.getPointRef(); double[] doubleArray76 = vectorialPointValuePair74.getPoint(); double[] doubleArray77 = vectorialPointValuePair74.getPointRef(); double[] doubleArray78 = vectorialPointValuePair74.getPointRef(); double[] doubleArray79 = vectorialPointValuePair74.getValue(); // The following exception was thrown during execution in test generation try { boolean boolean80 = vectorialConvergenceChecker11.converged(0, vectorialPointValuePair13, vectorialPointValuePair74); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker11); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]"); org.junit.Assert.assertNotNull(objArray29); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]"); org.junit.Assert.assertNotNull(objArray43); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0]"); org.junit.Assert.assertNotNull(objArray56); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0]"); org.junit.Assert.assertNotNull(objArray72); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); }
public void test231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test231"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); double[] doubleArray13 = levenbergMarquardtOptimizer10.residualsWeights; levenbergMarquardtOptimizer10.cols = 52; levenbergMarquardtOptimizer10.incrementIterationsCounter(); double[] doubleArray21 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray26 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 }; levenbergMarquardtOptimizer10.jacobian = doubleArray27; levenbergMarquardtOptimizer0.jacobian = doubleArray27; double[] doubleArray33 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(doubleArray33); java.lang.Throwable throwable35 = null; double[] doubleArray37 = new double[] { (byte) 100 }; java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException(throwable35, doubleArray37, "hi!", objArray45); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair48 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray33, doubleArray37, true); java.lang.Throwable throwable49 = null; double[] doubleArray51 = new double[] { (byte) 100 }; java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(throwable49, doubleArray51, "hi!", objArray59); double[] doubleArray61 = functionEvaluationException60.getArgument(); java.lang.Throwable throwable62 = null; double[] doubleArray64 = new double[] { (byte) 100 }; java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException(throwable62, doubleArray64, "hi!", objArray72); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair75 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray61, doubleArray64, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair77 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray33, doubleArray64, true); java.lang.Throwable throwable78 = null; double[] doubleArray80 = new double[] { (byte) 100 }; java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException(throwable78, doubleArray80, "hi!", objArray88); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair90 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray64, doubleArray80); double[] doubleArray91 = vectorialPointValuePair90.getPointRef(); double[] doubleArray92 = vectorialPointValuePair90.getPoint(); double[] doubleArray93 = vectorialPointValuePair90.getPointRef(); levenbergMarquardtOptimizer0.residualsWeights = doubleArray93; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]"); org.junit.Assert.assertNotNull(objArray45); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]"); org.junit.Assert.assertNotNull(objArray59); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0]"); org.junit.Assert.assertNotNull(objArray72); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray80); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0]"); org.junit.Assert.assertNotNull(objArray88); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray91); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray92); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray93); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[100.0]"); }
public void test232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test232"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.cost = '#'; levenbergMarquardtOptimizer0.incrementIterationsCounter(); levenbergMarquardtOptimizer0.setCostRelativeTolerance(0.0d); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test233"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; int int2 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker3 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000); org.junit.Assert.assertNull(vectorialConvergenceChecker3); }
public void test234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test234"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.rows = (byte) -1; double[][] doubleArray11 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertNull(doubleArray11); }
public void test235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test235"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.cost; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); levenbergMarquardtOptimizer6.cols = (short) 100; levenbergMarquardtOptimizer6.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer13 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker14 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer13.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker14); double[] doubleArray16 = levenbergMarquardtOptimizer13.residualsWeights; int int17 = levenbergMarquardtOptimizer13.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker18 = levenbergMarquardtOptimizer13.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker19 = levenbergMarquardtOptimizer13.checker; levenbergMarquardtOptimizer6.checker = vectorialConvergenceChecker19; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker21 = levenbergMarquardtOptimizer6.getConvergenceChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker21); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) (short) 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNull(doubleArray16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1000 + "'", int17 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker18); org.junit.Assert.assertNotNull(vectorialConvergenceChecker19); org.junit.Assert.assertNotNull(vectorialConvergenceChecker21); }
public void test236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test236"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); int int6 = levenbergMarquardtOptimizer0.rows; levenbergMarquardtOptimizer0.incrementIterationsCounter(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test237"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray9 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray9; int int11 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray12 = levenbergMarquardtOptimizer0.objective; int int13 = levenbergMarquardtOptimizer0.rows; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); }
public void test238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test238"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.rows = 1; double[] doubleArray12 = levenbergMarquardtOptimizer0.objective; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNull(doubleArray12); }
public void test239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test239"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; double double26 = levenbergMarquardtOptimizer0.getRMS(); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 1000); double double29 = levenbergMarquardtOptimizer0.getChiSquare(); // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.updateResidualsAndCost(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue(Double.isNaN(double26)); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); }
public void test240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test240"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxEvaluations(52); levenbergMarquardtOptimizer0.cost = (short) 0; levenbergMarquardtOptimizer0.setMaxIterations((int) 'a'); double[] doubleArray11 = levenbergMarquardtOptimizer0.residuals; org.junit.Assert.assertNull(doubleArray11); }
public void test241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test241"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); }
public void test242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test242"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray5 = levenbergMarquardtOptimizer0.residualsWeights; int int6 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; levenbergMarquardtOptimizer7.cost = 0.0d; double[] doubleArray13 = levenbergMarquardtOptimizer7.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker14 = levenbergMarquardtOptimizer7.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer18 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker19 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer18.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker19); double[] doubleArray21 = levenbergMarquardtOptimizer18.residualsWeights; levenbergMarquardtOptimizer18.cols = 52; levenbergMarquardtOptimizer18.incrementIterationsCounter(); double[] doubleArray29 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray34 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray35 = new double[][] { doubleArray29, doubleArray34 }; levenbergMarquardtOptimizer18.jacobian = doubleArray35; java.lang.IllegalStateException illegalStateException37 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("Convergence failed", (java.lang.Object[]) doubleArray35); org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) 10, "", (java.lang.Object[]) doubleArray35); levenbergMarquardtOptimizer7.jacobian = doubleArray35; levenbergMarquardtOptimizer0.jacobian = doubleArray35; org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertNotNull(vectorialConvergenceChecker14); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertNotNull(illegalStateException37); }
public void test243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test243"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.cost = '#'; org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray14 = convergenceException13.getSuppressed(); double[] doubleArray20 = new double[] { (-1L), ' ', 'a', (short) 0, 2147483647 }; java.lang.Object[] objArray30 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException31 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray30); java.lang.IllegalArgumentException illegalArgumentException32 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException31); java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException31, "", objArray35); org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray35); java.util.ConcurrentModificationException concurrentModificationException38 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray35); java.lang.Object[] objArray46 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException47 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray46); java.lang.Object[] objArray57 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException58 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray57); java.lang.IllegalArgumentException illegalArgumentException59 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException58); java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException58, "", objArray62); org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray62); java.util.ConcurrentModificationException concurrentModificationException65 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray62); java.util.ConcurrentModificationException concurrentModificationException66 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray62); org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException47, "", objArray62); org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) concurrentModificationException38, (double) 10, "", objArray62); org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray62); org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) convergenceException13, doubleArray20, "org.apache.commons.math.MathRuntimeException$2: ", objArray62); double[] doubleArray71 = null; org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair73 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray20, doubleArray71, false); levenbergMarquardtOptimizer0.objective = doubleArray20; int int75 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(throwableArray14); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 32.0, 97.0, 0.0, 2.147483647E9]"); org.junit.Assert.assertNotNull(objArray30); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException31); org.junit.Assert.assertNotNull(illegalArgumentException32); org.junit.Assert.assertNotNull(objArray35); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException38); org.junit.Assert.assertNotNull(objArray46); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException47); org.junit.Assert.assertNotNull(objArray57); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException58); org.junit.Assert.assertNotNull(illegalArgumentException59); org.junit.Assert.assertNotNull(objArray62); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException65); org.junit.Assert.assertNotNull(concurrentModificationException66); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0); }
public void test244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test244"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[][] doubleArray8 = levenbergMarquardtOptimizer0.jacobian; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); levenbergMarquardtOptimizer0.residualsWeights = doubleArray13; levenbergMarquardtOptimizer0.setOrthoTolerance((double) '4'); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); }
public void test245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test245"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations(1000); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); }
public void test246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test246"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.cols = '#'; int int10 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); }
public void test247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test247"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double double71 = levenbergMarquardtOptimizer0.getChiSquare(); double[] doubleArray72 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray73 = levenbergMarquardtOptimizer0.residuals; double double74 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); org.junit.Assert.assertNull(doubleArray73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d); }
public void test248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test248"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0d); int int13 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); }
public void test249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test249"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); levenbergMarquardtOptimizer7.cols = (short) 100; double double12 = levenbergMarquardtOptimizer7.cost; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer13 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker14 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer13.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker14); levenbergMarquardtOptimizer13.cols = (short) 100; levenbergMarquardtOptimizer13.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer20 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker21 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer20.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker21); double[] doubleArray23 = levenbergMarquardtOptimizer20.residualsWeights; int int24 = levenbergMarquardtOptimizer20.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker25 = levenbergMarquardtOptimizer20.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker26 = levenbergMarquardtOptimizer20.checker; levenbergMarquardtOptimizer13.checker = vectorialConvergenceChecker26; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker28 = levenbergMarquardtOptimizer13.getConvergenceChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker(vectorialConvergenceChecker28); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker28); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNull(doubleArray23); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1000 + "'", int24 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker25); org.junit.Assert.assertNotNull(vectorialConvergenceChecker26); org.junit.Assert.assertNotNull(vectorialConvergenceChecker28); }
public void test250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test250"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) -1); int int11 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test251"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); int int12 = levenbergMarquardtOptimizer0.getMaxIterations(); double[][] doubleArray13 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000); org.junit.Assert.assertNull(doubleArray13); }
public void test252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test252"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[][] doubleArray8 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNull(doubleArray8); }
public void test253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test253"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) -1); double[] doubleArray10 = levenbergMarquardtOptimizer0.targetValues; levenbergMarquardtOptimizer0.rows = ' '; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray10); }
public void test254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test254"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); int int10 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.cols = 100; double double13 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); }
public void test255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test255"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cost = 0.0d; double double8 = levenbergMarquardtOptimizer2.getChiSquare(); levenbergMarquardtOptimizer2.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer2.setCostRelativeTolerance((double) 1000); double[][] doubleArray13 = levenbergMarquardtOptimizer2.jacobian; double[] doubleArray14 = levenbergMarquardtOptimizer2.targetValues; int int15 = levenbergMarquardtOptimizer2.rows; double[] doubleArray19 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(doubleArray19); java.lang.Throwable throwable21 = null; double[] doubleArray23 = new double[] { (byte) 100 }; java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(throwable21, doubleArray23, "hi!", objArray31); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair34 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray19, doubleArray23, true); double[] doubleArray35 = vectorialPointValuePair34.getPointRef(); levenbergMarquardtOptimizer2.point = doubleArray35; levenbergMarquardtOptimizer0.point = doubleArray35; org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray41 = convergenceException40.getSuppressed(); org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) throwableArray41); java.lang.Object[] objArray50 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException51 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray50); org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray50); java.lang.Throwable[] throwableArray53 = mathException52.getSuppressed(); org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException42, "evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray53); java.lang.RuntimeException runtimeException55 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable) mathException54); java.lang.Throwable[] throwableArray56 = runtimeException55.getSuppressed(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(doubleArray35, "Convergence failed", (java.lang.Object[]) throwableArray56); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0]"); org.junit.Assert.assertNotNull(objArray31); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(throwableArray41); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException51); org.junit.Assert.assertNotNull(throwableArray53); org.junit.Assert.assertNotNull(runtimeException55); org.junit.Assert.assertNotNull(throwableArray56); }
public void test256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test256"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; levenbergMarquardtOptimizer8.cost = 0.0d; double[] doubleArray14 = levenbergMarquardtOptimizer8.targetValues; double[] doubleArray15 = levenbergMarquardtOptimizer8.residuals; int int16 = levenbergMarquardtOptimizer8.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer17 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker18 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer17.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker18); double[] doubleArray20 = levenbergMarquardtOptimizer17.residualsWeights; levenbergMarquardtOptimizer17.cost = 0.0d; double[] doubleArray23 = levenbergMarquardtOptimizer17.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker24 = levenbergMarquardtOptimizer17.getConvergenceChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker(vectorialConvergenceChecker24); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker24; double[] doubleArray27 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.cols = (byte) 100; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray23); org.junit.Assert.assertNotNull(vectorialConvergenceChecker24); org.junit.Assert.assertNull(doubleArray27); }
public void test257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test257"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; int int11 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test258"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 1.0f); org.junit.Assert.assertNull(doubleArray3); }
public void test259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test259"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer2.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker9; double[] doubleArray11 = levenbergMarquardtOptimizer0.point; levenbergMarquardtOptimizer0.rows = ' '; levenbergMarquardtOptimizer0.cols = (byte) 10; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNull(doubleArray11); }
public void test260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test260"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer3 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker4 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer3.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker4); double[] doubleArray6 = levenbergMarquardtOptimizer3.objective; double[] doubleArray7 = null; levenbergMarquardtOptimizer3.point = doubleArray7; double[] doubleArray9 = levenbergMarquardtOptimizer3.residualsWeights; int int10 = levenbergMarquardtOptimizer3.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer11 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker12 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer11.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker12); double[] doubleArray14 = levenbergMarquardtOptimizer11.residualsWeights; levenbergMarquardtOptimizer11.cols = 52; levenbergMarquardtOptimizer11.incrementIterationsCounter(); double[] doubleArray22 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray27 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray28 = new double[][] { doubleArray22, doubleArray27 }; levenbergMarquardtOptimizer11.jacobian = doubleArray28; levenbergMarquardtOptimizer3.jacobian = doubleArray28; java.text.ParseException parseException31 = org.apache.commons.math.MathRuntimeException.createParseException((int) (byte) 1, "Convergence failed", (java.lang.Object[]) doubleArray28); java.lang.ArithmeticException arithmeticException32 = org.apache.commons.math.MathRuntimeException.createArithmeticException("hi!", (java.lang.Object[]) doubleArray28); java.lang.Object[] objArray43 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException44 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray43); java.lang.IllegalArgumentException illegalArgumentException45 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException44); java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException44, "", objArray48); org.apache.commons.math.MathRuntimeException mathRuntimeException50 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable) arrayIndexOutOfBoundsException44); java.lang.Throwable[] throwableArray51 = mathRuntimeException50.getSuppressed(); java.lang.Object[] objArray63 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException64 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray63); java.lang.IllegalArgumentException illegalArgumentException65 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException64); java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException64, "", objArray68); org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray68); java.util.ConcurrentModificationException concurrentModificationException71 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray68); java.io.EOFException eOFException72 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.MathRuntimeException$2: ", objArray68); java.lang.IllegalStateException illegalStateException73 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.MathRuntimeException$2: ", objArray68); java.lang.NullPointerException nullPointerException74 = org.apache.commons.math.MathRuntimeException.createNullPointerException("", objArray68); org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathRuntimeException50, "hi!", objArray68); org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "org.apache.commons.math.MathRuntimeException$2: ", objArray68); java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException77 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray68); org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) arithmeticException32, (double) (byte) 10, "evaluation failed for argument = {0}", objArray68); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1000 + "'", int10 == 1000); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertNotNull(parseException31); org.junit.Assert.assertNotNull(arithmeticException32); org.junit.Assert.assertNotNull(objArray43); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException44); org.junit.Assert.assertNotNull(illegalArgumentException45); org.junit.Assert.assertNotNull(objArray48); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0]"); org.junit.Assert.assertNotNull(throwableArray51); org.junit.Assert.assertNotNull(objArray63); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException64); org.junit.Assert.assertNotNull(illegalArgumentException65); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException71); org.junit.Assert.assertNotNull(eOFException72); org.junit.Assert.assertNotNull(illegalStateException73); org.junit.Assert.assertNotNull(nullPointerException74); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException77); }
public void test261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test261"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 1000); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double double12 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); }
public void test262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test262"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); java.lang.Throwable throwable8 = null; double[] doubleArray10 = new double[] { (byte) 100 }; java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(throwable8, doubleArray10, "hi!", objArray18); double[] doubleArray20 = functionEvaluationException19.getArgument(); java.lang.Throwable throwable21 = null; double[] doubleArray23 = new double[] { (byte) 100 }; java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(throwable21, doubleArray23, "hi!", objArray31); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair34 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray20, doubleArray23, false); levenbergMarquardtOptimizer0.point = doubleArray23; int int36 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0]"); org.junit.Assert.assertNotNull(objArray18); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0]"); org.junit.Assert.assertNotNull(objArray31); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); }
public void test263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test263"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; int int2 = levenbergMarquardtOptimizer0.getMaxIterations(); int int3 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer4 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer4.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); levenbergMarquardtOptimizer4.cols = (short) 100; levenbergMarquardtOptimizer4.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer4.cols = (short) 100; java.lang.Object[] objArray19 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException20 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray19); org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray19); java.lang.Throwable throwable22 = null; double[] doubleArray24 = new double[] { (byte) 100 }; java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(throwable22, doubleArray24, "hi!", objArray32); double[] doubleArray34 = functionEvaluationException33.getArgument(); java.lang.Throwable throwable35 = null; double[] doubleArray37 = new double[] { (byte) 100 }; java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException(throwable35, doubleArray37, "hi!", objArray45); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair48 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray34, doubleArray37, false); java.lang.Throwable throwable53 = null; double[] doubleArray55 = new double[] { (byte) 100 }; java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException(throwable53, doubleArray55, "hi!", objArray63); org.apache.commons.math.MathRuntimeException mathRuntimeException65 = new org.apache.commons.math.MathRuntimeException(throwable53); java.lang.String str66 = mathRuntimeException65.getPattern(); java.lang.String str67 = mathRuntimeException65.getPattern(); java.lang.Object[] objArray68 = mathRuntimeException65.getArguments(); java.lang.NullPointerException nullPointerException69 = org.apache.commons.math.MathRuntimeException.createNullPointerException("org.apache.commons.math.MathRuntimeException$2: ", objArray68); org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException70 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray68); org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) mathException21, doubleArray37, "Convergence failed", objArray68); levenbergMarquardtOptimizer4.point = doubleArray37; levenbergMarquardtOptimizer0.targetValues = doubleArray37; int int74 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(objArray19); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException20); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]"); org.junit.Assert.assertNotNull(objArray32); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]"); org.junit.Assert.assertNotNull(objArray45); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0]"); org.junit.Assert.assertNotNull(objArray63); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, ""); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, ""); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]"); org.junit.Assert.assertNotNull(nullPointerException69); org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0); }
public void test264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test264"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 1000); int int11 = levenbergMarquardtOptimizer0.getIterations(); double double12 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); }
public void test265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test265"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; int int11 = levenbergMarquardtOptimizer7.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer7.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer7.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker13; double double15 = levenbergMarquardtOptimizer0.getChiSquare(); double[] doubleArray16 = levenbergMarquardtOptimizer0.objective; org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNull(doubleArray16); }
public void test266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test266"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; int int26 = levenbergMarquardtOptimizer0.getMaxIterations(); // The following exception was thrown during execution in test generation try { double[][] doubleArray27 = levenbergMarquardtOptimizer0.getCovariances(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1000 + "'", int26 == 1000); }
public void test267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test267"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray15 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(doubleArray15); java.lang.Throwable throwable17 = null; double[] doubleArray19 = new double[] { (byte) 100 }; java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(throwable17, doubleArray19, "hi!", objArray27); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair30 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray15, doubleArray19, true); double[] doubleArray31 = vectorialPointValuePair30.getValue(); double[] doubleArray32 = vectorialPointValuePair30.getPoint(); double[] doubleArray36 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(doubleArray36); java.lang.Throwable throwable38 = null; double[] doubleArray40 = new double[] { (byte) 100 }; java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException(throwable38, doubleArray40, "hi!", objArray48); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair51 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray36, doubleArray40, true); java.lang.Throwable throwable52 = null; double[] doubleArray54 = new double[] { (byte) 100 }; java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException(throwable52, doubleArray54, "hi!", objArray62); double[] doubleArray64 = functionEvaluationException63.getArgument(); java.lang.Throwable throwable65 = null; double[] doubleArray67 = new double[] { (byte) 100 }; java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(throwable65, doubleArray67, "hi!", objArray75); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray64, doubleArray67, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair80 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray36, doubleArray67, true); java.lang.Throwable throwable81 = null; double[] doubleArray83 = new double[] { (byte) 100 }; java.lang.Object[] objArray91 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(throwable81, doubleArray83, "hi!", objArray91); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair93 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray67, doubleArray83); double[] doubleArray94 = vectorialPointValuePair93.getPointRef(); double[] doubleArray95 = vectorialPointValuePair93.getPoint(); boolean boolean96 = vectorialConvergenceChecker10.converged((int) (byte) 10, vectorialPointValuePair30, vectorialPointValuePair93); double[] doubleArray97 = vectorialPointValuePair30.getValueRef(); double[] doubleArray98 = vectorialPointValuePair30.getPointRef(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]"); org.junit.Assert.assertNotNull(objArray27); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]"); org.junit.Assert.assertNotNull(objArray48); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0]"); org.junit.Assert.assertNotNull(objArray62); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0]"); org.junit.Assert.assertNotNull(objArray75); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray83); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0]"); org.junit.Assert.assertNotNull(objArray91); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray94); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray95); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[100.0]"); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true); org.junit.Assert.assertNotNull(doubleArray97); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray98); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[10.0, 1.0, -1.0]"); }
public void test268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test268"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray9 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); double[] doubleArray12 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray13 = levenbergMarquardtOptimizer0.residualsWeights; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNull(doubleArray13); }
public void test269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test269"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray7 = levenbergMarquardtOptimizer0.targetValues; int int8 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int9 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000); }
public void test270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test270"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); double[] doubleArray9 = levenbergMarquardtOptimizer0.residuals; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test271"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray5 = levenbergMarquardtOptimizer0.residualsWeights; double[][] doubleArray6 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNull(doubleArray6); }
public void test272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test272"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int8 = levenbergMarquardtOptimizer0.getEvaluations(); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double double10 = levenbergMarquardtOptimizer0.getRMS(); double double11 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue(Double.isNaN(double10)); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); }
public void test273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test273"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) (short) 100); int int12 = levenbergMarquardtOptimizer0.getMaxIterations(); int int13 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1000 + "'", int13 == 1000); }
public void test274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test274"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int2 = levenbergMarquardtOptimizer0.cols; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test275"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker72 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (byte) -1); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker75 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.rows = 'a'; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertNotNull(vectorialConvergenceChecker72); org.junit.Assert.assertNotNull(vectorialConvergenceChecker75); }
public void test276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test276"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); // The following exception was thrown during execution in test generation try { double[] doubleArray10 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test277"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.cost = '#'; org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray14 = convergenceException13.getSuppressed(); double[] doubleArray20 = new double[] { (-1L), ' ', 'a', (short) 0, 2147483647 }; java.lang.Object[] objArray30 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException31 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray30); java.lang.IllegalArgumentException illegalArgumentException32 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException31); java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException31, "", objArray35); org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray35); java.util.ConcurrentModificationException concurrentModificationException38 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray35); java.lang.Object[] objArray46 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException47 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray46); java.lang.Object[] objArray57 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException58 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray57); java.lang.IllegalArgumentException illegalArgumentException59 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException58); java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException58, "", objArray62); org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray62); java.util.ConcurrentModificationException concurrentModificationException65 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray62); java.util.ConcurrentModificationException concurrentModificationException66 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray62); org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException47, "", objArray62); org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) concurrentModificationException38, (double) 10, "", objArray62); org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray62); org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) convergenceException13, doubleArray20, "org.apache.commons.math.MathRuntimeException$2: ", objArray62); double[] doubleArray71 = null; org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair73 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray20, doubleArray71, false); levenbergMarquardtOptimizer0.objective = doubleArray20; double[] doubleArray75 = levenbergMarquardtOptimizer0.residuals; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(throwableArray14); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 32.0, 97.0, 0.0, 2.147483647E9]"); org.junit.Assert.assertNotNull(objArray30); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException31); org.junit.Assert.assertNotNull(illegalArgumentException32); org.junit.Assert.assertNotNull(objArray35); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException38); org.junit.Assert.assertNotNull(objArray46); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException47); org.junit.Assert.assertNotNull(objArray57); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException58); org.junit.Assert.assertNotNull(illegalArgumentException59); org.junit.Assert.assertNotNull(objArray62); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException65); org.junit.Assert.assertNotNull(concurrentModificationException66); org.junit.Assert.assertNull(doubleArray75); }
public void test278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test278"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (byte) 1); int int10 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1000 + "'", int10 == 1000); }
public void test279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test279"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); double[] doubleArray9 = levenbergMarquardtOptimizer0.residuals; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); double[] doubleArray13 = levenbergMarquardtOptimizer10.residualsWeights; levenbergMarquardtOptimizer10.cost = 0.0d; double double16 = levenbergMarquardtOptimizer10.getChiSquare(); int int17 = levenbergMarquardtOptimizer10.getIterations(); int int18 = levenbergMarquardtOptimizer10.getIterations(); int int19 = levenbergMarquardtOptimizer10.getIterations(); java.lang.Throwable throwable20 = null; double[] doubleArray22 = new double[] { (byte) 100 }; java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(throwable20, doubleArray22, "hi!", objArray30); double[] doubleArray32 = functionEvaluationException31.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(doubleArray32); org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(doubleArray32); levenbergMarquardtOptimizer10.targetValues = doubleArray32; double double36 = levenbergMarquardtOptimizer10.getRMS(); levenbergMarquardtOptimizer10.setParRelativeTolerance((double) 1000); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker39 = levenbergMarquardtOptimizer10.checker; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker39); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertNotNull(objArray30); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]"); org.junit.Assert.assertTrue(Double.isNaN(double36)); org.junit.Assert.assertNotNull(vectorialConvergenceChecker39); }
public void test280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test280"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) -1); levenbergMarquardtOptimizer0.setMaxEvaluations(0); levenbergMarquardtOptimizer0.setMaxIterations(0); int int14 = levenbergMarquardtOptimizer0.getMaxIterations(); int int15 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer16.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); double[] doubleArray19 = levenbergMarquardtOptimizer16.residualsWeights; levenbergMarquardtOptimizer16.cols = 52; int int22 = levenbergMarquardtOptimizer16.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); levenbergMarquardtOptimizer23.cols = (short) 100; levenbergMarquardtOptimizer23.setCostRelativeTolerance((double) 0L); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer30 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker31 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer30.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker31); double[] doubleArray33 = levenbergMarquardtOptimizer30.residualsWeights; int int34 = levenbergMarquardtOptimizer30.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker35 = levenbergMarquardtOptimizer30.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer36 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker37 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer36.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker37); double[] doubleArray39 = levenbergMarquardtOptimizer36.residualsWeights; levenbergMarquardtOptimizer36.cost = 0.0d; double[] doubleArray42 = levenbergMarquardtOptimizer36.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker43 = levenbergMarquardtOptimizer36.getConvergenceChecker(); levenbergMarquardtOptimizer30.checker = vectorialConvergenceChecker43; levenbergMarquardtOptimizer23.setConvergenceChecker(vectorialConvergenceChecker43); levenbergMarquardtOptimizer16.checker = vectorialConvergenceChecker43; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker43); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker48 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNull(doubleArray19); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647); org.junit.Assert.assertNull(doubleArray33); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1000 + "'", int34 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker35); org.junit.Assert.assertNull(doubleArray39); org.junit.Assert.assertNull(doubleArray42); org.junit.Assert.assertNotNull(vectorialConvergenceChecker43); org.junit.Assert.assertNotNull(vectorialConvergenceChecker48); }
public void test281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test281"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.objective; double[] doubleArray10 = null; levenbergMarquardtOptimizer6.point = doubleArray10; double[] doubleArray12 = levenbergMarquardtOptimizer6.residualsWeights; int int13 = levenbergMarquardtOptimizer6.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cols = 52; levenbergMarquardtOptimizer14.incrementIterationsCounter(); double[] doubleArray25 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray30 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray31 = new double[][] { doubleArray25, doubleArray30 }; levenbergMarquardtOptimizer14.jacobian = doubleArray31; levenbergMarquardtOptimizer6.jacobian = doubleArray31; java.text.ParseException parseException34 = org.apache.commons.math.MathRuntimeException.createParseException((int) (byte) 1, "Convergence failed", (java.lang.Object[]) doubleArray31); org.apache.commons.math.MaxEvaluationsExceededException maxEvaluationsExceededException35 = new org.apache.commons.math.MaxEvaluationsExceededException((int) (short) 1, "Convergence failed", (java.lang.Object[]) doubleArray31); org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException36 = new org.apache.commons.math.MaxIterationsExceededException(1, "", (java.lang.Object[]) doubleArray31); int int37 = maxIterationsExceededException36.getMaxIterations(); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1000 + "'", int13 == 1000); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertNotNull(parseException34); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1); }
public void test282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test282"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray11 = levenbergMarquardtOptimizer0.point; int int12 = levenbergMarquardtOptimizer0.cols; double[] doubleArray13 = levenbergMarquardtOptimizer0.residualsWeights; int int14 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); }
public void test283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test283"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.rows = 0; levenbergMarquardtOptimizer0.setMaxIterations(10); levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) 100); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10); }
public void test284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test284"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) -1); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; levenbergMarquardtOptimizer0.setMaxIterations(100); int int13 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100); }
public void test285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test285"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; int int5 = levenbergMarquardtOptimizer0.getEvaluations(); int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double double7 = levenbergMarquardtOptimizer0.getRMS(); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertTrue(Double.isNaN(double7)); }
public void test286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test286"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double double10 = levenbergMarquardtOptimizer0.getRMS(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertTrue(Double.isNaN(double10)); }
public void test287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test287"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.checker; int int7 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray12 = new double[] { 52, 0.0f, 0L, 0L }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(doubleArray12); levenbergMarquardtOptimizer0.objective = doubleArray12; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer19 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker20 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer19.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker20); double[] doubleArray22 = levenbergMarquardtOptimizer19.residualsWeights; levenbergMarquardtOptimizer19.cols = 52; levenbergMarquardtOptimizer19.incrementIterationsCounter(); double[] doubleArray30 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray35 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray36 = new double[][] { doubleArray30, doubleArray35 }; levenbergMarquardtOptimizer19.jacobian = doubleArray36; java.lang.IllegalStateException illegalStateException38 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("Convergence failed", (java.lang.Object[]) doubleArray36); org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) 10, "", (java.lang.Object[]) doubleArray36); org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(doubleArray12, "org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) doubleArray36); java.lang.IllegalArgumentException illegalArgumentException41 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) functionEvaluationException40); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNull(doubleArray22); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertNotNull(illegalStateException38); org.junit.Assert.assertNotNull(illegalArgumentException41); }
public void test288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test288"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxEvaluations(52); levenbergMarquardtOptimizer0.cost = (short) 0; int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test289"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray4 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray5 = null; levenbergMarquardtOptimizer0.objective = doubleArray5; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray4); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); }
public void test290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test290"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; double[][] doubleArray11 = null; levenbergMarquardtOptimizer0.jacobian = doubleArray11; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertNull(doubleArray10); }
public void test291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test291"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.cost = 1.0d; int int10 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); }
public void test292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test292"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.checker; int int7 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test293"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 10); double[] doubleArray7 = levenbergMarquardtOptimizer0.point; org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray9 = convergenceException8.getSuppressed(); java.lang.RuntimeException runtimeException10 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable) convergenceException8); double[] doubleArray14 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(doubleArray14); java.lang.Throwable throwable16 = null; double[] doubleArray18 = new double[] { (byte) 100 }; java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(throwable16, doubleArray18, "hi!", objArray26); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair29 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray14, doubleArray18, true); java.lang.Throwable throwable30 = null; double[] doubleArray32 = new double[] { (byte) 100 }; java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(throwable30, doubleArray32, "hi!", objArray40); double[] doubleArray42 = functionEvaluationException41.getArgument(); java.lang.Throwable throwable43 = null; double[] doubleArray45 = new double[] { (byte) 100 }; java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(throwable43, doubleArray45, "hi!", objArray53); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair56 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray45, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair58 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray14, doubleArray45, true); java.lang.Throwable throwable59 = null; double[] doubleArray61 = new double[] { (byte) 100 }; java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException(throwable59, doubleArray61, "hi!", objArray69); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair71 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray45, doubleArray61); double[] doubleArray72 = vectorialPointValuePair71.getValueRef(); java.lang.Throwable throwable77 = null; double[] doubleArray79 = new double[] { (byte) 100 }; java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(throwable77, doubleArray79, "hi!", objArray87); org.apache.commons.math.MathRuntimeException mathRuntimeException89 = new org.apache.commons.math.MathRuntimeException(throwable77); java.lang.String str90 = mathRuntimeException89.getPattern(); java.lang.String str91 = mathRuntimeException89.getPattern(); java.lang.Object[] objArray92 = mathRuntimeException89.getArguments(); java.lang.NullPointerException nullPointerException93 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray92); java.lang.IllegalStateException illegalStateException94 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray92); org.apache.commons.math.ConvergenceException convergenceException95 = new org.apache.commons.math.ConvergenceException("hi!", objArray92); org.apache.commons.math.FunctionEvaluationException functionEvaluationException96 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) runtimeException10, doubleArray72, "Convergence failed", objArray92); double[] doubleArray97 = functionEvaluationException96.getArgument(); levenbergMarquardtOptimizer0.residualsWeights = doubleArray97; int int99 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(throwableArray9); org.junit.Assert.assertNotNull(runtimeException10); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]"); org.junit.Assert.assertNotNull(objArray26); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]"); org.junit.Assert.assertNotNull(objArray40); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]"); org.junit.Assert.assertNotNull(objArray53); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]"); org.junit.Assert.assertNotNull(objArray69); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); org.junit.Assert.assertNotNull(objArray87); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, ""); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, ""); org.junit.Assert.assertNotNull(objArray92); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]"); org.junit.Assert.assertNotNull(nullPointerException93); org.junit.Assert.assertNotNull(illegalStateException94); org.junit.Assert.assertNotNull(doubleArray97); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[100.0]"); org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0); }
public void test294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test294"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); java.lang.Class<?> wildcardClass10 = levenbergMarquardtOptimizer0.getClass(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(wildcardClass10); }
public void test295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test295"); java.lang.Object[] objArray9 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException10 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray9); java.lang.IllegalArgumentException illegalArgumentException11 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException10); java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException10, "", objArray14); org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray14); java.util.ConcurrentModificationException concurrentModificationException17 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray14); java.io.EOFException eOFException18 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.MathRuntimeException$2: ", objArray14); java.lang.IllegalStateException illegalStateException19 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.MathRuntimeException$2: ", objArray14); java.lang.Object[] objArray31 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException32 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray31); java.lang.IllegalArgumentException illegalArgumentException33 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException32); java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException32, "", objArray36); org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray36); java.lang.IllegalArgumentException illegalArgumentException39 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray36); org.apache.commons.math.MathRuntimeException mathRuntimeException40 = new org.apache.commons.math.MathRuntimeException("org.apache.commons.math.MathRuntimeException$2: ", objArray36); java.text.ParseException parseException41 = org.apache.commons.math.MathRuntimeException.createParseException(100, "Convergence failed", objArray36); org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException((java.lang.Throwable) illegalStateException19, "evaluation failed for argument = {0}", objArray36); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer44 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker45 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer44.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker45); double[] doubleArray47 = levenbergMarquardtOptimizer44.residualsWeights; levenbergMarquardtOptimizer44.cost = 0.0d; double[] doubleArray50 = levenbergMarquardtOptimizer44.targetValues; double[] doubleArray51 = levenbergMarquardtOptimizer44.residuals; int int52 = levenbergMarquardtOptimizer44.getMaxIterations(); int int53 = levenbergMarquardtOptimizer44.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer54 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker55 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer54.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker55); levenbergMarquardtOptimizer54.cols = (short) 100; levenbergMarquardtOptimizer54.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer54.setParRelativeTolerance((double) 2147483647); int int63 = levenbergMarquardtOptimizer54.getMaxEvaluations(); int int64 = levenbergMarquardtOptimizer54.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer65 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker66 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer65.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker66); double[] doubleArray68 = levenbergMarquardtOptimizer65.residualsWeights; levenbergMarquardtOptimizer65.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker71 = levenbergMarquardtOptimizer65.getConvergenceChecker(); levenbergMarquardtOptimizer65.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker74 = levenbergMarquardtOptimizer65.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer75 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker76 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer75.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker76); double[] doubleArray78 = levenbergMarquardtOptimizer75.residualsWeights; levenbergMarquardtOptimizer75.cols = 52; levenbergMarquardtOptimizer75.incrementIterationsCounter(); double[] doubleArray86 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray91 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray92 = new double[][] { doubleArray86, doubleArray91 }; levenbergMarquardtOptimizer75.jacobian = doubleArray92; levenbergMarquardtOptimizer65.jacobian = doubleArray92; levenbergMarquardtOptimizer54.jacobian = doubleArray92; levenbergMarquardtOptimizer44.jacobian = doubleArray92; org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException42, "org.apache.commons.math.MathRuntimeException$5: hi!", (java.lang.Object[]) doubleArray92); java.lang.String str98 = mathException42.toString(); org.junit.Assert.assertNotNull(objArray9); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException10); org.junit.Assert.assertNotNull(illegalArgumentException11); org.junit.Assert.assertNotNull(objArray14); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException17); org.junit.Assert.assertNotNull(eOFException18); org.junit.Assert.assertNotNull(illegalStateException19); org.junit.Assert.assertNotNull(objArray31); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException32); org.junit.Assert.assertNotNull(illegalArgumentException33); org.junit.Assert.assertNotNull(objArray36); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException39); org.junit.Assert.assertNotNull(parseException41); org.junit.Assert.assertNull(doubleArray47); org.junit.Assert.assertNull(doubleArray50); org.junit.Assert.assertNull(doubleArray51); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1000 + "'", int52 == 1000); org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0); org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100); org.junit.Assert.assertNull(doubleArray68); org.junit.Assert.assertNotNull(vectorialConvergenceChecker71); org.junit.Assert.assertNotNull(vectorialConvergenceChecker74); org.junit.Assert.assertNull(doubleArray78); org.junit.Assert.assertNotNull(doubleArray86); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray91); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray92); org.junit.Assert.assertEquals("'" + str98 + "' != '" + "org.apache.commons.math.MathException: evaluation failed for argument = 100" + "'", str98, "org.apache.commons.math.MathException: evaluation failed for argument = 100"); }
public void test296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test296"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) 32); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); }
public void test297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test297"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double[] doubleArray6 = levenbergMarquardtOptimizer0.point; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; levenbergMarquardtOptimizer7.cols = 52; levenbergMarquardtOptimizer7.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker14 = levenbergMarquardtOptimizer7.checker; double[][] doubleArray15 = levenbergMarquardtOptimizer7.jacobian; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer16.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); levenbergMarquardtOptimizer16.cols = (short) 100; levenbergMarquardtOptimizer16.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; int int27 = levenbergMarquardtOptimizer23.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker28 = levenbergMarquardtOptimizer23.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker29 = levenbergMarquardtOptimizer23.checker; levenbergMarquardtOptimizer16.checker = vectorialConvergenceChecker29; levenbergMarquardtOptimizer7.checker = vectorialConvergenceChecker29; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker29); double[] doubleArray33 = levenbergMarquardtOptimizer0.objective; int int34 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNotNull(vectorialConvergenceChecker14); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1000 + "'", int27 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker28); org.junit.Assert.assertNotNull(vectorialConvergenceChecker29); org.junit.Assert.assertNull(doubleArray33); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647); }
public void test298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test298"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); levenbergMarquardtOptimizer8.cols = (short) 100; levenbergMarquardtOptimizer8.setCostRelativeTolerance((double) 0L); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker((double) 32, (double) (short) -1); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); double double20 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); }
public void test299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test299"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; int int5 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.rows = 97; org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); }
public void test300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test300"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); int int12 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 2147483647); double double16 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); }
public void test301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test301"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); double[] doubleArray11 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray16 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray17 = new double[][] { doubleArray11, doubleArray16 }; levenbergMarquardtOptimizer0.jacobian = doubleArray17; int int19 = levenbergMarquardtOptimizer0.getEvaluations(); double double20 = levenbergMarquardtOptimizer0.cost; int int21 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1000 + "'", int21 == 1000); }
public void test302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test302"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); double[] doubleArray7 = null; levenbergMarquardtOptimizer0.objective = doubleArray7; int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int10 = levenbergMarquardtOptimizer0.getMaxEvaluations(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (short) 10); double[] doubleArray16 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException(doubleArray16); java.lang.Throwable throwable18 = null; double[] doubleArray20 = new double[] { (byte) 100 }; java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(throwable18, doubleArray20, "hi!", objArray28); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair31 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray16, doubleArray20, true); java.lang.Throwable throwable32 = null; double[] doubleArray34 = new double[] { (byte) 100 }; java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException(throwable32, doubleArray34, "hi!", objArray42); double[] doubleArray44 = functionEvaluationException43.getArgument(); java.lang.Throwable throwable45 = null; double[] doubleArray47 = new double[] { (byte) 100 }; java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(throwable45, doubleArray47, "hi!", objArray55); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair58 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray47, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair60 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray16, doubleArray47, true); double[] doubleArray61 = vectorialPointValuePair60.getValue(); levenbergMarquardtOptimizer0.residuals = doubleArray61; org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]"); org.junit.Assert.assertNotNull(objArray28); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0]"); org.junit.Assert.assertNotNull(objArray42); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]"); org.junit.Assert.assertNotNull(objArray55); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]"); }
public void test303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test303"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test304"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); double[] doubleArray27 = vectorialPointValuePair26.getPoint(); double[] doubleArray31 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(doubleArray31); java.lang.Throwable throwable33 = null; double[] doubleArray35 = new double[] { (byte) 100 }; java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(throwable33, doubleArray35, "hi!", objArray43); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair46 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray31, doubleArray35, true); java.lang.Throwable throwable47 = null; double[] doubleArray49 = new double[] { (byte) 100 }; java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(throwable47, doubleArray49, "hi!", objArray57); double[] doubleArray59 = functionEvaluationException58.getArgument(); java.lang.Throwable throwable60 = null; double[] doubleArray62 = new double[] { (byte) 100 }; java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException(throwable60, doubleArray62, "hi!", objArray70); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair73 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray59, doubleArray62, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair75 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray31, doubleArray62, true); boolean boolean76 = simpleVectorialValueChecker5.converged(10, vectorialPointValuePair26, vectorialPointValuePair75); double[] doubleArray77 = vectorialPointValuePair75.getValueRef(); java.lang.Throwable throwable79 = null; double[] doubleArray81 = new double[] { (byte) 100 }; java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException(throwable79, doubleArray81, "hi!", objArray89); org.apache.commons.math.MathRuntimeException mathRuntimeException91 = new org.apache.commons.math.MathRuntimeException(throwable79); java.lang.String str92 = mathRuntimeException91.getPattern(); java.lang.String str93 = mathRuntimeException91.getPattern(); org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathRuntimeException91); java.lang.Object[] objArray95 = mathRuntimeException91.getArguments(); org.apache.commons.math.MathRuntimeException mathRuntimeException96 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable) mathRuntimeException91); java.lang.Object[] objArray97 = mathRuntimeException96.getArguments(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException98 = new org.apache.commons.math.FunctionEvaluationException(doubleArray77, "Convergence failed", objArray97); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]"); org.junit.Assert.assertNotNull(objArray43); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]"); org.junit.Assert.assertNotNull(objArray57); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]"); org.junit.Assert.assertNotNull(objArray70); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true); org.junit.Assert.assertNotNull(doubleArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray81); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0]"); org.junit.Assert.assertNotNull(objArray89); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, ""); org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, ""); org.junit.Assert.assertNotNull(objArray95); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[]"); org.junit.Assert.assertNotNull(objArray97); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray97), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray97), "[]"); }
public void test305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test305"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int10 = levenbergMarquardtOptimizer0.cols; int int11 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test306"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 10L); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test307"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) '4'); levenbergMarquardtOptimizer0.rows = (byte) 10; double[] doubleArray12 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray13 = levenbergMarquardtOptimizer0.objective; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNull(doubleArray13); }
public void test308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test308"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); double[] doubleArray13 = levenbergMarquardtOptimizer0.residuals; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNull(doubleArray13); }
public void test309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test309"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.objective; double[] doubleArray10 = null; levenbergMarquardtOptimizer6.point = doubleArray10; double[] doubleArray12 = levenbergMarquardtOptimizer6.residualsWeights; int int13 = levenbergMarquardtOptimizer6.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cols = 52; levenbergMarquardtOptimizer14.incrementIterationsCounter(); double[] doubleArray25 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray30 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray31 = new double[][] { doubleArray25, doubleArray30 }; levenbergMarquardtOptimizer14.jacobian = doubleArray31; levenbergMarquardtOptimizer6.jacobian = doubleArray31; java.text.ParseException parseException34 = org.apache.commons.math.MathRuntimeException.createParseException((int) (byte) 1, "Convergence failed", (java.lang.Object[]) doubleArray31); java.lang.ArithmeticException arithmeticException35 = org.apache.commons.math.MathRuntimeException.createArithmeticException("hi!", (java.lang.Object[]) doubleArray31); org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException36 = new org.apache.commons.math.linear.InvalidMatrixException("Convergence failed", (java.lang.Object[]) doubleArray31); org.apache.commons.math.MathRuntimeException mathRuntimeException37 = new org.apache.commons.math.MathRuntimeException("evaluation failed for argument = {0}", (java.lang.Object[]) doubleArray31); java.io.EOFException eOFException38 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) doubleArray31); java.io.IOException iOException39 = org.apache.commons.math.MathRuntimeException.createIOException((java.lang.Throwable) eOFException38); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1000 + "'", int13 == 1000); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertNotNull(parseException34); org.junit.Assert.assertNotNull(arithmeticException35); org.junit.Assert.assertNotNull(eOFException38); org.junit.Assert.assertNotNull(iOException39); }
public void test310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test310"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.cols = 0; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray12 = levenbergMarquardtOptimizer0.objective; int int13 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647); }
public void test311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test311"); double[] doubleArray0 = null; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker2 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer1.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker2); double[] doubleArray4 = levenbergMarquardtOptimizer1.residualsWeights; double double5 = levenbergMarquardtOptimizer1.getChiSquare(); levenbergMarquardtOptimizer1.cols = 10; levenbergMarquardtOptimizer1.setInitialStepBoundFactor((double) (byte) 10); int int10 = levenbergMarquardtOptimizer1.getIterations(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); double[] doubleArray25 = functionEvaluationException24.getArgument(); java.lang.Throwable throwable26 = null; double[] doubleArray28 = new double[] { (byte) 100 }; java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(throwable26, doubleArray28, "hi!", objArray36); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair39 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray25, doubleArray28, false); java.lang.Object[] objArray48 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException49 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray48); java.lang.IllegalArgumentException illegalArgumentException50 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException49); java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException49, "", objArray53); org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray53); java.lang.IllegalArgumentException illegalArgumentException56 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray53); org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException12, doubleArray25, "", objArray53); levenbergMarquardtOptimizer1.residuals = doubleArray25; int int59 = levenbergMarquardtOptimizer1.getJacobianEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker60 = levenbergMarquardtOptimizer1.checker; int int61 = levenbergMarquardtOptimizer1.getJacobianEvaluations(); double[] doubleArray65 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(doubleArray65); java.lang.Throwable throwable67 = null; double[] doubleArray69 = new double[] { (byte) 100 }; java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException(throwable67, doubleArray69, "hi!", objArray77); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair80 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray65, doubleArray69, true); double[] doubleArray81 = vectorialPointValuePair80.getPoint(); org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray84 = convergenceException83.getSuppressed(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException(doubleArray81, "", (java.lang.Object[]) throwableArray84); levenbergMarquardtOptimizer1.targetValues = doubleArray81; org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair88 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray0, doubleArray81, false); org.junit.Assert.assertNull(doubleArray4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]"); org.junit.Assert.assertNotNull(objArray36); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray48); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException49); org.junit.Assert.assertNotNull(illegalArgumentException50); org.junit.Assert.assertNotNull(objArray53); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException56); org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker60); org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0]"); org.junit.Assert.assertNotNull(objArray77); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray81); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(throwableArray84); }
public void test312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test312"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer11 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker12 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer11.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker12); double[] doubleArray14 = levenbergMarquardtOptimizer11.residualsWeights; levenbergMarquardtOptimizer11.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker17 = levenbergMarquardtOptimizer11.getConvergenceChecker(); levenbergMarquardtOptimizer11.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker20 = levenbergMarquardtOptimizer11.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer21 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker22 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer21.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker22); double[] doubleArray24 = levenbergMarquardtOptimizer21.residualsWeights; levenbergMarquardtOptimizer21.cols = 52; levenbergMarquardtOptimizer21.incrementIterationsCounter(); double[] doubleArray32 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray37 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray38 = new double[][] { doubleArray32, doubleArray37 }; levenbergMarquardtOptimizer21.jacobian = doubleArray38; levenbergMarquardtOptimizer11.jacobian = doubleArray38; levenbergMarquardtOptimizer0.jacobian = doubleArray38; int int42 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray43 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray43; int int45 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable46 = null; double[] doubleArray48 = new double[] { (byte) 100 }; java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(throwable46, doubleArray48, "hi!", objArray56); double[] doubleArray58 = functionEvaluationException57.getArgument(); levenbergMarquardtOptimizer0.targetValues = doubleArray58; org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNotNull(vectorialConvergenceChecker17); org.junit.Assert.assertNotNull(vectorialConvergenceChecker20); org.junit.Assert.assertNull(doubleArray24); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0]"); org.junit.Assert.assertNotNull(objArray56); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); }
public void test313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test313"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations(1000); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = null; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker10); int int12 = levenbergMarquardtOptimizer0.getEvaluations(); int int13 = levenbergMarquardtOptimizer0.getIterations(); // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.updateJacobian(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); }
public void test314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test314"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 10); double[] doubleArray7 = levenbergMarquardtOptimizer0.point; org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray9 = convergenceException8.getSuppressed(); java.lang.RuntimeException runtimeException10 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable) convergenceException8); double[] doubleArray14 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(doubleArray14); java.lang.Throwable throwable16 = null; double[] doubleArray18 = new double[] { (byte) 100 }; java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(throwable16, doubleArray18, "hi!", objArray26); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair29 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray14, doubleArray18, true); java.lang.Throwable throwable30 = null; double[] doubleArray32 = new double[] { (byte) 100 }; java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(throwable30, doubleArray32, "hi!", objArray40); double[] doubleArray42 = functionEvaluationException41.getArgument(); java.lang.Throwable throwable43 = null; double[] doubleArray45 = new double[] { (byte) 100 }; java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(throwable43, doubleArray45, "hi!", objArray53); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair56 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray45, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair58 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray14, doubleArray45, true); java.lang.Throwable throwable59 = null; double[] doubleArray61 = new double[] { (byte) 100 }; java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException(throwable59, doubleArray61, "hi!", objArray69); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair71 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray45, doubleArray61); double[] doubleArray72 = vectorialPointValuePair71.getValueRef(); java.lang.Throwable throwable77 = null; double[] doubleArray79 = new double[] { (byte) 100 }; java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(throwable77, doubleArray79, "hi!", objArray87); org.apache.commons.math.MathRuntimeException mathRuntimeException89 = new org.apache.commons.math.MathRuntimeException(throwable77); java.lang.String str90 = mathRuntimeException89.getPattern(); java.lang.String str91 = mathRuntimeException89.getPattern(); java.lang.Object[] objArray92 = mathRuntimeException89.getArguments(); java.lang.NullPointerException nullPointerException93 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray92); java.lang.IllegalStateException illegalStateException94 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray92); org.apache.commons.math.ConvergenceException convergenceException95 = new org.apache.commons.math.ConvergenceException("hi!", objArray92); org.apache.commons.math.FunctionEvaluationException functionEvaluationException96 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) runtimeException10, doubleArray72, "Convergence failed", objArray92); double[] doubleArray97 = functionEvaluationException96.getArgument(); levenbergMarquardtOptimizer0.residualsWeights = doubleArray97; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(throwableArray9); org.junit.Assert.assertNotNull(runtimeException10); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]"); org.junit.Assert.assertNotNull(objArray26); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]"); org.junit.Assert.assertNotNull(objArray40); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]"); org.junit.Assert.assertNotNull(objArray53); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]"); org.junit.Assert.assertNotNull(objArray69); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); org.junit.Assert.assertNotNull(objArray87); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, ""); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, ""); org.junit.Assert.assertNotNull(objArray92); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]"); org.junit.Assert.assertNotNull(nullPointerException93); org.junit.Assert.assertNotNull(illegalStateException94); org.junit.Assert.assertNotNull(doubleArray97); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[100.0]"); }
public void test315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test315"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); levenbergMarquardtOptimizer2.cols = (short) 100; levenbergMarquardtOptimizer2.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer2.setParRelativeTolerance((double) 2147483647); int int11 = levenbergMarquardtOptimizer2.getMaxEvaluations(); int int12 = levenbergMarquardtOptimizer2.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer13 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker14 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer13.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker14); double[] doubleArray16 = levenbergMarquardtOptimizer13.residualsWeights; levenbergMarquardtOptimizer13.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker19 = levenbergMarquardtOptimizer13.getConvergenceChecker(); levenbergMarquardtOptimizer13.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker22 = levenbergMarquardtOptimizer13.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cols = 52; levenbergMarquardtOptimizer23.incrementIterationsCounter(); double[] doubleArray34 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray39 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray40 = new double[][] { doubleArray34, doubleArray39 }; levenbergMarquardtOptimizer23.jacobian = doubleArray40; levenbergMarquardtOptimizer13.jacobian = doubleArray40; levenbergMarquardtOptimizer2.jacobian = doubleArray40; org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) doubleArray40); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100); org.junit.Assert.assertNull(doubleArray16); org.junit.Assert.assertNotNull(vectorialConvergenceChecker19); org.junit.Assert.assertNotNull(vectorialConvergenceChecker22); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray40); }
public void test316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test316"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); java.lang.Class<?> wildcardClass8 = levenbergMarquardtOptimizer0.getClass(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test317"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); levenbergMarquardtOptimizer0.rows = (byte) 10; double[] doubleArray6 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray7 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); }
public void test318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test318"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer2.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker9; double[] doubleArray11 = levenbergMarquardtOptimizer0.targetValues; int int12 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); }
public void test319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test319"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; levenbergMarquardtOptimizer0.cost = ' '; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); }
public void test320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test320"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); double[] doubleArray9 = levenbergMarquardtOptimizer0.residuals; int int10 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1000 + "'", int10 == 1000); }
public void test321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test321"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[][] doubleArray8 = levenbergMarquardtOptimizer0.jacobian; int int9 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000); }
public void test322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test322"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[][] doubleArray8 = levenbergMarquardtOptimizer0.jacobian; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int11 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); }
public void test323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test323"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray2 = levenbergMarquardtOptimizer0.point; double[] doubleArray3 = levenbergMarquardtOptimizer0.point; double[] doubleArray4 = levenbergMarquardtOptimizer0.residuals; int int5 = levenbergMarquardtOptimizer0.cols; org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertNull(doubleArray2); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray4); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); }
public void test324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test324"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) -1); double[] doubleArray11 = levenbergMarquardtOptimizer0.objective; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(doubleArray11); }
public void test325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test325"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.cost = '#'; levenbergMarquardtOptimizer0.rows = 0; double double15 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d); }
public void test326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test326"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray12 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(doubleArray12); java.lang.Throwable throwable14 = null; double[] doubleArray16 = new double[] { (byte) 100 }; java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(throwable14, doubleArray16, "hi!", objArray24); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair27 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray12, doubleArray16, true); double[] doubleArray28 = vectorialPointValuePair27.getPoint(); java.lang.Throwable throwable29 = null; double[] doubleArray31 = new double[] { (byte) 100 }; java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(throwable29, doubleArray31, "hi!", objArray39); double[] doubleArray41 = functionEvaluationException40.getArgument(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair42 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray28, doubleArray41); double[] doubleArray43 = vectorialPointValuePair42.getPoint(); double[] doubleArray44 = vectorialPointValuePair42.getPointRef(); levenbergMarquardtOptimizer0.targetValues = doubleArray44; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]"); org.junit.Assert.assertNotNull(objArray24); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(objArray39); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 1.0, -1.0]"); }
public void test327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test327"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = ' '; int int8 = levenbergMarquardtOptimizer0.rows; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test328"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 100); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test329"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray11 = levenbergMarquardtOptimizer0.point; int int12 = levenbergMarquardtOptimizer0.cols; double[] doubleArray13 = levenbergMarquardtOptimizer0.residualsWeights; // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.updateJacobian(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNull(doubleArray13); }
public void test330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test330"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; int int11 = levenbergMarquardtOptimizer7.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer7.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer7.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker13; double double15 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); }
public void test331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test331"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); levenbergMarquardtOptimizer0.rows = (byte) 10; levenbergMarquardtOptimizer0.setMaxIterations(2147483647); int int8 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test332"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 1); int int12 = levenbergMarquardtOptimizer0.getIterations(); double[][] doubleArray13 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNull(doubleArray13); }
public void test333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test333"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; int int2 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer3 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker4 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer3.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker4); levenbergMarquardtOptimizer3.cols = (short) 100; levenbergMarquardtOptimizer3.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer3.setParRelativeTolerance((double) 2147483647); int int12 = levenbergMarquardtOptimizer3.getMaxEvaluations(); levenbergMarquardtOptimizer3.setInitialStepBoundFactor(10.0d); int int15 = levenbergMarquardtOptimizer3.getEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer16.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); double[] doubleArray19 = levenbergMarquardtOptimizer16.residualsWeights; levenbergMarquardtOptimizer16.cols = 52; int int22 = levenbergMarquardtOptimizer16.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker23 = levenbergMarquardtOptimizer16.checker; levenbergMarquardtOptimizer3.setConvergenceChecker(vectorialConvergenceChecker23); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker23); org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNull(doubleArray19); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker23); }
public void test334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test334"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int10 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer11 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker12 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer11.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker12); double[] doubleArray14 = levenbergMarquardtOptimizer11.residualsWeights; int int15 = levenbergMarquardtOptimizer11.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker16 = levenbergMarquardtOptimizer11.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer17 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker18 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer17.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker18); double[] doubleArray20 = levenbergMarquardtOptimizer17.residualsWeights; levenbergMarquardtOptimizer17.cost = 0.0d; double[] doubleArray23 = levenbergMarquardtOptimizer17.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker24 = levenbergMarquardtOptimizer17.getConvergenceChecker(); levenbergMarquardtOptimizer11.checker = vectorialConvergenceChecker24; int int26 = levenbergMarquardtOptimizer11.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer27 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker28 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer27.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker28); double[] doubleArray30 = levenbergMarquardtOptimizer27.residualsWeights; int int31 = levenbergMarquardtOptimizer27.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker32 = levenbergMarquardtOptimizer27.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker33 = levenbergMarquardtOptimizer27.checker; levenbergMarquardtOptimizer11.setConvergenceChecker(vectorialConvergenceChecker33); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker33; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer36 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker37 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer36.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker37); double[] doubleArray39 = levenbergMarquardtOptimizer36.residualsWeights; int int40 = levenbergMarquardtOptimizer36.getJacobianEvaluations(); levenbergMarquardtOptimizer36.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer42 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker43 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer42.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker43); double[] doubleArray45 = levenbergMarquardtOptimizer42.residualsWeights; levenbergMarquardtOptimizer42.cols = 52; int int48 = levenbergMarquardtOptimizer42.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker49 = levenbergMarquardtOptimizer42.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer50 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker51 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer50.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker51); double[] doubleArray53 = levenbergMarquardtOptimizer50.residualsWeights; levenbergMarquardtOptimizer50.cost = 0.0d; double[] doubleArray56 = levenbergMarquardtOptimizer50.targetValues; double[] doubleArray57 = levenbergMarquardtOptimizer50.residuals; int int58 = levenbergMarquardtOptimizer50.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer59 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker60 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer59.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker60); double[] doubleArray62 = levenbergMarquardtOptimizer59.residualsWeights; levenbergMarquardtOptimizer59.cost = 0.0d; double[] doubleArray65 = levenbergMarquardtOptimizer59.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker66 = levenbergMarquardtOptimizer59.getConvergenceChecker(); levenbergMarquardtOptimizer50.setConvergenceChecker(vectorialConvergenceChecker66); levenbergMarquardtOptimizer42.checker = vectorialConvergenceChecker66; levenbergMarquardtOptimizer36.setConvergenceChecker(vectorialConvergenceChecker66); int int70 = levenbergMarquardtOptimizer36.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer71 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker72 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer71.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker72); double[] doubleArray74 = levenbergMarquardtOptimizer71.residualsWeights; int int75 = levenbergMarquardtOptimizer71.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker76 = levenbergMarquardtOptimizer71.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker77 = levenbergMarquardtOptimizer71.checker; int int78 = levenbergMarquardtOptimizer71.getMaxEvaluations(); double[] doubleArray83 = new double[] { 52, 0.0f, 0L, 0L }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException(doubleArray83); levenbergMarquardtOptimizer71.objective = doubleArray83; levenbergMarquardtOptimizer36.point = doubleArray83; levenbergMarquardtOptimizer0.point = doubleArray83; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker16); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray23); org.junit.Assert.assertNotNull(vectorialConvergenceChecker24); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1000 + "'", int26 == 1000); org.junit.Assert.assertNull(doubleArray30); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1000 + "'", int31 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker32); org.junit.Assert.assertNotNull(vectorialConvergenceChecker33); org.junit.Assert.assertNull(doubleArray39); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertNull(doubleArray45); org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker49); org.junit.Assert.assertNull(doubleArray53); org.junit.Assert.assertNull(doubleArray56); org.junit.Assert.assertNull(doubleArray57); org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0); org.junit.Assert.assertNull(doubleArray62); org.junit.Assert.assertNull(doubleArray65); org.junit.Assert.assertNotNull(vectorialConvergenceChecker66); org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647); org.junit.Assert.assertNull(doubleArray74); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1000 + "'", int75 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker76); org.junit.Assert.assertNotNull(vectorialConvergenceChecker77); org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647); org.junit.Assert.assertNotNull(doubleArray83); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[52.0, 0.0, 0.0, 0.0]"); }
public void test335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test335"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); int int11 = levenbergMarquardtOptimizer8.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer8.getConvergenceChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker12); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); }
public void test336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test336"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0d); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 1.0f); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); double[] doubleArray13 = levenbergMarquardtOptimizer10.residualsWeights; levenbergMarquardtOptimizer10.cost = 0.0d; double[] doubleArray16 = levenbergMarquardtOptimizer10.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker17 = levenbergMarquardtOptimizer10.getConvergenceChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker17); // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.updateJacobian(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertNull(doubleArray16); org.junit.Assert.assertNotNull(vectorialConvergenceChecker17); }
public void test337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test337"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray4 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxIterations((int) '4'); int int7 = levenbergMarquardtOptimizer0.cols; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray4); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); }
public void test338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test338"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int5 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1000 + "'", int5 == 1000); }
public void test339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test339"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int2 = levenbergMarquardtOptimizer0.getIterations(); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); }
public void test340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test340"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray5 = levenbergMarquardtOptimizer0.residuals; org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray5); }
public void test341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test341"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer2.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker9; int int11 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); }
public void test342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test342"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getIterations(); int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int11 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test343"); java.lang.Object[] objArray7 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException8 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray7); java.lang.IllegalArgumentException illegalArgumentException9 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException8); java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException8, "", objArray12); org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray12); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer16.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); double[] doubleArray19 = levenbergMarquardtOptimizer16.residualsWeights; levenbergMarquardtOptimizer16.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker22 = levenbergMarquardtOptimizer16.getConvergenceChecker(); levenbergMarquardtOptimizer16.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker25 = levenbergMarquardtOptimizer16.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer26 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker27 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer26.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker27); double[] doubleArray29 = levenbergMarquardtOptimizer26.residualsWeights; levenbergMarquardtOptimizer26.cols = 52; levenbergMarquardtOptimizer26.incrementIterationsCounter(); double[] doubleArray37 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray42 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray43 = new double[][] { doubleArray37, doubleArray42 }; levenbergMarquardtOptimizer26.jacobian = doubleArray43; levenbergMarquardtOptimizer16.jacobian = doubleArray43; org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException14, "", (java.lang.Object[]) doubleArray43); java.lang.IllegalArgumentException illegalArgumentException47 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("org.apache.commons.math.MathRuntimeException: ", (java.lang.Object[]) doubleArray43); java.lang.String str48 = illegalArgumentException47.toString(); org.junit.Assert.assertNotNull(objArray7); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException8); org.junit.Assert.assertNotNull(illegalArgumentException9); org.junit.Assert.assertNotNull(objArray12); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0]"); org.junit.Assert.assertNull(doubleArray19); org.junit.Assert.assertNotNull(vectorialConvergenceChecker22); org.junit.Assert.assertNotNull(vectorialConvergenceChecker25); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertNotNull(illegalArgumentException47); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org.apache.commons.math.MathRuntimeException$4: org.apache.commons.math.MathRuntimeException: " + "'", str48, "org.apache.commons.math.MathRuntimeException$4: org.apache.commons.math.MathRuntimeException: "); }
public void test344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test344"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 10); double[] doubleArray7 = levenbergMarquardtOptimizer0.point; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); }
public void test345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test345"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) '4'); }
public void test346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test346"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.targetValues; levenbergMarquardtOptimizer0.setOrthoTolerance(0.0d); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); }
public void test347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test347"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException9 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0); org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) maxIterationsExceededException9, 100.0d); double[] doubleArray17 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(doubleArray17); java.lang.Throwable throwable19 = null; double[] doubleArray21 = new double[] { (byte) 100 }; java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(throwable19, doubleArray21, "hi!", objArray29); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair32 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray17, doubleArray21, true); double[] doubleArray33 = vectorialPointValuePair32.getPoint(); org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray36 = convergenceException35.getSuppressed(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(doubleArray33, "", (java.lang.Object[]) throwableArray36); java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException38 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) throwableArray36); org.apache.commons.math.MathRuntimeException mathRuntimeException39 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable) maxIterationsExceededException9, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray36); double[] doubleArray43 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(doubleArray43); java.lang.Throwable throwable45 = null; double[] doubleArray47 = new double[] { (byte) 100 }; java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(throwable45, doubleArray47, "hi!", objArray55); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair58 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray43, doubleArray47, true); double[] doubleArray59 = vectorialPointValuePair58.getPoint(); java.lang.Throwable throwable60 = null; double[] doubleArray62 = new double[] { (byte) 100 }; java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException(throwable60, doubleArray62, "hi!", objArray70); double[] doubleArray72 = functionEvaluationException71.getArgument(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair73 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray59, doubleArray72); org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) mathRuntimeException39, doubleArray59); double[] doubleArray75 = functionEvaluationException74.getArgument(); levenbergMarquardtOptimizer0.targetValues = doubleArray75; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]"); org.junit.Assert.assertNotNull(objArray29); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(throwableArray36); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException38); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0]"); org.junit.Assert.assertNotNull(objArray55); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]"); org.junit.Assert.assertNotNull(objArray70); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, 1.0, -1.0]"); }
public void test348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test348"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray9 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); double[] doubleArray12 = levenbergMarquardtOptimizer0.residuals; levenbergMarquardtOptimizer0.setParRelativeTolerance((double) '4'); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertNull(doubleArray12); }
public void test349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test349"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; double[] doubleArray6 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.setMaxIterations((int) '4'); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer9 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker10 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer9.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker10); double[] doubleArray12 = levenbergMarquardtOptimizer9.residualsWeights; levenbergMarquardtOptimizer9.cost = 0.0d; double[] doubleArray15 = levenbergMarquardtOptimizer9.targetValues; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int17 = levenbergMarquardtOptimizer16.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer18 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker19 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer18.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker19); double[] doubleArray21 = levenbergMarquardtOptimizer18.residualsWeights; levenbergMarquardtOptimizer18.cols = 52; levenbergMarquardtOptimizer18.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker25 = levenbergMarquardtOptimizer18.checker; levenbergMarquardtOptimizer16.checker = vectorialConvergenceChecker25; levenbergMarquardtOptimizer9.checker = vectorialConvergenceChecker25; levenbergMarquardtOptimizer2.setConvergenceChecker(vectorialConvergenceChecker25); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker25); int int30 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 10L); org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertNotNull(vectorialConvergenceChecker25); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); }
public void test350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test350"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray2 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertNull(doubleArray2); }
public void test351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test351"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; double[] doubleArray11 = null; levenbergMarquardtOptimizer0.point = doubleArray11; levenbergMarquardtOptimizer0.setMaxIterations((int) (short) -1); int int15 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); }
public void test352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test352"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) -1); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; double[] doubleArray11 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxIterations(0); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNull(doubleArray11); }
public void test353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test353"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); levenbergMarquardtOptimizer0.setParRelativeTolerance((-1.0d)); levenbergMarquardtOptimizer0.cost = (-1); // The following exception was thrown during execution in test generation try { double[] doubleArray11 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); }
public void test354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test354"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000); }
public void test355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test355"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 100); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker11 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray13 = levenbergMarquardtOptimizer0.residualsWeights; org.junit.Assert.assertNotNull(vectorialConvergenceChecker11); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); org.junit.Assert.assertNull(doubleArray13); }
public void test356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test356"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.rows = 'a'; // The following exception was thrown during execution in test generation try { double double13 = levenbergMarquardtOptimizer0.getChiSquare(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test357"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray14 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(doubleArray14); java.lang.Throwable throwable16 = null; double[] doubleArray18 = new double[] { (byte) 100 }; java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(throwable16, doubleArray18, "hi!", objArray26); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair29 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray14, doubleArray18, true); double[] doubleArray30 = vectorialPointValuePair29.getValue(); double[] doubleArray31 = vectorialPointValuePair29.getPoint(); double[] doubleArray35 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(doubleArray35); java.lang.Throwable throwable37 = null; double[] doubleArray39 = new double[] { (byte) 100 }; java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException(throwable37, doubleArray39, "hi!", objArray47); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair50 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray35, doubleArray39, true); java.lang.Throwable throwable51 = null; double[] doubleArray53 = new double[] { (byte) 100 }; java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException(throwable51, doubleArray53, "hi!", objArray61); double[] doubleArray63 = functionEvaluationException62.getArgument(); java.lang.Throwable throwable64 = null; double[] doubleArray66 = new double[] { (byte) 100 }; java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException(throwable64, doubleArray66, "hi!", objArray74); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair77 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray63, doubleArray66, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair79 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray35, doubleArray66, true); java.lang.Throwable throwable80 = null; double[] doubleArray82 = new double[] { (byte) 100 }; java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException(throwable80, doubleArray82, "hi!", objArray90); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair92 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray66, doubleArray82); double[] doubleArray93 = vectorialPointValuePair92.getPointRef(); double[] doubleArray94 = vectorialPointValuePair92.getPoint(); double[] doubleArray95 = vectorialPointValuePair92.getPointRef(); double[] doubleArray96 = vectorialPointValuePair92.getPointRef(); double[] doubleArray97 = vectorialPointValuePair92.getValueRef(); boolean boolean98 = vectorialConvergenceChecker9.converged((int) (byte) 1, vectorialPointValuePair29, vectorialPointValuePair92); double[] doubleArray99 = vectorialPointValuePair29.getPoint(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]"); org.junit.Assert.assertNotNull(objArray26); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(objArray47); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]"); org.junit.Assert.assertNotNull(objArray61); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0]"); org.junit.Assert.assertNotNull(objArray74); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0]"); org.junit.Assert.assertNotNull(objArray90); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray93); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray94); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray95); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray96); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray97); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[100.0]"); org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true); org.junit.Assert.assertNotNull(doubleArray99); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[10.0, 1.0, -1.0]"); }
public void test358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test358"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.residualsWeights; levenbergMarquardtOptimizer6.cols = 52; int int12 = levenbergMarquardtOptimizer6.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer6.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cost = 0.0d; double[] doubleArray20 = levenbergMarquardtOptimizer14.targetValues; double[] doubleArray21 = levenbergMarquardtOptimizer14.residuals; int int22 = levenbergMarquardtOptimizer14.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cost = 0.0d; double[] doubleArray29 = levenbergMarquardtOptimizer23.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker30 = levenbergMarquardtOptimizer23.getConvergenceChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker(vectorialConvergenceChecker30); levenbergMarquardtOptimizer6.checker = vectorialConvergenceChecker30; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker30); int int34 = levenbergMarquardtOptimizer0.rows; org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray36 = convergenceException35.getSuppressed(); double[] doubleArray42 = new double[] { (-1L), ' ', 'a', (short) 0, 2147483647 }; java.lang.Object[] objArray52 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException53 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray52); java.lang.IllegalArgumentException illegalArgumentException54 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException53); java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException53, "", objArray57); org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray57); java.util.ConcurrentModificationException concurrentModificationException60 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray57); java.lang.Object[] objArray68 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException69 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray68); java.lang.Object[] objArray79 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException80 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray79); java.lang.IllegalArgumentException illegalArgumentException81 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException80); java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException80, "", objArray84); org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray84); java.util.ConcurrentModificationException concurrentModificationException87 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray84); java.util.ConcurrentModificationException concurrentModificationException88 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray84); org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException69, "", objArray84); org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) concurrentModificationException60, (double) 10, "", objArray84); org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray84); org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) convergenceException35, doubleArray42, "org.apache.commons.math.MathRuntimeException$2: ", objArray84); double[] doubleArray93 = null; org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair95 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray93, false); levenbergMarquardtOptimizer0.residuals = doubleArray42; double[] doubleArray97 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertNotNull(vectorialConvergenceChecker30); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertNotNull(throwableArray36); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 32.0, 97.0, 0.0, 2.147483647E9]"); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException53); org.junit.Assert.assertNotNull(illegalArgumentException54); org.junit.Assert.assertNotNull(objArray57); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException60); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException69); org.junit.Assert.assertNotNull(objArray79); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException80); org.junit.Assert.assertNotNull(illegalArgumentException81); org.junit.Assert.assertNotNull(objArray84); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException87); org.junit.Assert.assertNotNull(concurrentModificationException88); org.junit.Assert.assertNull(doubleArray97); }
public void test359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test359"); org.apache.commons.math.MaxEvaluationsExceededException maxEvaluationsExceededException1 = new org.apache.commons.math.MaxEvaluationsExceededException((int) '4'); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer2.checker; levenbergMarquardtOptimizer2.cost = 1.0d; levenbergMarquardtOptimizer2.rows = '#'; java.lang.Throwable throwable14 = null; double[] doubleArray16 = new double[] { (byte) 100 }; java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(throwable14, doubleArray16, "hi!", objArray24); double[] doubleArray26 = functionEvaluationException25.getArgument(); java.lang.Object[] objArray35 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException36 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray35); java.lang.IllegalArgumentException illegalArgumentException37 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException36); java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException36, "", objArray40); org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray40); java.util.ConcurrentModificationException concurrentModificationException43 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray40); org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException25, "", objArray40); java.lang.Throwable throwable46 = null; double[] doubleArray48 = new double[] { (byte) 100 }; java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(throwable46, doubleArray48, "hi!", objArray56); org.apache.commons.math.MathRuntimeException mathRuntimeException58 = new org.apache.commons.math.MathRuntimeException(throwable46); java.lang.String str59 = mathRuntimeException58.getPattern(); java.lang.String str60 = mathRuntimeException58.getPattern(); org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathRuntimeException58); java.lang.Object[] objArray62 = mathRuntimeException58.getArguments(); org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException25, "hi!", objArray62); double[] doubleArray64 = functionEvaluationException25.getArgument(); levenbergMarquardtOptimizer2.residuals = doubleArray64; java.lang.Object[] objArray67 = null; org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) maxEvaluationsExceededException1, doubleArray64, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray67); org.apache.commons.math.optimization.OptimizationException optimizationException69 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable) maxEvaluationsExceededException1); int int70 = maxEvaluationsExceededException1.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]"); org.junit.Assert.assertNotNull(objArray24); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]"); org.junit.Assert.assertNotNull(objArray35); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException36); org.junit.Assert.assertNotNull(illegalArgumentException37); org.junit.Assert.assertNotNull(objArray40); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException43); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0]"); org.junit.Assert.assertNotNull(objArray56); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, ""); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNotNull(objArray62); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0]"); org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52); }
public void test360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test360"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxEvaluations(52); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 0.0f); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test361"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); int int12 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); }
public void test362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test362"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double double71 = levenbergMarquardtOptimizer0.getChiSquare(); double[] doubleArray72 = levenbergMarquardtOptimizer0.targetValues; levenbergMarquardtOptimizer0.cols = (short) 100; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); }
public void test363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test363"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int10 = levenbergMarquardtOptimizer0.getMaxIterations(); double[][] doubleArray11 = levenbergMarquardtOptimizer0.jacobian; levenbergMarquardtOptimizer0.cols = '#'; int int14 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1000 + "'", int10 == 1000); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); }
public void test364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test364"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray9 = new double[] { (byte) -1, (byte) 10 }; double[] doubleArray12 = new double[] { (byte) -1, (byte) 10 }; double[] doubleArray15 = new double[] { (byte) -1, (byte) 10 }; double[][] doubleArray16 = new double[][] { doubleArray9, doubleArray12, doubleArray15 }; levenbergMarquardtOptimizer0.jacobian = doubleArray16; int int18 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); // The following exception was thrown during execution in test generation try { double[][] doubleArray19 = levenbergMarquardtOptimizer0.getCovariances(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); }
public void test365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test365"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.residualsWeights; levenbergMarquardtOptimizer6.cols = 52; int int12 = levenbergMarquardtOptimizer6.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer6.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cost = 0.0d; double[] doubleArray20 = levenbergMarquardtOptimizer14.targetValues; double[] doubleArray21 = levenbergMarquardtOptimizer14.residuals; int int22 = levenbergMarquardtOptimizer14.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cost = 0.0d; double[] doubleArray29 = levenbergMarquardtOptimizer23.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker30 = levenbergMarquardtOptimizer23.getConvergenceChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker(vectorialConvergenceChecker30); levenbergMarquardtOptimizer6.checker = vectorialConvergenceChecker30; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker30); int int34 = levenbergMarquardtOptimizer0.rows; double[] doubleArray38 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(doubleArray38); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray38, doubleArray42, true); java.lang.Throwable throwable54 = null; double[] doubleArray56 = new double[] { (byte) 100 }; java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException(throwable54, doubleArray56, "hi!", objArray64); double[] doubleArray66 = functionEvaluationException65.getArgument(); java.lang.Throwable throwable67 = null; double[] doubleArray69 = new double[] { (byte) 100 }; java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException(throwable67, doubleArray69, "hi!", objArray77); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair80 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray66, doubleArray69, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair82 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray38, doubleArray69, true); levenbergMarquardtOptimizer0.residualsWeights = doubleArray38; // The following exception was thrown during execution in test generation try { double[] doubleArray84 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertNotNull(vectorialConvergenceChecker30); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0]"); org.junit.Assert.assertNotNull(objArray64); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0]"); org.junit.Assert.assertNotNull(objArray77); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 4, true, true, 100.0, 100]"); }
public void test366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test366"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[][] doubleArray8 = levenbergMarquardtOptimizer0.jacobian; int int9 = levenbergMarquardtOptimizer0.getMaxIterations(); int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test367"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker2 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer1.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker2); double[] doubleArray4 = levenbergMarquardtOptimizer1.residualsWeights; levenbergMarquardtOptimizer1.cols = 52; double[] doubleArray7 = levenbergMarquardtOptimizer1.residuals; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.objective; double[] doubleArray18 = null; levenbergMarquardtOptimizer14.point = doubleArray18; double[] doubleArray20 = levenbergMarquardtOptimizer14.residualsWeights; int int21 = levenbergMarquardtOptimizer14.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer22 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker23 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer22.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker23); double[] doubleArray25 = levenbergMarquardtOptimizer22.residualsWeights; levenbergMarquardtOptimizer22.cols = 52; levenbergMarquardtOptimizer22.incrementIterationsCounter(); double[] doubleArray33 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray38 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray39 = new double[][] { doubleArray33, doubleArray38 }; levenbergMarquardtOptimizer22.jacobian = doubleArray39; levenbergMarquardtOptimizer14.jacobian = doubleArray39; java.text.ParseException parseException42 = org.apache.commons.math.MathRuntimeException.createParseException((int) (byte) 1, "Convergence failed", (java.lang.Object[]) doubleArray39); java.lang.ArithmeticException arithmeticException43 = org.apache.commons.math.MathRuntimeException.createArithmeticException("hi!", (java.lang.Object[]) doubleArray39); org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException44 = new org.apache.commons.math.linear.InvalidMatrixException("Convergence failed", (java.lang.Object[]) doubleArray39); org.apache.commons.math.MathRuntimeException mathRuntimeException45 = new org.apache.commons.math.MathRuntimeException("evaluation failed for argument = {0}", (java.lang.Object[]) doubleArray39); java.io.EOFException eOFException46 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) doubleArray39); levenbergMarquardtOptimizer1.jacobian = doubleArray39; java.io.EOFException eOFException48 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.MaxEvaluationsExceededException: Maximal number of evaluations (10) exceeded", (java.lang.Object[]) doubleArray39); org.junit.Assert.assertNull(doubleArray4); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1000 + "'", int21 == 1000); org.junit.Assert.assertNull(doubleArray25); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertNotNull(parseException42); org.junit.Assert.assertNotNull(arithmeticException43); org.junit.Assert.assertNotNull(eOFException46); org.junit.Assert.assertNotNull(eOFException48); }
public void test368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test368"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); double[] doubleArray11 = levenbergMarquardtOptimizer8.residualsWeights; levenbergMarquardtOptimizer8.cols = 52; levenbergMarquardtOptimizer8.incrementIterationsCounter(); double[] doubleArray19 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray24 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray25 = new double[][] { doubleArray19, doubleArray24 }; levenbergMarquardtOptimizer8.jacobian = doubleArray25; levenbergMarquardtOptimizer2.jacobian = doubleArray25; org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 2147483647, "", (java.lang.Object[]) doubleArray25); java.io.IOException iOException29 = org.apache.commons.math.MathRuntimeException.createIOException((java.lang.Throwable) functionEvaluationException28); java.lang.String str30 = iOException29.toString(); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertNotNull(iOException29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.io.IOException: " + "'", str30, "java.io.IOException: "); }
public void test369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test369"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setMaxIterations((-1)); levenbergMarquardtOptimizer0.setMaxIterations(52); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test370"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer5 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker6 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer5.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker6); double[] doubleArray8 = levenbergMarquardtOptimizer5.residualsWeights; levenbergMarquardtOptimizer5.cost = 0.0d; double[] doubleArray11 = levenbergMarquardtOptimizer5.targetValues; double[] doubleArray12 = levenbergMarquardtOptimizer5.residuals; int int13 = levenbergMarquardtOptimizer5.getMaxIterations(); double[] doubleArray14 = null; levenbergMarquardtOptimizer5.targetValues = doubleArray14; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker16 = levenbergMarquardtOptimizer5.getConvergenceChecker(); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker16; org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1000 + "'", int13 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker16); }
public void test371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test371"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; java.lang.Object[] objArray15 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException16 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray15); java.lang.IllegalArgumentException illegalArgumentException17 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException16); java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException16, "", objArray20); org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray20); double[] doubleArray26 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(doubleArray26); java.lang.Throwable throwable28 = null; double[] doubleArray30 = new double[] { (byte) 100 }; java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(throwable28, doubleArray30, "hi!", objArray38); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair41 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray26, doubleArray30, true); java.lang.Throwable throwable42 = null; double[] doubleArray44 = new double[] { (byte) 100 }; java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(throwable42, doubleArray44, "hi!", objArray52); double[] doubleArray54 = functionEvaluationException53.getArgument(); java.lang.Throwable throwable55 = null; double[] doubleArray57 = new double[] { (byte) 100 }; java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(throwable55, doubleArray57, "hi!", objArray65); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray54, doubleArray57, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray26, doubleArray57, true); java.lang.Throwable throwable71 = null; double[] doubleArray73 = new double[] { (byte) 100 }; java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException(throwable71, doubleArray73, "hi!", objArray81); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair83 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray57, doubleArray73); org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) convergenceException22, doubleArray73); levenbergMarquardtOptimizer0.residualsWeights = doubleArray73; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) '#'); double[] doubleArray88 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setOrthoTolerance((-1.0d)); double[] doubleArray91 = levenbergMarquardtOptimizer0.residualsWeights; org.junit.Assert.assertNotNull(objArray15); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException16); org.junit.Assert.assertNotNull(illegalArgumentException17); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]"); org.junit.Assert.assertNotNull(objArray38); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0]"); org.junit.Assert.assertNotNull(objArray65); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0]"); org.junit.Assert.assertNotNull(objArray81); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray88); org.junit.Assert.assertNotNull(doubleArray91); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.0]"); }
public void test372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test372"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations(2147483647); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test373"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray5 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNull(doubleArray6); }
public void test374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test374"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 1000); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 1.0f); levenbergMarquardtOptimizer0.setMaxIterations(52); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) (short) 10); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test375"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; double double26 = levenbergMarquardtOptimizer0.getRMS(); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 1000); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker29 = levenbergMarquardtOptimizer0.checker; // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair30 = levenbergMarquardtOptimizer0.doOptimize(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue(Double.isNaN(double26)); org.junit.Assert.assertNotNull(vectorialConvergenceChecker29); }
public void test376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test376"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double[] doubleArray6 = levenbergMarquardtOptimizer0.point; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; levenbergMarquardtOptimizer7.cols = 52; levenbergMarquardtOptimizer7.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker14 = levenbergMarquardtOptimizer7.checker; double[][] doubleArray15 = levenbergMarquardtOptimizer7.jacobian; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer16.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); levenbergMarquardtOptimizer16.cols = (short) 100; levenbergMarquardtOptimizer16.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; int int27 = levenbergMarquardtOptimizer23.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker28 = levenbergMarquardtOptimizer23.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker29 = levenbergMarquardtOptimizer23.checker; levenbergMarquardtOptimizer16.checker = vectorialConvergenceChecker29; levenbergMarquardtOptimizer7.checker = vectorialConvergenceChecker29; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker29); double double33 = levenbergMarquardtOptimizer0.getChiSquare(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNotNull(vectorialConvergenceChecker14); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1000 + "'", int27 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker28); org.junit.Assert.assertNotNull(vectorialConvergenceChecker29); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); }
public void test377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test377"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations(32); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); }
public void test378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test378"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int8 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) (short) 1); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52); }
public void test379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test379"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; double double26 = levenbergMarquardtOptimizer0.getRMS(); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 1000); double double29 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) -1); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue(Double.isNaN(double26)); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); }
public void test380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test380"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; int int2 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray3 = levenbergMarquardtOptimizer0.point; double double4 = levenbergMarquardtOptimizer0.getRMS(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.checker; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue(Double.isNaN(double4)); org.junit.Assert.assertNull(vectorialConvergenceChecker5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); }
public void test381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test381"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); double[] doubleArray7 = null; levenbergMarquardtOptimizer0.objective = doubleArray7; double double9 = levenbergMarquardtOptimizer0.getChiSquare(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test382"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray4 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray5 = null; levenbergMarquardtOptimizer0.objective = doubleArray5; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker12 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker12); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker14 = levenbergMarquardtOptimizer7.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer15 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker16 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer15.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker16); levenbergMarquardtOptimizer15.cols = (short) 100; levenbergMarquardtOptimizer15.setCostRelativeTolerance((double) 0L); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker((double) 32, (double) (short) -1); levenbergMarquardtOptimizer15.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray28 = levenbergMarquardtOptimizer0.residualsWeights; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray4); org.junit.Assert.assertNotNull(vectorialConvergenceChecker14); org.junit.Assert.assertNull(doubleArray28); }
public void test383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test383"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer11 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker12 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer11.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker12); double[] doubleArray14 = levenbergMarquardtOptimizer11.residualsWeights; levenbergMarquardtOptimizer11.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker17 = levenbergMarquardtOptimizer11.getConvergenceChecker(); levenbergMarquardtOptimizer11.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker20 = levenbergMarquardtOptimizer11.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer21 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker22 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer21.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker22); double[] doubleArray24 = levenbergMarquardtOptimizer21.residualsWeights; levenbergMarquardtOptimizer21.cols = 52; levenbergMarquardtOptimizer21.incrementIterationsCounter(); double[] doubleArray32 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray37 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray38 = new double[][] { doubleArray32, doubleArray37 }; levenbergMarquardtOptimizer21.jacobian = doubleArray38; levenbergMarquardtOptimizer11.jacobian = doubleArray38; levenbergMarquardtOptimizer0.jacobian = doubleArray38; int int42 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray43 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray43; int int45 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) '#'); // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair48 = levenbergMarquardtOptimizer0.doOptimize(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNotNull(vectorialConvergenceChecker17); org.junit.Assert.assertNotNull(vectorialConvergenceChecker20); org.junit.Assert.assertNull(doubleArray24); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); }
public void test384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test384"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) '4'); double[] doubleArray10 = levenbergMarquardtOptimizer0.targetValues; double double11 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); }
public void test385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test385"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; double double26 = levenbergMarquardtOptimizer0.getRMS(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 0); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 0); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue(Double.isNaN(double26)); }
public void test386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test386"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.rows = 'a'; int int13 = levenbergMarquardtOptimizer0.rows; int int14 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); }
public void test387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test387"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.residualsWeights; levenbergMarquardtOptimizer6.cost = 0.0d; double[] doubleArray12 = levenbergMarquardtOptimizer6.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer6.getConvergenceChecker(); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker13; int int15 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer16.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); double[] doubleArray19 = levenbergMarquardtOptimizer16.residualsWeights; int int20 = levenbergMarquardtOptimizer16.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker21 = levenbergMarquardtOptimizer16.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker22 = levenbergMarquardtOptimizer16.checker; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker22); int int24 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000); org.junit.Assert.assertNull(doubleArray19); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1000 + "'", int20 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker21); org.junit.Assert.assertNotNull(vectorialConvergenceChecker22); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0); }
public void test388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test388"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; int int7 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); }
public void test389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test389"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int8 = levenbergMarquardtOptimizer7.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer9 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker10 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer9.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker10); double[] doubleArray12 = levenbergMarquardtOptimizer9.residualsWeights; levenbergMarquardtOptimizer9.cols = 52; levenbergMarquardtOptimizer9.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker16 = levenbergMarquardtOptimizer9.checker; levenbergMarquardtOptimizer7.checker = vectorialConvergenceChecker16; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker16; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 1); int int21 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.cols = 'a'; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNotNull(vectorialConvergenceChecker16); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); }
public void test390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test390"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray9 = null; levenbergMarquardtOptimizer0.targetValues = doubleArray9; int int11 = levenbergMarquardtOptimizer0.getMaxIterations(); int int12 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); }
public void test391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test391"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 0L); org.junit.Assert.assertNull(doubleArray1); }
public void test392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test392"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.checker; double double7 = levenbergMarquardtOptimizer0.getChiSquare(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); }
public void test393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test393"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.rows = (byte) -1; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 52); levenbergMarquardtOptimizer0.setMaxIterations(52); levenbergMarquardtOptimizer0.setMaxEvaluations((int) 'a'); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); }
public void test394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test394"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer4 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer4.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); double[] doubleArray7 = levenbergMarquardtOptimizer4.objective; double[] doubleArray8 = null; levenbergMarquardtOptimizer4.point = doubleArray8; double[] doubleArray10 = levenbergMarquardtOptimizer4.residualsWeights; double[] doubleArray13 = new double[] { (byte) -1, (byte) 10 }; double[] doubleArray16 = new double[] { (byte) -1, (byte) 10 }; double[] doubleArray19 = new double[] { (byte) -1, (byte) 10 }; double[][] doubleArray20 = new double[][] { doubleArray13, doubleArray16, doubleArray19 }; levenbergMarquardtOptimizer4.jacobian = doubleArray20; org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException22 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) doubleArray20); java.util.ConcurrentModificationException concurrentModificationException23 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathException: ", (java.lang.Object[]) doubleArray20); java.lang.IllegalStateException illegalStateException24 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("org.apache.commons.math.MathRuntimeException$4: hi!", (java.lang.Object[]) doubleArray20); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertNotNull(concurrentModificationException23); org.junit.Assert.assertNotNull(illegalStateException24); }
public void test395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test395"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[][] doubleArray8 = levenbergMarquardtOptimizer0.jacobian; int int9 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) 1); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000); }
public void test396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test396"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; int int72 = levenbergMarquardtOptimizer0.rows; int int73 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations(0); int int76 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0); org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0); }
public void test397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test397"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.cost = '#'; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); }
public void test398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test398"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test399"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray5 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxIterations(97); levenbergMarquardtOptimizer0.cost = (byte) 1; int int10 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test400"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); double double9 = levenbergMarquardtOptimizer0.getChiSquare(); int int10 = levenbergMarquardtOptimizer0.rows; org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test401"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; int int72 = levenbergMarquardtOptimizer0.rows; levenbergMarquardtOptimizer0.setMaxEvaluations(1); int int75 = levenbergMarquardtOptimizer0.getIterations(); int int76 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0); org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1000 + "'", int76 == 1000); }
public void test402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test402"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.checker; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; int int7 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test403"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker11 = null; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker11); double[] doubleArray13 = levenbergMarquardtOptimizer0.objective; double[] doubleArray14 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertNull(doubleArray14); }
public void test404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test404"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double double9 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) -1); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test405"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer2.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker9; int int11 = levenbergMarquardtOptimizer0.getIterations(); int int12 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = null; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker13); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000); }
public void test406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test406"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; int int9 = levenbergMarquardtOptimizer0.getEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); double[] doubleArray13 = levenbergMarquardtOptimizer10.residualsWeights; int int14 = levenbergMarquardtOptimizer10.getMaxIterations(); levenbergMarquardtOptimizer10.setMaxIterations(100); levenbergMarquardtOptimizer10.setParRelativeTolerance((-1.0d)); double[] doubleArray22 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer10.residuals = doubleArray22; levenbergMarquardtOptimizer0.objective = doubleArray22; double[] doubleArray26 = null; org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray22, doubleArray26, false); double[] doubleArray29 = vectorialPointValuePair28.getValueRef(); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNull(doubleArray29); }
public void test407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test407"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); double[] doubleArray13 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray18 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray19 = new double[][] { doubleArray13, doubleArray18 }; levenbergMarquardtOptimizer2.jacobian = doubleArray19; java.lang.IllegalStateException illegalStateException21 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("Convergence failed", (java.lang.Object[]) doubleArray19); org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException: ", (java.lang.Object[]) doubleArray19); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); levenbergMarquardtOptimizer23.cols = (short) 100; levenbergMarquardtOptimizer23.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer23.cols = (short) 100; int int32 = levenbergMarquardtOptimizer23.getEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer33 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker34 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer33.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker34); double[] doubleArray36 = levenbergMarquardtOptimizer33.residualsWeights; int int37 = levenbergMarquardtOptimizer33.getMaxIterations(); levenbergMarquardtOptimizer33.setMaxIterations(100); levenbergMarquardtOptimizer33.setParRelativeTolerance((-1.0d)); double[] doubleArray45 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException(doubleArray45); levenbergMarquardtOptimizer33.residuals = doubleArray45; levenbergMarquardtOptimizer23.objective = doubleArray45; org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray51 = convergenceException50.getSuppressed(); org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray55 = convergenceException54.getSuppressed(); org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) throwableArray55); org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException50, "", (java.lang.Object[]) throwableArray55); org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) convergenceException22, doubleArray45, "org.apache.commons.math.MathRuntimeException$8: org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) throwableArray55); org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException59 = new org.apache.commons.math.linear.InvalidMatrixException((java.lang.Throwable) functionEvaluationException58); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertNotNull(illegalStateException21); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertNull(doubleArray36); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1000 + "'", int37 == 1000); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(throwableArray51); org.junit.Assert.assertNotNull(throwableArray55); }
public void test408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test408"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 'a'); levenbergMarquardtOptimizer0.setMaxIterations(32); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 10L); levenbergMarquardtOptimizer0.setMaxIterations((int) (short) 10); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test409"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); double[] doubleArray7 = null; levenbergMarquardtOptimizer0.objective = doubleArray7; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int10 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1000 + "'", int10 == 1000); }
public void test410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test410"); java.lang.Object[] objArray11 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException12 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray11); java.lang.IllegalArgumentException illegalArgumentException13 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException12); java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException12, "", objArray16); org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray16); java.util.ConcurrentModificationException concurrentModificationException19 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray16); org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 10, "", objArray16); java.io.IOException iOException21 = org.apache.commons.math.MathRuntimeException.createIOException((java.lang.Throwable) maxIterationsExceededException20); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer22 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker23 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer22.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker23); double[] doubleArray25 = levenbergMarquardtOptimizer22.residualsWeights; levenbergMarquardtOptimizer22.cols = 52; levenbergMarquardtOptimizer22.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker29 = levenbergMarquardtOptimizer22.checker; double[][] doubleArray30 = levenbergMarquardtOptimizer22.jacobian; java.lang.Throwable throwable31 = null; double[] doubleArray33 = new double[] { (byte) 100 }; java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(throwable31, doubleArray33, "hi!", objArray41); double[] doubleArray43 = functionEvaluationException42.getArgument(); java.lang.Throwable throwable44 = null; double[] doubleArray46 = new double[] { (byte) 100 }; java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException(throwable44, doubleArray46, "hi!", objArray54); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray43, doubleArray46, false); org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(doubleArray43); java.lang.Object[] objArray60 = null; org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException(doubleArray43, "org.apache.commons.math.MathRuntimeException$2: ", objArray60); levenbergMarquardtOptimizer22.point = doubleArray43; org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) iOException21, doubleArray43); org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException(); java.io.IOException iOException67 = org.apache.commons.math.MathRuntimeException.createIOException((java.lang.Throwable) convergenceException66); java.lang.Object[] objArray75 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException76 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray75); java.lang.IllegalArgumentException illegalArgumentException77 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException76); java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException76, "", objArray80); org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray80); org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) iOException67, "", objArray80); java.io.EOFException eOFException84 = org.apache.commons.math.MathRuntimeException.createEOFException("", objArray80); org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException(doubleArray43, "", objArray80); org.apache.commons.math.MaxEvaluationsExceededException maxEvaluationsExceededException86 = new org.apache.commons.math.MaxEvaluationsExceededException((int) (short) 10, "org.apache.commons.math.MathException: ", objArray80); org.junit.Assert.assertNotNull(objArray11); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException12); org.junit.Assert.assertNotNull(illegalArgumentException13); org.junit.Assert.assertNotNull(objArray16); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException19); org.junit.Assert.assertNotNull(iOException21); org.junit.Assert.assertNull(doubleArray25); org.junit.Assert.assertNotNull(vectorialConvergenceChecker29); org.junit.Assert.assertNull(doubleArray30); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]"); org.junit.Assert.assertNotNull(objArray41); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]"); org.junit.Assert.assertNotNull(objArray54); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(iOException67); org.junit.Assert.assertNotNull(objArray75); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException76); org.junit.Assert.assertNotNull(illegalArgumentException77); org.junit.Assert.assertNotNull(objArray80); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0]"); org.junit.Assert.assertNotNull(eOFException84); }
public void test411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test411"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (byte) 1); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (-1L)); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); }
public void test412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test412"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 97); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); }
public void test413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test413"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (byte) 1); levenbergMarquardtOptimizer0.cost = (byte) 100; double double14 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d); }
public void test414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test414"); java.lang.Throwable throwable0 = null; double[] doubleArray2 = new double[] { (byte) 100 }; java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(throwable0, doubleArray2, "hi!", objArray10); double[] doubleArray12 = functionEvaluationException11.getArgument(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer13 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker14 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer13.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker14); double[] doubleArray16 = levenbergMarquardtOptimizer13.residualsWeights; levenbergMarquardtOptimizer13.cost = 0.0d; double double19 = levenbergMarquardtOptimizer13.getChiSquare(); int int20 = levenbergMarquardtOptimizer13.getIterations(); int int21 = levenbergMarquardtOptimizer13.getIterations(); int int22 = levenbergMarquardtOptimizer13.getIterations(); java.lang.Throwable throwable23 = null; double[] doubleArray25 = new double[] { (byte) 100 }; java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(throwable23, doubleArray25, "hi!", objArray33); double[] doubleArray35 = functionEvaluationException34.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(doubleArray35); org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(doubleArray35); levenbergMarquardtOptimizer13.targetValues = doubleArray35; org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException11, doubleArray35); org.apache.commons.math.optimization.OptimizationException optimizationException40 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable) functionEvaluationException39); org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]"); org.junit.Assert.assertNotNull(objArray10); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNull(doubleArray16); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0]"); org.junit.Assert.assertNotNull(objArray33); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]"); }
public void test415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test415"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int8 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.setMaxEvaluations(2147483647); double[] doubleArray14 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(doubleArray14); java.lang.Throwable throwable16 = null; double[] doubleArray18 = new double[] { (byte) 100 }; java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(throwable16, doubleArray18, "hi!", objArray26); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair29 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray14, doubleArray18, true); java.lang.Throwable throwable30 = null; double[] doubleArray32 = new double[] { (byte) 100 }; java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(throwable30, doubleArray32, "hi!", objArray40); double[] doubleArray42 = functionEvaluationException41.getArgument(); java.lang.Throwable throwable43 = null; double[] doubleArray45 = new double[] { (byte) 100 }; java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(throwable43, doubleArray45, "hi!", objArray53); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair56 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray45, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair58 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray14, doubleArray45, true); java.lang.Throwable throwable59 = null; double[] doubleArray61 = new double[] { (byte) 100 }; java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException(throwable59, doubleArray61, "hi!", objArray69); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair71 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray45, doubleArray61); double[] doubleArray72 = vectorialPointValuePair71.getPointRef(); double[] doubleArray73 = vectorialPointValuePair71.getPoint(); double[] doubleArray74 = vectorialPointValuePair71.getPointRef(); double[] doubleArray75 = vectorialPointValuePair71.getPointRef(); double[] doubleArray76 = vectorialPointValuePair71.getValueRef(); levenbergMarquardtOptimizer0.residualsWeights = doubleArray76; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]"); org.junit.Assert.assertNotNull(objArray26); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]"); org.junit.Assert.assertNotNull(objArray40); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]"); org.junit.Assert.assertNotNull(objArray53); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]"); org.junit.Assert.assertNotNull(objArray69); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0]"); }
public void test416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test416"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; double double26 = levenbergMarquardtOptimizer0.getRMS(); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 1000); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker29 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue(Double.isNaN(double26)); org.junit.Assert.assertNotNull(vectorialConvergenceChecker29); }
public void test417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test417"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[][] doubleArray8 = levenbergMarquardtOptimizer0.jacobian; org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction9 = null; double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); java.lang.Throwable throwable15 = null; double[] doubleArray17 = new double[] { (byte) 100 }; java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(throwable15, doubleArray17, "hi!", objArray25); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray13, doubleArray17, true); double[] doubleArray29 = vectorialPointValuePair28.getValue(); double[] doubleArray30 = null; org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L)); java.lang.Throwable throwable33 = null; double[] doubleArray35 = new double[] { (byte) 100 }; java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(throwable33, doubleArray35, "hi!", objArray43); double[] doubleArray45 = functionEvaluationException44.getArgument(); java.lang.Throwable throwable46 = null; double[] doubleArray48 = new double[] { (byte) 100 }; java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(throwable46, doubleArray48, "hi!", objArray56); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair59 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray45, doubleArray48, false); java.lang.Object[] objArray68 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException69 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray68); java.lang.IllegalArgumentException illegalArgumentException70 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException69); java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException69, "", objArray73); org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray73); java.lang.IllegalArgumentException illegalArgumentException76 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("", objArray73); org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) functionEvaluationException32, doubleArray45, "", objArray73); org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException(doubleArray45); // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair79 = levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction9, doubleArray29, doubleArray30, doubleArray45); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]"); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]"); org.junit.Assert.assertNotNull(objArray43); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0]"); org.junit.Assert.assertNotNull(objArray56); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(objArray68); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException69); org.junit.Assert.assertNotNull(illegalArgumentException70); org.junit.Assert.assertNotNull(objArray73); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0]"); org.junit.Assert.assertNotNull(illegalArgumentException76); }
public void test418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test418"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.rows = 1; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); }
public void test419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test419"); double[] doubleArray3 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException(doubleArray3); java.lang.Throwable throwable5 = null; double[] doubleArray7 = new double[] { (byte) 100 }; java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(throwable5, doubleArray7, "hi!", objArray15); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair18 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray3, doubleArray7, true); double[] doubleArray19 = vectorialPointValuePair18.getPoint(); org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException(); java.lang.Throwable[] throwableArray22 = convergenceException21.getSuppressed(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray19, "", (java.lang.Object[]) throwableArray22); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer24 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker25 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer24.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker25); double[] doubleArray27 = levenbergMarquardtOptimizer24.residualsWeights; levenbergMarquardtOptimizer24.cost = 0.0d; double double30 = levenbergMarquardtOptimizer24.getChiSquare(); int int31 = levenbergMarquardtOptimizer24.getIterations(); int int32 = levenbergMarquardtOptimizer24.getIterations(); int int33 = levenbergMarquardtOptimizer24.getIterations(); int int34 = levenbergMarquardtOptimizer24.getMaxEvaluations(); levenbergMarquardtOptimizer24.setMaxEvaluations((int) 'a'); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer37 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker38 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer37.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker38); double[] doubleArray40 = levenbergMarquardtOptimizer37.residualsWeights; levenbergMarquardtOptimizer37.cols = 52; int int43 = levenbergMarquardtOptimizer37.getMaxEvaluations(); double[] doubleArray44 = levenbergMarquardtOptimizer37.targetValues; int int45 = levenbergMarquardtOptimizer37.getMaxEvaluations(); double double46 = levenbergMarquardtOptimizer37.cost; java.lang.Throwable throwable47 = null; double[] doubleArray49 = new double[] { (byte) 100 }; java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(throwable47, doubleArray49, "hi!", objArray57); org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException(doubleArray49); double[] doubleArray63 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException(doubleArray63); java.lang.Throwable throwable65 = null; double[] doubleArray67 = new double[] { (byte) 100 }; java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(throwable65, doubleArray67, "hi!", objArray75); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray63, doubleArray67, true); double[] doubleArray79 = vectorialPointValuePair78.getValue(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair81 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray49, doubleArray79, true); levenbergMarquardtOptimizer37.objective = doubleArray79; levenbergMarquardtOptimizer24.residualsWeights = doubleArray79; org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair85 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray19, doubleArray79, true); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]"); org.junit.Assert.assertNotNull(objArray15); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(throwableArray22); org.junit.Assert.assertNull(doubleArray27); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647); org.junit.Assert.assertNull(doubleArray40); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647); org.junit.Assert.assertNull(doubleArray44); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]"); org.junit.Assert.assertNotNull(objArray57); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0]"); org.junit.Assert.assertNotNull(objArray75); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); }
public void test420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test420"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double[] doubleArray6 = levenbergMarquardtOptimizer0.point; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer7 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker8 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer7.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker8); double[] doubleArray10 = levenbergMarquardtOptimizer7.residualsWeights; levenbergMarquardtOptimizer7.cols = 52; levenbergMarquardtOptimizer7.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker14 = levenbergMarquardtOptimizer7.checker; double[][] doubleArray15 = levenbergMarquardtOptimizer7.jacobian; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer16.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); levenbergMarquardtOptimizer16.cols = (short) 100; levenbergMarquardtOptimizer16.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; int int27 = levenbergMarquardtOptimizer23.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker28 = levenbergMarquardtOptimizer23.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker29 = levenbergMarquardtOptimizer23.checker; levenbergMarquardtOptimizer16.checker = vectorialConvergenceChecker29; levenbergMarquardtOptimizer7.checker = vectorialConvergenceChecker29; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker29); double[] doubleArray33 = levenbergMarquardtOptimizer0.objective; int int34 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNotNull(vectorialConvergenceChecker14); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1000 + "'", int27 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker28); org.junit.Assert.assertNotNull(vectorialConvergenceChecker29); org.junit.Assert.assertNull(doubleArray33); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); }
public void test421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test421"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double[] doubleArray6 = levenbergMarquardtOptimizer0.residuals; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer13 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker14 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer13.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker14); double[] doubleArray16 = levenbergMarquardtOptimizer13.objective; double[] doubleArray17 = null; levenbergMarquardtOptimizer13.point = doubleArray17; double[] doubleArray19 = levenbergMarquardtOptimizer13.residualsWeights; int int20 = levenbergMarquardtOptimizer13.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer21 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker22 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer21.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker22); double[] doubleArray24 = levenbergMarquardtOptimizer21.residualsWeights; levenbergMarquardtOptimizer21.cols = 52; levenbergMarquardtOptimizer21.incrementIterationsCounter(); double[] doubleArray32 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray37 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray38 = new double[][] { doubleArray32, doubleArray37 }; levenbergMarquardtOptimizer21.jacobian = doubleArray38; levenbergMarquardtOptimizer13.jacobian = doubleArray38; java.text.ParseException parseException41 = org.apache.commons.math.MathRuntimeException.createParseException((int) (byte) 1, "Convergence failed", (java.lang.Object[]) doubleArray38); java.lang.ArithmeticException arithmeticException42 = org.apache.commons.math.MathRuntimeException.createArithmeticException("hi!", (java.lang.Object[]) doubleArray38); org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException43 = new org.apache.commons.math.linear.InvalidMatrixException("Convergence failed", (java.lang.Object[]) doubleArray38); org.apache.commons.math.MathRuntimeException mathRuntimeException44 = new org.apache.commons.math.MathRuntimeException("evaluation failed for argument = {0}", (java.lang.Object[]) doubleArray38); java.io.EOFException eOFException45 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) doubleArray38); levenbergMarquardtOptimizer0.jacobian = doubleArray38; int int47 = levenbergMarquardtOptimizer0.cols; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray16); org.junit.Assert.assertNull(doubleArray19); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1000 + "'", int20 == 1000); org.junit.Assert.assertNull(doubleArray24); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertNotNull(parseException41); org.junit.Assert.assertNotNull(arithmeticException42); org.junit.Assert.assertNotNull(eOFException45); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52); }
public void test422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test422"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int6 = levenbergMarquardtOptimizer0.rows; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test423"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); double double6 = levenbergMarquardtOptimizer0.cost; levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) 10); int int9 = levenbergMarquardtOptimizer0.rows; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) (byte) 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test424"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = (byte) 1; double double9 = levenbergMarquardtOptimizer0.getRMS(); double[] doubleArray14 = new double[] { 52, 0.0f, 0L, 0L }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(doubleArray14); levenbergMarquardtOptimizer0.residuals = doubleArray14; double[] doubleArray17 = null; levenbergMarquardtOptimizer0.residualsWeights = doubleArray17; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double9)); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[52.0, 0.0, 0.0, 0.0]"); }
public void test425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test425"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); int int9 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) ' '); int int12 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); }
public void test426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test426"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double double5 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); }
public void test427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test427"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.objective; double double11 = levenbergMarquardtOptimizer0.getRMS(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue(Double.isNaN(double11)); }
public void test428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test428"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.cost = 1.0d; levenbergMarquardtOptimizer0.setMaxIterations(1); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); }
public void test429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test429"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) 32); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test430"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); int int7 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); double[] doubleArray75 = new double[] { 0L, 1, 1L, 100.0f, (-1), '#' }; java.lang.Throwable throwable78 = null; double[] doubleArray80 = new double[] { (byte) 100 }; java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException(throwable78, doubleArray80, "hi!", objArray88); org.apache.commons.math.MathRuntimeException mathRuntimeException90 = new org.apache.commons.math.MathRuntimeException(throwable78); java.lang.String str91 = mathRuntimeException90.getPattern(); java.lang.String str92 = mathRuntimeException90.getPattern(); java.lang.Object[] objArray93 = mathRuntimeException90.getArguments(); java.lang.NullPointerException nullPointerException94 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray93); org.apache.commons.math.FunctionEvaluationException functionEvaluationException95 = new org.apache.commons.math.FunctionEvaluationException(doubleArray75, "org.apache.commons.math.MathRuntimeException$2: ", objArray93); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair97 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray58, doubleArray75, true); levenbergMarquardtOptimizer0.objective = doubleArray75; org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 1.0, 1.0, 100.0, -1.0, 35.0]"); org.junit.Assert.assertNotNull(doubleArray80); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0]"); org.junit.Assert.assertNotNull(objArray88); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, ""); org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, ""); org.junit.Assert.assertNotNull(objArray93); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[]"); org.junit.Assert.assertNotNull(nullPointerException94); }
public void test431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test431"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100); }
public void test432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test432"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray10 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(doubleArray10); java.lang.Throwable throwable12 = null; double[] doubleArray14 = new double[] { (byte) 100 }; java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(throwable12, doubleArray14, "hi!", objArray22); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair25 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray10, doubleArray14, true); java.lang.Throwable throwable26 = null; double[] doubleArray28 = new double[] { (byte) 100 }; java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(throwable26, doubleArray28, "hi!", objArray36); double[] doubleArray38 = functionEvaluationException37.getArgument(); java.lang.Throwable throwable39 = null; double[] doubleArray41 = new double[] { (byte) 100 }; java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException(throwable39, doubleArray41, "hi!", objArray49); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair52 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray38, doubleArray41, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair54 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray10, doubleArray41, true); java.lang.Throwable throwable55 = null; double[] doubleArray57 = new double[] { (byte) 100 }; java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(throwable55, doubleArray57, "hi!", objArray65); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair67 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray41, doubleArray57); double[] doubleArray74 = new double[] { 0L, 1, 1L, 100.0f, (-1), '#' }; java.lang.Throwable throwable77 = null; double[] doubleArray79 = new double[] { (byte) 100 }; java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(throwable77, doubleArray79, "hi!", objArray87); org.apache.commons.math.MathRuntimeException mathRuntimeException89 = new org.apache.commons.math.MathRuntimeException(throwable77); java.lang.String str90 = mathRuntimeException89.getPattern(); java.lang.String str91 = mathRuntimeException89.getPattern(); java.lang.Object[] objArray92 = mathRuntimeException89.getArguments(); java.lang.NullPointerException nullPointerException93 = org.apache.commons.math.MathRuntimeException.createNullPointerException("hi!", objArray92); org.apache.commons.math.FunctionEvaluationException functionEvaluationException94 = new org.apache.commons.math.FunctionEvaluationException(doubleArray74, "org.apache.commons.math.MathRuntimeException$2: ", objArray92); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair96 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray57, doubleArray74, true); levenbergMarquardtOptimizer0.residualsWeights = doubleArray57; levenbergMarquardtOptimizer0.setMaxIterations(0); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]"); org.junit.Assert.assertNotNull(objArray22); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]"); org.junit.Assert.assertNotNull(objArray36); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(objArray49); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0]"); org.junit.Assert.assertNotNull(objArray65); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 1.0, 1.0, 100.0, -1.0, 35.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); org.junit.Assert.assertNotNull(objArray87); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, ""); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, ""); org.junit.Assert.assertNotNull(objArray92); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]"); org.junit.Assert.assertNotNull(nullPointerException93); }
public void test433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test433"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) -1); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.checker; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); }
public void test434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test434"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.rows = 0; levenbergMarquardtOptimizer0.setMaxIterations(10); double[] doubleArray18 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(doubleArray18); java.lang.Throwable throwable20 = null; double[] doubleArray22 = new double[] { (byte) 100 }; java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(throwable20, doubleArray22, "hi!", objArray30); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair33 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray18, doubleArray22, true); java.lang.Throwable throwable34 = null; double[] doubleArray36 = new double[] { (byte) 100 }; java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException(throwable34, doubleArray36, "hi!", objArray44); double[] doubleArray46 = functionEvaluationException45.getArgument(); java.lang.Throwable throwable47 = null; double[] doubleArray49 = new double[] { (byte) 100 }; java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(throwable47, doubleArray49, "hi!", objArray57); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair60 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray46, doubleArray49, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair62 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray18, doubleArray49, true); java.lang.Throwable throwable63 = null; double[] doubleArray65 = new double[] { (byte) 100 }; java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(throwable63, doubleArray65, "hi!", objArray73); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair75 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray49, doubleArray65); double[] doubleArray76 = vectorialPointValuePair75.getPointRef(); double[] doubleArray77 = vectorialPointValuePair75.getPoint(); double[] doubleArray78 = vectorialPointValuePair75.getPointRef(); double[] doubleArray79 = vectorialPointValuePair75.getValue(); levenbergMarquardtOptimizer0.point = doubleArray79; int int81 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertNotNull(objArray30); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0]"); org.junit.Assert.assertNotNull(objArray44); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]"); org.junit.Assert.assertNotNull(objArray57); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0]"); org.junit.Assert.assertNotNull(objArray73); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10); }
public void test435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test435"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray9 = new double[] { (byte) -1, (byte) 10 }; double[] doubleArray12 = new double[] { (byte) -1, (byte) 10 }; double[] doubleArray15 = new double[] { (byte) -1, (byte) 10 }; double[][] doubleArray16 = new double[][] { doubleArray9, doubleArray12, doubleArray15 }; levenbergMarquardtOptimizer0.jacobian = doubleArray16; int int18 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int19 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); }
public void test436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test436"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; int int26 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.cols = 0; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1000 + "'", int26 == 1000); }
public void test437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test437"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 1000); double[][] doubleArray11 = levenbergMarquardtOptimizer0.jacobian; double[] doubleArray12 = levenbergMarquardtOptimizer0.targetValues; int int13 = levenbergMarquardtOptimizer0.rows; double[] doubleArray17 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(doubleArray17); java.lang.Throwable throwable19 = null; double[] doubleArray21 = new double[] { (byte) 100 }; java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(throwable19, doubleArray21, "hi!", objArray29); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair32 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray17, doubleArray21, true); double[] doubleArray33 = vectorialPointValuePair32.getPointRef(); levenbergMarquardtOptimizer0.point = doubleArray33; // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.updateResidualsAndCost(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]"); org.junit.Assert.assertNotNull(objArray29); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 1.0, -1.0]"); }
public void test438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test438"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations(1000); int int12 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) (-1L)); int int15 = levenbergMarquardtOptimizer0.getEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); }
public void test439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test439"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); levenbergMarquardtOptimizer8.incrementIterationsCounter(); levenbergMarquardtOptimizer8.rows = (byte) 10; levenbergMarquardtOptimizer8.setMaxIterations(2147483647); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer16 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker17 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer16.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker17); double[] doubleArray19 = levenbergMarquardtOptimizer16.residualsWeights; levenbergMarquardtOptimizer16.cost = 0.0d; double[] doubleArray22 = levenbergMarquardtOptimizer16.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker23 = levenbergMarquardtOptimizer16.getConvergenceChecker(); levenbergMarquardtOptimizer8.checker = vectorialConvergenceChecker23; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker25 = levenbergMarquardtOptimizer8.getConvergenceChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker25); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray19); org.junit.Assert.assertNull(doubleArray22); org.junit.Assert.assertNotNull(vectorialConvergenceChecker23); org.junit.Assert.assertNotNull(vectorialConvergenceChecker25); }
public void test440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test440"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double double4 = levenbergMarquardtOptimizer0.getRMS(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue(Double.isNaN(double4)); }
public void test441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test441"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (byte) 1); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 100.0f); int int12 = levenbergMarquardtOptimizer0.getIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); }
public void test442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test442"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); int int12 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer0.checker; double[] doubleArray14 = null; levenbergMarquardtOptimizer0.point = doubleArray14; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); }
public void test443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test443"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray5 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxIterations(97); levenbergMarquardtOptimizer0.cost = (byte) 1; // The following exception was thrown during execution in test generation try { double[] doubleArray10 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray5); }
public void test444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test444"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer9 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker10 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer9.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker10); double[] doubleArray12 = levenbergMarquardtOptimizer9.residualsWeights; levenbergMarquardtOptimizer9.cost = 0.0d; double[] doubleArray15 = levenbergMarquardtOptimizer9.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker16 = levenbergMarquardtOptimizer9.getConvergenceChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker16); int int18 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations(52); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNull(doubleArray15); org.junit.Assert.assertNotNull(vectorialConvergenceChecker16); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); }
public void test445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test445"); double[] doubleArray3 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException(doubleArray3); java.lang.Throwable throwable5 = null; double[] doubleArray7 = new double[] { (byte) 100 }; java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(throwable5, doubleArray7, "hi!", objArray15); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair18 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray3, doubleArray7, true); java.lang.Throwable throwable19 = null; double[] doubleArray21 = new double[] { (byte) 100 }; java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(throwable19, doubleArray21, "hi!", objArray29); double[] doubleArray31 = functionEvaluationException30.getArgument(); java.lang.Throwable throwable32 = null; double[] doubleArray34 = new double[] { (byte) 100 }; java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException(throwable32, doubleArray34, "hi!", objArray42); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair45 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray31, doubleArray34, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair47 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray3, doubleArray34, true); java.lang.Throwable throwable48 = null; double[] doubleArray50 = new double[] { (byte) 100 }; java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException(throwable48, doubleArray50, "hi!", objArray58); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair60 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray34, doubleArray50); double[] doubleArray61 = vectorialPointValuePair60.getValueRef(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer63 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker64 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer63.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker64); double[] doubleArray66 = levenbergMarquardtOptimizer63.residualsWeights; levenbergMarquardtOptimizer63.cols = 52; double double69 = levenbergMarquardtOptimizer63.getChiSquare(); double[] doubleArray70 = levenbergMarquardtOptimizer63.targetValues; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer72 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker73 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer72.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker73); double[] doubleArray75 = levenbergMarquardtOptimizer72.residualsWeights; levenbergMarquardtOptimizer72.cols = 52; levenbergMarquardtOptimizer72.incrementIterationsCounter(); double[] doubleArray83 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray88 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray89 = new double[][] { doubleArray83, doubleArray88 }; levenbergMarquardtOptimizer72.jacobian = doubleArray89; java.lang.IllegalStateException illegalStateException91 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("Convergence failed", (java.lang.Object[]) doubleArray89); levenbergMarquardtOptimizer63.jacobian = doubleArray89; org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException(doubleArray61, "", (java.lang.Object[]) doubleArray89); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]"); org.junit.Assert.assertNotNull(objArray15); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]"); org.junit.Assert.assertNotNull(objArray29); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0]"); org.junit.Assert.assertNotNull(objArray42); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]"); org.junit.Assert.assertNotNull(objArray58); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]"); org.junit.Assert.assertNull(doubleArray66); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNull(doubleArray70); org.junit.Assert.assertNull(doubleArray75); org.junit.Assert.assertNotNull(doubleArray83); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray88); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray89); org.junit.Assert.assertNotNull(illegalStateException91); }
public void test446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test446"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray5 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxIterations(97); levenbergMarquardtOptimizer0.setMaxEvaluations((int) ' '); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray5); }
public void test447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test447"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.cols = 0; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); int int12 = levenbergMarquardtOptimizer0.getIterations(); double double13 = levenbergMarquardtOptimizer0.cost; levenbergMarquardtOptimizer0.cols = '#'; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); }
public void test448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test448"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 1); int int12 = levenbergMarquardtOptimizer0.getIterations(); int int13 = levenbergMarquardtOptimizer0.rows; org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); }
public void test449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test449"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray4 = levenbergMarquardtOptimizer0.residualsWeights; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); int int6 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.rows = 32; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000); }
public void test450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test450"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; int int26 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.cols = 0; int int29 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) 1L); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1000 + "'", int26 == 1000); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); }
public void test451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test451"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); }
public void test452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test452"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker7 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer6.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker7); double[] doubleArray9 = levenbergMarquardtOptimizer6.residualsWeights; levenbergMarquardtOptimizer6.cols = 52; int int12 = levenbergMarquardtOptimizer6.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer6.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cost = 0.0d; double[] doubleArray20 = levenbergMarquardtOptimizer14.targetValues; double[] doubleArray21 = levenbergMarquardtOptimizer14.residuals; int int22 = levenbergMarquardtOptimizer14.getJacobianEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer23 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker24 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer23.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker24); double[] doubleArray26 = levenbergMarquardtOptimizer23.residualsWeights; levenbergMarquardtOptimizer23.cost = 0.0d; double[] doubleArray29 = levenbergMarquardtOptimizer23.targetValues; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker30 = levenbergMarquardtOptimizer23.getConvergenceChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker(vectorialConvergenceChecker30); levenbergMarquardtOptimizer6.checker = vectorialConvergenceChecker30; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker30); int int34 = levenbergMarquardtOptimizer0.getMaxEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations(100); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray9); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNull(doubleArray20); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNull(doubleArray29); org.junit.Assert.assertNotNull(vectorialConvergenceChecker30); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647); }
public void test453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test453"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) -1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) 'a'); // The following exception was thrown during execution in test generation try { double[] doubleArray14 = levenbergMarquardtOptimizer0.guessParametersErrors(); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.optimization.OptimizationException; message: no degrees of freedom (0 measurements, 0 parameters)"); } catch (org.apache.commons.math.optimization.OptimizationException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test454"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.setOrthoTolerance((double) 0.0f); int int10 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int11 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test455"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray15 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(doubleArray15); java.lang.Throwable throwable17 = null; double[] doubleArray19 = new double[] { (byte) 100 }; java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(throwable17, doubleArray19, "hi!", objArray27); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair30 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray15, doubleArray19, true); double[] doubleArray31 = vectorialPointValuePair30.getValue(); double[] doubleArray32 = vectorialPointValuePair30.getPoint(); double[] doubleArray36 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(doubleArray36); java.lang.Throwable throwable38 = null; double[] doubleArray40 = new double[] { (byte) 100 }; java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException(throwable38, doubleArray40, "hi!", objArray48); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair51 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray36, doubleArray40, true); java.lang.Throwable throwable52 = null; double[] doubleArray54 = new double[] { (byte) 100 }; java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException(throwable52, doubleArray54, "hi!", objArray62); double[] doubleArray64 = functionEvaluationException63.getArgument(); java.lang.Throwable throwable65 = null; double[] doubleArray67 = new double[] { (byte) 100 }; java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(throwable65, doubleArray67, "hi!", objArray75); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray64, doubleArray67, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair80 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray36, doubleArray67, true); java.lang.Throwable throwable81 = null; double[] doubleArray83 = new double[] { (byte) 100 }; java.lang.Object[] objArray91 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(throwable81, doubleArray83, "hi!", objArray91); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair93 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray67, doubleArray83); double[] doubleArray94 = vectorialPointValuePair93.getPointRef(); double[] doubleArray95 = vectorialPointValuePair93.getPoint(); boolean boolean96 = vectorialConvergenceChecker10.converged((int) (byte) 10, vectorialPointValuePair30, vectorialPointValuePair93); double[] doubleArray97 = vectorialPointValuePair30.getPointRef(); double[] doubleArray98 = vectorialPointValuePair30.getValueRef(); double[] doubleArray99 = vectorialPointValuePair30.getValue(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]"); org.junit.Assert.assertNotNull(objArray27); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]"); org.junit.Assert.assertNotNull(objArray48); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0]"); org.junit.Assert.assertNotNull(objArray62); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0]"); org.junit.Assert.assertNotNull(objArray75); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray83); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0]"); org.junit.Assert.assertNotNull(objArray91); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray94); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray95); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[100.0]"); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true); org.junit.Assert.assertNotNull(doubleArray97); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray98); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray99); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[100.0]"); }
public void test456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test456"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 2147483647); int int9 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.cols = 10; org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100); }
public void test457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test457"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; java.lang.Object[] objArray15 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException16 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray15); org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15); java.lang.Throwable throwable18 = null; double[] doubleArray20 = new double[] { (byte) 100 }; java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(throwable18, doubleArray20, "hi!", objArray28); double[] doubleArray30 = functionEvaluationException29.getArgument(); java.lang.Throwable throwable31 = null; double[] doubleArray33 = new double[] { (byte) 100 }; java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(throwable31, doubleArray33, "hi!", objArray41); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair44 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray30, doubleArray33, false); java.lang.Throwable throwable49 = null; double[] doubleArray51 = new double[] { (byte) 100 }; java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(throwable49, doubleArray51, "hi!", objArray59); org.apache.commons.math.MathRuntimeException mathRuntimeException61 = new org.apache.commons.math.MathRuntimeException(throwable49); java.lang.String str62 = mathRuntimeException61.getPattern(); java.lang.String str63 = mathRuntimeException61.getPattern(); java.lang.Object[] objArray64 = mathRuntimeException61.getArguments(); java.lang.NullPointerException nullPointerException65 = org.apache.commons.math.MathRuntimeException.createNullPointerException("org.apache.commons.math.MathRuntimeException$2: ", objArray64); org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException66 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray64); org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) mathException17, doubleArray33, "Convergence failed", objArray64); levenbergMarquardtOptimizer0.point = doubleArray33; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer69 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker70 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer69.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker70); levenbergMarquardtOptimizer69.cols = (short) 100; levenbergMarquardtOptimizer69.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer69.setParRelativeTolerance((double) 2147483647); int int78 = levenbergMarquardtOptimizer69.getMaxEvaluations(); levenbergMarquardtOptimizer69.setInitialStepBoundFactor(10.0d); int int81 = levenbergMarquardtOptimizer69.getEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer82 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker83 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer82.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker83); double[] doubleArray85 = levenbergMarquardtOptimizer82.residualsWeights; levenbergMarquardtOptimizer82.cols = 52; int int88 = levenbergMarquardtOptimizer82.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker89 = levenbergMarquardtOptimizer82.checker; levenbergMarquardtOptimizer69.setConvergenceChecker(vectorialConvergenceChecker89); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker89); double double92 = levenbergMarquardtOptimizer0.cost; org.junit.Assert.assertNotNull(objArray15); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException16); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]"); org.junit.Assert.assertNotNull(objArray28); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]"); org.junit.Assert.assertNotNull(objArray41); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]"); org.junit.Assert.assertNotNull(objArray59); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, ""); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, ""); org.junit.Assert.assertNotNull(objArray64); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]"); org.junit.Assert.assertNotNull(nullPointerException65); org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647); org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0); org.junit.Assert.assertNull(doubleArray85); org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2147483647 + "'", int88 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker89); org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d); }
public void test458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test458"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxEvaluations(52); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (byte) 100); java.lang.Object[] objArray10 = null; java.util.ConcurrentModificationException concurrentModificationException11 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("", objArray10); java.lang.Throwable throwable12 = null; double[] doubleArray14 = new double[] { (byte) 100 }; java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(throwable12, doubleArray14, "hi!", objArray22); double[] doubleArray24 = functionEvaluationException23.getArgument(); java.lang.Object[] objArray33 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException34 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray33); java.lang.IllegalArgumentException illegalArgumentException35 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException34); java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException34, "", objArray38); org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray38); java.util.ConcurrentModificationException concurrentModificationException41 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("org.apache.commons.math.MathRuntimeException$2: ", objArray38); org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException23, "", objArray38); java.lang.Throwable throwable44 = null; double[] doubleArray46 = new double[] { (byte) 100 }; java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException(throwable44, doubleArray46, "hi!", objArray54); org.apache.commons.math.MathRuntimeException mathRuntimeException56 = new org.apache.commons.math.MathRuntimeException(throwable44); java.lang.String str57 = mathRuntimeException56.getPattern(); java.lang.String str58 = mathRuntimeException56.getPattern(); org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathRuntimeException56); java.lang.Object[] objArray60 = mathRuntimeException56.getArguments(); org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException23, "hi!", objArray60); double[] doubleArray62 = functionEvaluationException23.getArgument(); concurrentModificationException11.addSuppressed((java.lang.Throwable) functionEvaluationException23); double[] doubleArray64 = functionEvaluationException23.getArgument(); levenbergMarquardtOptimizer0.point = doubleArray64; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); org.junit.Assert.assertNotNull(concurrentModificationException11); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]"); org.junit.Assert.assertNotNull(objArray22); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]"); org.junit.Assert.assertNotNull(objArray33); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException34); org.junit.Assert.assertNotNull(illegalArgumentException35); org.junit.Assert.assertNotNull(objArray38); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0]"); org.junit.Assert.assertNotNull(concurrentModificationException41); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]"); org.junit.Assert.assertNotNull(objArray54); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, ""); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, ""); org.junit.Assert.assertNotNull(objArray60); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0]"); }
public void test459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test459"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer5 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker6 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer5.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker6); double[] doubleArray8 = levenbergMarquardtOptimizer5.residualsWeights; int int9 = levenbergMarquardtOptimizer5.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker10 = levenbergMarquardtOptimizer5.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker11 = levenbergMarquardtOptimizer5.checker; levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker11); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker10); org.junit.Assert.assertNotNull(vectorialConvergenceChecker11); }
public void test460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test460"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int7 = levenbergMarquardtOptimizer0.getMaxEvaluations(); int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); }
public void test461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test461"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) -1); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; double[] doubleArray11 = levenbergMarquardtOptimizer0.residualsWeights; int int12 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double double13 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setMaxIterations((int) '#'); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); }
public void test462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test462"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); int int1 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer2 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker3 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer2.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker3); double[] doubleArray5 = levenbergMarquardtOptimizer2.residualsWeights; levenbergMarquardtOptimizer2.cols = 52; levenbergMarquardtOptimizer2.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer2.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker9; double[] doubleArray15 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(doubleArray15); java.lang.Throwable throwable17 = null; double[] doubleArray19 = new double[] { (byte) 100 }; java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(throwable17, doubleArray19, "hi!", objArray27); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair30 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray15, doubleArray19, true); java.lang.Throwable throwable31 = null; double[] doubleArray33 = new double[] { (byte) 100 }; java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(throwable31, doubleArray33, "hi!", objArray41); double[] doubleArray43 = functionEvaluationException42.getArgument(); java.lang.Throwable throwable44 = null; double[] doubleArray46 = new double[] { (byte) 100 }; java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException(throwable44, doubleArray46, "hi!", objArray54); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair57 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray43, doubleArray46, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair59 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray15, doubleArray46, true); double[] doubleArray63 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException(doubleArray63); java.lang.Throwable throwable65 = null; double[] doubleArray67 = new double[] { (byte) 100 }; java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(throwable65, doubleArray67, "hi!", objArray75); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair78 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray63, doubleArray67, true); double[] doubleArray79 = vectorialPointValuePair78.getPoint(); java.lang.Throwable throwable80 = null; double[] doubleArray82 = new double[] { (byte) 100 }; java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException(throwable80, doubleArray82, "hi!", objArray90); double[] doubleArray92 = functionEvaluationException91.getArgument(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair93 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray79, doubleArray92); double[] doubleArray94 = vectorialPointValuePair93.getPoint(); double[] doubleArray95 = vectorialPointValuePair93.getPointRef(); double[] doubleArray96 = vectorialPointValuePair93.getValue(); boolean boolean97 = vectorialConvergenceChecker9.converged((int) '#', vectorialPointValuePair59, vectorialPointValuePair93); double[] doubleArray98 = vectorialPointValuePair93.getPointRef(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException99 = new org.apache.commons.math.FunctionEvaluationException(doubleArray98); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); org.junit.Assert.assertNull(doubleArray5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]"); org.junit.Assert.assertNotNull(objArray27); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]"); org.junit.Assert.assertNotNull(objArray41); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]"); org.junit.Assert.assertNotNull(objArray54); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0]"); org.junit.Assert.assertNotNull(objArray75); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0]"); org.junit.Assert.assertNotNull(objArray90); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray92); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray94); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray95); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray96); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[100.0]"); org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true); org.junit.Assert.assertNotNull(doubleArray98); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[10.0, 1.0, -1.0]"); }
public void test463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test463"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; int int6 = levenbergMarquardtOptimizer0.getMaxEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) ' '); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); }
public void test464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test464"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker5 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.checker; int int7 = levenbergMarquardtOptimizer0.getMaxEvaluations(); double[] doubleArray12 = new double[] { 52, 0.0f, 0L, 0L }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(doubleArray12); levenbergMarquardtOptimizer0.objective = doubleArray12; double[] doubleArray15 = levenbergMarquardtOptimizer0.targetValues; levenbergMarquardtOptimizer0.setCostRelativeTolerance(Double.NaN); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker5); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNull(doubleArray15); }
public void test465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test465"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.rows = (byte) -1; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 52); levenbergMarquardtOptimizer0.setMaxIterations(52); // The following exception was thrown during execution in test generation try { org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair15 = levenbergMarquardtOptimizer0.doOptimize(); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000); }
public void test466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test466"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.cols; java.lang.Throwable throwable9 = null; double[] doubleArray11 = new double[] { (byte) 100 }; java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(throwable9, doubleArray11, "hi!", objArray19); org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); double[] doubleArray25 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(doubleArray25); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair40 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray25, doubleArray29, true); double[] doubleArray41 = vectorialPointValuePair40.getValue(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair43 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray41, true); double[] doubleArray44 = vectorialPointValuePair43.getValue(); levenbergMarquardtOptimizer0.objective = doubleArray44; double[] doubleArray46 = levenbergMarquardtOptimizer0.residualsWeights; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0]"); org.junit.Assert.assertNotNull(objArray19); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNull(doubleArray46); }
public void test467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test467"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[][] doubleArray7 = levenbergMarquardtOptimizer0.jacobian; double[] doubleArray8 = levenbergMarquardtOptimizer0.residuals; org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker((double) 100, 0.0d); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); java.lang.Throwable throwable14 = null; double[] doubleArray16 = new double[] { (byte) 100 }; java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(throwable14, doubleArray16, "hi!", objArray24); double[] doubleArray26 = functionEvaluationException25.getArgument(); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair40 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray26, doubleArray29, false); double[] doubleArray44 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException(doubleArray44); java.lang.Throwable throwable46 = null; double[] doubleArray48 = new double[] { (byte) 100 }; java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(throwable46, doubleArray48, "hi!", objArray56); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair59 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray44, doubleArray48, true); double[] doubleArray60 = vectorialPointValuePair59.getPoint(); java.lang.Throwable throwable61 = null; double[] doubleArray63 = new double[] { (byte) 100 }; java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException(throwable61, doubleArray63, "hi!", objArray71); double[] doubleArray73 = functionEvaluationException72.getArgument(); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair74 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray60, doubleArray73); double[] doubleArray75 = vectorialPointValuePair74.getPoint(); double[] doubleArray76 = vectorialPointValuePair74.getPointRef(); boolean boolean77 = simpleVectorialValueChecker11.converged(1, vectorialPointValuePair40, vectorialPointValuePair74); double[] doubleArray78 = vectorialPointValuePair74.getPoint(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]"); org.junit.Assert.assertNotNull(objArray24); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0]"); org.junit.Assert.assertNotNull(objArray56); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0]"); org.junit.Assert.assertNotNull(objArray71); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, 1.0, -1.0]"); }
public void test468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test468"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; double[] doubleArray9 = new double[] { (byte) -1, (byte) 10 }; double[] doubleArray12 = new double[] { (byte) -1, (byte) 10 }; double[] doubleArray15 = new double[] { (byte) -1, (byte) 10 }; double[][] doubleArray16 = new double[][] { doubleArray9, doubleArray12, doubleArray15 }; levenbergMarquardtOptimizer0.jacobian = doubleArray16; int int18 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray19 = levenbergMarquardtOptimizer0.point; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 10.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNull(doubleArray19); }
public void test469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test469"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; java.lang.Object[] objArray15 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException16 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray15); java.lang.IllegalArgumentException illegalArgumentException17 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException16); java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException16, "", objArray20); org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray20); double[] doubleArray26 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(doubleArray26); java.lang.Throwable throwable28 = null; double[] doubleArray30 = new double[] { (byte) 100 }; java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(throwable28, doubleArray30, "hi!", objArray38); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair41 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray26, doubleArray30, true); java.lang.Throwable throwable42 = null; double[] doubleArray44 = new double[] { (byte) 100 }; java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(throwable42, doubleArray44, "hi!", objArray52); double[] doubleArray54 = functionEvaluationException53.getArgument(); java.lang.Throwable throwable55 = null; double[] doubleArray57 = new double[] { (byte) 100 }; java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(throwable55, doubleArray57, "hi!", objArray65); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray54, doubleArray57, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair70 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray26, doubleArray57, true); java.lang.Throwable throwable71 = null; double[] doubleArray73 = new double[] { (byte) 100 }; java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException(throwable71, doubleArray73, "hi!", objArray81); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair83 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray57, doubleArray73); org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((java.lang.Throwable) convergenceException22, doubleArray73); levenbergMarquardtOptimizer0.residualsWeights = doubleArray73; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) '#'); double[] doubleArray88 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setOrthoTolerance((-1.0d)); levenbergMarquardtOptimizer0.cols = 52; org.junit.Assert.assertNotNull(objArray15); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException16); org.junit.Assert.assertNotNull(illegalArgumentException17); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]"); org.junit.Assert.assertNotNull(objArray38); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]"); org.junit.Assert.assertNotNull(objArray52); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0]"); org.junit.Assert.assertNotNull(objArray65); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0]"); org.junit.Assert.assertNotNull(objArray81); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray88); }
public void test470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test470"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.cols; int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0d); java.lang.Throwable throwable12 = null; double[] doubleArray14 = new double[] { (byte) 100 }; java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(throwable12, doubleArray14, "hi!", objArray22); double[] doubleArray24 = functionEvaluationException23.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(doubleArray24); levenbergMarquardtOptimizer0.targetValues = doubleArray24; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]"); org.junit.Assert.assertNotNull(objArray22); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]"); }
public void test471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test471"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); int int7 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) -1); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; double[] doubleArray11 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setOrthoTolerance((double) 10.0f); double[] doubleArray17 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(doubleArray17); java.lang.Throwable throwable19 = null; double[] doubleArray21 = new double[] { (byte) 100 }; java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(throwable19, doubleArray21, "hi!", objArray29); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair32 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray17, doubleArray21, true); java.lang.Throwable throwable33 = null; double[] doubleArray35 = new double[] { (byte) 100 }; java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(throwable33, doubleArray35, "hi!", objArray43); double[] doubleArray45 = functionEvaluationException44.getArgument(); java.lang.Throwable throwable46 = null; double[] doubleArray48 = new double[] { (byte) 100 }; java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(throwable46, doubleArray48, "hi!", objArray56); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair59 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray45, doubleArray48, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair61 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray17, doubleArray48, true); double[] doubleArray62 = vectorialPointValuePair61.getValue(); double[] doubleArray63 = vectorialPointValuePair61.getPoint(); double[] doubleArray64 = vectorialPointValuePair61.getValue(); levenbergMarquardtOptimizer0.residuals = doubleArray64; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]"); org.junit.Assert.assertNotNull(objArray29); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]"); org.junit.Assert.assertNotNull(objArray43); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0]"); org.junit.Assert.assertNotNull(objArray56); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0]"); }
public void test472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test472"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[] doubleArray8 = null; levenbergMarquardtOptimizer0.residuals = doubleArray8; int int10 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setParRelativeTolerance(0.0d); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer0.checker; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer14 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker15 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer14.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker15); double[] doubleArray17 = levenbergMarquardtOptimizer14.residualsWeights; levenbergMarquardtOptimizer14.cols = 52; levenbergMarquardtOptimizer14.incrementIterationsCounter(); double[] doubleArray25 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray30 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray31 = new double[][] { doubleArray25, doubleArray30 }; levenbergMarquardtOptimizer14.jacobian = doubleArray31; int int33 = levenbergMarquardtOptimizer14.getEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer34 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker35 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer34.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker35); double[] doubleArray37 = levenbergMarquardtOptimizer34.residualsWeights; int int38 = levenbergMarquardtOptimizer34.getMaxIterations(); levenbergMarquardtOptimizer34.setMaxIterations(100); levenbergMarquardtOptimizer34.setParRelativeTolerance((-1.0d)); double[] doubleArray46 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException(doubleArray46); levenbergMarquardtOptimizer34.residuals = doubleArray46; levenbergMarquardtOptimizer14.targetValues = doubleArray46; levenbergMarquardtOptimizer0.objective = doubleArray46; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertNull(doubleArray37); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1000 + "'", int38 == 1000); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 1.0, -1.0]"); }
public void test473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test473"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); java.lang.Throwable throwable27 = null; double[] doubleArray29 = new double[] { (byte) 100 }; java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(throwable27, doubleArray29, "hi!", objArray37); double[] doubleArray39 = functionEvaluationException38.getArgument(); java.lang.Throwable throwable40 = null; double[] doubleArray42 = new double[] { (byte) 100 }; java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(throwable40, doubleArray42, "hi!", objArray50); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair53 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray39, doubleArray42, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair55 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray42, true); java.lang.Throwable throwable56 = null; double[] doubleArray58 = new double[] { (byte) 100 }; java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(throwable56, doubleArray58, "hi!", objArray66); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair68 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray42, doubleArray58); org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(doubleArray42); levenbergMarquardtOptimizer0.targetValues = doubleArray42; double[] doubleArray71 = levenbergMarquardtOptimizer0.point; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker72 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setOrthoTolerance((double) (byte) -1); double double75 = levenbergMarquardtOptimizer0.getRMS(); int int76 = levenbergMarquardtOptimizer0.getEvaluations(); int int77 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); double[] doubleArray78 = levenbergMarquardtOptimizer0.objective; // The following exception was thrown during execution in test generation try { levenbergMarquardtOptimizer0.updateResidualsAndCost(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0]"); org.junit.Assert.assertNotNull(objArray37); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]"); org.junit.Assert.assertNotNull(objArray50); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]"); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNull(doubleArray71); org.junit.Assert.assertNotNull(vectorialConvergenceChecker72); org.junit.Assert.assertTrue(Double.isNaN(double75)); org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0); org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0); org.junit.Assert.assertNull(doubleArray78); }
public void test474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test474"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); int int5 = levenbergMarquardtOptimizer0.getIterations(); double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setMaxEvaluations(1000); levenbergMarquardtOptimizer0.rows = 1000; org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test475"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); int int10 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker11 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[][] doubleArray12 = levenbergMarquardtOptimizer0.jacobian; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); org.junit.Assert.assertNotNull(vectorialConvergenceChecker11); org.junit.Assert.assertNull(doubleArray12); }
public void test476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test476"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double double10 = levenbergMarquardtOptimizer0.cost; double[] doubleArray11 = levenbergMarquardtOptimizer0.objective; levenbergMarquardtOptimizer0.setMaxIterations((int) (byte) -1); int int14 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647); }
public void test477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test477"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 1000); double[][] doubleArray11 = levenbergMarquardtOptimizer0.jacobian; double[] doubleArray12 = levenbergMarquardtOptimizer0.targetValues; levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int14 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNull(doubleArray11); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); }
public void test478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test478"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double[] doubleArray6 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray7 = levenbergMarquardtOptimizer0.residuals; int int8 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 'a'); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer11 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker12 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer11.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker12); double[] doubleArray14 = levenbergMarquardtOptimizer11.residualsWeights; levenbergMarquardtOptimizer11.cost = 0.0d; double[] doubleArray17 = levenbergMarquardtOptimizer11.targetValues; double[] doubleArray18 = levenbergMarquardtOptimizer11.residuals; int int19 = levenbergMarquardtOptimizer11.getMaxIterations(); double[] doubleArray20 = null; levenbergMarquardtOptimizer11.targetValues = doubleArray20; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker22 = levenbergMarquardtOptimizer11.getConvergenceChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker22); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertNull(doubleArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNull(doubleArray18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1000 + "'", int19 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker22); }
public void test479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test479"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; double double4 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = 10; levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (byte) 10); levenbergMarquardtOptimizer0.incrementIterationsCounter(); int int10 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.rows = 0; levenbergMarquardtOptimizer0.setMaxIterations(10); double[] doubleArray18 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(doubleArray18); java.lang.Throwable throwable20 = null; double[] doubleArray22 = new double[] { (byte) 100 }; java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(throwable20, doubleArray22, "hi!", objArray30); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair33 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray18, doubleArray22, true); java.lang.Throwable throwable34 = null; double[] doubleArray36 = new double[] { (byte) 100 }; java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException(throwable34, doubleArray36, "hi!", objArray44); double[] doubleArray46 = functionEvaluationException45.getArgument(); java.lang.Throwable throwable47 = null; double[] doubleArray49 = new double[] { (byte) 100 }; java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(throwable47, doubleArray49, "hi!", objArray57); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair60 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray46, doubleArray49, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair62 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray18, doubleArray49, true); java.lang.Throwable throwable63 = null; double[] doubleArray65 = new double[] { (byte) 100 }; java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(throwable63, doubleArray65, "hi!", objArray73); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair75 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray49, doubleArray65); double[] doubleArray76 = vectorialPointValuePair75.getPointRef(); double[] doubleArray77 = vectorialPointValuePair75.getPoint(); double[] doubleArray78 = vectorialPointValuePair75.getPointRef(); double[] doubleArray79 = vectorialPointValuePair75.getValue(); levenbergMarquardtOptimizer0.point = doubleArray79; levenbergMarquardtOptimizer0.cost = 0; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertNotNull(objArray30); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0]"); org.junit.Assert.assertNotNull(objArray44); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]"); org.junit.Assert.assertNotNull(objArray57); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0]"); org.junit.Assert.assertNotNull(objArray73); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]"); }
public void test480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test480"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable10 = null; double[] doubleArray12 = new double[] { (byte) 100 }; java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(throwable10, doubleArray12, "hi!", objArray20); double[] doubleArray22 = functionEvaluationException21.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer0.targetValues = doubleArray22; int int26 = levenbergMarquardtOptimizer0.cols; int int27 = levenbergMarquardtOptimizer0.getIterations(); int int28 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]"); org.junit.Assert.assertNotNull(objArray20); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647); }
public void test481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test481"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 0L); levenbergMarquardtOptimizer0.cols = (short) 100; int int9 = levenbergMarquardtOptimizer0.getEvaluations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer10 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker11 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer10.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker11); double[] doubleArray13 = levenbergMarquardtOptimizer10.residualsWeights; int int14 = levenbergMarquardtOptimizer10.getMaxIterations(); levenbergMarquardtOptimizer10.setMaxIterations(100); levenbergMarquardtOptimizer10.setParRelativeTolerance((-1.0d)); double[] doubleArray22 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); levenbergMarquardtOptimizer10.residuals = doubleArray22; levenbergMarquardtOptimizer0.objective = doubleArray22; double[] doubleArray26 = null; org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair28 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray22, doubleArray26, false); org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(doubleArray22); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 1.0, -1.0]"); }
public void test482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test482"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxIterations(100); int int7 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer8 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker9 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer8.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker9); levenbergMarquardtOptimizer8.cols = (short) 100; levenbergMarquardtOptimizer8.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer15 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker16 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer15.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker16); double[] doubleArray18 = levenbergMarquardtOptimizer15.residualsWeights; int int19 = levenbergMarquardtOptimizer15.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker20 = levenbergMarquardtOptimizer15.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker21 = levenbergMarquardtOptimizer15.checker; levenbergMarquardtOptimizer8.checker = vectorialConvergenceChecker21; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker23 = levenbergMarquardtOptimizer8.getConvergenceChecker(); levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker23; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100); org.junit.Assert.assertNull(doubleArray18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1000 + "'", int19 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker20); org.junit.Assert.assertNotNull(vectorialConvergenceChecker21); org.junit.Assert.assertNotNull(vectorialConvergenceChecker23); }
public void test483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test483"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); int int10 = levenbergMarquardtOptimizer0.cols; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer11 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker12 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer11.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker12); double[] doubleArray14 = levenbergMarquardtOptimizer11.residualsWeights; levenbergMarquardtOptimizer11.cols = 52; double double17 = levenbergMarquardtOptimizer11.getChiSquare(); levenbergMarquardtOptimizer11.cols = (byte) 1; double double20 = levenbergMarquardtOptimizer11.getRMS(); double[] doubleArray21 = levenbergMarquardtOptimizer11.residuals; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker22 = levenbergMarquardtOptimizer11.checker; levenbergMarquardtOptimizer0.checker = vectorialConvergenceChecker22; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double20)); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertNotNull(vectorialConvergenceChecker22); }
public void test484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test484"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) 1L); int int7 = levenbergMarquardtOptimizer0.getIterations(); java.lang.Throwable throwable8 = null; double[] doubleArray10 = new double[] { (byte) 100 }; java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(throwable8, doubleArray10, "hi!", objArray18); double[] doubleArray20 = functionEvaluationException19.getArgument(); java.lang.Throwable throwable21 = null; double[] doubleArray23 = new double[] { (byte) 100 }; java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(throwable21, doubleArray23, "hi!", objArray31); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair34 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray20, doubleArray23, false); double[] doubleArray38 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(doubleArray38); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair41 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray23, doubleArray38, true); levenbergMarquardtOptimizer0.targetValues = doubleArray23; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0]"); org.junit.Assert.assertNotNull(objArray18); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0]"); org.junit.Assert.assertNotNull(objArray31); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 1.0, -1.0]"); }
public void test485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test485"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; int int2 = levenbergMarquardtOptimizer0.getMaxIterations(); double[] doubleArray3 = levenbergMarquardtOptimizer0.point; double double4 = levenbergMarquardtOptimizer0.getRMS(); double[] doubleArray5 = levenbergMarquardtOptimizer0.residuals; org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue(Double.isNaN(double4)); org.junit.Assert.assertNull(doubleArray5); }
public void test486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test486"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker6 = levenbergMarquardtOptimizer0.getConvergenceChecker(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray10 = levenbergMarquardtOptimizer0.residualsWeights; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker6); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNull(doubleArray10); }
public void test487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test487"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.setInitialStepBoundFactor(0.0d); levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 1000); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer11 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker12 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer11.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker12); double[] doubleArray14 = levenbergMarquardtOptimizer11.residualsWeights; int int15 = levenbergMarquardtOptimizer11.getJacobianEvaluations(); levenbergMarquardtOptimizer11.incrementIterationsCounter(); double[] doubleArray17 = levenbergMarquardtOptimizer11.point; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer18 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker19 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer18.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker19); double[] doubleArray21 = levenbergMarquardtOptimizer18.residualsWeights; levenbergMarquardtOptimizer18.cols = 52; levenbergMarquardtOptimizer18.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker25 = levenbergMarquardtOptimizer18.checker; double[][] doubleArray26 = levenbergMarquardtOptimizer18.jacobian; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer27 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker28 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer27.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker28); levenbergMarquardtOptimizer27.cols = (short) 100; levenbergMarquardtOptimizer27.setMaxEvaluations(52); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer34 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker35 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer34.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker35); double[] doubleArray37 = levenbergMarquardtOptimizer34.residualsWeights; int int38 = levenbergMarquardtOptimizer34.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker39 = levenbergMarquardtOptimizer34.getConvergenceChecker(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker40 = levenbergMarquardtOptimizer34.checker; levenbergMarquardtOptimizer27.checker = vectorialConvergenceChecker40; levenbergMarquardtOptimizer18.checker = vectorialConvergenceChecker40; levenbergMarquardtOptimizer11.setConvergenceChecker(vectorialConvergenceChecker40); levenbergMarquardtOptimizer0.setConvergenceChecker(vectorialConvergenceChecker40); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double double46 = levenbergMarquardtOptimizer0.getChiSquare(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNull(doubleArray14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNull(doubleArray17); org.junit.Assert.assertNull(doubleArray21); org.junit.Assert.assertNotNull(vectorialConvergenceChecker25); org.junit.Assert.assertNull(doubleArray26); org.junit.Assert.assertNull(doubleArray37); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1000 + "'", int38 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker39); org.junit.Assert.assertNotNull(vectorialConvergenceChecker40); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); }
public void test488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test488"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; levenbergMarquardtOptimizer0.setMaxEvaluations(52); levenbergMarquardtOptimizer0.setParRelativeTolerance((double) 0.0f); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double[][] doubleArray10 = levenbergMarquardtOptimizer0.jacobian; java.lang.Throwable throwable11 = null; double[] doubleArray13 = new double[] { (byte) 100 }; java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException(throwable11, doubleArray13, "hi!", objArray21); double[] doubleArray23 = functionEvaluationException22.getArgument(); org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(doubleArray23); org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(doubleArray23); double[] doubleArray26 = functionEvaluationException25.getArgument(); levenbergMarquardtOptimizer0.point = doubleArray26; org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0]"); org.junit.Assert.assertNotNull(objArray21); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]"); }
public void test489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test489"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); double[] doubleArray1 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray2 = levenbergMarquardtOptimizer0.point; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) (short) 0); int int5 = levenbergMarquardtOptimizer0.getIterations(); int int6 = levenbergMarquardtOptimizer0.cols; levenbergMarquardtOptimizer0.cost = 100.0f; org.junit.Assert.assertNull(doubleArray1); org.junit.Assert.assertNull(doubleArray2); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test490"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); levenbergMarquardtOptimizer0.cols = (short) 100; double double5 = levenbergMarquardtOptimizer0.getChiSquare(); levenbergMarquardtOptimizer0.cols = ' '; int int8 = levenbergMarquardtOptimizer0.rows; int int9 = levenbergMarquardtOptimizer0.getEvaluations(); levenbergMarquardtOptimizer0.cols = (short) 0; double[] doubleArray12 = levenbergMarquardtOptimizer0.targetValues; double[] doubleArray13 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray12); org.junit.Assert.assertNull(doubleArray13); }
public void test491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test491"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cols = 52; levenbergMarquardtOptimizer0.incrementIterationsCounter(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker7 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.cost = 1.0d; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int12 = levenbergMarquardtOptimizer0.rows; int int13 = levenbergMarquardtOptimizer0.getMaxEvaluations(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNotNull(vectorialConvergenceChecker7); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100); }
public void test492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test492"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); int int3 = levenbergMarquardtOptimizer0.getMaxIterations(); int int4 = levenbergMarquardtOptimizer0.getMaxIterations(); levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 100); int int7 = levenbergMarquardtOptimizer0.rows; double double8 = levenbergMarquardtOptimizer0.cost; int int9 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test493"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker5 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(0.0d, (double) (short) 10); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker5); double[] doubleArray11 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(doubleArray11); java.lang.Throwable throwable13 = null; double[] doubleArray15 = new double[] { (byte) 100 }; java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(throwable13, doubleArray15, "hi!", objArray23); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair26 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray11, doubleArray15, true); double[] doubleArray27 = vectorialPointValuePair26.getPoint(); double[] doubleArray31 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(doubleArray31); java.lang.Throwable throwable33 = null; double[] doubleArray35 = new double[] { (byte) 100 }; java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(throwable33, doubleArray35, "hi!", objArray43); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair46 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray31, doubleArray35, true); java.lang.Throwable throwable47 = null; double[] doubleArray49 = new double[] { (byte) 100 }; java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(throwable47, doubleArray49, "hi!", objArray57); double[] doubleArray59 = functionEvaluationException58.getArgument(); java.lang.Throwable throwable60 = null; double[] doubleArray62 = new double[] { (byte) 100 }; java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0d, '4', true, true, 100.0d, (short) 100 }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException(throwable60, doubleArray62, "hi!", objArray70); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair73 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray59, doubleArray62, false); org.apache.commons.math.optimization.VectorialPointValuePair vectorialPointValuePair75 = new org.apache.commons.math.optimization.VectorialPointValuePair(doubleArray31, doubleArray62, true); boolean boolean76 = simpleVectorialValueChecker5.converged(10, vectorialPointValuePair26, vectorialPointValuePair75); double[] doubleArray77 = vectorialPointValuePair75.getPointRef(); java.lang.Object[] objArray81 = null; org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray81); org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException86 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1); int int87 = maxIterationsExceededException86.getMaxIterations(); java.lang.Object[] objArray88 = maxIterationsExceededException86.getArguments(); org.apache.commons.math.optimization.OptimizationException optimizationException89 = new org.apache.commons.math.optimization.OptimizationException("", objArray88); org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException82, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray88); org.apache.commons.math.optimization.OptimizationException optimizationException91 = new org.apache.commons.math.optimization.OptimizationException("org.apache.commons.math.MathRuntimeException$2: ", objArray88); org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(doubleArray77, "org.apache.commons.math.optimization.OptimizationException: ", objArray88); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]"); org.junit.Assert.assertNotNull(objArray23); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0]"); org.junit.Assert.assertNotNull(objArray43); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]"); org.junit.Assert.assertNotNull(objArray57); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]"); org.junit.Assert.assertNotNull(objArray70); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 4, true, true, 100.0, 100]"); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true); org.junit.Assert.assertNotNull(doubleArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1)); org.junit.Assert.assertNotNull(objArray88); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[-1]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[-1]"); }
public void test494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test494"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); double[][] doubleArray8 = levenbergMarquardtOptimizer0.jacobian; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker9 = levenbergMarquardtOptimizer0.getConvergenceChecker(); double[] doubleArray13 = new double[] { 10.0d, 1.0d, (-1.0d) }; org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(doubleArray13); levenbergMarquardtOptimizer0.residualsWeights = doubleArray13; org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer24 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker25 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer24.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker25); double[] doubleArray27 = levenbergMarquardtOptimizer24.objective; double[] doubleArray28 = null; levenbergMarquardtOptimizer24.point = doubleArray28; double[] doubleArray30 = levenbergMarquardtOptimizer24.residualsWeights; int int31 = levenbergMarquardtOptimizer24.getMaxIterations(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer32 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker33 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer32.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker33); double[] doubleArray35 = levenbergMarquardtOptimizer32.residualsWeights; levenbergMarquardtOptimizer32.cols = 52; levenbergMarquardtOptimizer32.incrementIterationsCounter(); double[] doubleArray43 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray48 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray49 = new double[][] { doubleArray43, doubleArray48 }; levenbergMarquardtOptimizer32.jacobian = doubleArray49; levenbergMarquardtOptimizer24.jacobian = doubleArray49; java.text.ParseException parseException52 = org.apache.commons.math.MathRuntimeException.createParseException((int) (byte) 1, "Convergence failed", (java.lang.Object[]) doubleArray49); java.lang.ArithmeticException arithmeticException53 = org.apache.commons.math.MathRuntimeException.createArithmeticException("hi!", (java.lang.Object[]) doubleArray49); org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException54 = new org.apache.commons.math.linear.InvalidMatrixException("Convergence failed", (java.lang.Object[]) doubleArray49); org.apache.commons.math.MathRuntimeException mathRuntimeException55 = new org.apache.commons.math.MathRuntimeException("evaluation failed for argument = {0}", (java.lang.Object[]) doubleArray49); java.io.EOFException eOFException56 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.MathRuntimeException$2: ", (java.lang.Object[]) doubleArray49); java.text.ParseException parseException57 = org.apache.commons.math.MathRuntimeException.createParseException(100, "", (java.lang.Object[]) doubleArray49); levenbergMarquardtOptimizer0.jacobian = doubleArray49; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker59 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNull(doubleArray8); org.junit.Assert.assertNotNull(vectorialConvergenceChecker9); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 1.0, -1.0]"); org.junit.Assert.assertNull(doubleArray27); org.junit.Assert.assertNull(doubleArray30); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1000 + "'", int31 == 1000); org.junit.Assert.assertNull(doubleArray35); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertNotNull(parseException52); org.junit.Assert.assertNotNull(arithmeticException53); org.junit.Assert.assertNotNull(eOFException56); org.junit.Assert.assertNotNull(parseException57); org.junit.Assert.assertNotNull(vectorialConvergenceChecker59); }
public void test495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test495"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); int int9 = levenbergMarquardtOptimizer0.getIterations(); int int10 = levenbergMarquardtOptimizer0.rows; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (short) 100); levenbergMarquardtOptimizer0.incrementIterationsCounter(); double[] doubleArray14 = levenbergMarquardtOptimizer0.residualsWeights; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNull(doubleArray14); }
public void test496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test496"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; int int4 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); levenbergMarquardtOptimizer0.setMaxIterations((int) '4'); int int7 = levenbergMarquardtOptimizer0.rows; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker8 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker8); }
public void test497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test497"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); int int12 = levenbergMarquardtOptimizer0.getMaxIterations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker13 = levenbergMarquardtOptimizer0.checker; levenbergMarquardtOptimizer0.setCostRelativeTolerance((double) 2147483647); levenbergMarquardtOptimizer0.setMaxIterations(97); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000); org.junit.Assert.assertNotNull(vectorialConvergenceChecker13); }
public void test498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test498"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.cost = 0.0d; double double6 = levenbergMarquardtOptimizer0.getChiSquare(); int int7 = levenbergMarquardtOptimizer0.getIterations(); int int8 = levenbergMarquardtOptimizer0.getIterations(); levenbergMarquardtOptimizer0.cols = 0; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); int int12 = levenbergMarquardtOptimizer0.getIterations(); double double13 = levenbergMarquardtOptimizer0.cost; double[] doubleArray14 = levenbergMarquardtOptimizer0.targetValues; org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNull(doubleArray14); }
public void test499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test499"); java.lang.Object[] objArray6 = new java.lang.Object[] { (short) -1, 10L, 100.0f, 100 }; java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException7 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", objArray6); java.lang.IllegalArgumentException illegalArgumentException8 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable) arrayIndexOutOfBoundsException7); java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f }; org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) arrayIndexOutOfBoundsException7, "", objArray11); org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathRuntimeException$2: ", objArray11); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer15 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker16 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer15.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker16); double[] doubleArray18 = levenbergMarquardtOptimizer15.residualsWeights; levenbergMarquardtOptimizer15.cost = 0.0d; org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker21 = levenbergMarquardtOptimizer15.getConvergenceChecker(); levenbergMarquardtOptimizer15.setInitialStepBoundFactor((double) (short) 10); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker24 = levenbergMarquardtOptimizer15.getConvergenceChecker(); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer25 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker26 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer25.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker26); double[] doubleArray28 = levenbergMarquardtOptimizer25.residualsWeights; levenbergMarquardtOptimizer25.cols = 52; levenbergMarquardtOptimizer25.incrementIterationsCounter(); double[] doubleArray36 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[] doubleArray41 = new double[] { 100.0d, (short) 0, 10.0d, '4' }; double[][] doubleArray42 = new double[][] { doubleArray36, doubleArray41 }; levenbergMarquardtOptimizer25.jacobian = doubleArray42; levenbergMarquardtOptimizer15.jacobian = doubleArray42; org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException13, "", (java.lang.Object[]) doubleArray42); java.io.IOException iOException46 = org.apache.commons.math.MathRuntimeException.createIOException((java.lang.Throwable) convergenceException13); org.junit.Assert.assertNotNull(objArray6); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[-1, 10, 100.0, 100]"); org.junit.Assert.assertNotNull(arrayIndexOutOfBoundsException7); org.junit.Assert.assertNotNull(illegalArgumentException8); org.junit.Assert.assertNotNull(objArray11); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0]"); org.junit.Assert.assertNull(doubleArray18); org.junit.Assert.assertNotNull(vectorialConvergenceChecker21); org.junit.Assert.assertNotNull(vectorialConvergenceChecker24); org.junit.Assert.assertNull(doubleArray28); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 10.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertNotNull(iOException46); }
public void test500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test500"); org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer(); org.apache.commons.math.optimization.SimpleVectorialValueChecker simpleVectorialValueChecker1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker(); levenbergMarquardtOptimizer0.setConvergenceChecker((org.apache.commons.math.optimization.VectorialConvergenceChecker) simpleVectorialValueChecker1); double[] doubleArray3 = levenbergMarquardtOptimizer0.objective; double[] doubleArray4 = null; levenbergMarquardtOptimizer0.point = doubleArray4; double[] doubleArray6 = levenbergMarquardtOptimizer0.residualsWeights; levenbergMarquardtOptimizer0.setMaxEvaluations((int) (byte) 100); int int9 = levenbergMarquardtOptimizer0.getEvaluations(); double[] doubleArray10 = levenbergMarquardtOptimizer0.point; int int11 = levenbergMarquardtOptimizer0.getEvaluations(); org.apache.commons.math.optimization.VectorialConvergenceChecker vectorialConvergenceChecker12 = levenbergMarquardtOptimizer0.getConvergenceChecker(); org.junit.Assert.assertNull(doubleArray3); org.junit.Assert.assertNull(doubleArray6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNull(doubleArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(vectorialConvergenceChecker12); }
public void testMinpackLinearFullRank() { minpackTest(new LinearFullRankFunction(10, 5, 1.0, 5.0, 2.23606797749979), false); minpackTest(new LinearFullRankFunction(50, 5, 1.0, 8.06225774829855, 6.70820393249937), false); }
public void testMinpackLinearRank1() { minpackTest(new LinearRank1Function(10, 5, 1.0, 291.521868819476, 1.4638501094228), false); minpackTest(new LinearRank1Function(50, 5, 1.0, 3101.60039334535, 3.48263016573496), false); }
public void testMinpackLinearRank1ZeroColsAndRows() { minpackTest(new LinearRank1ZeroColsAndRowsFunction(10, 5, 1.0), false); minpackTest(new LinearRank1ZeroColsAndRowsFunction(50, 5, 1.0), false); }
public void testMinpackRosenbrok() { minpackTest(new RosenbrockFunction(new double[] { -1.2, 1.0 }, Math.sqrt(24.2)), false); minpackTest(new RosenbrockFunction(new double[] { -12.0, 10.0 }, Math.sqrt(1795769.0)), false); minpackTest(new RosenbrockFunction(new double[] { -120.0, 100.0 }, 11.0 * Math.sqrt(169000121.0)), false); }
public void testMinpackHelicalValley() { minpackTest(new HelicalValleyFunction(new double[] { -1.0, 0.0, 0.0 }, 50.0), false); minpackTest(new HelicalValleyFunction(new double[] { -10.0, 0.0, 0.0 }, 102.95630140987), false); minpackTest(new HelicalValleyFunction(new double[] { -100.0, 0.0, 0.0}, 991.261822123701), false); }
public void testMinpackPowellSingular() { minpackTest(new PowellSingularFunction(new double[] { 3.0, -1.0, 0.0, 1.0 }, 14.6628782986152), false); minpackTest(new PowellSingularFunction(new double[] { 30.0, -10.0, 0.0, 10.0 }, 1270.9838708654), false); minpackTest(new PowellSingularFunction(new double[] { 300.0, -100.0, 0.0, 100.0 }, 126887.903284750), false); }
public void testMinpackFreudensteinRoth() { minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 }, 20.0124960961895, 6.99887517584575, new double[] { 11.4124844654993, -0.896827913731509 }), false); minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 }, 12432.833948863, 6.9988751744895, new double[] { 11.4121122022341, -0.8968550851268697 }), false); minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 }, 11426454.595762, 6.99887517242903, new double[] { 11.412069435091231, -0.8968582807605691 }), false); }
public void testMinpackBard() { minpackTest(new BardFunction(1.0, 6.45613629515967, 0.0906359603390466, new double[] { 0.0824105765758334, 1.1330366534715, 2.34369463894115 }), false); minpackTest(new BardFunction(10.0, 36.1418531596785, 4.17476870138539, new double[] { 0.840666673818329, -158848033.259565, -164378671.653535 }), false); minpackTest(new BardFunction(100.0, 384.114678637399, 4.17476870135969, new double[] { 0.840666673867645, -158946167.205518, -164464906.857771 }), false); }
public void testMinpackKowalikOsborne() { minpackTest(new KowalikOsborneFunction(new double[] { 0.25, 0.39, 0.415, 0.39 }, 0.0728915102882945, 0.017535837721129, new double[] { 0.192807810476249, 0.191262653354071, 0.123052801046931, 0.136053221150517 }), false); minpackTest(new KowalikOsborneFunction(new double[] { 2.5, 3.9, 4.15, 3.9 }, 2.97937007555202, 0.032052192917937, new double[] { 728675.473768287, -14.0758803129393, -32977797.7841797, -20571594.1977912 }), false); minpackTest(new KowalikOsborneFunction(new double[] { 25.0, 39.0, 41.5, 39.0 }, 29.9590617016037, 0.0175364017658228, new double[] { 0.192948328597594, 0.188053165007911, 0.122430604321144, 0.134575665392506 }), false); }
public void testMinpackMeyer() { minpackTest(new MeyerFunction(new double[] { 0.02, 4000.0, 250.0 }, 41153.4665543031, 9.37794514651874, new double[] { 0.00560963647102661, 6181.34634628659, 345.223634624144 }), false); minpackTest(new MeyerFunction(new double[] { 0.2, 40000.0, 2500.0 }, 4168216.89130846, 792.917871779501, new double[] { 1.42367074157994e-11, 33695.7133432541, 901.268527953801 }), true); }
public void testMinpackWatson() { minpackTest(new WatsonFunction(6, 0.0, 5.47722557505166, 0.0478295939097601, new double[] { -0.0157249615083782, 1.01243488232965, -0.232991722387673, 1.26043101102818, -1.51373031394421,  0.99299727291842 }), false); minpackTest(new WatsonFunction(6, 10.0, 6433.12578950026, 0.0478295939096951, new double[] { -0.0157251901386677, 1.01243485860105, -0.232991545843829, 1.26042932089163, -1.51372776706575,  0.99299573426328 }), false); minpackTest(new WatsonFunction(6, 100.0, 674256.040605213, 0.047829593911544, new double[] { -0.0157247019712586, 1.01243490925658, -0.232991922761641, 1.26043292929555, -1.51373320452707,  0.99299901922322 }), false); minpackTest(new WatsonFunction(9, 0.0, 5.47722557505166, 0.00118311459212420, new double[] { -0.153070644166722e-4, 0.999789703934597, 0.0147639634910978,  0.146342330145992, 1.00082109454817,  -2.61773112070507, 4.10440313943354,  -3.14361226236241, 1.05262640378759 }), false); minpackTest(new WatsonFunction(9, 10.0, 12088.127069307, 0.00118311459212513, new double[] { -0.153071334849279e-4, 0.999789703941234, 0.0147639629786217,  0.146342334818836, 1.00082107321386,  -2.61773107084722, 4.10440307655564,  -3.14361222178686, 1.05262639322589 }), false); minpackTest(new WatsonFunction(9, 100.0, 1269109.29043834, 0.00118311459212384, new double[] { -0.153069523352176e-4, 0.999789703958371, 0.0147639625185392,  0.146342341096326, 1.00082104729164,  -2.61773101573645, 4.10440301427286,  -3.14361218602503, 1.05262638516774 }), false); minpackTest(new WatsonFunction(12, 0.0, 5.47722557505166, 0.217310402535861e-4, new double[] { -0.660266001396382e-8, 1.00000164411833, -0.000563932146980154, 0.347820540050756, -0.156731500244233,  1.05281515825593, -3.24727109519451,   7.2884347837505, -10.271848098614,    9.07411353715783, -4.54137541918194,   1.01201187975044 }), false); minpackTest(new WatsonFunction(12, 10.0, 19220.7589790951, 0.217310402518509e-4, new double[] { -0.663710223017410e-8, 1.00000164411787, -0.000563932208347327, 0.347820540486998, -0.156731503955652,  1.05281517654573, -3.2472711515214,   7.28843489430665, -10.2718482369638,   9.07411364383733, -4.54137546533666,   1.01201188830857 }), false); minpackTest(new WatsonFunction(12, 100.0, 2018918.04462367, 0.217310402539845e-4, new double[] { -0.663806046485249e-8, 1.00000164411786, -0.000563932210324959, 0.347820540503588, -0.156731504091375,  1.05281517718031, -3.24727115337025,   7.28843489775302, -10.2718482410813,   9.07411364688464, -4.54137546660822,   1.0120118885369 }), false); }
public void testMinpackBox3Dimensional() { minpackTest(new Box3DimensionalFunction(10, new double[] { 0.0, 10.0, 20.0 }, 32.1115837449572), false); }
public void testMinpackJennrichSampson() { minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 }, 64.5856498144943, 11.1517793413499, new double[] { 0.2578330049, 0.257829976764542 }), false); }
public void testMinpackBrownDennis() { minpackTest(new BrownDennisFunction(20, new double[] { 25.0, 5.0, -5.0, -1.0 }, 2815.43839161816, 292.954288244866, new double[] { -11.59125141003, 13.2024883984741, -0.403574643314272, 0.236736269844604 }), false); minpackTest(new BrownDennisFunction(20, new double[] { 250.0, 50.0, -50.0, -10.0 }, 555073.354173069, 292.954270581415, new double[] { -11.5959274272203, 13.2041866926242, -0.403417362841545, 0.236771143410386 }), false); minpackTest(new BrownDennisFunction(20, new double[] { 2500.0, 500.0, -500.0, -100.0 }, 61211252.2338581, 292.954306151134, new double[] { -11.5902596937374, 13.2020628854665, -0.403688070279258, 0.236665033746463 }), false); }
public void testMinpackChebyquad() { minpackTest(new ChebyquadFunction(1, 8, 1.0, 1.88623796907732, 1.88623796907732, new double[] { 0.5 }), false); minpackTest(new ChebyquadFunction(1, 8, 10.0, 5383344372.34005, 1.88424820499951, new double[] { 0.9817314924684 }), false); minpackTest(new ChebyquadFunction(1, 8, 100.0, 0.118088726698392e19, 1.88424820499347, new double[] { 0.9817314852934 }), false); minpackTest(new ChebyquadFunction(8, 8, 1.0, 0.196513862833975, 0.0593032355046727, new double[] { 0.0431536648587336, 0.193091637843267, 0.266328593812698, 0.499999334628884, 0.500000665371116, 0.733671406187302, 0.806908362156733, 0.956846335141266 }), false); minpackTest(new ChebyquadFunction(9, 9, 1.0, 0.16994993465202, 0.0, new double[] { 0.0442053461357828, 0.199490672309881, 0.23561910847106,  0.416046907892598, 0.5,        0.583953092107402, 0.764380891528940, 0.800509327690119, 0.955794653864217 }), false); minpackTest(new ChebyquadFunction(10, 10, 1.0, 0.183747831178711, 0.0806471004038253, new double[] { 0.0596202671753563, 0.166708783805937, 0.239171018813509, 0.398885290346268, 0.398883667870681, 0.601116332129320, 0.60111470965373,  0.760828981186491, 0.833291216194063, 0.940379732824644 }), false); }
public void testMinpackBrownAlmostLinear() { minpackTest(new BrownAlmostLinearFunction(10, 0.5, 16.5302162063499, 0.0, new double[] { 0.979430303349862, 0.979430303349862, 0.979430303349862, 0.979430303349862, 0.979430303349862, 0.979430303349862, 0.979430303349862, 0.979430303349862, 0.979430303349862, 1.20569696650138 }), false); minpackTest(new BrownAlmostLinearFunction(10, 5.0, 9765624.00089211, 0.0, new double[] { 0.979430303349865, 0.979430303349865, 0.979430303349865, 0.979430303349865, 0.979430303349865, 0.979430303349865, 0.979430303349865, 0.979430303349865, 0.979430303349865, 1.20569696650135 }), false); minpackTest(new BrownAlmostLinearFunction(10, 50.0, 0.9765625e17, 0.0, new double[] { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }), false); minpackTest(new BrownAlmostLinearFunction(30, 0.5, 83.476044467848, 0.0, new double[] { 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 0.997754216442807, 1.06737350671578 }), false); minpackTest(new BrownAlmostLinearFunction(40, 0.5, 128.026364472323, 0.0, new double[] { 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 1.00000000000002, 0.999999999999121 }), false); }
public void testMinpackOsborne1() { minpackTest(new Osborne1Function(new double[] { 0.5, 1.5, -1.0, 0.01, 0.02, }, 0.937564021037838, 0.00739249260904843, new double[] { 0.375410049244025, 1.93584654543108, -1.46468676748716, 0.0128675339110439, 0.0221227011813076 }), false); }
public void testMinpackOsborne2() { minpackTest(new Osborne2Function(new double[] { 1.3, 0.65, 0.65, 0.7, 0.6, 3.0, 5.0, 7.0, 2.0, 4.5, 5.5 }, 1.44686540984712, 0.20034404483314, new double[] { 1.30997663810096, 0.43155248076, 0.633661261602859, 0.599428560991695, 0.754179768272449, 0.904300082378518, 1.36579949521007, 4.82373199748107, 2.39868475104871, 4.56887554791452, 5.67534206273052 }), false); }
public void test0() throws Throwable { LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(); assertEquals(1000, levenbergMarquardtOptimizer0.getMaxIterations()); }
public void testTrivial() throws FunctionEvaluationException, OptimizationException { LinearProblem problem = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 }); LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(); VectorialPointValuePair optimum = optimizer.optimize(problem, problem.target, new double[] { 1 }, new double[] { 0 }); assertEquals(0, optimizer.getRMS(), 1.0e-10); try { optimizer.guessParametersErrors(); fail("an exception should have been thrown"); } catch (OptimizationException ee) { // expected behavior } catch (Exception e) { fail("wrong exception caught"); } assertEquals(1.5, optimum.getPoint()[0], 1.0e-10); assertEquals(3.0, optimum.getValue()[0], 1.0e-10); }
public void testQRColumnsPermutation() throws FunctionEvaluationException, OptimizationException { LinearProblem problem = new LinearProblem(new double[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } }, new double[] { 4.0, 6.0, 1.0 }); LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(); VectorialPointValuePair optimum = optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0 }); assertEquals(0, optimizer.getRMS(), 1.0e-10); assertEquals(7.0, optimum.getPoint()[0], 1.0e-10); assertEquals(3.0, optimum.getPoint()[1], 1.0e-10); assertEquals(4.0, optimum.getValue()[0], 1.0e-10); assertEquals(6.0, optimum.getValue()[1], 1.0e-10); assertEquals(1.0, optimum.getValue()[2], 1.0e-10); }
public void testNoDependency() throws FunctionEvaluationException, OptimizationException { LinearProblem problem = new LinearProblem(new double[][] { { 2, 0, 0, 0, 0, 0 }, { 0, 2, 0, 0, 0, 0 }, { 0, 0, 2, 0, 0, 0 }, { 0, 0, 0, 2, 0, 0 }, { 0, 0, 0, 0, 2, 0 }, { 0, 0, 0, 0, 0, 2 } }, new double[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 }); LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(); VectorialPointValuePair optimum = optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 }, new double[] { 0, 0, 0, 0, 0, 0 }); assertEquals(0, optimizer.getRMS(), 1.0e-10); for (int i = 0; i < problem.target.length; ++i) { assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10); } }
public void testOneSet() throws FunctionEvaluationException, OptimizationException { LinearProblem problem = new LinearProblem(new double[][] { { 1, 0, 0 }, { -1, 1, 0 }, { 0, -1, 1 } }, new double[] { 1, 1, 1}); LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(); VectorialPointValuePair optimum = optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 }); assertEquals(0, optimizer.getRMS(), 1.0e-10); assertEquals(1.0, optimum.getPoint()[0], 1.0e-10); assertEquals(2.0, optimum.getPoint()[1], 1.0e-10); assertEquals(3.0, optimum.getPoint()[2], 1.0e-10); }
public void testTwoSets() throws FunctionEvaluationException, OptimizationException { double epsilon = 1.0e-7; LinearProblem problem = new LinearProblem(new double[][] { { 2, 1,  0, 4,    0, 0 }, { -4, -2,  3, -7,    0, 0 }, { 4, 1, -2, 8,    0, 0 }, { 0, -3, -12, -1,    0, 0 }, { 0, 0,  0, 0, epsilon, 1 }, { 0, 0,  0, 0,    1, 1 } }, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2}); LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(); VectorialPointValuePair optimum = optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1, 1, 1, 1 }, new double[] { 0, 0, 0, 0, 0, 0 }); assertEquals(0, optimizer.getRMS(), 1.0e-10); assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10); assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10); assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10); assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10); assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10); assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10); }
public void testNonInversible() throws FunctionEvaluationException, OptimizationException { LinearProblem problem = new LinearProblem(new double[][] { { 1, 2, -3 }, { 2, 1, 3 }, { -3, 0, -9 } }, new double[] { 1, 1, 1 }); LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(); optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 }); assertTrue(Math.sqrt(problem.target.length) * optimizer.getRMS() > 0.6); try { optimizer.getCovariances(); fail("an exception should have been thrown"); } catch (OptimizationException ee) { // expected behavior } catch (Exception e) { fail("wrong exception caught"); } }
public void testIllConditioned() throws FunctionEvaluationException, OptimizationException { LinearProblem problem1 = new LinearProblem(new double[][] { { 10.0, 7.0, 8.0, 7.0 }, { 7.0, 5.0, 6.0, 5.0 }, { 8.0, 6.0, 10.0, 9.0 }, { 7.0, 5.0, 9.0, 10.0 } }, new double[] { 32, 23, 33, 31 }); LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(); VectorialPointValuePair optimum1 = optimizer.optimize(problem1, problem1.target, new double[] { 1, 1, 1, 1 }, new double[] { 0, 1, 2, 3 }); assertEquals(0, optimizer.getRMS(), 1.0e-10); assertEquals(1.0, optimum1.getPoint()[0], 1.0e-10); assertEquals(1.0, optimum1.getPoint()[1], 1.0e-10); assertEquals(1.0, optimum1.getPoint()[2], 1.0e-10); assertEquals(1.0, optimum1.getPoint()[3], 1.0e-10); LinearProblem problem2 = new LinearProblem(new double[][] { { 10.00, 7.00, 8.10, 7.20 }, { 7.08, 5.04, 6.00, 5.00 }, { 8.00, 5.98, 9.89, 9.00 }, { 6.99, 4.99, 9.00, 9.98 } }, new double[] { 32, 23, 33, 31 }); VectorialPointValuePair optimum2 = optimizer.optimize(problem2, problem2.target, new double[] { 1, 1, 1, 1 }, new double[] { 0, 1, 2, 3 }); assertEquals(0, optimizer.getRMS(), 1.0e-10); assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-8); assertEquals(137.0, optimum2.getPoint()[1], 1.0e-8); assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-8); assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-8); }
public void testMoreEstimatedParametersSimple() throws FunctionEvaluationException, OptimizationException { LinearProblem problem = new LinearProblem(new double[][] { { 3.0, 2.0, 0.0, 0.0 }, { 0.0, 1.0, -1.0, 1.0 }, { 2.0, 0.0, 1.0, 0.0 } }, new double[] { 7.0, 3.0, 5.0 }); LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(); optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 7, 6, 5, 4 }); assertEquals(0, optimizer.getRMS(), 1.0e-10); }
public void testMoreEstimatedParametersUnsorted() throws FunctionEvaluationException, OptimizationException { LinearProblem problem = new LinearProblem(new double[][] { { 1.0, 1.0, 0.0, 0.0, 0.0, 0.0 }, { 0.0, 0.0, 1.0, 1.0, 1.0, 0.0 }, { 0.0, 0.0, 0.0, 0.0, 1.0, -1.0 }, { 0.0, 0.0, -1.0, 1.0, 0.0, 1.0 }, { 0.0, 0.0, 0.0, -1.0, 1.0, 0.0 } }, new double[] { 3.0, 12.0, -1.0, 7.0, 1.0 }); LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(); VectorialPointValuePair optimum = optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1, 1, 1 }, new double[] { 2, 2, 2, 2, 2, 2 }); assertEquals(0, optimizer.getRMS(), 1.0e-10); assertEquals(3.0, optimum.getPointRef()[2], 1.0e-10); assertEquals(4.0, optimum.getPointRef()[3], 1.0e-10); assertEquals(5.0, optimum.getPointRef()[4], 1.0e-10); assertEquals(6.0, optimum.getPointRef()[5], 1.0e-10); }
public void testRedundantEquations() throws FunctionEvaluationException, OptimizationException { LinearProblem problem = new LinearProblem(new double[][] { { 1.0, 1.0 }, { 1.0, -1.0 }, { 1.0, 3.0 } }, new double[] { 3.0, 1.0, 5.0 }); LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(); VectorialPointValuePair optimum = optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 1, 1 }); assertEquals(0, optimizer.getRMS(), 1.0e-10); assertEquals(2.0, optimum.getPointRef()[0], 1.0e-10); assertEquals(1.0, optimum.getPointRef()[1], 1.0e-10); }
public void testInconsistentEquations() throws FunctionEvaluationException, OptimizationException { LinearProblem problem = new LinearProblem(new double[][] { { 1.0, 1.0 }, { 1.0, -1.0 }, { 1.0, 3.0 } }, new double[] { 3.0, 1.0, 4.0 }); LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(); optimizer.optimize(problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 1, 1 }); assertTrue(optimizer.getRMS() > 0.1); }
public void testInconsistentSizes() throws FunctionEvaluationException, OptimizationException { LinearProblem problem = new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } }, new double[] { -1, 1 }); LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(); VectorialPointValuePair optimum = optimizer.optimize(problem, problem.target, new double[] { 1, 1 }, new double[] { 0, 0 }); assertEquals(0, optimizer.getRMS(), 1.0e-10); assertEquals(-1, optimum.getPoint()[0], 1.0e-10); assertEquals(+1, optimum.getPoint()[1], 1.0e-10); try { optimizer.optimize(problem, problem.target, new double[] { 1 }, new double[] { 0, 0 }); fail("an exception should have been thrown"); } catch (OptimizationException oe) { // expected behavior } catch (Exception e) { fail("wrong exception caught"); } try { optimizer.optimize(problem, new double[] { 1 }, new double[] { 1 }, new double[] { 0, 0 }); fail("an exception should have been thrown"); } catch (FunctionEvaluationException oe) { // expected behavior } catch (Exception e) { fail("wrong exception caught"); } }
public void testControlParameters() { Circle circle = new Circle(); circle.addPoint( 30.0, 68.0); circle.addPoint( 50.0, -6.0); circle.addPoint(110.0, -20.0); circle.addPoint( 35.0, 15.0); circle.addPoint( 45.0, 97.0); checkEstimate(circle, 0.1, 10, 1.0e-14, 1.0e-16, 1.0e-10, false); checkEstimate(circle, 0.1, 10, 1.0e-15, 1.0e-17, 1.0e-10, true); checkEstimate(circle, 0.1, 5, 1.0e-15, 1.0e-16, 1.0e-10, true); circle.addPoint(300, -300); checkEstimate(circle, 0.1, 20, 1.0e-18, 1.0e-16, 1.0e-10, true); }
public void testCircleFitting() throws FunctionEvaluationException, OptimizationException { Circle circle = new Circle(); circle.addPoint( 30.0, 68.0); circle.addPoint( 50.0, -6.0); circle.addPoint(110.0, -20.0); circle.addPoint( 35.0, 15.0); circle.addPoint( 45.0, 97.0); LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(); VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 }, new double[] { 98.680, 47.345 }); assertTrue(optimizer.getEvaluations() < 10); assertTrue(optimizer.getJacobianEvaluations() < 10); double rms = optimizer.getRMS(); assertEquals(1.768262623567235, Math.sqrt(circle.getN()) * rms, 1.0e-10); Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]); assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10); assertEquals(96.07590211815305, center.x,   1.0e-10); assertEquals(48.13516790438953, center.y,   1.0e-10); double[][] cov = optimizer.getCovariances(); assertEquals(1.839, cov[0][0], 0.001); assertEquals(0.731, cov[0][1], 0.001); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.786, cov[1][1], 0.001); double[] errors = optimizer.guessParametersErrors(); assertEquals(1.384, errors[0], 0.001); assertEquals(0.905, errors[1], 0.001); // add perfect measurements and check errors are reduced double r = circle.getRadius(center); for (double d= 0; d < 2 * Math.PI; d += 0.01) { circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d)); } double[] target = new double[circle.getN()]; Arrays.fill(target, 0.0); double[] weights = new double[circle.getN()]; Arrays.fill(weights, 2.0); optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 }); cov = optimizer.getCovariances(); assertEquals(0.0016, cov[0][0], 0.001); assertEquals(3.2e-7, cov[0][1], 1.0e-9); assertEquals(cov[0][1], cov[1][0], 1.0e-14); assertEquals(0.0016, cov[1][1], 0.001); errors = optimizer.guessParametersErrors(); assertEquals(0.002, errors[0], 0.001); assertEquals(0.002, errors[1], 0.001); }
public void testCircleFittingBadInit() throws FunctionEvaluationException, OptimizationException { Circle circle = new Circle(); double[][] points = new double[][] { {-0.312967, 0.072366}, {-0.339248, 0.132965}, {-0.379780, 0.202724}, {-0.390426, 0.260487}, {-0.361212, 0.328325}, {-0.346039, 0.392619}, {-0.280579, 0.444306}, {-0.216035, 0.470009}, {-0.149127, 0.493832}, {-0.075133, 0.483271}, {-0.007759, 0.452680}, { 0.060071, 0.410235}, { 0.103037, 0.341076}, { 0.118438, 0.273884}, { 0.131293, 0.192201}, { 0.115869, 0.129797}, { 0.072223, 0.058396}, { 0.022884, 0.000718}, {-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862}, {-0.278592, -0.005008}, {-0.337655, 0.056658}, {-0.385899, 0.112526}, {-0.405517, 0.186957}, {-0.415374, 0.262071}, {-0.387482, 0.343398}, {-0.347322, 0.397943}, {-0.287623, 0.458425}, {-0.223502, 0.475513}, {-0.135352, 0.478186}, {-0.061221, 0.483371}, { 0.003711, 0.422737}, { 0.065054, 0.375830}, { 0.108108, 0.297099}, { 0.123882, 0.222850}, { 0.117729, 0.134382}, { 0.085195, 0.056820}, { 0.029800, -0.019138}, {-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578}, {-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561, 0.014926}, {-0.471036, 0.074716}, {-0.488638, 0.182508}, {-0.485990, 0.254068}, {-0.463943, 0.338438}, {-0.406453, 0.404704}, {-0.334287, 0.466119}, {-0.254244, 0.503188}, {-0.161548, 0.495769}, {-0.075733, 0.495560}, { 0.001375, 0.434937}, { 0.082787, 0.385806}, { 0.115490, 0.323807}, { 0.141089, 0.223450}, { 0.138693, 0.131703}, { 0.126415, 0.049174}, { 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635}, {-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251}, {-0.405195, -0.000895}, {-0.444937, 0.085456}, {-0.484357, 0.175597}, {-0.472453, 0.248681}, {-0.438580, 0.347463}, {-0.402304, 0.422428}, {-0.326777, 0.479438}, {-0.247797, 0.505581}, {-0.152676, 0.519380}, {-0.071754, 0.516264}, { 0.015942, 0.472802}, { 0.076608, 0.419077}, { 0.127673, 0.330264}, { 0.159951, 0.262150}, { 0.153530, 0.172681}, { 0.140653, 0.089229}, { 0.078666, 0.024981}, { 0.023807, -0.037022}, {-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526} }; double[] target = new double[points.length]; Arrays.fill(target, 0.0); double[] weights = new double[points.length]; Arrays.fill(weights, 2.0); for (int i = 0; i < points.length; ++i) { circle.addPoint(points[i][0], points[i][1]); } LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(); optimizer.setConvergenceChecker(new SimpleVectorialValueChecker(1.0e-8, 1.0e-8)); VectorialPointValuePair optimum = optimizer.optimize(circle, target, weights, new double[] { -12, -12 }); Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]); assertTrue(optimizer.getEvaluations() < 25); assertTrue(optimizer.getJacobianEvaluations() < 20); assertEquals( 0.043, optimizer.getRMS(), 1.0e-3); assertEquals( 0.292235, circle.getRadius(center), 1.0e-6); assertEquals(-0.151738, center.x,   1.0e-6); assertEquals( 0.2075001, center.y,   1.0e-6); }
public void testMath199() throws FunctionEvaluationException { try { QuadraticProblem problem = new QuadraticProblem(); problem.addPoint (0, -3.182591015485607); problem.addPoint (1, -2.5581184967730577); problem.addPoint (2, -2.1488478161387325); problem.addPoint (3, -1.9122489313410047); problem.addPoint (4, 1.7785661310051026); new LevenbergMarquardtOptimizer().optimize(problem, new double[] { 0, 0, 0, 0, 0 }, new double[] { 0.0, 4.4e-323, 1.0, 4.4e-323, 0.0 }, new double[] { 0, 0, 0 }); fail("an exception should have been thrown"); } catch (OptimizationException ee) { // expected behavior } }
