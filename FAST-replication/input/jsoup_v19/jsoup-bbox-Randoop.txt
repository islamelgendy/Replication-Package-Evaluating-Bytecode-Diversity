public void test501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test501"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str9 = document8.val(); java.util.List<org.jsoup.nodes.Node> nodeList11 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document8, "#document"); java.lang.String str12 = document8.baseUri(); org.jsoup.nodes.Element element14 = document8.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements15 = document8.parents(); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse(".:eq(52)"); java.lang.String str19 = document18.html(); org.jsoup.nodes.Element element21 = document18.prependElement("[^hi!]"); boolean boolean22 = cleaner4.isValid(document18); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str27 = document26.val(); java.util.List<org.jsoup.nodes.Node> nodeList29 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document26, "#document"); java.lang.String str30 = document26.baseUri(); org.jsoup.nodes.Element element32 = document26.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element34 = document26.prependElement("#<html> <head></head> <body> hi! </body> </html>"); boolean boolean35 = cleaner4.isValid(document26); org.jsoup.nodes.Element element36 = document26.clone(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(nodeList11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(nodeList29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!"); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(element36); }
public void test502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test502"); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList0 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings3.charset(); charsetList0.addFirst(charset4); java.util.Iterator<java.nio.charset.Charset> charsetItor6 = charsetList0.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList7 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); java.nio.charset.Charset charset11 = outputSettings10.charset(); charsetList7.addFirst(charset11); boolean boolean13 = charsetList0.offerFirst(charset11); int int14 = charsetList0.size(); java.nio.charset.Charset charset15 = charsetList0.peekLast(); java.nio.charset.Charset charset16 = charsetList0.pop(); java.nio.charset.Charset charset17 = charsetList0.peekLast(); java.util.Spliterator<java.nio.charset.Charset> charsetSpliterator18 = charsetList0.spliterator(); org.jsoup.helper.DescendableLinkedList<java.util.ArrayList<java.lang.String>> strListList19 = new org.jsoup.helper.DescendableLinkedList<java.util.ArrayList<java.lang.String>>(); int int20 = charsetList0.indexOf((java.lang.Object) strListList19); java.nio.charset.Charset charset21 = charsetList0.poll(); java.util.Iterator<java.nio.charset.Charset> charsetItor22 = charsetList0.iterator(); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); boolean boolean28 = org.jsoup.Jsoup.isValid("", whitelist25); org.jsoup.nodes.Attributes attributes30 = whitelist25.getEnforcedAttributes(":eq(52)"); boolean boolean31 = org.jsoup.Jsoup.isValid("", whitelist25); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.basic(); boolean boolean38 = org.jsoup.Jsoup.isValid("hi!", whitelist37); java.lang.String[] strArray46 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist47 = whitelist37.addProtocols(".#document", "#doctype=\"\"", strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist34.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray46); org.jsoup.safety.Whitelist whitelist50 = whitelist48.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist52 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist54 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist56 = whitelist54.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.basic(); boolean boolean60 = org.jsoup.Jsoup.isValid("hi!", whitelist59); java.lang.String[] strArray68 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist69 = whitelist59.addProtocols(".#document", "#doctype=\"\"", strArray68); org.jsoup.safety.Whitelist whitelist70 = whitelist56.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray68); org.jsoup.safety.Whitelist whitelist71 = whitelist52.addAttributes(":containsOwn(hi!:matchesown(null", strArray68); org.jsoup.safety.Whitelist whitelist72 = whitelist48.addAttributes(" text=\"\"", strArray68); org.jsoup.safety.Whitelist whitelist73 = whitelist25.addProtocols("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray68); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray68); java.lang.String[] strArray75 = charsetList0.toArray(strArray68); // The following exception was thrown during execution in test generation try { java.nio.charset.Charset charset76 = charsetList0.element(); org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null"); } catch (java.util.NoSuchElementException e) { // Expected exception. } org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(charsetItor6); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(charsetSpliterator18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertNotNull(charset21); org.junit.Assert.assertNotNull(charsetItor22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertNotNull(strArray75); }
public void test503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test503"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); org.jsoup.nodes.Element element12 = document10.head(); org.jsoup.nodes.Node node13 = element12.previousSibling(); // The following exception was thrown during execution in test generation try { java.lang.String str14 = node13.outerHtml(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNull(node13); }
public void test504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test504"); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.select.Evaluator.AttributeWithValueContaining(" text=\" \"", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.select.Evaluator.AttributeWithValue attributeWithValue5 = new org.jsoup.select.Evaluator.AttributeWithValue("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":matchesOwn(null"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Element element11 = document8.addClass(""); java.lang.String str12 = document8.toString(); org.jsoup.nodes.Element element14 = document8.text(".#document"); org.jsoup.select.Elements elements16 = document8.getElementsByClass("#document"); org.jsoup.select.Evaluator.Class class18 = new org.jsoup.select.Evaluator.Class(":matchesOwn(null"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); org.jsoup.nodes.Element element28 = element26.prepend("#document"); org.jsoup.nodes.Element element30 = element26.toggleClass("#doctype=\"\""); boolean boolean32 = element26.hasClass(":eq(52)"); java.lang.String str34 = element26.attr(":eq(52)"); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("hi!<html> <head></head> <body> hi! </body> </html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); java.lang.String str38 = document37.val(); boolean boolean39 = class18.matches(element26, (org.jsoup.nodes.Element) document37); boolean boolean40 = attributeWithValue5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document37); org.jsoup.nodes.Element element41 = null; org.jsoup.select.Evaluator.AttributeStarting attributeStarting43 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document49 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray51 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51); org.jsoup.nodes.Element element54 = document49.classNames((java.util.Set<java.lang.String>) strSet52); document49.title("#document"); boolean boolean57 = attributeStarting43.matches((org.jsoup.nodes.Element) document46, (org.jsoup.nodes.Element) document49); org.jsoup.nodes.Element element59 = document49.html(""); java.lang.String str61 = document49.absUrl("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element63 = document49.createElement("#doctype"); org.jsoup.parser.Tag tag64 = element63.tag(); boolean boolean65 = attributeWithValue5.matches(element41, element63); org.jsoup.nodes.Element element66 = null; org.jsoup.safety.Whitelist whitelist67 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist69 = whitelist67.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner70 = new org.jsoup.safety.Cleaner(whitelist67); org.jsoup.nodes.Document document73 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray75 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75); org.jsoup.nodes.Element element78 = document73.classNames((java.util.Set<java.lang.String>) strSet76); java.lang.String str79 = document73.nodeName(); java.lang.String str80 = document73.html(); boolean boolean81 = cleaner70.isValid(document73); org.jsoup.nodes.Document document83 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element84 = document83.body(); java.lang.String str85 = document83.toString(); org.jsoup.nodes.Document document86 = cleaner70.clean(document83); java.lang.String str87 = document83.id(); boolean boolean88 = attributeWithValue5.matches(element66, (org.jsoup.nodes.Element) document83); org.jsoup.nodes.Document document90 = org.jsoup.Jsoup.parse("&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;"); org.jsoup.nodes.Element element92 = document90.appendText("[#document^=#doctype]"); boolean boolean93 = attributeWithValueContaining2.matches((org.jsoup.nodes.Element) document83, (org.jsoup.nodes.Element) document90); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str12, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(elements16); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, ""); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, ""); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(tag64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(document73); org.junit.Assert.assertNotNull(strArray75); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "#document" + "'", str79, "#document"); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str80, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true); org.junit.Assert.assertNotNull(document83); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertEquals("'" + str85 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str85, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document86); org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, ""); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertNotNull(document90); org.junit.Assert.assertNotNull(element92); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); }
public void test505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test505"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist4.addTags(strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist1.addTags(strArray16); boolean boolean20 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist19); org.jsoup.safety.Whitelist whitelist24 = whitelist19.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist26 = whitelist19.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist30 = whitelist26.addEnforcedAttribute(".#document", "<html> <head></head> <body> hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; </body> </html>", ":gt(6)"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist30); }
public void test506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test506"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.indentAmount((int) '4'); java.nio.charset.Charset charset6 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); int int10 = outputSettings9.indentAmount(); java.nio.charset.Charset charset11 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.charset(charset11); java.nio.charset.Charset[] charsetArray13 = new java.nio.charset.Charset[] { charset11 }; java.util.LinkedList<java.nio.charset.Charset> charsetList14 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList14, charsetArray13); java.nio.charset.Charset charset16 = charsetList14.pop(); org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.prettyPrint(false); java.nio.charset.Charset charset20 = outputSettings17.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.indentAmount((int) '4'); java.nio.charset.Charset charset23 = outputSettings17.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.prettyPrint(false); int int27 = outputSettings26.indentAmount(); java.nio.charset.Charset charset28 = outputSettings26.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings17.charset(charset28); boolean boolean30 = charsetList14.remove((java.lang.Object) outputSettings29); java.util.Iterator<java.nio.charset.Charset> charsetItor31 = charsetList14.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList32 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.prettyPrint(false); java.nio.charset.Charset charset36 = outputSettings35.charset(); charsetList32.addFirst(charset36); java.util.Iterator<java.nio.charset.Charset> charsetItor38 = charsetList32.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList39 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.prettyPrint(false); java.nio.charset.Charset charset43 = outputSettings42.charset(); charsetList39.addFirst(charset43); boolean boolean45 = charsetList32.offerFirst(charset43); int int46 = charsetList14.indexOf((java.lang.Object) charsetList32); java.util.Iterator<java.nio.charset.Charset> charsetItor47 = charsetList32.descendingIterator(); org.jsoup.nodes.Attributes attributes48 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes49 = attributes48.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator50 = attributes48.spliterator(); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor51 = attributes48.iterator(); java.lang.Object obj52 = null; boolean boolean53 = attributes48.equals(obj52); org.jsoup.safety.Whitelist whitelist56 = new org.jsoup.safety.Whitelist(); boolean boolean58 = whitelist56.isSafeTag("#root"); java.lang.String str59 = org.jsoup.Jsoup.clean("UTF-8bodyUTF-8", "", whitelist56); org.jsoup.nodes.Element element61 = null; org.jsoup.nodes.Attribute attribute64 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute65 = attribute64.clone(); java.lang.String str66 = attribute65.getKey(); java.lang.String str67 = attribute65.getKey(); boolean boolean68 = whitelist56.isSafeAttribute("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"^=hi! hi! #comment]", element61, attribute65); attributes48.put(attribute65); int int70 = charsetList32.indexOf((java.lang.Object) attributes48); attributes48.put("<[^hi!]></[^hi!]>\n<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>", ":gt(100)"); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(charset6); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charsetArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(charset20); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1); org.junit.Assert.assertNotNull(charset28); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(charsetItor31); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertNotNull(charset36); org.junit.Assert.assertNotNull(charsetItor38); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertNotNull(charset43); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1)); org.junit.Assert.assertNotNull(charsetItor47); org.junit.Assert.assertNotNull(attributes49); org.junit.Assert.assertNotNull(attributeSpliterator50); org.junit.Assert.assertNotNull(attributeItor51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTF-8bodyUTF-8" + "'", str59, "UTF-8bodyUTF-8"); org.junit.Assert.assertNotNull(attribute64); org.junit.Assert.assertNotNull(attribute65); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str66, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str67, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1)); }
public void test507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test507"); org.jsoup.safety.Whitelist whitelist4 = new org.jsoup.safety.Whitelist(); boolean boolean5 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist4); java.lang.String str6 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist4); org.jsoup.nodes.Document document9 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray14 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14); org.jsoup.nodes.Element element17 = document12.classNames((java.util.Set<java.lang.String>) strSet15); org.jsoup.nodes.Element element18 = document9.appendChild((org.jsoup.nodes.Node) element17); java.lang.String str20 = document9.absUrl("hi!"); org.jsoup.nodes.Attribute attribute23 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean24 = whitelist4.isSafeAttribute("", (org.jsoup.nodes.Element) document9, attribute23); java.lang.String str25 = org.jsoup.Jsoup.clean("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]", whitelist4); org.jsoup.safety.Whitelist whitelist27 = whitelist4.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist29 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str33 = org.jsoup.Jsoup.clean("", "#data", whitelist32); org.jsoup.safety.Whitelist whitelist35 = org.jsoup.safety.Whitelist.basic(); boolean boolean36 = org.jsoup.Jsoup.isValid("hi!", whitelist35); java.lang.String[] strArray44 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist45 = whitelist35.addProtocols(".#document", "#doctype=\"\"", strArray44); org.jsoup.safety.Whitelist whitelist46 = whitelist32.addTags(strArray44); org.jsoup.safety.Whitelist whitelist47 = whitelist29.addTags(strArray44); org.jsoup.safety.Whitelist whitelist48 = whitelist4.addAttributes("<html> <head></head> <body></body> </html>:containsOwn(hi!", strArray44); org.jsoup.safety.Whitelist whitelist50 = whitelist4.preserveRelativeLinks(true); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!:matchesOwn(null" + "'", str6, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]" + "'", str25, "[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist50); }
public void test508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test508"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document3 = document2.clone(); org.jsoup.nodes.Element element5 = document2.addClass(""); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str10 = document9.val(); java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document9, "#document"); java.lang.String str13 = document9.baseUri(); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str17 = document16.val(); org.jsoup.nodes.Element element19 = document16.append("#document"); org.jsoup.nodes.Element element20 = document9.appendChild((org.jsoup.nodes.Node) element19); org.jsoup.nodes.Element element21 = document2.prependChild((org.jsoup.nodes.Node) document9); org.jsoup.nodes.Attributes attributes22 = element21.attributes(); java.lang.String str23 = attributes22.html(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator24 = attributes22.spliterator(); org.jsoup.nodes.Attributes attributes25 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes26 = attributes25.clone(); java.lang.String str27 = attributes26.toString(); attributes22.addAll(attributes26); org.jsoup.safety.Whitelist whitelist29 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes31 = whitelist29.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList32 = attributes31.asList(); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist35 = whitelist33.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner36 = new org.jsoup.safety.Cleaner(whitelist33); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document40 = document39.clone(); org.jsoup.nodes.Node node42 = document40.removeAttr("#doctype"); org.jsoup.nodes.Document document43 = cleaner36.clean(document40); org.jsoup.nodes.Attributes attributes44 = document43.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator45 = attributes44.spliterator(); attributes31.addAll(attributes44); java.util.Map<java.lang.String, java.lang.String> strMap47 = attributes44.dataset(); attributes22.addAll(attributes44); org.jsoup.nodes.Attribute attribute51 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute52 = attribute51.clone(); attributes44.put(attribute52); attribute52.setKey("[hi!:matchesown(null!=class=&quot; #doctype&quot;]"); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(element5); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!"); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + " class=\"\"" + "'", str23, " class=\"\""); org.junit.Assert.assertNotNull(attributeSpliterator24); org.junit.Assert.assertNotNull(attributes26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(attributes31); org.junit.Assert.assertNotNull(attributeList32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(node42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(attributes44); org.junit.Assert.assertNotNull(attributeSpliterator45); org.junit.Assert.assertNotNull(strMap47); org.junit.Assert.assertNotNull(attribute51); org.junit.Assert.assertNotNull(attribute52); }
public void test509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test509"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.indentAmount((int) '4'); java.nio.charset.Charset charset6 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); int int10 = outputSettings9.indentAmount(); java.nio.charset.Charset charset11 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.charset(charset11); java.nio.charset.Charset[] charsetArray13 = new java.nio.charset.Charset[] { charset11 }; java.util.LinkedList<java.nio.charset.Charset> charsetList14 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList14, charsetArray13); java.nio.charset.Charset charset16 = charsetList14.pop(); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basic(); boolean boolean19 = org.jsoup.Jsoup.isValid("hi!", whitelist18); java.lang.String[] strArray27 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist28 = whitelist18.addProtocols(".#document", "#doctype=\"\"", strArray27); org.jsoup.safety.Cleaner cleaner29 = new org.jsoup.safety.Cleaner(whitelist18); boolean boolean30 = charsetList14.contains((java.lang.Object) whitelist18); org.jsoup.safety.Whitelist whitelist33 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes35 = whitelist33.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(false); boolean boolean41 = org.jsoup.Jsoup.isValid("", whitelist38); java.lang.String[] strArray47 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist48 = whitelist38.addTags(strArray47); org.jsoup.safety.Whitelist whitelist49 = whitelist33.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray47); org.jsoup.safety.Whitelist whitelist50 = whitelist18.addProtocols("#<html> <head></head> <body> hi! </body> </html>", "[[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>]", strArray47); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray47, "[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"^=hi! hi! #comment]"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray47); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(charset6); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charsetArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(attributes35); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist50); }
public void test510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test510"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); org.jsoup.nodes.Element element39 = document17.removeClass("\n<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->"); org.jsoup.select.Elements elements41 = element39.getElementsMatchingText("<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>\n<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(elements41); }
public void test511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test511"); org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) (byte) 1); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText8 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist9); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); org.jsoup.nodes.Node node18 = document16.removeAttr("#doctype"); org.jsoup.nodes.Document document19 = cleaner12.clean(document16); org.jsoup.nodes.Attributes attributes20 = document19.attributes(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist23 = whitelist21.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner24 = new org.jsoup.safety.Cleaner(whitelist21); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document28 = document27.clone(); org.jsoup.nodes.Node node30 = document28.removeAttr("#doctype"); org.jsoup.nodes.Document document31 = cleaner24.clean(document28); org.jsoup.nodes.Attributes attributes32 = document31.attributes(); boolean boolean33 = containsOwnText8.matches((org.jsoup.nodes.Element) document19, (org.jsoup.nodes.Element) document31); boolean boolean34 = cleaner6.isValid(document19); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean39 = document37.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document40 = cleaner6.clean(document37); org.jsoup.select.Evaluator.Id id42 = new org.jsoup.select.Evaluator.Id("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting45 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray50 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50); org.jsoup.nodes.Element element53 = document48.classNames((java.util.Set<java.lang.String>) strSet51); java.lang.String str54 = document48.nodeName(); org.jsoup.select.Elements elements56 = document48.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document60 = document59.clone(); org.jsoup.nodes.Element element62 = document59.addClass(""); org.jsoup.nodes.Element element63 = document48.appendChild((org.jsoup.nodes.Node) document59); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str67 = document66.val(); org.jsoup.nodes.Element element69 = document66.append("#document"); boolean boolean70 = attributeWithValueStarting45.matches((org.jsoup.nodes.Element) document48, element69); org.jsoup.nodes.Document.QuirksMode quirksMode71 = document48.quirksMode(); java.lang.String str72 = document48.toString(); org.jsoup.nodes.Document document75 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray77 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77); org.jsoup.nodes.Element element80 = document75.classNames((java.util.Set<java.lang.String>) strSet78); java.lang.String str81 = document75.nodeName(); org.jsoup.nodes.Element element82 = document48.prependChild((org.jsoup.nodes.Node) document75); org.jsoup.select.Elements elements84 = document48.getElementsByIndexLessThan((int) (byte) 0); org.jsoup.nodes.Document document86 = new org.jsoup.nodes.Document("#doctype"); org.jsoup.nodes.Element element87 = document86.empty(); org.jsoup.nodes.Element element89 = document86.appendElement("#doctype"); org.jsoup.nodes.Element element91 = element89.before(":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean92 = id42.matches((org.jsoup.nodes.Element) document48, element91); boolean boolean93 = indexEquals1.matches((org.jsoup.nodes.Element) document40, element91); java.lang.String str94 = document40.tagName(); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(node18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(node30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(attributes32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "#document" + "'", str54, "#document"); org.junit.Assert.assertNotNull(elements56); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, ""); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + quirksMode71 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode71.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str72, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertNotNull(strArray77); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true); org.junit.Assert.assertNotNull(element80); org.junit.Assert.assertEquals("'" + str81 + "' != '" + "#document" + "'", str81, "#document"); org.junit.Assert.assertNotNull(element82); org.junit.Assert.assertNotNull(elements84); org.junit.Assert.assertNotNull(element87); org.junit.Assert.assertNotNull(element89); org.junit.Assert.assertNotNull(element91); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); org.junit.Assert.assertEquals("'" + str94 + "' != '" + "#root" + "'", str94, "#root"); }
public void test512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test512"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist2); boolean boolean6 = org.jsoup.Jsoup.isValid("", whitelist2); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.safety.Cleaner cleaner8 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist2); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); }
public void test513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test513"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements24 = element13.getElementsByClass("#root"); org.jsoup.nodes.Element element26 = element13.text("#data"); org.jsoup.select.Elements elements27 = element13.parents(); org.jsoup.nodes.TextNode textNode30 = org.jsoup.nodes.TextNode.createFromEncoded("[hi! hi!*=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"]", "[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); org.jsoup.nodes.Element element31 = element13.prependChild((org.jsoup.nodes.Node) textNode30); java.lang.String str32 = textNode30.getWholeText(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements27); org.junit.Assert.assertNotNull(textNode30); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[hi! hi!*=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\"]" + "'", str32, "[hi! hi!*=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\"]"); }
public void test514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test514"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes3 = whitelist1.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); boolean boolean9 = org.jsoup.Jsoup.isValid("", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addTags(strArray15); org.jsoup.safety.Whitelist whitelist17 = whitelist1.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray15); java.lang.String str18 = org.jsoup.Jsoup.clean("", whitelist1); org.jsoup.safety.Whitelist whitelist22 = whitelist1.addEnforcedAttribute("#document", "#comment", " "); org.jsoup.safety.Cleaner cleaner23 = new org.jsoup.safety.Cleaner(whitelist22); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parseBodyFragment(" #document", "#root"); org.jsoup.nodes.Document document27 = cleaner23.clean(document26); org.junit.Assert.assertNotNull(attributes3); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document27); }
public void test515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test515"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.formatAsBlock(); boolean boolean4 = tag1.isEmpty(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist6); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document13 = document12.clone(); org.jsoup.nodes.Node node15 = document13.removeAttr("#doctype"); org.jsoup.nodes.Document document16 = cleaner9.clean(document13); org.jsoup.nodes.Attributes attributes17 = document16.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator18 = attributes17.spliterator(); org.jsoup.nodes.Element element19 = new org.jsoup.nodes.Element(tag1, "hi!:matchesOwn(null", attributes17); org.jsoup.nodes.Attribute attribute22 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute22.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.Object obj25 = null; boolean boolean26 = attribute22.equals(obj25); java.lang.Class<?> wildcardClass27 = attribute22.getClass(); boolean boolean28 = tag1.equals((java.lang.Object) attribute22); boolean boolean29 = tag1.isEmpty(); boolean boolean30 = tag1.isInline(); org.jsoup.nodes.TextNode textNode33 = new org.jsoup.nodes.TextNode("", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str34 = textNode33.toString(); org.jsoup.nodes.Attributes attributes35 = textNode33.attributes(); org.jsoup.nodes.Attributes attributes36 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes37 = attributes36.clone(); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor38 = attributes37.iterator(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator39 = attributes37.spliterator(); java.lang.String str40 = attributes37.toString(); attributes35.addAll(attributes37); boolean boolean42 = tag1.equals((java.lang.Object) attributes37); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(node15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(attributes17); org.junit.Assert.assertNotNull(attributeSpliterator18); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(wildcardClass27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNotNull(attributes35); org.junit.Assert.assertNotNull(attributes37); org.junit.Assert.assertNotNull(attributeItor38); org.junit.Assert.assertNotNull(attributeSpliterator39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); }
public void test516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test516"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); java.nio.charset.Charset[] charsetArray4 = new java.nio.charset.Charset[] { charset3 }; java.util.LinkedList<java.nio.charset.Charset> charsetList5 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList5, charsetArray4); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); java.nio.charset.Charset charset10 = outputSettings7.charset(); boolean boolean11 = charsetList5.add(charset10); java.lang.Object obj12 = null; boolean boolean13 = charsetList5.removeLastOccurrence(obj12); java.nio.charset.Charset charset14 = charsetList5.pollFirst(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList15 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.prettyPrint(false); java.nio.charset.Charset charset19 = outputSettings18.charset(); charsetList15.addFirst(charset19); java.util.Iterator<java.nio.charset.Charset> charsetItor21 = charsetList15.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList22 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.prettyPrint(false); java.nio.charset.Charset charset26 = outputSettings25.charset(); charsetList22.addFirst(charset26); boolean boolean28 = charsetList15.offerFirst(charset26); int int29 = charsetList15.size(); java.nio.charset.Charset charset30 = charsetList15.peekLast(); charsetList5.addFirst(charset30); java.nio.charset.Charset charset32 = charsetList5.poll(); org.jsoup.safety.Whitelist whitelist34 = new org.jsoup.safety.Whitelist(); boolean boolean35 = org.jsoup.Jsoup.isValid("", whitelist34); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray41 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41); org.jsoup.nodes.Element element44 = document39.classNames((java.util.Set<java.lang.String>) strSet42); org.jsoup.nodes.Element element46 = element44.prepend("#document"); org.jsoup.nodes.Attribute attribute49 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute49.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str52 = attribute49.getKey(); boolean boolean53 = whitelist34.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element46, attribute49); boolean boolean54 = charsetList5.remove((java.lang.Object) boolean53); org.jsoup.safety.Whitelist.AttributeKey attributeKey57 = new org.jsoup.safety.Whitelist.AttributeKey("#document"); java.lang.String str58 = attributeKey57.toString(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList59 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings60.prettyPrint(false); java.nio.charset.Charset charset63 = outputSettings62.charset(); charsetList59.addFirst(charset63); java.util.Iterator<java.nio.charset.Charset> charsetItor65 = charsetList59.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList66 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings67.prettyPrint(false); java.nio.charset.Charset charset70 = outputSettings69.charset(); charsetList66.addFirst(charset70); boolean boolean72 = charsetList59.offerFirst(charset70); int int73 = charsetList59.size(); java.nio.charset.Charset charset74 = charsetList59.peekLast(); java.nio.charset.Charset charset75 = null; charsetList59.addFirst(charset75); java.util.Iterator<java.nio.charset.Charset> charsetItor77 = charsetList59.descendingIterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList78 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings79 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings79.prettyPrint(false); java.nio.charset.Charset charset82 = outputSettings81.charset(); charsetList78.addFirst(charset82); java.util.Iterator<java.nio.charset.Charset> charsetItor84 = charsetList78.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList85 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings86 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings86.prettyPrint(false); java.nio.charset.Charset charset89 = outputSettings88.charset(); charsetList85.addFirst(charset89); boolean boolean91 = charsetList78.offerFirst(charset89); boolean boolean92 = charsetList59.offer(charset89); boolean boolean93 = attributeKey57.equals((java.lang.Object) charset89); java.nio.charset.Charset charset94 = charsetList5.set(0, charset89); java.nio.charset.Charset charset95 = charsetList5.getLast(); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(charsetArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(charset14); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charset19); org.junit.Assert.assertNotNull(charsetItor21); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(charset26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2); org.junit.Assert.assertNotNull(charset30); org.junit.Assert.assertNotNull(charset32); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str52, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "#document" + "'", str58, "#document"); org.junit.Assert.assertNotNull(outputSettings62); org.junit.Assert.assertNotNull(charset63); org.junit.Assert.assertNotNull(charsetItor65); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertNotNull(charset70); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2); org.junit.Assert.assertNotNull(charset74); org.junit.Assert.assertNotNull(charsetItor77); org.junit.Assert.assertNotNull(outputSettings81); org.junit.Assert.assertNotNull(charset82); org.junit.Assert.assertNotNull(charsetItor84); org.junit.Assert.assertNotNull(outputSettings88); org.junit.Assert.assertNotNull(charset89); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); org.junit.Assert.assertNotNull(charset94); org.junit.Assert.assertNotNull(charset95); }
public void test517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test517"); org.jsoup.select.Evaluator.ContainsText containsText1 = new org.jsoup.select.Evaluator.ContainsText("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray6 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6); org.jsoup.nodes.Element element9 = document4.classNames((java.util.Set<java.lang.String>) strSet7); java.lang.String str10 = document4.nodeName(); java.lang.String str11 = document4.html(); org.jsoup.nodes.Element element13 = document4.removeClass("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str21 = document20.val(); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document20, "#document"); org.jsoup.nodes.Document.QuirksMode quirksMode24 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document25 = document20.quirksMode(quirksMode24); org.jsoup.nodes.Document document26 = document16.quirksMode(quirksMode24); org.jsoup.nodes.Document document27 = document4.quirksMode(quirksMode24); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText30 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist33 = whitelist31.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner34 = new org.jsoup.safety.Cleaner(whitelist31); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray39 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39); org.jsoup.nodes.Element element42 = document37.classNames((java.util.Set<java.lang.String>) strSet40); java.lang.String str43 = document37.nodeName(); java.lang.String str44 = document37.html(); boolean boolean45 = cleaner34.isValid(document37); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element48 = document47.body(); java.lang.String str49 = document47.toString(); org.jsoup.nodes.Document document50 = cleaner34.clean(document47); org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document54 = document53.clone(); org.jsoup.nodes.Element element56 = document53.addClass(""); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str61 = document60.val(); java.util.List<org.jsoup.nodes.Node> nodeList63 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document60, "#document"); java.lang.String str64 = document60.baseUri(); org.jsoup.nodes.Document document67 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str68 = document67.val(); org.jsoup.nodes.Element element70 = document67.append("#document"); org.jsoup.nodes.Element element71 = document60.appendChild((org.jsoup.nodes.Node) element70); org.jsoup.nodes.Element element72 = document53.prependChild((org.jsoup.nodes.Node) document60); org.jsoup.nodes.Attributes attributes73 = element72.attributes(); java.lang.String str74 = element72.baseUri(); java.lang.String str75 = element72.text(); org.jsoup.nodes.Element element77 = element72.toggleClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean78 = containsOwnText30.matches((org.jsoup.nodes.Element) document50, element72); org.jsoup.nodes.Element element79 = document50.clone(); java.util.List<org.jsoup.nodes.Node> nodeList81 = org.jsoup.parser.Parser.parseFragment(":matches(null", (org.jsoup.nodes.Element) document50, ""); boolean boolean82 = containsText1.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document50); org.jsoup.nodes.Element element84 = document50.addClass("hi!#document"); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#document" + "'", str10, "#document"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, ""); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertTrue("'" + quirksMode24 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode24.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "#document" + "'", str43, "#document"); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str44, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str49, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, ""); org.junit.Assert.assertNotNull(nodeList63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!"); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, ""); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertNotNull(attributes73); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "#document" + "'", str74, "#document"); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi! hi!#document hi!" + "'", str75, "hi! hi!#document hi!"); org.junit.Assert.assertNotNull(element77); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(nodeList81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(element84); }
public void test518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test518"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); boolean boolean6 = org.jsoup.Jsoup.isValid("", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addTags(strArray12); boolean boolean14 = org.jsoup.helper.StringUtil.in("                          ", strArray12); boolean boolean15 = org.jsoup.helper.StringUtil.in("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", strArray12); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test519"); org.jsoup.nodes.DataNode dataNode2 = new org.jsoup.nodes.DataNode("\n#document", "\n#document"); org.jsoup.nodes.Attributes attributes3 = dataNode2.attributes(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist4.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray16); org.jsoup.safety.Whitelist whitelist20 = whitelist18.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist29 = org.jsoup.safety.Whitelist.basic(); boolean boolean30 = org.jsoup.Jsoup.isValid("hi!", whitelist29); java.lang.String[] strArray38 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist39 = whitelist29.addProtocols(".#document", "#doctype=\"\"", strArray38); org.jsoup.safety.Whitelist whitelist40 = whitelist26.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray38); org.jsoup.safety.Whitelist whitelist41 = whitelist22.addAttributes(":containsOwn(hi!:matchesown(null", strArray38); org.jsoup.safety.Whitelist whitelist42 = whitelist18.addAttributes(" text=\"\"", strArray38); boolean boolean43 = dataNode2.equals((java.lang.Object) whitelist18); org.jsoup.safety.Whitelist whitelist47 = whitelist18.addEnforcedAttribute("<html>\n <head></head>\n <body>\n #document:contains(  hi! hi!:contains(  hi! \n </body>\n</html>\n<[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]></[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]>", "[:matches(null!=[#document^=<html> <head></head> <body> hi! </body> </html>]]", ":eq(-1)"); org.junit.Assert.assertNotNull(attributes3); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(whitelist47); }
public void test520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test520"); org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText3 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Node node13 = document11.removeAttr("#doctype"); org.jsoup.nodes.Document document14 = cleaner7.clean(document11); org.jsoup.nodes.Attributes attributes15 = document14.attributes(); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner19 = new org.jsoup.safety.Cleaner(whitelist16); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Node node25 = document23.removeAttr("#doctype"); org.jsoup.nodes.Document document26 = cleaner19.clean(document23); org.jsoup.nodes.Attributes attributes27 = document26.attributes(); boolean boolean28 = containsOwnText3.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document26); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str33 = document32.val(); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document32, "#document"); java.lang.String str36 = document32.baseUri(); org.jsoup.nodes.Element element38 = document32.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); org.jsoup.nodes.Document.QuirksMode quirksMode40 = null; org.jsoup.nodes.Document document41 = document32.quirksMode(quirksMode40); boolean boolean42 = indexEquals1.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document41); java.lang.String str43 = indexEquals1.toString(); java.lang.String str44 = indexEquals1.toString(); java.lang.String str45 = indexEquals1.toString(); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(node25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!"); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertEquals("'" + str43 + "' != '" + ":eq(52)" + "'", str43, ":eq(52)"); org.junit.Assert.assertEquals("'" + str44 + "' != '" + ":eq(52)" + "'", str44, ":eq(52)"); org.junit.Assert.assertEquals("'" + str45 + "' != '" + ":eq(52)" + "'", str45, ":eq(52)"); }
public void test521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test521"); org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str3 = textNode2.toString(); org.jsoup.nodes.Attributes attributes4 = textNode2.attributes(); java.util.Map<java.lang.String, java.lang.String> strMap5 = attributes4.dataset(); java.util.Map<java.lang.String, java.lang.String> strMap6 = attributes4.dataset(); java.lang.String str8 = attributes4.get(":matchesOwn(null"); org.jsoup.nodes.Attributes attributes9 = attributes4.clone(); org.jsoup.safety.Whitelist whitelist13 = new org.jsoup.safety.Whitelist(); boolean boolean14 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist13); java.lang.String str15 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist13); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) element26); java.lang.String str29 = document18.absUrl("hi!"); org.jsoup.nodes.Attribute attribute32 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean33 = whitelist13.isSafeAttribute("", (org.jsoup.nodes.Element) document18, attribute32); org.jsoup.nodes.Document document36 = org.jsoup.parser.Parser.parse("", "hi!"); boolean boolean37 = attribute32.equals((java.lang.Object) document36); attributes9.put(attribute32); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(attributes4); org.junit.Assert.assertNotNull(strMap5); org.junit.Assert.assertNotNull(strMap6); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertNotNull(attributes9); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!:matchesOwn(null" + "'", str15, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); }
public void test522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test522"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); java.lang.String str4 = org.jsoup.Jsoup.clean(".#document", whitelist3); org.jsoup.safety.Whitelist whitelist8 = whitelist3.addEnforcedAttribute("\n<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->", ":matchesown(null=\"#document\"", "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str13 = org.jsoup.Jsoup.clean("", "#data", whitelist12); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basic(); boolean boolean16 = org.jsoup.Jsoup.isValid("hi!", whitelist15); java.lang.String[] strArray24 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist25 = whitelist15.addProtocols(".#document", "#doctype=\"\"", strArray24); org.jsoup.safety.Whitelist whitelist26 = whitelist12.addTags(strArray24); org.jsoup.safety.Whitelist whitelist27 = whitelist9.addTags(strArray24); org.jsoup.safety.Whitelist whitelist28 = whitelist8.addTags(strArray24); org.jsoup.safety.Whitelist whitelist31 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes33 = whitelist31.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist38 = whitelist36.preserveRelativeLinks(false); boolean boolean39 = org.jsoup.Jsoup.isValid("", whitelist36); java.lang.String[] strArray45 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist46 = whitelist36.addTags(strArray45); org.jsoup.safety.Whitelist whitelist47 = whitelist31.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray45); boolean boolean48 = org.jsoup.helper.StringUtil.in("", strArray45); org.jsoup.safety.Whitelist whitelist49 = whitelist8.addAttributes("<html>\n <head></head>\n <body></body>\n</html>", strArray45); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ".#document" + "'", str4, ".#document"); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(attributes33); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(whitelist49); }
public void test523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test523"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist4.addTags(strArray16); boolean boolean19 = org.jsoup.helper.StringUtil.in(":matchesOwn(null", strArray16); boolean boolean20 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", strArray16); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test524"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); boolean boolean8 = org.jsoup.Jsoup.isValid("", whitelist5); java.lang.String[] strArray14 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist15 = whitelist5.addTags(strArray14); org.jsoup.safety.Whitelist whitelist16 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray14); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); boolean boolean27 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist24); org.jsoup.safety.Whitelist whitelist29 = org.jsoup.safety.Whitelist.basic(); boolean boolean30 = org.jsoup.Jsoup.isValid("hi!", whitelist29); java.lang.String[] strArray38 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist39 = whitelist29.addProtocols(".#document", "#doctype=\"\"", strArray38); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray38, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray38); org.jsoup.safety.Whitelist whitelist43 = whitelist24.addTags(strArray38); org.jsoup.safety.Whitelist whitelist44 = whitelist19.addTags(strArray38); org.jsoup.safety.Whitelist whitelist45 = whitelist0.addProtocols("#data", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray38); org.jsoup.nodes.Attributes attributes47 = whitelist0.getEnforcedAttributes("utf-8utf-8=\"#data\""); org.jsoup.safety.Cleaner cleaner48 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.safety.Whitelist.Protocol protocol50 = org.jsoup.safety.Whitelist.Protocol.valueOf("hi!"); java.lang.String str51 = protocol50.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals53 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray58 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58); org.jsoup.nodes.Element element61 = document56.classNames((java.util.Set<java.lang.String>) strSet59); org.jsoup.nodes.Document document63 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray68 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68); org.jsoup.nodes.Element element71 = document66.classNames((java.util.Set<java.lang.String>) strSet69); org.jsoup.nodes.Element element72 = document63.appendChild((org.jsoup.nodes.Node) element71); boolean boolean73 = indexEquals53.matches(element61, (org.jsoup.nodes.Element) document63); boolean boolean74 = protocol50.equals((java.lang.Object) document63); boolean boolean76 = document63.hasAttr("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.jsoup.nodes.Element element78 = document63.appendElement("UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8"); java.lang.String str79 = document63.title(); org.jsoup.nodes.Document document80 = cleaner48.clean(document63); java.lang.String str81 = document63.nodeName(); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(attributes47); org.junit.Assert.assertNotNull(protocol50); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!"); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, ""); org.junit.Assert.assertNotNull(document80); org.junit.Assert.assertEquals("'" + str81 + "' != '" + "#document" + "'", str81, "#document"); }
public void test525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test525"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Attribute attribute21 = attribute16.clone(); attribute21.setKey("[<head></head>$=:containsown(hi!:matchesown(null]"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(attribute21); }
public void test526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test526"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.nodes.Attributes attributes4 = whitelist2.getEnforcedAttributes(""); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist8 = whitelist2.addEnforcedAttribute("hi!:matchesown(null=&quot;&quot;", ":gt(-1)", ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(attributes4); }
public void test527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test527"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("\n#document", pattern1); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean6 = org.jsoup.Jsoup.isValid("#document", whitelist5); java.lang.String str7 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist5); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basic(); boolean boolean11 = org.jsoup.Jsoup.isValid("hi!", whitelist10); java.lang.String[] strArray19 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist20 = whitelist10.addProtocols(".#document", "#doctype=\"\"", strArray19); org.jsoup.safety.Whitelist whitelist21 = whitelist5.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray19); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode25 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document26 = document24.quirksMode(quirksMode25); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.basic(); boolean boolean29 = org.jsoup.Jsoup.isValid("hi!", whitelist28); java.lang.String[] strArray37 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist38 = whitelist28.addProtocols(".#document", "#doctype=\"\"", strArray37); org.jsoup.select.Evaluator.AttributeStarting attributeStarting41 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray49 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49); org.jsoup.nodes.Element element52 = document47.classNames((java.util.Set<java.lang.String>) strSet50); document47.title("#document"); boolean boolean55 = attributeStarting41.matches((org.jsoup.nodes.Element) document44, (org.jsoup.nodes.Element) document47); java.lang.String str56 = document44.id(); org.jsoup.select.Elements elements58 = document44.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements60 = document44.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute63 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean64 = whitelist28.isSafeAttribute("", (org.jsoup.nodes.Element) document44, attribute63); boolean boolean65 = whitelist21.isSafeAttribute("", (org.jsoup.nodes.Element) document24, attribute63); org.jsoup.parser.Tag tag66 = document24.tag(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting68 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document71 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document72 = document71.clone(); org.jsoup.nodes.Element element74 = document71.addClass(""); org.jsoup.nodes.Document document76 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element78 = document76.createElement("#document"); boolean boolean79 = attributeStarting68.matches((org.jsoup.nodes.Element) document71, (org.jsoup.nodes.Element) document76); document76.setBaseUri(""); boolean boolean82 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document76); org.jsoup.select.Elements elements84 = document76.getElementsMatchingOwnText(""); java.util.Set<java.lang.String> strSet85 = document76.classNames(); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str7, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertTrue("'" + quirksMode25 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode25.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, ""); org.junit.Assert.assertNotNull(elements58); org.junit.Assert.assertNotNull(elements60); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(tag66); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertNotNull(document72); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(elements84); org.junit.Assert.assertNotNull(strSet85); }
public void test528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test528"); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList0 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings3.charset(); charsetList0.addFirst(charset4); java.util.Iterator<java.nio.charset.Charset> charsetItor6 = charsetList0.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList7 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); java.nio.charset.Charset charset11 = outputSettings10.charset(); charsetList7.addFirst(charset11); boolean boolean13 = charsetList0.offerFirst(charset11); int int14 = charsetList0.size(); java.nio.charset.Charset charset15 = charsetList0.peekLast(); java.nio.charset.Charset charset16 = charsetList0.pop(); java.nio.charset.Charset charset17 = charsetList0.peekLast(); java.util.Spliterator<java.nio.charset.Charset> charsetSpliterator18 = charsetList0.spliterator(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str22 = org.jsoup.Jsoup.clean("", "#data", whitelist21); org.jsoup.safety.Cleaner cleaner23 = new org.jsoup.safety.Cleaner(whitelist21); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document27 = document26.clone(); org.jsoup.select.Elements elements29 = document27.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements31 = document27.getElementsByAttribute("#document"); org.jsoup.select.Elements elements34 = document27.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document35 = cleaner23.clean(document27); boolean boolean36 = charsetList0.remove((java.lang.Object) document35); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList37 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.prettyPrint(false); java.nio.charset.Charset charset41 = outputSettings40.charset(); charsetList37.addFirst(charset41); java.util.Iterator<java.nio.charset.Charset> charsetItor43 = charsetList37.iterator(); org.jsoup.nodes.Document document45 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element47 = document45.createElement("#document"); org.jsoup.nodes.Document document48 = document45.clone(); java.lang.String str49 = document45.val(); org.jsoup.nodes.Node node52 = document45.attr("#doctype", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean53 = charsetList37.removeLastOccurrence((java.lang.Object) "#doctype"); java.nio.charset.Charset charset54 = charsetList37.peekFirst(); charsetList0.push(charset54); org.jsoup.nodes.Document document57 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray62 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62); org.jsoup.nodes.Element element65 = document60.classNames((java.util.Set<java.lang.String>) strSet63); org.jsoup.nodes.Element element66 = document57.appendChild((org.jsoup.nodes.Node) element65); java.lang.String str68 = document57.absUrl("hi!"); org.jsoup.nodes.Node node69 = document57.nextSibling(); org.jsoup.nodes.Element element71 = document57.text("[#document^=#doctype]"); org.jsoup.parser.Tag tag72 = document57.tag(); boolean boolean73 = charsetList0.removeLastOccurrence((java.lang.Object) tag72); java.util.Iterator<java.nio.charset.Charset> charsetItor74 = charsetList0.iterator(); java.util.Iterator<java.nio.charset.Charset> charsetItor75 = charsetList0.iterator(); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(charsetItor6); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(charsetSpliterator18); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(charset41); org.junit.Assert.assertNotNull(charsetItor43); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); org.junit.Assert.assertNotNull(node52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(charset54); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, ""); org.junit.Assert.assertNull(node69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(tag72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(charsetItor74); org.junit.Assert.assertNotNull(charsetItor75); }
public void test529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test529"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean3 = org.jsoup.Jsoup.isValid("#document", whitelist2); java.lang.String str4 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist2); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist2.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray16); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode22 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document23 = document21.quirksMode(quirksMode22); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.basic(); boolean boolean26 = org.jsoup.Jsoup.isValid("hi!", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addProtocols(".#document", "#doctype=\"\"", strArray34); org.jsoup.select.Evaluator.AttributeStarting attributeStarting38 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray46 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46); org.jsoup.nodes.Element element49 = document44.classNames((java.util.Set<java.lang.String>) strSet47); document44.title("#document"); boolean boolean52 = attributeStarting38.matches((org.jsoup.nodes.Element) document41, (org.jsoup.nodes.Element) document44); java.lang.String str53 = document41.id(); org.jsoup.select.Elements elements55 = document41.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements57 = document41.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute60 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean61 = whitelist25.isSafeAttribute("", (org.jsoup.nodes.Element) document41, attribute60); boolean boolean62 = whitelist18.isSafeAttribute("", (org.jsoup.nodes.Element) document21, attribute60); java.util.List<org.jsoup.nodes.Node> nodeList63 = document21.childNodes(); org.jsoup.nodes.Element element64 = document21.clone(); java.util.Map<java.lang.String, java.lang.String> strMap65 = element64.dataset(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str4, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + quirksMode22 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode22.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, ""); org.junit.Assert.assertNotNull(elements55); org.junit.Assert.assertNotNull(elements57); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(nodeList63); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(strMap65); }
public void test530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test530"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.nodes.Attributes attributes15 = whitelist3.getEnforcedAttributes(".#document"); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean20 = org.jsoup.Jsoup.isValid("#document", whitelist19); java.lang.String str21 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist19); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.basic(); boolean boolean25 = org.jsoup.Jsoup.isValid("hi!", whitelist24); java.lang.String[] strArray33 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist34 = whitelist24.addProtocols(".#document", "#doctype=\"\"", strArray33); org.jsoup.safety.Whitelist whitelist35 = whitelist19.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray33); boolean boolean36 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray33); org.jsoup.safety.Whitelist whitelist37 = whitelist3.addTags(strArray33); java.lang.String str38 = org.jsoup.Jsoup.clean("[^hi!]", ":gt(1)=\":gt(1)\"", whitelist3); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str21, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[^hi!]" + "'", str38, "[^hi!]"); }
public void test531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test531"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("hi!<html> <head></head> <body> hi! </body> </html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements5 = document2.getElementsByAttributeValueStarting("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Element element6 = document2.body(); org.jsoup.nodes.Element element8 = document2.createElement("#&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n&lt;/html&gt;"); org.jsoup.safety.Whitelist whitelist10 = new org.jsoup.safety.Whitelist(); boolean boolean11 = org.jsoup.Jsoup.isValid("", whitelist10); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray17 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17); org.jsoup.nodes.Element element20 = document15.classNames((java.util.Set<java.lang.String>) strSet18); org.jsoup.nodes.Element element22 = element20.prepend("#document"); org.jsoup.nodes.Attribute attribute25 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute25.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str28 = attribute25.getKey(); boolean boolean29 = whitelist10.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element22, attribute25); org.jsoup.nodes.Element element31 = element22.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element32 = element31.empty(); org.jsoup.nodes.Element element34 = element32.appendElement(":matchesOwn(null"); java.lang.String str35 = element32.outerHtml(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element36 = document2.before((org.jsoup.nodes.Node) element32); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(elements5); org.junit.Assert.assertNotNull(element6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str28, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<:matchesown(null></:matchesown(null>" + "'", str35, "<:matchesown(null></:matchesown(null>"); }
public void test532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test532"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); java.lang.String str4 = attributes0.get("\n#document"); org.jsoup.nodes.Attributes attributes5 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes6 = attributes5.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator7 = attributes5.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap8 = attributes5.dataset(); attributes0.addAll(attributes5); java.lang.String str10 = attributes0.toString(); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner14 = new org.jsoup.safety.Cleaner(whitelist11); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document18 = document17.clone(); org.jsoup.nodes.Node node20 = document18.removeAttr("#doctype"); org.jsoup.nodes.Document document21 = cleaner14.clean(document18); boolean boolean22 = attributes0.equals((java.lang.Object) document18); org.jsoup.nodes.Element element23 = document18.head(); org.jsoup.select.Elements elements26 = document18.getElementsByAttributeValueEnding("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi! =&quot;&quot;"); boolean boolean27 = document18.hasText(); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(attributeSpliterator7); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(node20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(elements26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); }
public void test533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test533"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addProtocols(".#document", "#doctype=\"\"", strArray11); org.jsoup.safety.Cleaner cleaner13 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.safety.Whitelist whitelist15 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist20 = whitelist18.preserveRelativeLinks(false); boolean boolean21 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist18); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basic(); boolean boolean24 = org.jsoup.Jsoup.isValid("hi!", whitelist23); java.lang.String[] strArray32 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist33 = whitelist23.addProtocols(".#document", "#doctype=\"\"", strArray32); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray32, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray32); org.jsoup.safety.Whitelist whitelist37 = whitelist18.addTags(strArray32); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist43 = whitelist41.preserveRelativeLinks(false); boolean boolean44 = org.jsoup.Jsoup.isValid("", whitelist41); org.jsoup.nodes.Attributes attributes46 = whitelist41.getEnforcedAttributes(":eq(52)"); boolean boolean47 = org.jsoup.Jsoup.isValid("", whitelist41); org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.basic(); boolean boolean54 = org.jsoup.Jsoup.isValid("hi!", whitelist53); java.lang.String[] strArray62 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist63 = whitelist53.addProtocols(".#document", "#doctype=\"\"", strArray62); org.jsoup.safety.Whitelist whitelist64 = whitelist50.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray62); org.jsoup.safety.Whitelist whitelist66 = whitelist64.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist68 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist70 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist72 = whitelist70.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist75 = org.jsoup.safety.Whitelist.basic(); boolean boolean76 = org.jsoup.Jsoup.isValid("hi!", whitelist75); java.lang.String[] strArray84 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist85 = whitelist75.addProtocols(".#document", "#doctype=\"\"", strArray84); org.jsoup.safety.Whitelist whitelist86 = whitelist72.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray84); org.jsoup.safety.Whitelist whitelist87 = whitelist68.addAttributes(":containsOwn(hi!:matchesown(null", strArray84); org.jsoup.safety.Whitelist whitelist88 = whitelist64.addAttributes(" text=\"\"", strArray84); org.jsoup.safety.Whitelist whitelist89 = whitelist41.addProtocols("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray84); org.jsoup.safety.Whitelist whitelist90 = whitelist37.addAttributes("#doctype=\"\"", strArray84); org.jsoup.safety.Whitelist whitelist91 = whitelist15.addAttributes("<html>\n <head></head>\n <body>\n [^:containsOwn(hi!]\n </body>\n</html>", strArray84); boolean boolean92 = org.jsoup.helper.StringUtil.in("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]", strArray84); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray84, "utf-8utf-8=\"#data\""); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(attributes46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true); org.junit.Assert.assertNotNull(strArray84); org.junit.Assert.assertNotNull(whitelist85); org.junit.Assert.assertNotNull(whitelist86); org.junit.Assert.assertNotNull(whitelist87); org.junit.Assert.assertNotNull(whitelist88); org.junit.Assert.assertNotNull(whitelist89); org.junit.Assert.assertNotNull(whitelist90); org.junit.Assert.assertNotNull(whitelist91); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); }
public void test534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test534"); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.select.Evaluator.AttributeWithValueContaining("[.#document$=:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", ":lt(35)"); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining5 = new org.jsoup.select.Evaluator.AttributeWithValueContaining("hi! hi!", "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); java.lang.String str6 = attributeWithValueContaining5.toString(); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting9 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray14 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14); org.jsoup.nodes.Element element17 = document12.classNames((java.util.Set<java.lang.String>) strSet15); java.lang.String str18 = document12.nodeName(); org.jsoup.select.Elements elements20 = document12.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document24 = document23.clone(); org.jsoup.nodes.Element element26 = document23.addClass(""); org.jsoup.nodes.Element element27 = document12.appendChild((org.jsoup.nodes.Node) document23); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str31 = document30.val(); org.jsoup.nodes.Element element33 = document30.append("#document"); boolean boolean34 = attributeWithValueStarting9.matches((org.jsoup.nodes.Element) document12, element33); org.jsoup.nodes.Document.QuirksMode quirksMode35 = document12.quirksMode(); document12.title("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element38 = document12.empty(); org.jsoup.nodes.Document document41 = org.jsoup.parser.Parser.parse("", "hi!"); boolean boolean43 = document41.hasClass("body"); org.jsoup.nodes.Document document44 = document41.clone(); boolean boolean45 = attributeWithValueContaining5.matches(element38, (org.jsoup.nodes.Element) document44); org.jsoup.parser.Tag tag47 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean48 = tag47.canContainBlock(); boolean boolean49 = tag47.formatAsBlock(); boolean boolean50 = tag47.isEmpty(); org.jsoup.safety.Whitelist whitelist52 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist54 = whitelist52.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner55 = new org.jsoup.safety.Cleaner(whitelist52); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document59 = document58.clone(); org.jsoup.nodes.Node node61 = document59.removeAttr("#doctype"); org.jsoup.nodes.Document document62 = cleaner55.clean(document59); org.jsoup.nodes.Attributes attributes63 = document62.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator64 = attributes63.spliterator(); org.jsoup.nodes.Element element65 = new org.jsoup.nodes.Element(tag47, "hi!:matchesOwn(null", attributes63); boolean boolean66 = attributeWithValueContaining2.matches((org.jsoup.nodes.Element) document44, element65); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi! hi!*=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"]" + "'", str6, "[hi! hi!*=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"]"); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "#document" + "'", str18, "#document"); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + quirksMode35 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode35.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertNotNull(tag47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(node61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(attributes63); org.junit.Assert.assertNotNull(attributeSpliterator64); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test535"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document3 = document2.clone(); org.jsoup.nodes.Element element5 = document2.addClass(""); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str10 = document9.val(); java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document9, "#document"); java.lang.String str13 = document9.baseUri(); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str17 = document16.val(); org.jsoup.nodes.Element element19 = document16.append("#document"); org.jsoup.nodes.Element element20 = document9.appendChild((org.jsoup.nodes.Node) element19); org.jsoup.nodes.Element element21 = document2.prependChild((org.jsoup.nodes.Node) document9); org.jsoup.nodes.Attributes attributes22 = element21.attributes(); java.lang.String str23 = attributes22.html(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator24 = attributes22.spliterator(); org.jsoup.nodes.Attributes attributes25 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes26 = attributes25.clone(); java.lang.String str27 = attributes26.toString(); attributes22.addAll(attributes26); org.jsoup.safety.Whitelist whitelist29 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes31 = whitelist29.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList32 = attributes31.asList(); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist35 = whitelist33.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner36 = new org.jsoup.safety.Cleaner(whitelist33); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document40 = document39.clone(); org.jsoup.nodes.Node node42 = document40.removeAttr("#doctype"); org.jsoup.nodes.Document document43 = cleaner36.clean(document40); org.jsoup.nodes.Attributes attributes44 = document43.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator45 = attributes44.spliterator(); attributes31.addAll(attributes44); java.util.Map<java.lang.String, java.lang.String> strMap47 = attributes44.dataset(); attributes22.addAll(attributes44); org.jsoup.nodes.Attribute attribute51 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute52 = attribute51.clone(); attributes44.put(attribute52); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator54 = attributes44.spliterator(); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(element5); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!"); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + " class=\"\"" + "'", str23, " class=\"\""); org.junit.Assert.assertNotNull(attributeSpliterator24); org.junit.Assert.assertNotNull(attributes26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(attributes31); org.junit.Assert.assertNotNull(attributeList32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(node42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(attributes44); org.junit.Assert.assertNotNull(attributeSpliterator45); org.junit.Assert.assertNotNull(strMap47); org.junit.Assert.assertNotNull(attribute51); org.junit.Assert.assertNotNull(attribute52); org.junit.Assert.assertNotNull(attributeSpliterator54); }
public void test536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test536"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addProtocols(".#document", "#doctype=\"\"", strArray11); org.jsoup.select.Evaluator.AttributeStarting attributeStarting15 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); document21.title("#document"); boolean boolean29 = attributeStarting15.matches((org.jsoup.nodes.Element) document18, (org.jsoup.nodes.Element) document21); java.lang.String str30 = document18.id(); org.jsoup.select.Elements elements32 = document18.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements34 = document18.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute37 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean38 = whitelist2.isSafeAttribute("", (org.jsoup.nodes.Element) document18, attribute37); java.lang.String str39 = org.jsoup.Jsoup.clean(":containsOwn(<html> <head></head> <body> [#document^= hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot; </body> </html>", whitelist2); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, ""); org.junit.Assert.assertNotNull(elements32); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertEquals("'" + str39 + "' != '" + ":containsOwn(  [#document^= hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;" + "'", str39, ":containsOwn(  [#document^= hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;"); }
public void test537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test537"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.nodes.Attributes attributes6 = whitelist1.getEnforcedAttributes(""); java.lang.String str7 = org.jsoup.Jsoup.clean("[[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]!=.#document]", whitelist1); org.jsoup.safety.Whitelist whitelist8 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes10 = whitelist8.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist15 = whitelist13.preserveRelativeLinks(false); boolean boolean16 = org.jsoup.Jsoup.isValid("", whitelist13); java.lang.String[] strArray22 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist23 = whitelist13.addTags(strArray22); org.jsoup.safety.Whitelist whitelist24 = whitelist8.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray22); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray22, ""); org.jsoup.safety.Whitelist whitelist27 = whitelist1.addTags(strArray22); org.jsoup.safety.Whitelist whitelist29 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes31 = whitelist29.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist36 = whitelist34.preserveRelativeLinks(false); boolean boolean37 = org.jsoup.Jsoup.isValid("", whitelist34); java.lang.String[] strArray43 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist44 = whitelist34.addTags(strArray43); org.jsoup.safety.Whitelist whitelist45 = whitelist29.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray43); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray43); org.jsoup.safety.Whitelist whitelist47 = whitelist1.addAttributes("<html>\n <head></head>\n <body></body>\n</html>", strArray43); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[[#document^=  hi! ]!=.#document]" + "'", str7, "[[#document^=  hi! ]!=.#document]"); org.junit.Assert.assertNotNull(attributes10); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(attributes31); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist47); }
public void test538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test538"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.safety.Whitelist whitelist4 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes6 = whitelist4.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); boolean boolean12 = org.jsoup.Jsoup.isValid("", whitelist9); java.lang.String[] strArray18 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist19 = whitelist9.addTags(strArray18); org.jsoup.safety.Whitelist whitelist20 = whitelist4.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray18); org.jsoup.safety.Whitelist whitelist21 = whitelist1.addProtocols(":matchesOwn(null", ":matches(null", strArray18); boolean boolean22 = org.jsoup.Jsoup.isValid("[^[^:containsOwn(hi!]]", whitelist1); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); }
public void test539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test539"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.select.Evaluator.Class class6 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str7 = class6.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals9 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray14 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14); org.jsoup.nodes.Element element17 = document12.classNames((java.util.Set<java.lang.String>) strSet15); org.jsoup.nodes.Document document19 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray24 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24); org.jsoup.nodes.Element element27 = document22.classNames((java.util.Set<java.lang.String>) strSet25); org.jsoup.nodes.Element element28 = document19.appendChild((org.jsoup.nodes.Node) element27); boolean boolean29 = indexEquals9.matches(element17, (org.jsoup.nodes.Element) document19); org.jsoup.nodes.Document.QuirksMode quirksMode30 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document31 = document19.quirksMode(quirksMode30); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray36 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36); org.jsoup.nodes.Element element39 = document34.classNames((java.util.Set<java.lang.String>) strSet37); document34.title("#document"); boolean boolean42 = class6.matches((org.jsoup.nodes.Element) document31, (org.jsoup.nodes.Element) document34); org.jsoup.nodes.Document document43 = cleaner4.clean(document31); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting46 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document49 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray51 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51); org.jsoup.nodes.Element element54 = document49.classNames((java.util.Set<java.lang.String>) strSet52); java.lang.String str55 = document49.nodeName(); org.jsoup.select.Elements elements57 = document49.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document61 = document60.clone(); org.jsoup.nodes.Element element63 = document60.addClass(""); org.jsoup.nodes.Element element64 = document49.appendChild((org.jsoup.nodes.Node) document60); org.jsoup.nodes.Document document67 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str68 = document67.val(); org.jsoup.nodes.Element element70 = document67.append("#document"); boolean boolean71 = attributeWithValueStarting46.matches((org.jsoup.nodes.Element) document49, element70); java.lang.String str72 = document49.title(); org.jsoup.nodes.Element element73 = document49.body(); boolean boolean74 = cleaner4.isValid(document49); org.jsoup.nodes.Element element75 = document49.head(); org.jsoup.select.Elements elements77 = element75.getElementsMatchingText(" [  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=\"##  hi!\" =\"#doctype\""); org.jsoup.nodes.Node node78 = element75.clone(); org.jsoup.nodes.Element element80 = element75.prependText("<#doctype></#doctype>\n<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); java.util.List<org.jsoup.nodes.Node> nodeList82 = org.jsoup.parser.Parser.parseFragment(" class=\" #doctype\"", element80, "[:matches(null]"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str7 + "' != '" + ".#document" + "'", str7, ".#document"); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + quirksMode30 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode30.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "#document" + "'", str55, "#document"); org.junit.Assert.assertNotNull(elements57); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, ""); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, ""); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true); org.junit.Assert.assertNotNull(element75); org.junit.Assert.assertNotNull(elements77); org.junit.Assert.assertNotNull(node78); org.junit.Assert.assertNotNull(element80); org.junit.Assert.assertNotNull(nodeList82); }
public void test540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test540"); org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("<html>\n <head></head>\n <body>\n #  hi! \n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!:matchesOwn(null\n </body>\n</html>"); org.jsoup.nodes.Element element4 = document2.prependElement("UTF-8bodyUTF-8"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str8 = org.jsoup.Jsoup.clean("", "#data", whitelist7); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document13 = document12.clone(); org.jsoup.select.Elements elements15 = document13.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements17 = document13.getElementsByAttribute("#document"); org.jsoup.select.Elements elements20 = document13.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document21 = cleaner9.clean(document13); org.jsoup.nodes.Element element23 = document13.prependElement("hi! class=\"\"<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element24 = document2.appendChild((org.jsoup.nodes.Node) element23); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(element4); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(elements17); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element24); }
public void test541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test541"); org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", ""); boolean boolean4 = textNode2.hasAttr("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); java.lang.String str5 = textNode2.toString(); java.lang.String str7 = textNode2.attr("#doctype"); boolean boolean9 = textNode2.hasAttr("#data"); org.jsoup.nodes.TextNode textNode11 = textNode2.text(".#document"); java.lang.String str12 = textNode2.text(); java.lang.String str14 = textNode2.attr("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\""); java.lang.String str15 = textNode2.text(); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.basic(); boolean boolean20 = org.jsoup.Jsoup.isValid("hi!", whitelist19); java.lang.String[] strArray28 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist29 = whitelist19.addProtocols(".#document", "#doctype=\"\"", strArray28); org.jsoup.safety.Whitelist whitelist30 = whitelist16.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray28); org.jsoup.safety.Whitelist whitelist32 = whitelist30.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist36 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes38 = whitelist36.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist43 = whitelist41.preserveRelativeLinks(false); boolean boolean44 = org.jsoup.Jsoup.isValid("", whitelist41); java.lang.String[] strArray50 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist51 = whitelist41.addTags(strArray50); org.jsoup.safety.Whitelist whitelist52 = whitelist36.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray50); boolean boolean53 = org.jsoup.helper.StringUtil.in("", strArray50); org.jsoup.safety.Whitelist whitelist54 = whitelist32.addProtocols("                          ", ".#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray50); boolean boolean55 = textNode2.equals((java.lang.Object) strArray50); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(textNode11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + ".#document" + "'", str12, ".#document"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertEquals("'" + str15 + "' != '" + ".#document" + "'", str15, ".#document"); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(attributes38); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); }
public void test542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test542"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basic(); boolean boolean5 = org.jsoup.Jsoup.isValid("hi!", whitelist4); java.lang.String[] strArray13 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist14 = whitelist4.addProtocols(".#document", "#doctype=\"\"", strArray13); org.jsoup.safety.Whitelist whitelist15 = whitelist1.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray13); org.jsoup.safety.Whitelist whitelist17 = whitelist15.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist23 = whitelist21.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.basic(); boolean boolean27 = org.jsoup.Jsoup.isValid("hi!", whitelist26); java.lang.String[] strArray35 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist36 = whitelist26.addProtocols(".#document", "#doctype=\"\"", strArray35); org.jsoup.safety.Whitelist whitelist37 = whitelist23.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray35); org.jsoup.safety.Whitelist whitelist38 = whitelist19.addAttributes(":containsOwn(hi!:matchesown(null", strArray35); org.jsoup.safety.Whitelist whitelist39 = whitelist15.addAttributes(" text=\"\"", strArray35); java.lang.String str40 = org.jsoup.Jsoup.clean("[^:eq(1)]", whitelist39); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[^:eq(1)]" + "'", str40, "[^:eq(1)]"); }
public void test543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test543"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); java.lang.String str3 = org.jsoup.Jsoup.clean(":eq(52)", "hi!:matchesOwn(null", whitelist2); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.nodes.Element element10 = document7.addClass(""); org.jsoup.nodes.Element element12 = document7.prependElement("#doctype"); java.lang.String str13 = element12.nodeName(); org.jsoup.nodes.Attribute attribute16 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute17 = attribute16.clone(); boolean boolean18 = whitelist2.isSafeAttribute("                ", element12, attribute17); java.lang.String[] strArray22 = new java.lang.String[] { "#document", "hi!", "" }; java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22); java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>(); boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30); boolean boolean33 = strList23.containsAll((java.util.Collection<java.lang.String>) strList31); java.util.stream.Stream<java.lang.String> strStream34 = strList31.stream(); java.util.stream.Stream<java.lang.String> strStream35 = strList31.stream(); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray40 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40); org.jsoup.nodes.Element element43 = document38.classNames((java.util.Set<java.lang.String>) strSet41); java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>(); boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46); boolean boolean49 = strSet41.containsAll((java.util.Collection<java.lang.String>) strList47); java.lang.String str51 = org.jsoup.helper.StringUtil.join((java.util.Collection) strSet41, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean52 = strSet41.isEmpty(); boolean boolean53 = strList31.containsAll((java.util.Collection<java.lang.String>) strSet41); java.util.stream.Stream<java.lang.String> strStream54 = strList31.stream(); java.lang.String[] strArray58 = new java.lang.String[] { "#document", "hi!", "" }; java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>(); boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58); java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>(); boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66); boolean boolean69 = strList59.containsAll((java.util.Collection<java.lang.String>) strList67); java.util.ListIterator<java.lang.String> strItor70 = strList59.listIterator(); java.lang.String str72 = org.jsoup.helper.StringUtil.join((java.util.Collection) strList59, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document74 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document77 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray79 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79); org.jsoup.nodes.Element element82 = document77.classNames((java.util.Set<java.lang.String>) strSet80); org.jsoup.nodes.Element element83 = document74.appendChild((org.jsoup.nodes.Node) element82); org.jsoup.nodes.Document document86 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray88 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88); org.jsoup.nodes.Element element91 = document86.classNames((java.util.Set<java.lang.String>) strSet89); org.jsoup.nodes.Element element92 = document74.classNames((java.util.Set<java.lang.String>) strSet89); java.util.stream.Stream<java.lang.String> strStream93 = strSet89.stream(); boolean boolean94 = strList59.removeAll((java.util.Collection<java.lang.String>) strSet89); boolean boolean95 = strList31.removeAll((java.util.Collection<java.lang.String>) strList59); boolean boolean96 = attribute17.equals((java.lang.Object) strList59); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":eq(52)" + "'", str3, ":eq(52)"); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#doctype" + "'", str13, "#doctype"); org.junit.Assert.assertNotNull(attribute16); org.junit.Assert.assertNotNull(attribute17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(strStream34); org.junit.Assert.assertNotNull(strStream35); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, ""); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(strStream54); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(strArray66); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNotNull(strItor70); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str72, "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertNotNull(document77); org.junit.Assert.assertNotNull(strArray79); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true); org.junit.Assert.assertNotNull(element82); org.junit.Assert.assertNotNull(element83); org.junit.Assert.assertNotNull(document86); org.junit.Assert.assertNotNull(strArray88); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true); org.junit.Assert.assertNotNull(element91); org.junit.Assert.assertNotNull(element92); org.junit.Assert.assertNotNull(strStream93); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true); org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false); }
public void test544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test544"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document3 = document2.clone(); org.jsoup.nodes.Element element5 = document2.addClass(""); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str10 = document9.val(); java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document9, "#document"); java.lang.String str13 = document9.baseUri(); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str17 = document16.val(); org.jsoup.nodes.Element element19 = document16.append("#document"); org.jsoup.nodes.Element element20 = document9.appendChild((org.jsoup.nodes.Node) element19); org.jsoup.nodes.Element element21 = document2.prependChild((org.jsoup.nodes.Node) document9); org.jsoup.nodes.Attributes attributes22 = element21.attributes(); java.lang.String str23 = attributes22.html(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator24 = attributes22.spliterator(); org.jsoup.nodes.Attributes attributes25 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes26 = attributes25.clone(); java.lang.String str27 = attributes26.toString(); attributes22.addAll(attributes26); org.jsoup.safety.Whitelist whitelist29 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document34 = document33.clone(); org.jsoup.nodes.Attribute attribute37 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute37.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str40 = attribute37.getKey(); attribute37.setKey("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean43 = whitelist29.isSafeAttribute(":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", (org.jsoup.nodes.Element) document34, attribute37); java.lang.String str44 = attribute37.html(); java.lang.String str45 = attribute37.toString(); java.lang.String str46 = attribute37.html(); attributes22.put(attribute37); org.jsoup.nodes.Document document50 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document51 = document50.clone(); java.lang.String str52 = document51.val(); org.jsoup.nodes.Element element53 = document51.head(); java.lang.String str54 = element53.toString(); java.util.regex.Pattern pattern56 = null; org.jsoup.select.Elements elements57 = element53.getElementsByAttributeValueMatching("[#doctype=\"\"=class=\" #doctype\"]", pattern56); boolean boolean58 = attribute37.equals((java.lang.Object) elements57); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(element5); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!"); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + " class=\"\"" + "'", str23, " class=\"\""); org.junit.Assert.assertNotNull(attributeSpliterator24); org.junit.Assert.assertNotNull(attributes26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str40, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"" + "'", str44, "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"" + "'", str45, "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"" + "'", str46, "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, ""); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<head></head>" + "'", str54, "<head></head>"); org.junit.Assert.assertNotNull(elements57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); }
public void test545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test545"); org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 10); java.lang.String str2 = indexLessThan1.toString(); java.lang.String str3 = indexLessThan1.toString(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element7 = document6.body(); java.lang.String str8 = element7.ownText(); org.jsoup.nodes.DataNode dataNode11 = org.jsoup.nodes.DataNode.createFromEncoded("", ":eq(52)"); org.jsoup.nodes.DataNode dataNode13 = dataNode11.setWholeData(""); java.lang.String str14 = dataNode13.getWholeData(); element7.replaceWith((org.jsoup.nodes.Node) dataNode13); org.jsoup.parser.Tag tag16 = element7.tag(); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#doctype"); org.jsoup.select.Evaluator.IndexEquals indexEquals20 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray25 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25); org.jsoup.nodes.Element element28 = document23.classNames((java.util.Set<java.lang.String>) strSet26); org.jsoup.nodes.Document document30 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); org.jsoup.nodes.Element element39 = document30.appendChild((org.jsoup.nodes.Node) element38); boolean boolean40 = indexEquals20.matches(element28, (org.jsoup.nodes.Element) document30); org.jsoup.nodes.Document.QuirksMode quirksMode41 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document42 = document30.quirksMode(quirksMode41); org.jsoup.nodes.Document document43 = document18.quirksMode(quirksMode41); java.util.Map<java.lang.String, java.lang.String> strMap44 = document18.dataset(); org.jsoup.nodes.Element element46 = document18.prepend(""); boolean boolean47 = indexLessThan1.matches(element7, element46); java.lang.String str48 = indexLessThan1.toString(); org.jsoup.nodes.Element element49 = null; org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist52 = whitelist50.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner53 = new org.jsoup.safety.Cleaner(whitelist50); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray58 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58); org.jsoup.nodes.Element element61 = document56.classNames((java.util.Set<java.lang.String>) strSet59); java.lang.String str62 = document56.nodeName(); java.lang.String str63 = document56.html(); boolean boolean64 = cleaner53.isValid(document56); boolean boolean65 = indexLessThan1.matches(element49, (org.jsoup.nodes.Element) document56); org.jsoup.nodes.Document document67 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Element element69 = document67.append("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"^=hi! hi! #comment]"); java.lang.String str70 = element69.baseUri(); org.jsoup.nodes.Element element71 = null; // The following exception was thrown during execution in test generation try { boolean boolean72 = indexLessThan1.matches(element69, element71); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":lt(10)" + "'", str2, ":lt(10)"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":lt(10)" + "'", str3, ":lt(10)"); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi! hi!" + "'", str8, "hi! hi!"); org.junit.Assert.assertNotNull(dataNode11); org.junit.Assert.assertNotNull(dataNode13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertNotNull(tag16); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + quirksMode41 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode41.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(strMap44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertEquals("'" + str48 + "' != '" + ":lt(10)" + "'", str48, ":lt(10)"); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "#document" + "'", str62, "#document"); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str63, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!"); }
public void test546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test546"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); org.jsoup.safety.Whitelist whitelist3 = new org.jsoup.safety.Whitelist(); boolean boolean4 = org.jsoup.Jsoup.isValid("", whitelist3); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray10 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10); org.jsoup.nodes.Element element13 = document8.classNames((java.util.Set<java.lang.String>) strSet11); org.jsoup.nodes.Element element15 = element13.prepend("#document"); org.jsoup.nodes.Attribute attribute18 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute18.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str21 = attribute18.getKey(); boolean boolean22 = whitelist3.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element15, attribute18); org.jsoup.nodes.Attribute attribute23 = attribute18.clone(); java.lang.String str25 = attribute23.setValue(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); java.lang.String str26 = attribute23.getKey(); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.basic(); boolean boolean29 = org.jsoup.Jsoup.isValid("hi!", whitelist28); java.lang.String[] strArray37 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist38 = whitelist28.addProtocols(".#document", "#doctype=\"\"", strArray37); boolean boolean40 = whitelist28.isSafeTag(""); org.jsoup.safety.Whitelist whitelist42 = whitelist28.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist45 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes47 = whitelist45.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist52 = whitelist50.preserveRelativeLinks(false); boolean boolean53 = org.jsoup.Jsoup.isValid("", whitelist50); java.lang.String[] strArray59 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist60 = whitelist50.addTags(strArray59); org.jsoup.safety.Whitelist whitelist61 = whitelist45.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray59); org.jsoup.safety.Whitelist whitelist62 = whitelist42.addProtocols("#comment", ".:eq(52)", strArray59); org.jsoup.safety.Whitelist whitelist64 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist66 = whitelist64.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner67 = new org.jsoup.safety.Cleaner(whitelist64); org.jsoup.safety.Whitelist whitelist69 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist71 = whitelist69.preserveRelativeLinks(false); boolean boolean72 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist69); org.jsoup.safety.Whitelist whitelist74 = org.jsoup.safety.Whitelist.basic(); boolean boolean75 = org.jsoup.Jsoup.isValid("hi!", whitelist74); java.lang.String[] strArray83 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist84 = whitelist74.addProtocols(".#document", "#doctype=\"\"", strArray83); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray83, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray83); org.jsoup.safety.Whitelist whitelist88 = whitelist69.addTags(strArray83); org.jsoup.safety.Whitelist whitelist89 = whitelist64.addTags(strArray83); org.jsoup.safety.Whitelist whitelist90 = whitelist42.addAttributes("<html>\n <head></head>\n <body></body>\n</html>", strArray83); org.jsoup.safety.Whitelist whitelist94 = whitelist90.addEnforcedAttribute("hi!:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "[:matches(null]", "<html>\n <head></head> \n <body>\n hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>"); boolean boolean95 = attribute23.equals((java.lang.Object) "[:matches(null]"); attributes1.put(attribute23); attributes1.remove("UTF-8[]UTF-8[]UTF-8[]UTF-8[]UTF-8"); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str21, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(attribute23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str26, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(attributes47); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true); org.junit.Assert.assertNotNull(whitelist74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true); org.junit.Assert.assertNotNull(strArray83); org.junit.Assert.assertNotNull(whitelist84); org.junit.Assert.assertNotNull(whitelist88); org.junit.Assert.assertNotNull(whitelist89); org.junit.Assert.assertNotNull(whitelist90); org.junit.Assert.assertNotNull(whitelist94); org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false); }
public void test547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test547"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element17 = document16.body(); java.lang.String str18 = document16.toString(); org.jsoup.nodes.Document document19 = cleaner3.clean(document16); java.lang.String str20 = document16.nodeName(); org.jsoup.parser.Tag tag21 = document16.tag(); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str27 = document26.val(); java.util.List<org.jsoup.nodes.Node> nodeList29 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document26, "#document"); org.jsoup.nodes.Document.QuirksMode quirksMode30 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document31 = document26.quirksMode(quirksMode30); org.jsoup.nodes.Node node32 = document26.nextSibling(); org.jsoup.nodes.Element element34 = document26.createElement("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); java.util.List<org.jsoup.nodes.Node> nodeList36 = org.jsoup.parser.Parser.parseFragment("*", (org.jsoup.nodes.Element) document26, "[<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->$=<html>\n <head>\n <title>#document</title>\n </head>\n <body>\n hi!\n </body>\n</html>]"); boolean boolean37 = tag21.equals((java.lang.Object) document26); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertNotNull(tag21); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(nodeList29); org.junit.Assert.assertTrue("'" + quirksMode30 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode30.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNull(node32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(nodeList36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); }
public void test548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test548"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); java.lang.String str4 = attributes0.get("\n#document"); org.jsoup.nodes.Attributes attributes5 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes6 = attributes5.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator7 = attributes5.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap8 = attributes5.dataset(); attributes0.addAll(attributes5); java.lang.String str10 = attributes0.toString(); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner14 = new org.jsoup.safety.Cleaner(whitelist11); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document18 = document17.clone(); org.jsoup.nodes.Node node20 = document18.removeAttr("#doctype"); org.jsoup.nodes.Document document21 = cleaner14.clean(document18); boolean boolean22 = attributes0.equals((java.lang.Object) document18); java.util.Map<java.lang.String, java.lang.String> strMap23 = attributes0.dataset(); attributes0.remove("##<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList26 = attributes0.asList(); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(attributeSpliterator7); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(node20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(strMap23); org.junit.Assert.assertNotNull(attributeList26); }
public void test549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test549"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); java.nio.charset.Charset[] charsetArray4 = new java.nio.charset.Charset[] { charset3 }; java.util.LinkedList<java.nio.charset.Charset> charsetList5 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList5, charsetArray4); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); java.nio.charset.Charset charset10 = outputSettings7.charset(); boolean boolean11 = charsetList5.add(charset10); java.lang.Object obj12 = null; boolean boolean13 = charsetList5.removeLastOccurrence(obj12); java.nio.charset.Charset charset14 = charsetList5.pollFirst(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList15 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.prettyPrint(false); java.nio.charset.Charset charset19 = outputSettings18.charset(); charsetList15.addFirst(charset19); java.util.Iterator<java.nio.charset.Charset> charsetItor21 = charsetList15.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList22 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.prettyPrint(false); java.nio.charset.Charset charset26 = outputSettings25.charset(); charsetList22.addFirst(charset26); boolean boolean28 = charsetList15.offerFirst(charset26); int int29 = charsetList15.size(); java.nio.charset.Charset charset30 = charsetList15.peekLast(); charsetList5.addFirst(charset30); java.nio.charset.Charset charset32 = charsetList5.poll(); java.nio.charset.Charset charset33 = charsetList5.removeFirst(); java.nio.charset.Charset charset34 = charsetList5.pollFirst(); java.nio.charset.Charset charset35 = charsetList5.peek(); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist43 = org.jsoup.safety.Whitelist.basic(); boolean boolean44 = org.jsoup.Jsoup.isValid("hi!", whitelist43); java.lang.String[] strArray52 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist53 = whitelist43.addProtocols(".#document", "#doctype=\"\"", strArray52); org.jsoup.safety.Whitelist whitelist54 = whitelist40.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray52); org.jsoup.safety.Whitelist whitelist55 = whitelist36.addAttributes(":containsOwn(hi!:matchesown(null", strArray52); java.lang.String[] strArray56 = charsetList5.toArray(strArray52); // The following exception was thrown during execution in test generation try { java.nio.charset.Charset charset57 = charsetList5.removeLast(); org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null"); } catch (java.util.NoSuchElementException e) { // Expected exception. } org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(charsetArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(charset14); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charset19); org.junit.Assert.assertNotNull(charsetItor21); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(charset26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2); org.junit.Assert.assertNotNull(charset30); org.junit.Assert.assertNotNull(charset32); org.junit.Assert.assertNotNull(charset33); org.junit.Assert.assertNull(charset34); org.junit.Assert.assertNull(charset35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(strArray52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(strArray56); }
public void test550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test550"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean4 = org.jsoup.Jsoup.isValid("#document", whitelist3); java.lang.String str5 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist3); java.lang.String str6 = org.jsoup.Jsoup.clean("##<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", whitelist3); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist3); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str5, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "##  hi!" + "'", str6, "##  hi!"); }
public void test551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test551"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner10 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Node node16 = document14.removeAttr("#doctype"); org.jsoup.nodes.Document document17 = cleaner10.clean(document14); org.jsoup.nodes.Attributes attributes18 = document17.attributes(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Node node28 = document26.removeAttr("#doctype"); org.jsoup.nodes.Document document29 = cleaner22.clean(document26); org.jsoup.nodes.Attributes attributes30 = document29.attributes(); boolean boolean31 = containsOwnText6.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document29); boolean boolean32 = cleaner4.isValid(document17); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean37 = document35.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document38 = cleaner4.clean(document35); org.jsoup.nodes.Document document41 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("<html> <head></head> <body> hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; </body> </html>", " class=\"\""); org.jsoup.nodes.Document document42 = cleaner4.clean(document41); org.jsoup.nodes.Document document43 = null; // The following exception was thrown during execution in test generation try { boolean boolean44 = cleaner4.isValid(document43); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(node16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(attributes18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(node28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document42); }
public void test552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test552"); org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.prettyPrint(false); java.nio.charset.Charset charset6 = outputSettings3.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings3.indentAmount((int) '4'); java.nio.charset.Charset charset9 = outputSettings3.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.prettyPrint(false); int int13 = outputSettings12.indentAmount(); java.nio.charset.Charset charset14 = outputSettings12.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings3.charset(charset14); java.nio.charset.Charset[] charsetArray16 = new java.nio.charset.Charset[] { charset14 }; java.util.LinkedList<java.nio.charset.Charset> charsetList17 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList17, charsetArray16); java.nio.charset.Charset charset19 = charsetList17.pop(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.basic(); boolean boolean22 = org.jsoup.Jsoup.isValid("hi!", whitelist21); java.lang.String[] strArray30 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist31 = whitelist21.addProtocols(".#document", "#doctype=\"\"", strArray30); org.jsoup.safety.Cleaner cleaner32 = new org.jsoup.safety.Cleaner(whitelist21); boolean boolean33 = charsetList17.contains((java.lang.Object) whitelist21); boolean boolean34 = org.jsoup.Jsoup.isValid("hi! hi!", whitelist21); java.lang.String str35 = org.jsoup.Jsoup.clean("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]", whitelist21); org.jsoup.nodes.Attributes attributes37 = whitelist21.getEnforcedAttributes(""); org.jsoup.safety.Whitelist whitelist39 = whitelist21.preserveRelativeLinks(true); java.lang.String str40 = org.jsoup.Jsoup.clean("[.#document$=:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", whitelist39); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(charset6); org.junit.Assert.assertNotNull(outputSettings8); org.junit.Assert.assertNotNull(charset9); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1); org.junit.Assert.assertNotNull(charset14); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertNotNull(charsetArray16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(charset19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]" + "'", str35, "[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.junit.Assert.assertNotNull(attributes37); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[.#document$=:contains(  hi! ]" + "'", str40, "[.#document$=:contains(  hi! ]"); }
public void test553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test553"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor2 = attributes1.iterator(); attributes1.put("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", ".#document"); java.util.Map<java.lang.String, java.lang.String> strMap6 = attributes1.dataset(); org.jsoup.safety.Whitelist whitelist10 = new org.jsoup.safety.Whitelist(); boolean boolean11 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist10); java.lang.String str12 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist10); org.jsoup.nodes.Document document15 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray20 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20); org.jsoup.nodes.Element element23 = document18.classNames((java.util.Set<java.lang.String>) strSet21); org.jsoup.nodes.Element element24 = document15.appendChild((org.jsoup.nodes.Node) element23); java.lang.String str26 = document15.absUrl("hi!"); org.jsoup.nodes.Attribute attribute29 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean30 = whitelist10.isSafeAttribute("", (org.jsoup.nodes.Element) document15, attribute29); org.jsoup.nodes.Attribute attribute31 = attribute29.clone(); attributes1.put(attribute29); int int33 = attributes1.size(); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeItor2); org.junit.Assert.assertNotNull(strMap6); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!:matchesOwn(null" + "'", str12, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, ""); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(attribute31); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2); }
public void test554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test554"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addProtocols(".#document", "#doctype=\"\"", strArray11); boolean boolean14 = whitelist2.isSafeTag(""); org.jsoup.safety.Whitelist whitelist16 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist24 = whitelist22.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist27 = org.jsoup.safety.Whitelist.basic(); boolean boolean28 = org.jsoup.Jsoup.isValid("hi!", whitelist27); java.lang.String[] strArray36 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist37 = whitelist27.addProtocols(".#document", "#doctype=\"\"", strArray36); org.jsoup.safety.Whitelist whitelist38 = whitelist24.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray36); org.jsoup.safety.Whitelist whitelist39 = whitelist20.addAttributes(":containsOwn(hi!:matchesown(null", strArray36); boolean boolean40 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray36); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray36); org.jsoup.safety.Whitelist whitelist42 = whitelist2.addProtocols("[^:containsOwn(hi!]", "[hi!, <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", strArray36); org.jsoup.safety.Whitelist whitelist46 = whitelist2.addEnforcedAttribute("[:containsown(hi!:matchesown(null=hi!:matchesown(null]", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n #document\n </body>\n</html>"); java.lang.String str47 = org.jsoup.Jsoup.clean("[[#document^=  hi! ]!=.#document]", whitelist46); org.jsoup.safety.Whitelist whitelist49 = whitelist46.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist54 = org.jsoup.safety.Whitelist.basic(); boolean boolean55 = org.jsoup.Jsoup.isValid("hi!", whitelist54); java.lang.String[] strArray63 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist64 = whitelist54.addProtocols(".#document", "#doctype=\"\"", strArray63); boolean boolean66 = whitelist54.isSafeTag(""); boolean boolean68 = whitelist54.isSafeTag("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root></#root>"); java.lang.String str69 = org.jsoup.Jsoup.clean("", whitelist54); org.jsoup.safety.Whitelist whitelist75 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean76 = org.jsoup.Jsoup.isValid("#document", whitelist75); java.lang.String str77 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist75); org.jsoup.safety.Whitelist whitelist80 = org.jsoup.safety.Whitelist.basic(); boolean boolean81 = org.jsoup.Jsoup.isValid("hi!", whitelist80); java.lang.String[] strArray89 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist90 = whitelist80.addProtocols(".#document", "#doctype=\"\"", strArray89); org.jsoup.safety.Whitelist whitelist91 = whitelist75.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray89); boolean boolean92 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray89); boolean boolean93 = org.jsoup.helper.StringUtil.in("&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;", strArray89); org.jsoup.safety.Whitelist whitelist94 = whitelist54.addAttributes("[^:containsOwn(hi!]", strArray89); org.jsoup.safety.Whitelist whitelist95 = whitelist49.addProtocols("                ", "[[:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>$=<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>]*=class=\" #doctype\"]", strArray89); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[[#document^= hi! ]!=.#document]" + "'", str47, "[[#document^= hi! ]!=.#document]"); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(strArray63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, ""); org.junit.Assert.assertNotNull(whitelist75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str77, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true); org.junit.Assert.assertNotNull(strArray89); org.junit.Assert.assertNotNull(whitelist90); org.junit.Assert.assertNotNull(whitelist91); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); org.junit.Assert.assertNotNull(whitelist94); org.junit.Assert.assertNotNull(whitelist95); }
public void test555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test555"); org.jsoup.select.Evaluator.Attribute attribute1 = new org.jsoup.select.Evaluator.Attribute("[]"); org.jsoup.select.Evaluator.AllElements allElements2 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str3 = allElements2.toString(); java.lang.String str4 = allElements2.toString(); java.lang.String str5 = allElements2.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting7 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Element element13 = document10.addClass(""); org.jsoup.nodes.Document document15 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element17 = document15.createElement("#document"); boolean boolean18 = attributeStarting7.matches((org.jsoup.nodes.Element) document10, (org.jsoup.nodes.Element) document15); org.jsoup.nodes.Element element20 = document15.toggleClass("#doctype"); org.jsoup.select.Elements elements22 = element20.getElementsMatchingOwnText("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str26 = org.jsoup.Jsoup.clean("", "#data", whitelist25); org.jsoup.safety.Cleaner cleaner27 = new org.jsoup.safety.Cleaner(whitelist25); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText29 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist32 = whitelist30.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner33 = new org.jsoup.safety.Cleaner(whitelist30); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document37 = document36.clone(); org.jsoup.nodes.Node node39 = document37.removeAttr("#doctype"); org.jsoup.nodes.Document document40 = cleaner33.clean(document37); org.jsoup.nodes.Attributes attributes41 = document40.attributes(); org.jsoup.safety.Whitelist whitelist42 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist44 = whitelist42.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner45 = new org.jsoup.safety.Cleaner(whitelist42); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document49 = document48.clone(); org.jsoup.nodes.Node node51 = document49.removeAttr("#doctype"); org.jsoup.nodes.Document document52 = cleaner45.clean(document49); org.jsoup.nodes.Attributes attributes53 = document52.attributes(); boolean boolean54 = containsOwnText29.matches((org.jsoup.nodes.Element) document40, (org.jsoup.nodes.Element) document52); boolean boolean55 = cleaner27.isValid(document40); boolean boolean56 = allElements2.matches(element20, (org.jsoup.nodes.Element) document40); org.jsoup.nodes.Element element58 = document40.prependElement(".#document"); org.jsoup.parser.Tag tag60 = org.jsoup.parser.Tag.valueOf("\n#document"); boolean boolean61 = tag60.preserveWhitespace(); org.jsoup.nodes.Element element63 = new org.jsoup.nodes.Element(tag60, "UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8"); boolean boolean64 = attribute1.matches(element58, element63); org.jsoup.nodes.Element element65 = element58.clone(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "*" + "'", str3, "*"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "*" + "'", str4, "*"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "*" + "'", str5, "*"); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(elements22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, ""); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(node39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(attributes41); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(node51); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(attributes53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(tag60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(element65); }
public void test556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test556"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.indentAmount((int) '4'); java.nio.charset.Charset charset6 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); int int10 = outputSettings9.indentAmount(); java.nio.charset.Charset charset11 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.charset(charset11); java.nio.charset.Charset[] charsetArray13 = new java.nio.charset.Charset[] { charset11 }; java.util.LinkedList<java.nio.charset.Charset> charsetList14 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList14, charsetArray13); java.nio.charset.Charset charset16 = charsetList14.pop(); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basic(); boolean boolean19 = org.jsoup.Jsoup.isValid("hi!", whitelist18); java.lang.String[] strArray27 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist28 = whitelist18.addProtocols(".#document", "#doctype=\"\"", strArray27); org.jsoup.safety.Cleaner cleaner29 = new org.jsoup.safety.Cleaner(whitelist18); boolean boolean30 = charsetList14.contains((java.lang.Object) whitelist18); java.nio.charset.Charset charset31 = charsetList14.poll(); org.jsoup.nodes.TextNode textNode34 = new org.jsoup.nodes.TextNode("", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str35 = textNode34.toString(); org.jsoup.nodes.Attributes attributes36 = textNode34.attributes(); java.lang.String str37 = attributes36.html(); boolean boolean38 = charsetList14.remove((java.lang.Object) attributes36); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator39 = attributes36.spliterator(); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(charset6); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charsetArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNull(charset31); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertNotNull(attributes36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + " text=\"\"" + "'", str37, " text=\"\""); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(attributeSpliterator39); }
public void test557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test557"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.select.Evaluator.Attribute attribute16 = new org.jsoup.select.Evaluator.Attribute(""); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) element26); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray32 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32); org.jsoup.nodes.Element element35 = document30.classNames((java.util.Set<java.lang.String>) strSet33); org.jsoup.nodes.Element element36 = document18.classNames((java.util.Set<java.lang.String>) strSet33); org.jsoup.nodes.Document document39 = org.jsoup.parser.Parser.parseBodyFragment("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ".#document"); boolean boolean40 = attribute16.matches((org.jsoup.nodes.Element) document18, (org.jsoup.nodes.Element) document39); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parse("hi!<html> <head></head> <body> hi! </body> </html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements46 = document43.getElementsByAttributeValueStarting("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document49 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str50 = document49.className(); boolean boolean51 = attribute16.matches((org.jsoup.nodes.Element) document43, (org.jsoup.nodes.Element) document49); org.jsoup.nodes.Document document54 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str55 = document54.val(); org.jsoup.select.Elements elements57 = document54.getElementsContainingText("#doctype"); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document61 = document60.clone(); org.jsoup.nodes.Document.QuirksMode quirksMode62 = document60.quirksMode(); org.jsoup.nodes.Attributes attributes63 = document60.attributes(); org.jsoup.nodes.Element element65 = document60.toggleClass(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); boolean boolean66 = attribute16.matches((org.jsoup.nodes.Element) document54, (org.jsoup.nodes.Element) document60); org.jsoup.nodes.Document.QuirksMode quirksMode67 = org.jsoup.nodes.Document.QuirksMode.noQuirks; org.jsoup.nodes.Document document68 = document60.quirksMode(quirksMode67); org.jsoup.nodes.Element element70 = document60.addClass(""); java.lang.String str71 = document60.nodeName(); org.jsoup.nodes.Document document72 = cleaner3.clean(document60); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(elements46); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, ""); org.junit.Assert.assertNotNull(elements57); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertTrue("'" + quirksMode62 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode62.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(attributes63); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertTrue("'" + quirksMode67 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode67.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "#document" + "'", str71, "#document"); org.junit.Assert.assertNotNull(document72); }
public void test558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test558"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor2 = attributes1.iterator(); attributes1.remove(":gt(1)"); boolean boolean6 = attributes1.hasKey(".#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.safety.Whitelist.TagName tagName8 = new org.jsoup.safety.Whitelist.TagName("[^:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); org.jsoup.safety.Whitelist whitelist10 = new org.jsoup.safety.Whitelist(); boolean boolean11 = org.jsoup.Jsoup.isValid("", whitelist10); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray17 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17); org.jsoup.nodes.Element element20 = document15.classNames((java.util.Set<java.lang.String>) strSet18); org.jsoup.nodes.Element element22 = element20.prepend("#document"); org.jsoup.nodes.Attribute attribute25 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute25.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str28 = attribute25.getKey(); boolean boolean29 = whitelist10.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element22, attribute25); org.jsoup.nodes.Attribute attribute30 = attribute25.clone(); java.lang.String str31 = attribute30.html(); org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.prettyPrint(false); java.nio.charset.Charset charset35 = outputSettings34.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.prettyPrint(false); int int39 = outputSettings38.indentAmount(); java.nio.charset.Charset charset40 = outputSettings38.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.prettyPrint(false); java.nio.charset.Charset charset44 = outputSettings41.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.prettyPrint(false); java.nio.charset.Charset charset48 = outputSettings47.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.prettyPrint(false); java.nio.charset.Charset charset52 = outputSettings49.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings49.indentAmount((int) '4'); java.nio.charset.Charset charset55 = outputSettings49.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings56.prettyPrint(false); int int59 = outputSettings58.indentAmount(); java.nio.charset.Charset charset60 = outputSettings58.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings49.charset(charset60); java.nio.charset.Charset[] charsetArray62 = new java.nio.charset.Charset[] { charset35, charset40, charset44, charset48, charset60 }; java.util.LinkedList<java.nio.charset.Charset> charsetList63 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList63, charsetArray62); java.util.Iterator<java.nio.charset.Charset> charsetItor65 = charsetList63.iterator(); org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.prettyPrint(false); java.nio.charset.Charset charset69 = outputSettings66.charset(); java.nio.charset.Charset[] charsetArray70 = new java.nio.charset.Charset[] { charset69 }; java.util.LinkedList<java.nio.charset.Charset> charsetList71 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList71, charsetArray70); org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings73.prettyPrint(false); java.nio.charset.Charset charset76 = outputSettings73.charset(); boolean boolean77 = charsetList71.add(charset76); boolean boolean78 = charsetList63.offerFirst(charset76); java.util.Spliterator<java.nio.charset.Charset> charsetSpliterator79 = charsetList63.spliterator(); java.nio.charset.Charset charset80 = charsetList63.pop(); java.lang.Object obj81 = charsetList63.clone(); boolean boolean82 = attribute30.equals((java.lang.Object) charsetList63); boolean boolean83 = tagName8.equals((java.lang.Object) attribute30); attributes1.put(attribute30); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeItor2); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str28, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(attribute30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"" + "'", str31, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); org.junit.Assert.assertNotNull(outputSettings34); org.junit.Assert.assertNotNull(charset35); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1); org.junit.Assert.assertNotNull(charset40); org.junit.Assert.assertNotNull(outputSettings43); org.junit.Assert.assertNotNull(charset44); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertNotNull(charset48); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(charset52); org.junit.Assert.assertNotNull(outputSettings54); org.junit.Assert.assertNotNull(charset55); org.junit.Assert.assertNotNull(outputSettings58); org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1); org.junit.Assert.assertNotNull(charset60); org.junit.Assert.assertNotNull(outputSettings61); org.junit.Assert.assertNotNull(charsetArray62); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertNotNull(charsetItor65); org.junit.Assert.assertNotNull(outputSettings68); org.junit.Assert.assertNotNull(charset69); org.junit.Assert.assertNotNull(charsetArray70); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true); org.junit.Assert.assertNotNull(outputSettings75); org.junit.Assert.assertNotNull(charset76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true); org.junit.Assert.assertNotNull(charsetSpliterator79); org.junit.Assert.assertNotNull(charset80); org.junit.Assert.assertNotNull(obj81); org.junit.Assert.assertEquals(obj81.toString(), "[UTF-8, UTF-8, UTF-8, UTF-8, UTF-8]"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "[UTF-8, UTF-8, UTF-8, UTF-8, UTF-8]"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "[UTF-8, UTF-8, UTF-8, UTF-8, UTF-8]"); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); }
public void test559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test559"); org.jsoup.select.Evaluator.Attribute attribute1 = new org.jsoup.select.Evaluator.Attribute(""); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str11 = document10.val(); java.util.List<org.jsoup.nodes.Node> nodeList13 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document10, "#document"); java.lang.String str14 = document10.baseUri(); org.jsoup.nodes.Element element16 = document10.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements17 = document10.parents(); org.jsoup.nodes.Document document18 = cleaner6.clean(document10); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse(".:eq(52)"); java.lang.String str21 = document20.html(); org.jsoup.nodes.Element element23 = document20.prependElement("[^hi!]"); boolean boolean24 = cleaner6.isValid(document20); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document28 = document27.clone(); java.lang.String str29 = document27.nodeName(); boolean boolean30 = attribute1.matches((org.jsoup.nodes.Element) document20, (org.jsoup.nodes.Element) document27); java.lang.String str31 = attribute1.toString(); java.lang.String str32 = attribute1.toString(); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertNotNull(nodeList13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(elements17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>" + "'", str21, "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "#document" + "'", str29, "#document"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]"); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]"); }
public void test560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test560"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); boolean boolean8 = org.jsoup.Jsoup.isValid("", whitelist5); java.lang.String[] strArray14 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist15 = whitelist5.addTags(strArray14); org.jsoup.safety.Whitelist whitelist16 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray14); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); boolean boolean27 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist24); org.jsoup.safety.Whitelist whitelist29 = org.jsoup.safety.Whitelist.basic(); boolean boolean30 = org.jsoup.Jsoup.isValid("hi!", whitelist29); java.lang.String[] strArray38 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist39 = whitelist29.addProtocols(".#document", "#doctype=\"\"", strArray38); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray38, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray38); org.jsoup.safety.Whitelist whitelist43 = whitelist24.addTags(strArray38); org.jsoup.safety.Whitelist whitelist44 = whitelist19.addTags(strArray38); org.jsoup.safety.Whitelist whitelist45 = whitelist0.addProtocols("#data", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray38); org.jsoup.nodes.Attributes attributes47 = whitelist0.getEnforcedAttributes("utf-8utf-8=\"#data\""); org.jsoup.safety.Cleaner cleaner48 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.safety.Whitelist.Protocol protocol50 = org.jsoup.safety.Whitelist.Protocol.valueOf("hi!"); java.lang.String str51 = protocol50.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals53 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray58 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58); org.jsoup.nodes.Element element61 = document56.classNames((java.util.Set<java.lang.String>) strSet59); org.jsoup.nodes.Document document63 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray68 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68); org.jsoup.nodes.Element element71 = document66.classNames((java.util.Set<java.lang.String>) strSet69); org.jsoup.nodes.Element element72 = document63.appendChild((org.jsoup.nodes.Node) element71); boolean boolean73 = indexEquals53.matches(element61, (org.jsoup.nodes.Element) document63); boolean boolean74 = protocol50.equals((java.lang.Object) document63); boolean boolean76 = document63.hasAttr("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.jsoup.nodes.Element element78 = document63.appendElement("UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8"); java.lang.String str79 = document63.title(); org.jsoup.nodes.Document document80 = cleaner48.clean(document63); org.jsoup.nodes.Document document82 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document83 = cleaner48.clean(document82); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(attributes47); org.junit.Assert.assertNotNull(protocol50); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!"); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, ""); org.junit.Assert.assertNotNull(document80); org.junit.Assert.assertNotNull(document82); org.junit.Assert.assertNotNull(document83); }
public void test561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test561"); org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str1 = allElements0.toString(); java.lang.String str2 = allElements0.toString(); java.lang.String str3 = allElements0.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Element element11 = document8.addClass(""); org.jsoup.nodes.Document document13 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element15 = document13.createElement("#document"); boolean boolean16 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document13); org.jsoup.nodes.Element element18 = document13.toggleClass("#doctype"); org.jsoup.select.Elements elements20 = element18.getElementsMatchingOwnText("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str24 = org.jsoup.Jsoup.clean("", "#data", whitelist23); org.jsoup.safety.Cleaner cleaner25 = new org.jsoup.safety.Cleaner(whitelist23); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText27 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner31 = new org.jsoup.safety.Cleaner(whitelist28); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document35 = document34.clone(); org.jsoup.nodes.Node node37 = document35.removeAttr("#doctype"); org.jsoup.nodes.Document document38 = cleaner31.clean(document35); org.jsoup.nodes.Attributes attributes39 = document38.attributes(); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document47 = document46.clone(); org.jsoup.nodes.Node node49 = document47.removeAttr("#doctype"); org.jsoup.nodes.Document document50 = cleaner43.clean(document47); org.jsoup.nodes.Attributes attributes51 = document50.attributes(); boolean boolean52 = containsOwnText27.matches((org.jsoup.nodes.Element) document38, (org.jsoup.nodes.Element) document50); boolean boolean53 = cleaner25.isValid(document38); boolean boolean54 = allElements0.matches(element18, (org.jsoup.nodes.Element) document38); org.jsoup.safety.Whitelist whitelist55 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist57 = whitelist55.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner58 = new org.jsoup.safety.Cleaner(whitelist55); org.jsoup.nodes.Document document61 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document62 = document61.clone(); org.jsoup.nodes.Node node64 = document62.removeAttr("#doctype"); org.jsoup.nodes.Document document65 = cleaner58.clean(document62); org.jsoup.nodes.Attributes attributes66 = document65.attributes(); org.jsoup.nodes.Element element67 = document65.head(); org.jsoup.nodes.Document document69 = org.jsoup.Jsoup.parse(".:eq(52)"); java.lang.String str70 = document69.html(); org.jsoup.nodes.Element element72 = document69.prependElement("[^hi!]"); boolean boolean73 = allElements0.matches((org.jsoup.nodes.Element) document65, (org.jsoup.nodes.Element) document69); org.jsoup.nodes.Element element75 = document69.prependText("UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"[hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;!=.:eq(52)]\"UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"[hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;!=.:eq(52)]\"null"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "*" + "'", str1, "*"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "*" + "'", str2, "*"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "*" + "'", str3, "*"); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(node37); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(attributes39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(node49); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(attributes51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(node64); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertNotNull(attributes66); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertNotNull(document69); org.junit.Assert.assertEquals("'" + str70 + "' != '" + "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>" + "'", str70, "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); org.junit.Assert.assertNotNull(element75); }
public void test562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test562"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Attributes attributes5 = whitelist0.getEnforcedAttributes(""); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor6 = attributes5.iterator(); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor7 = attributes5.iterator(); java.lang.String str9 = org.jsoup.helper.StringUtil.join((java.util.Iterator) attributeItor7, "\n<!--:containsOwn(-->"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertNotNull(attributeItor6); org.junit.Assert.assertNotNull(attributeItor7); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); }
public void test563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test563"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.select.Elements elements10 = document8.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements12 = document8.getElementsByAttribute("#document"); org.jsoup.select.Elements elements15 = document8.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document20 = document19.clone(); org.jsoup.nodes.Element element22 = document19.addClass(""); java.lang.String str23 = document19.toString(); org.jsoup.nodes.Element element25 = document19.text(".#document"); org.jsoup.nodes.Document.QuirksMode quirksMode26 = document19.quirksMode(); org.jsoup.nodes.Element element28 = document19.appendElement("#doctype=\"\""); org.jsoup.nodes.Document document29 = cleaner4.clean(document19); document29.setBaseUri("  "); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str23, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + quirksMode26 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode26.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(document29); }
public void test564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test564"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Node node11 = document9.removeAttr("#doctype"); org.jsoup.nodes.Document document12 = cleaner5.clean(document9); org.jsoup.nodes.Attributes attributes13 = document12.attributes(); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner17 = new org.jsoup.safety.Cleaner(whitelist14); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document21 = document20.clone(); org.jsoup.nodes.Node node23 = document21.removeAttr("#doctype"); org.jsoup.nodes.Document document24 = cleaner17.clean(document21); org.jsoup.nodes.Attributes attributes25 = document24.attributes(); boolean boolean26 = containsOwnText1.matches((org.jsoup.nodes.Element) document12, (org.jsoup.nodes.Element) document24); org.jsoup.nodes.Element element28 = document12.val(" text=\"\""); java.lang.String str29 = document12.nodeName(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element31 = document12.after(""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(node11); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(attributes13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(node23); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(attributes25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "#document" + "'", str29, "#document"); }
public void test565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test565"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Attribute attribute21 = attribute16.clone(); java.lang.String str23 = attribute21.setValue(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); java.lang.String str24 = attribute21.toString(); java.lang.String str25 = attribute21.getKey(); java.lang.String str27 = attribute21.setValue(""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(attribute21); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\" &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;\"" + "'", str24, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\" &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;\""); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str25, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + " <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"" + "'", str27, " <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); }
public void test566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test566"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element17 = document16.body(); java.lang.String str18 = document16.toString(); org.jsoup.nodes.Document document19 = cleaner3.clean(document16); java.util.regex.Pattern pattern21 = null; org.jsoup.select.Elements elements22 = document16.getElementsByAttributeValueMatching(":matchesown(null=\"#document\"", pattern21); org.jsoup.nodes.Node node23 = document16.clone(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(elements22); org.junit.Assert.assertNotNull(node23); }
public void test567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test567"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element17 = document16.body(); java.lang.String str18 = document16.toString(); org.jsoup.nodes.Document document19 = cleaner3.clean(document16); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner23 = new org.jsoup.safety.Cleaner(whitelist20); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document27 = document26.clone(); org.jsoup.nodes.Node node29 = document27.removeAttr("#doctype"); org.jsoup.nodes.Document document30 = cleaner23.clean(document27); java.lang.String str31 = document27.outerHtml(); org.jsoup.nodes.Node node33 = document27.removeAttr(":matchesown(null=\"#document\""); boolean boolean34 = cleaner3.isValid(document27); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting37 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray42 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42); org.jsoup.nodes.Element element45 = document40.classNames((java.util.Set<java.lang.String>) strSet43); java.lang.String str46 = document40.nodeName(); org.jsoup.select.Elements elements48 = document40.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document51 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document52 = document51.clone(); org.jsoup.nodes.Element element54 = document51.addClass(""); org.jsoup.nodes.Element element55 = document40.appendChild((org.jsoup.nodes.Node) document51); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str59 = document58.val(); org.jsoup.nodes.Element element61 = document58.append("#document"); boolean boolean62 = attributeWithValueStarting37.matches((org.jsoup.nodes.Element) document40, element61); org.jsoup.nodes.Document.QuirksMode quirksMode63 = document40.quirksMode(); java.lang.String str64 = document40.toString(); org.jsoup.nodes.Document document65 = cleaner3.clean(document40); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(node29); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str31, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(node33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#document" + "'", str46, "#document"); org.junit.Assert.assertNotNull(elements48); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, ""); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertTrue("'" + quirksMode63 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode63.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str64, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertNotNull(document65); }
public void test568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test568"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document5 = document4.clone(); org.jsoup.nodes.Attribute attribute8 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute8.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str11 = attribute8.getKey(); attribute8.setKey("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean14 = whitelist0.isSafeAttribute(":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", (org.jsoup.nodes.Element) document5, attribute8); org.jsoup.nodes.Element element15 = document5.empty(); org.jsoup.nodes.Node node16 = null; // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element17 = document5.prependChild(node16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(element15); }
public void test569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test569"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Attributes attributes5 = whitelist0.getEnforcedAttributes(""); boolean boolean7 = attributes5.equals((java.lang.Object) (byte) -1); java.lang.String str8 = attributes5.toString(); int int9 = attributes5.size(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test570"); org.jsoup.nodes.Attribute attribute2 = new org.jsoup.nodes.Attribute("#doctype", ""); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist3); boolean boolean7 = attribute2.equals((java.lang.Object) cleaner6); org.jsoup.helper.Validate.notNull((java.lang.Object) cleaner6); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parseBodyFragment("hi!:matchesOwn(null"); org.jsoup.select.Elements elements12 = document10.getElementsByAttributeStarting("[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.jsoup.nodes.Document document14 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element16 = document14.createElement("#document"); org.jsoup.nodes.Document document17 = document14.clone(); java.lang.String str18 = document14.nodeName(); boolean boolean19 = document10.equals((java.lang.Object) document14); java.lang.String str20 = document10.id(); boolean boolean21 = cleaner6.isValid(document10); java.lang.String str22 = document10.tagName(); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "#document" + "'", str18, "#document"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#root" + "'", str22, "#root"); }
public void test571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test571"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); boolean boolean43 = org.jsoup.Jsoup.isValid("", whitelist40); java.lang.String[] strArray49 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist50 = whitelist40.addTags(strArray49); org.jsoup.safety.Whitelist whitelist51 = whitelist1.addAttributes("[^hi!]", strArray49); org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist56 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str57 = org.jsoup.Jsoup.clean("", "#data", whitelist56); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.basic(); boolean boolean60 = org.jsoup.Jsoup.isValid("hi!", whitelist59); java.lang.String[] strArray68 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist69 = whitelist59.addProtocols(".#document", "#doctype=\"\"", strArray68); org.jsoup.safety.Whitelist whitelist70 = whitelist56.addTags(strArray68); org.jsoup.safety.Whitelist whitelist71 = whitelist53.addTags(strArray68); org.jsoup.safety.Whitelist whitelist72 = whitelist51.addAttributes("[^:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", strArray68); org.jsoup.safety.Cleaner cleaner73 = new org.jsoup.safety.Cleaner(whitelist72); org.jsoup.safety.Whitelist whitelist75 = whitelist72.preserveRelativeLinks(true); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, ""); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist75); }
public void test572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test572"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element17 = document16.body(); java.lang.String str18 = document16.toString(); org.jsoup.nodes.Document document19 = cleaner3.clean(document16); java.lang.String str20 = document16.id(); java.lang.String str21 = document16.id(); java.lang.String str22 = document16.val(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, ""); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); }
public void test573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test573"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str9 = document8.val(); java.util.List<org.jsoup.nodes.Node> nodeList11 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document8, "#document"); java.lang.String str12 = document8.baseUri(); org.jsoup.nodes.Element element14 = document8.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements15 = document8.parents(); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document16.outputSettings(); java.lang.String str18 = document16.val(); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str23 = document22.val(); java.util.List<org.jsoup.nodes.Node> nodeList25 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document22, "#document"); java.lang.String str26 = document22.baseUri(); org.jsoup.nodes.Element element28 = document22.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document.OutputSettings outputSettings29 = document22.outputSettings(); org.jsoup.nodes.Document.QuirksMode quirksMode30 = null; org.jsoup.nodes.Document document31 = document22.quirksMode(quirksMode30); java.lang.String str32 = document31.className(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element33 = document16.after((org.jsoup.nodes.Node) document31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(nodeList11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(nodeList25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!"); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + " <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str32, " <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); }
public void test574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test574"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str7 = org.jsoup.Jsoup.clean("", "#data", whitelist6); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basic(); boolean boolean10 = org.jsoup.Jsoup.isValid("hi!", whitelist9); java.lang.String[] strArray18 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist19 = whitelist9.addProtocols(".#document", "#doctype=\"\"", strArray18); org.jsoup.safety.Whitelist whitelist20 = whitelist6.addTags(strArray18); org.jsoup.safety.Whitelist whitelist21 = whitelist3.addTags(strArray18); boolean boolean22 = org.jsoup.Jsoup.isValid("#doctype", whitelist3); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(false); boolean boolean29 = org.jsoup.Jsoup.isValid("", whitelist26); java.lang.String[] strArray35 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist36 = whitelist26.addTags(strArray35); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray35); org.jsoup.safety.Whitelist whitelist38 = whitelist3.addProtocols("hi! hi! #comment", "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\":contains(&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", strArray35); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist47 = whitelist45.preserveRelativeLinks(false); boolean boolean48 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist45); org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.basic(); boolean boolean51 = org.jsoup.Jsoup.isValid("hi!", whitelist50); java.lang.String[] strArray59 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist60 = whitelist50.addProtocols(".#document", "#doctype=\"\"", strArray59); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray59, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray59); org.jsoup.safety.Whitelist whitelist64 = whitelist45.addTags(strArray59); org.jsoup.safety.Whitelist whitelist65 = whitelist40.addTags(strArray59); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray59); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray59, "hi!  hi! =&quot;&quot;"); org.jsoup.safety.Whitelist whitelist69 = whitelist3.addAttributes("#<html> <head></head> <body> hi! </body> </html>", strArray59); java.lang.String str70 = org.jsoup.Jsoup.clean("<#root>\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n <#root>\n <html>\n  <head></head>\n  <body>\n  hi!\n  </body>\n </html>#document\n </#root>\n</#root>\n<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "[#document$=<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>]", whitelist69); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertEquals("'" + str70 + "' != '" + "&lt;#root&gt;  hi!  &lt;#root&gt;  hi! #document   hi!" + "'", str70, "&lt;#root&gt;  hi!  &lt;#root&gt;  hi! #document   hi!"); }
public void test575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test575"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray4 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4); org.jsoup.nodes.Element element7 = document2.classNames((java.util.Set<java.lang.String>) strSet5); java.lang.String str8 = document2.nodeName(); org.jsoup.select.Elements elements10 = document2.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Element element16 = document13.addClass(""); org.jsoup.nodes.Element element17 = document2.appendChild((org.jsoup.nodes.Node) document13); org.jsoup.nodes.Element element19 = document13.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Element element25 = document22.addClass(""); java.lang.String str26 = document22.toString(); org.jsoup.nodes.Element element28 = document22.text(".#document"); org.jsoup.nodes.Node node29 = element19.after((org.jsoup.nodes.Node) document22); org.jsoup.nodes.Element element31 = element19.prependText("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str35 = org.jsoup.Jsoup.clean("", "#data", whitelist34); org.jsoup.safety.Cleaner cleaner36 = new org.jsoup.safety.Cleaner(whitelist34); org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str41 = document40.val(); java.util.List<org.jsoup.nodes.Node> nodeList43 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document40, "#document"); java.lang.String str44 = document40.baseUri(); org.jsoup.nodes.Element element46 = document40.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements47 = document40.parents(); org.jsoup.nodes.Document document48 = cleaner36.clean(document40); boolean boolean49 = element31.equals((java.lang.Object) cleaner36); org.jsoup.nodes.Element element50 = element31.clone(); org.jsoup.select.Elements elements53 = element50.getElementsByAttributeValueMatching("\n<!--<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"-->", "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); org.jsoup.nodes.Element element55 = element50.prependElement("[:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>$=<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>]"); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str59 = document58.val(); org.jsoup.nodes.Element element61 = document58.append("#document"); java.lang.String str62 = element61.nodeName(); org.jsoup.select.Elements elements64 = element61.getElementsMatchingOwnText("#root"); element55.replaceWith((org.jsoup.nodes.Node) element61); org.jsoup.nodes.Element element66 = element61.previousElementSibling(); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#document" + "'", str8, "#document"); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str26, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(node29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(nodeList43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!"); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(elements47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(elements53); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, ""); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "#document" + "'", str62, "#document"); org.junit.Assert.assertNotNull(elements64); org.junit.Assert.assertNull(element66); }
public void test576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test576"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basic(); boolean boolean6 = org.jsoup.Jsoup.isValid("hi!", whitelist5); java.lang.String[] strArray14 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist15 = whitelist5.addProtocols(".#document", "#doctype=\"\"", strArray14); org.jsoup.safety.Whitelist whitelist16 = whitelist2.addTags(strArray14); boolean boolean18 = whitelist16.isSafeTag("<html>\n <head>\n <title>#document</title>\n </head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Evaluator.AttributeStarting attributeStarting21 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray29 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29); org.jsoup.nodes.Element element32 = document27.classNames((java.util.Set<java.lang.String>) strSet30); document27.title("#document"); boolean boolean35 = attributeStarting21.matches((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document27); java.lang.String str36 = document24.id(); org.jsoup.select.Elements elements38 = document24.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements40 = document24.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute43 = org.jsoup.nodes.Attribute.createFromEncoded(".:eq(52)", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray48 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48); org.jsoup.nodes.Element element51 = document46.classNames((java.util.Set<java.lang.String>) strSet49); java.lang.String str52 = document46.nodeName(); org.jsoup.select.Elements elements54 = document46.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document58 = document57.clone(); org.jsoup.nodes.Element element60 = document57.addClass(""); org.jsoup.nodes.Element element61 = document46.appendChild((org.jsoup.nodes.Node) document57); org.jsoup.nodes.Element element63 = document57.removeClass("#doctype=\"\""); java.util.Set<java.lang.String> strSet64 = document57.classNames(); boolean boolean65 = attribute43.equals((java.lang.Object) strSet64); java.lang.String str66 = attribute43.getKey(); boolean boolean67 = whitelist16.isSafeAttribute("", (org.jsoup.nodes.Element) document24, attribute43); org.jsoup.select.Elements elements68 = document24.children(); java.util.function.UnaryOperator<org.jsoup.nodes.Element> elementUnaryOperator69 = null; // The following exception was thrown during execution in test generation try { elements68.replaceAll(elementUnaryOperator69); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertNotNull(elements38); org.junit.Assert.assertNotNull(elements40); org.junit.Assert.assertNotNull(attribute43); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "#document" + "'", str52, "#document"); org.junit.Assert.assertNotNull(elements54); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(strSet64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertEquals("'" + str66 + "' != '" + ".:eq(52)" + "'", str66, ".:eq(52)"); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertNotNull(elements68); }
public void test577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test577"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.indentAmount((int) '4'); java.nio.charset.Charset charset6 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); int int10 = outputSettings9.indentAmount(); java.nio.charset.Charset charset11 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.charset(charset11); java.nio.charset.Charset[] charsetArray13 = new java.nio.charset.Charset[] { charset11 }; java.util.LinkedList<java.nio.charset.Charset> charsetList14 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList14, charsetArray13); java.nio.charset.Charset charset16 = charsetList14.pop(); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basic(); boolean boolean19 = org.jsoup.Jsoup.isValid("hi!", whitelist18); java.lang.String[] strArray27 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist28 = whitelist18.addProtocols(".#document", "#doctype=\"\"", strArray27); org.jsoup.safety.Cleaner cleaner29 = new org.jsoup.safety.Cleaner(whitelist18); boolean boolean30 = charsetList14.contains((java.lang.Object) whitelist18); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan33 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (byte) 1); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element36 = document35.body(); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element39 = document38.body(); boolean boolean40 = indexGreaterThan33.matches(element36, (org.jsoup.nodes.Element) document38); org.jsoup.nodes.Attribute attribute43 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute43.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str46 = attribute43.getKey(); java.lang.String str47 = attribute43.html(); boolean boolean48 = whitelist18.isSafeAttribute("#doctype=\"\"", element36, attribute43); attribute43.setKey("hi!"); attribute43.setKey("<html>\n <head>\n <title>[  hi!  &amp;lt;#root class=&amp;quot;&amp;quot;&amp;gt;  hi!  !=#doctype=&amp;quot;&amp;quot;]</title>\n </head> \n <body>\n  hi! \n </body>\n</html>"); java.lang.String str53 = attribute43.getValue(); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(charset6); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charsetArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str46, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"" + "'", str47, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, ""); }
public void test578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test578"); org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) '#'); org.jsoup.select.Evaluator.ContainsText containsText3 = new org.jsoup.select.Evaluator.ContainsText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str4 = containsText3.toString(); org.jsoup.nodes.Element element5 = null; org.jsoup.nodes.Document document7 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element9 = document7.createElement("#document"); org.jsoup.nodes.Document document10 = document7.clone(); java.lang.String str11 = document10.nodeName(); org.jsoup.nodes.Element element13 = document10.tagName("#doctype"); boolean boolean14 = containsText3.matches(element5, element13); java.lang.String str15 = element13.val(); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str19 = document18.val(); org.jsoup.select.Elements elements21 = document18.getElementsContainingText("#doctype"); java.lang.String str22 = document18.baseUri(); org.jsoup.nodes.Element element24 = document18.appendText("#document"); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray29 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29); org.jsoup.nodes.Element element32 = document27.classNames((java.util.Set<java.lang.String>) strSet30); java.lang.String str33 = document27.nodeName(); org.jsoup.select.Elements elements35 = document27.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document39 = document38.clone(); org.jsoup.nodes.Element element41 = document38.addClass(""); org.jsoup.nodes.Element element42 = document27.appendChild((org.jsoup.nodes.Node) document38); org.jsoup.nodes.Element element44 = document38.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document48 = document47.clone(); org.jsoup.nodes.Element element50 = document47.addClass(""); java.lang.String str51 = document47.toString(); org.jsoup.nodes.Element element53 = document47.text(".#document"); org.jsoup.nodes.Node node54 = element44.after((org.jsoup.nodes.Node) document47); org.jsoup.nodes.Element element56 = element44.html("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); org.jsoup.nodes.Element element57 = element24.appendChild((org.jsoup.nodes.Node) element56); org.jsoup.nodes.Element element58 = element57.empty(); boolean boolean59 = indexLessThan1.matches(element13, element58); java.lang.String str60 = indexLessThan1.toString(); org.jsoup.parser.Tag tag62 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean63 = tag62.canContainBlock(); boolean boolean64 = tag62.isEmpty(); org.jsoup.safety.Whitelist whitelist66 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes68 = whitelist66.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList69 = attributes68.asList(); org.jsoup.nodes.Element element70 = new org.jsoup.nodes.Element(tag62, "hi! =&quot;&quot;", attributes68); org.jsoup.nodes.Document document72 = new org.jsoup.nodes.Document("#document"); boolean boolean74 = document72.hasClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\":eq(52)\""); boolean boolean75 = indexLessThan1.matches(element70, (org.jsoup.nodes.Element) document72); org.jsoup.nodes.Document document76 = document72.ownerDocument(); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str4, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#document" + "'", str11, "#document"); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertNotNull(elements21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!"); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "#document" + "'", str33, "#document"); org.junit.Assert.assertNotNull(elements35); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str51, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(node54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true); org.junit.Assert.assertEquals("'" + str60 + "' != '" + ":lt(35)" + "'", str60, ":lt(35)"); org.junit.Assert.assertNotNull(tag62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(attributes68); org.junit.Assert.assertNotNull(attributeList69); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true); org.junit.Assert.assertNotNull(document76); }
public void test579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test579"); org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 10); java.lang.String str2 = indexLessThan1.toString(); java.lang.String str3 = indexLessThan1.toString(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element7 = document6.body(); java.lang.String str8 = element7.ownText(); org.jsoup.nodes.DataNode dataNode11 = org.jsoup.nodes.DataNode.createFromEncoded("", ":eq(52)"); org.jsoup.nodes.DataNode dataNode13 = dataNode11.setWholeData(""); java.lang.String str14 = dataNode13.getWholeData(); element7.replaceWith((org.jsoup.nodes.Node) dataNode13); org.jsoup.parser.Tag tag16 = element7.tag(); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#doctype"); org.jsoup.select.Evaluator.IndexEquals indexEquals20 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray25 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25); org.jsoup.nodes.Element element28 = document23.classNames((java.util.Set<java.lang.String>) strSet26); org.jsoup.nodes.Document document30 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); org.jsoup.nodes.Element element39 = document30.appendChild((org.jsoup.nodes.Node) element38); boolean boolean40 = indexEquals20.matches(element28, (org.jsoup.nodes.Element) document30); org.jsoup.nodes.Document.QuirksMode quirksMode41 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document42 = document30.quirksMode(quirksMode41); org.jsoup.nodes.Document document43 = document18.quirksMode(quirksMode41); java.util.Map<java.lang.String, java.lang.String> strMap44 = document18.dataset(); org.jsoup.nodes.Element element46 = document18.prepend(""); boolean boolean47 = indexLessThan1.matches(element7, element46); java.lang.String str48 = indexLessThan1.toString(); org.jsoup.nodes.Element element49 = null; org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist52 = whitelist50.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner53 = new org.jsoup.safety.Cleaner(whitelist50); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray58 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58); org.jsoup.nodes.Element element61 = document56.classNames((java.util.Set<java.lang.String>) strSet59); java.lang.String str62 = document56.nodeName(); java.lang.String str63 = document56.html(); boolean boolean64 = cleaner53.isValid(document56); boolean boolean65 = indexLessThan1.matches(element49, (org.jsoup.nodes.Element) document56); org.jsoup.nodes.Document.OutputSettings outputSettings66 = document56.outputSettings(); // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements69 = document56.getElementsByAttributeValueEnding("<html>\n <head></head>\n <body>\n :matchesOwn(null\n </body>\n</html>", ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":lt(10)" + "'", str2, ":lt(10)"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":lt(10)" + "'", str3, ":lt(10)"); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi! hi!" + "'", str8, "hi! hi!"); org.junit.Assert.assertNotNull(dataNode11); org.junit.Assert.assertNotNull(dataNode13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertNotNull(tag16); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + quirksMode41 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode41.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(strMap44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertEquals("'" + str48 + "' != '" + ":lt(10)" + "'", str48, ":lt(10)"); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "#document" + "'", str62, "#document"); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str63, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true); org.junit.Assert.assertNotNull(outputSettings66); }
public void test580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test580"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist5); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basic(); boolean boolean11 = org.jsoup.Jsoup.isValid("hi!", whitelist10); java.lang.String[] strArray19 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist20 = whitelist10.addProtocols(".#document", "#doctype=\"\"", strArray19); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray19, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray19); org.jsoup.safety.Whitelist whitelist24 = whitelist5.addTags(strArray19); org.jsoup.safety.Whitelist whitelist25 = whitelist0.addTags(strArray19); org.jsoup.select.Evaluator.Id id28 = new org.jsoup.select.Evaluator.Id("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document32 = document31.clone(); org.jsoup.nodes.Element element34 = document31.addClass(""); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray39 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39); org.jsoup.nodes.Element element42 = document37.classNames((java.util.Set<java.lang.String>) strSet40); java.lang.String str43 = document37.nodeName(); org.jsoup.select.Elements elements45 = document37.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document49 = document48.clone(); org.jsoup.nodes.Element element51 = document48.addClass(""); org.jsoup.nodes.Element element52 = document37.appendChild((org.jsoup.nodes.Node) document48); boolean boolean53 = id28.matches(element34, element52); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document57 = document56.clone(); org.jsoup.nodes.Element element59 = document56.addClass(""); java.lang.String str60 = document56.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting62 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document65 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document68 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray70 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70); org.jsoup.nodes.Element element73 = document68.classNames((java.util.Set<java.lang.String>) strSet71); document68.title("#document"); boolean boolean76 = attributeStarting62.matches((org.jsoup.nodes.Element) document65, (org.jsoup.nodes.Element) document68); java.lang.String str77 = document65.id(); org.jsoup.select.Elements elements79 = document65.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements81 = document65.getElementsByIndexGreaterThan((int) (short) 10); boolean boolean82 = id28.matches((org.jsoup.nodes.Element) document56, (org.jsoup.nodes.Element) document65); java.lang.String str83 = document56.data(); org.jsoup.select.Elements elements85 = document56.getElementsByAttribute(":eq(10)"); org.jsoup.nodes.Attribute attribute88 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute89 = attribute88.clone(); java.lang.String str90 = attribute88.getKey(); java.lang.String str91 = attribute88.html(); java.lang.String str92 = attribute88.html(); boolean boolean93 = whitelist25.isSafeAttribute("#[text=\"\"$=hi!  public &quot;#data&quot; &quot;#doctype&quot;&gt;]", (org.jsoup.nodes.Element) document56, attribute88); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "#document" + "'", str43, "#document"); org.junit.Assert.assertNotNull(elements45); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str60, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertNotNull(document68); org.junit.Assert.assertNotNull(strArray70); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, ""); org.junit.Assert.assertNotNull(elements79); org.junit.Assert.assertNotNull(elements81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, ""); org.junit.Assert.assertNotNull(elements85); org.junit.Assert.assertNotNull(attribute88); org.junit.Assert.assertNotNull(attribute89); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str90, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"" + "'", str91, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\""); org.junit.Assert.assertEquals("'" + str92 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"" + "'", str92, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\""); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); }
public void test581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test581"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); java.nio.charset.Charset[] charsetArray4 = new java.nio.charset.Charset[] { charset3 }; java.util.LinkedList<java.nio.charset.Charset> charsetList5 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList5, charsetArray4); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); java.nio.charset.Charset charset10 = outputSettings7.charset(); boolean boolean11 = charsetList5.add(charset10); java.lang.Object obj12 = null; boolean boolean13 = charsetList5.removeLastOccurrence(obj12); java.nio.charset.Charset charset14 = charsetList5.pollFirst(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList15 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.prettyPrint(false); java.nio.charset.Charset charset19 = outputSettings18.charset(); charsetList15.addFirst(charset19); java.util.Iterator<java.nio.charset.Charset> charsetItor21 = charsetList15.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList22 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.prettyPrint(false); java.nio.charset.Charset charset26 = outputSettings25.charset(); charsetList22.addFirst(charset26); boolean boolean28 = charsetList15.offerFirst(charset26); int int29 = charsetList15.size(); java.nio.charset.Charset charset30 = charsetList15.peekLast(); charsetList5.addFirst(charset30); java.nio.charset.Charset charset32 = charsetList5.poll(); org.jsoup.safety.Whitelist whitelist34 = new org.jsoup.safety.Whitelist(); boolean boolean35 = org.jsoup.Jsoup.isValid("", whitelist34); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray41 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41); org.jsoup.nodes.Element element44 = document39.classNames((java.util.Set<java.lang.String>) strSet42); org.jsoup.nodes.Element element46 = element44.prepend("#document"); org.jsoup.nodes.Attribute attribute49 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute49.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str52 = attribute49.getKey(); boolean boolean53 = whitelist34.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element46, attribute49); boolean boolean54 = charsetList5.remove((java.lang.Object) boolean53); int int55 = charsetList5.size(); java.nio.charset.Charset charset56 = charsetList5.element(); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(charsetArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(charset14); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charset19); org.junit.Assert.assertNotNull(charsetItor21); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(charset26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2); org.junit.Assert.assertNotNull(charset30); org.junit.Assert.assertNotNull(charset32); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str52, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1); org.junit.Assert.assertNotNull(charset56); }
public void test582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test582"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner10 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Node node16 = document14.removeAttr("#doctype"); org.jsoup.nodes.Document document17 = cleaner10.clean(document14); org.jsoup.nodes.Attributes attributes18 = document17.attributes(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Node node28 = document26.removeAttr("#doctype"); org.jsoup.nodes.Document document29 = cleaner22.clean(document26); org.jsoup.nodes.Attributes attributes30 = document29.attributes(); boolean boolean31 = containsOwnText6.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document29); boolean boolean32 = cleaner4.isValid(document17); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean37 = document35.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document38 = cleaner4.clean(document35); boolean boolean40 = document38.hasClass("[hi!, <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); boolean boolean42 = document38.hasAttr("[hi! hi!*=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"]"); org.jsoup.nodes.Element element45 = document38.attr(" text=\"\" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;=&quot;&quot;\"", "hi! hi!#document hi!"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(node16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(attributes18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(node28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(element45); }
public void test583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test583"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Attribute attribute21 = attribute16.clone(); java.lang.String str23 = attribute16.setValue("#\n#document"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(attribute21); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); }
public void test584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test584"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); boolean boolean13 = whitelist1.isSafeTag(""); boolean boolean15 = whitelist1.isSafeTag(":containsOwn(hi!:matchesown(null"); boolean boolean17 = whitelist1.isSafeTag("UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"UTF-8"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test585"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str8 = org.jsoup.Jsoup.clean("", "#data", whitelist7); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basic(); boolean boolean11 = org.jsoup.Jsoup.isValid("hi!", whitelist10); java.lang.String[] strArray19 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist20 = whitelist10.addProtocols(".#document", "#doctype=\"\"", strArray19); org.jsoup.safety.Whitelist whitelist21 = whitelist7.addTags(strArray19); org.jsoup.safety.Whitelist whitelist22 = whitelist4.addTags(strArray19); boolean boolean23 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist22); org.jsoup.safety.Whitelist whitelist27 = whitelist22.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist29 = whitelist22.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist36 = whitelist34.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.basic(); boolean boolean40 = org.jsoup.Jsoup.isValid("hi!", whitelist39); java.lang.String[] strArray48 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist49 = whitelist39.addProtocols(".#document", "#doctype=\"\"", strArray48); org.jsoup.safety.Whitelist whitelist50 = whitelist36.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray48); org.jsoup.safety.Whitelist whitelist51 = whitelist32.addAttributes(":containsOwn(hi!:matchesown(null", strArray48); boolean boolean52 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray48); org.jsoup.safety.Whitelist whitelist53 = whitelist29.addAttributes(":containsOwn(hi!:matchesown(null", strArray48); java.lang.String str54 = org.jsoup.Jsoup.clean(":containsOwn(hi!:matchesown(null", whitelist29); boolean boolean56 = whitelist29.isSafeTag("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">"); org.jsoup.safety.Whitelist whitelist60 = whitelist29.addEnforcedAttribute("##text", ":containsOwn([^hi!]", "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); java.lang.String str61 = org.jsoup.Jsoup.clean("<head></head>\n<body>\n #document:contains(  hi! hi!:contains(  hi! \n</body>", "#:gt(1)", whitelist29); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + ":containsOwn(hi!:matchesown(null" + "'", str54, ":containsOwn(hi!:matchesown(null"); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "#document:contains( hi! hi!:contains( hi!" + "'", str61, "#document:contains( hi! hi!:contains( hi!"); }
public void test586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test586"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist14 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray12); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.basic(); boolean boolean26 = org.jsoup.Jsoup.isValid("hi!", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addProtocols(".#document", "#doctype=\"\"", strArray34); org.jsoup.safety.Whitelist whitelist36 = whitelist22.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray34); org.jsoup.safety.Whitelist whitelist37 = whitelist18.addAttributes(":containsOwn(hi!:matchesown(null", strArray34); org.jsoup.safety.Whitelist whitelist38 = whitelist14.addAttributes(" text=\"\"", strArray34); org.jsoup.nodes.Attributes attributes40 = whitelist38.getEnforcedAttributes(":containsown(hi!:matchesown(null=\"\""); org.jsoup.safety.Whitelist whitelist42 = whitelist38.preserveRelativeLinks(true); org.jsoup.helper.Validate.notNull((java.lang.Object) whitelist38, "<html>\n <head></head>\n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(attributes40); org.junit.Assert.assertNotNull(whitelist42); }
public void test587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test587"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist2); boolean boolean6 = org.jsoup.Jsoup.isValid("", whitelist2); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.safety.Cleaner cleaner8 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist9); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); org.jsoup.nodes.Node node18 = document16.removeAttr("#doctype"); org.jsoup.nodes.Document document19 = cleaner12.clean(document16); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Document document24 = cleaner12.clean(document23); org.jsoup.nodes.Document document25 = cleaner8.clean(document24); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(node18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document25); }
public void test588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test588"); org.jsoup.safety.Whitelist.TagName tagName1 = new org.jsoup.safety.Whitelist.TagName(""); java.lang.String[] strArray5 = new java.lang.String[] { "#document", "hi!", "" }; java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>(); boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5); java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13); boolean boolean16 = strList6.containsAll((java.util.Collection<java.lang.String>) strList14); boolean boolean17 = tagName1.equals((java.lang.Object) strList6); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>(); boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28); boolean boolean31 = strSet23.containsAll((java.util.Collection<java.lang.String>) strList29); java.lang.String str33 = org.jsoup.helper.StringUtil.join((java.util.Collection) strSet23, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean34 = strList6.containsAll((java.util.Collection<java.lang.String>) strSet23); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText36 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist39 = whitelist37.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner40 = new org.jsoup.safety.Cleaner(whitelist37); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document44 = document43.clone(); org.jsoup.nodes.Node node46 = document44.removeAttr("#doctype"); org.jsoup.nodes.Document document47 = cleaner40.clean(document44); org.jsoup.nodes.Attributes attributes48 = document47.attributes(); org.jsoup.safety.Whitelist whitelist49 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist51 = whitelist49.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner52 = new org.jsoup.safety.Cleaner(whitelist49); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document56 = document55.clone(); org.jsoup.nodes.Node node58 = document56.removeAttr("#doctype"); org.jsoup.nodes.Document document59 = cleaner52.clean(document56); org.jsoup.nodes.Attributes attributes60 = document59.attributes(); boolean boolean61 = containsOwnText36.matches((org.jsoup.nodes.Element) document47, (org.jsoup.nodes.Element) document59); org.jsoup.nodes.Document document63 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element65 = document63.createElement("#document"); org.jsoup.nodes.Document document66 = document63.clone(); org.jsoup.select.Elements elements69 = document66.getElementsByAttributeValueMatching("hi!", "\n#document"); boolean boolean70 = document47.equals((java.lang.Object) document66); java.util.Set<java.lang.String> strSet71 = document66.classNames(); boolean boolean72 = strSet23.removeAll((java.util.Collection<java.lang.String>) strSet71); org.junit.Assert.assertNotNull(strArray5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(node46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(attributes48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(node58); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(attributes60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(elements69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertNotNull(strSet71); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true); }
public void test589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test589"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element17 = document16.body(); java.lang.String str18 = document16.toString(); org.jsoup.nodes.Document document19 = cleaner3.clean(document16); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner23 = new org.jsoup.safety.Cleaner(whitelist20); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document27 = document26.clone(); org.jsoup.nodes.Node node29 = document27.removeAttr("#doctype"); org.jsoup.nodes.Document document30 = cleaner23.clean(document27); java.lang.String str31 = document27.outerHtml(); org.jsoup.nodes.Node node33 = document27.removeAttr(":matchesown(null=\"#document\""); boolean boolean34 = cleaner3.isValid(document27); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parseBodyFragment("hi!:matchesOwn(null"); org.jsoup.select.Elements elements38 = document36.getElementsByAttributeStarting("[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.jsoup.nodes.Document document40 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element42 = document40.createElement("#document"); org.jsoup.nodes.Document document43 = document40.clone(); java.lang.String str44 = document40.nodeName(); boolean boolean45 = document36.equals((java.lang.Object) document40); org.jsoup.nodes.Document document49 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str50 = document49.val(); java.util.List<org.jsoup.nodes.Node> nodeList52 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document49, "#document"); org.jsoup.nodes.Document.QuirksMode quirksMode53 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document54 = document49.quirksMode(quirksMode53); org.jsoup.nodes.Document document55 = document36.quirksMode(quirksMode53); org.jsoup.nodes.Document document56 = cleaner3.clean(document55); org.jsoup.nodes.Document.OutputSettings outputSettings57 = document55.outputSettings(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(node29); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str31, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(node33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(elements38); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "#document" + "'", str44, "#document"); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertNotNull(nodeList52); org.junit.Assert.assertTrue("'" + quirksMode53 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode53.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(outputSettings57); }
public void test590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test590"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); int int12 = document10.siblingIndex(); org.jsoup.nodes.Element element14 = document10.prependElement("[^:containsOwn(hi!]"); org.jsoup.nodes.Node node16 = document10.removeAttr("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(node16); }
public void test591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test591"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element3 = document2.body(); org.jsoup.nodes.Element element5 = element3.before(":contains([#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); boolean boolean7 = element3.hasClass("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); boolean boolean12 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist9); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.basic(); boolean boolean15 = org.jsoup.Jsoup.isValid("hi!", whitelist14); java.lang.String[] strArray23 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist24 = whitelist14.addProtocols(".#document", "#doctype=\"\"", strArray23); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray23, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray23); org.jsoup.safety.Whitelist whitelist28 = whitelist9.addTags(strArray23); boolean boolean29 = element3.equals((java.lang.Object) whitelist28); org.jsoup.nodes.Element element31 = element3.after("<[[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]!=.#document]></[[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]!=.#document]>\n<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root>\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>#document\n</#root>"); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(element3); org.junit.Assert.assertNotNull(element5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(element31); }
public void test592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test592"); java.lang.String[] strArray3 = new java.lang.String[] { "#document", "hi!", "" }; java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>(); boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3); java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11); boolean boolean14 = strList4.containsAll((java.util.Collection<java.lang.String>) strList12); java.lang.Object obj15 = null; boolean boolean16 = strList4.equals(obj15); java.util.stream.Stream<java.lang.String> strStream17 = strList4.parallelStream(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist23 = whitelist21.preserveRelativeLinks(false); boolean boolean24 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist21); java.lang.String str25 = org.jsoup.Jsoup.clean(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist21); java.lang.String str26 = org.jsoup.Jsoup.clean("", whitelist21); org.jsoup.safety.Cleaner cleaner27 = new org.jsoup.safety.Cleaner(whitelist21); org.jsoup.nodes.Attributes attributes29 = whitelist21.getEnforcedAttributes(""); boolean boolean30 = strList4.equals((java.lang.Object) whitelist21); org.jsoup.nodes.Attributes attributes32 = whitelist21.getEnforcedAttributes("[[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]!=.#document]"); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(strStream17); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi! =&quot;&quot;" + "'", str25, "hi! =&quot;&quot;"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, ""); org.junit.Assert.assertNotNull(attributes29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(attributes32); }
public void test593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test593"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.indentAmount((int) '4'); java.nio.charset.Charset charset6 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); int int10 = outputSettings9.indentAmount(); java.nio.charset.Charset charset11 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.charset(charset11); java.nio.charset.Charset[] charsetArray13 = new java.nio.charset.Charset[] { charset11 }; java.util.LinkedList<java.nio.charset.Charset> charsetList14 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList14, charsetArray13); java.nio.charset.Charset charset16 = charsetList14.pop(); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basic(); boolean boolean19 = org.jsoup.Jsoup.isValid("hi!", whitelist18); java.lang.String[] strArray27 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist28 = whitelist18.addProtocols(".#document", "#doctype=\"\"", strArray27); org.jsoup.safety.Cleaner cleaner29 = new org.jsoup.safety.Cleaner(whitelist18); boolean boolean30 = charsetList14.contains((java.lang.Object) whitelist18); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan33 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (byte) 1); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element36 = document35.body(); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element39 = document38.body(); boolean boolean40 = indexGreaterThan33.matches(element36, (org.jsoup.nodes.Element) document38); org.jsoup.nodes.Attribute attribute43 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute43.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str46 = attribute43.getKey(); java.lang.String str47 = attribute43.html(); boolean boolean48 = whitelist18.isSafeAttribute("#doctype=\"\"", element36, attribute43); boolean boolean49 = element36.isBlock(); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(charset6); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charsetArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str46, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"" + "'", str47, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true); }
public void test594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test594"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Node node11 = document9.removeAttr("#doctype"); org.jsoup.nodes.Document document12 = cleaner5.clean(document9); org.jsoup.nodes.Attributes attributes13 = document12.attributes(); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner17 = new org.jsoup.safety.Cleaner(whitelist14); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document21 = document20.clone(); org.jsoup.nodes.Node node23 = document21.removeAttr("#doctype"); org.jsoup.nodes.Document document24 = cleaner17.clean(document21); org.jsoup.nodes.Attributes attributes25 = document24.attributes(); boolean boolean26 = containsOwnText1.matches((org.jsoup.nodes.Element) document12, (org.jsoup.nodes.Element) document24); org.jsoup.nodes.Element element28 = document12.val(" text=\"\""); org.jsoup.parser.Tag tag29 = document12.tag(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(node11); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(attributes13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(node23); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(attributes25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(tag29); }
public void test595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test595"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList3 = attributes2.asList(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Node node13 = document11.removeAttr("#doctype"); org.jsoup.nodes.Document document14 = cleaner7.clean(document11); org.jsoup.nodes.Attributes attributes15 = document14.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator16 = attributes15.spliterator(); attributes2.addAll(attributes15); java.lang.String str18 = attributes2.html(); org.jsoup.nodes.Attribute attribute21 = new org.jsoup.nodes.Attribute("#doctype", ""); java.lang.String str22 = attribute21.html(); attribute21.setKey("hi!<html> <head></head> <body> hi! </body> </html>"); attributes2.put(attribute21); java.lang.String str26 = attributes2.toString(); org.jsoup.nodes.Attributes attributes27 = attributes2.clone(); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(attributeList3); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(attributeSpliterator16); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#doctype=\"\"" + "'", str22, "#doctype=\"\""); org.junit.Assert.assertEquals("'" + str26 + "' != '" + " hi!<html> <head></head> <body> hi! </body> </html>=\"\"" + "'", str26, " hi!<html> <head></head> <body> hi! </body> </html>=\"\""); org.junit.Assert.assertNotNull(attributes27); }
public void test596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test596"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document3 = document2.clone(); org.jsoup.nodes.Element element5 = document2.addClass(""); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str10 = document9.val(); java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document9, "#document"); java.lang.String str13 = document9.baseUri(); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str17 = document16.val(); org.jsoup.nodes.Element element19 = document16.append("#document"); org.jsoup.nodes.Element element20 = document9.appendChild((org.jsoup.nodes.Node) element19); org.jsoup.nodes.Element element21 = document2.prependChild((org.jsoup.nodes.Node) document9); org.jsoup.nodes.Attributes attributes22 = element21.attributes(); java.lang.String str23 = attributes22.html(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator24 = attributes22.spliterator(); org.jsoup.nodes.Attributes attributes25 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes26 = attributes25.clone(); java.lang.String str27 = attributes26.toString(); attributes22.addAll(attributes26); org.jsoup.safety.Whitelist whitelist29 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes31 = whitelist29.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList32 = attributes31.asList(); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist35 = whitelist33.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner36 = new org.jsoup.safety.Cleaner(whitelist33); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document40 = document39.clone(); org.jsoup.nodes.Node node42 = document40.removeAttr("#doctype"); org.jsoup.nodes.Document document43 = cleaner36.clean(document40); org.jsoup.nodes.Attributes attributes44 = document43.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator45 = attributes44.spliterator(); attributes31.addAll(attributes44); java.util.Map<java.lang.String, java.lang.String> strMap47 = attributes44.dataset(); attributes22.addAll(attributes44); java.lang.String str49 = attributes44.toString(); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(element5); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!"); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + " class=\"\"" + "'", str23, " class=\"\""); org.junit.Assert.assertNotNull(attributeSpliterator24); org.junit.Assert.assertNotNull(attributes26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(attributes31); org.junit.Assert.assertNotNull(attributeList32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(node42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(attributes44); org.junit.Assert.assertNotNull(attributeSpliterator45); org.junit.Assert.assertNotNull(strMap47); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); }
public void test597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test597"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node16 = document6.removeAttr(""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); }
public void test598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test598"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist2); java.lang.String str6 = org.jsoup.Jsoup.clean(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist2); boolean boolean8 = whitelist2.isSafeTag(":gt(6)"); org.jsoup.nodes.Attributes attributes10 = whitelist2.getEnforcedAttributes("<html>\n <head></head>\n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi! =&quot;&quot;" + "'", str6, "hi! =&quot;&quot;"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(attributes10); }
public void test599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test599"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Attributes attributes5 = whitelist0.getEnforcedAttributes(""); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor6 = attributes5.iterator(); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor7 = attributes5.iterator(); java.lang.String str9 = org.jsoup.helper.StringUtil.join((java.util.Iterator) attributeItor7, "<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>\n<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertNotNull(attributeItor6); org.junit.Assert.assertNotNull(attributeItor7); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); }
public void test600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test600"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist2); boolean boolean6 = org.jsoup.Jsoup.isValid("", whitelist2); boolean boolean8 = whitelist2.isSafeTag(":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Evaluator.IndexLessThan indexLessThan11 = new org.jsoup.select.Evaluator.IndexLessThan((int) (byte) -1); java.lang.String str12 = indexLessThan11.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); org.jsoup.nodes.Element element30 = document20.html(""); java.lang.String str32 = document20.absUrl("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document34 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray39 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39); org.jsoup.nodes.Element element42 = document37.classNames((java.util.Set<java.lang.String>) strSet40); org.jsoup.nodes.Element element43 = document34.appendChild((org.jsoup.nodes.Node) element42); org.jsoup.select.Elements elements45 = element43.getElementsByIndexGreaterThan(10); org.jsoup.select.Elements elements47 = element43.getElementsByIndexGreaterThan((int) '4'); boolean boolean48 = indexLessThan11.matches((org.jsoup.nodes.Element) document20, element43); org.jsoup.nodes.Attribute attribute51 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute52 = attribute51.clone(); java.lang.String str53 = attribute52.html(); java.lang.String str54 = attribute52.getKey(); boolean boolean55 = whitelist2.isSafeAttribute("", element43, attribute52); org.jsoup.safety.Cleaner cleaner56 = new org.jsoup.safety.Cleaner(whitelist2); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertEquals("'" + str12 + "' != '" + ":lt(-1)" + "'", str12, ":lt(-1)"); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, ""); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(elements45); org.junit.Assert.assertNotNull(elements47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(attribute51); org.junit.Assert.assertNotNull(attribute52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"" + "'", str53, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\""); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str54, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); }
public void test601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test601"); org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot2 = new org.jsoup.select.Evaluator.AttributeWithValueNot("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#doctype=\"\""); java.lang.String str3 = attributeWithValueNot2.toString(); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting6 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray11 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11); org.jsoup.nodes.Element element14 = document9.classNames((java.util.Set<java.lang.String>) strSet12); java.lang.String str15 = document9.nodeName(); org.jsoup.select.Elements elements17 = document9.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document21 = document20.clone(); org.jsoup.nodes.Element element23 = document20.addClass(""); org.jsoup.nodes.Element element24 = document9.appendChild((org.jsoup.nodes.Node) document20); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str28 = document27.val(); org.jsoup.nodes.Element element30 = document27.append("#document"); boolean boolean31 = attributeWithValueStarting6.matches((org.jsoup.nodes.Element) document9, element30); org.jsoup.nodes.Document.QuirksMode quirksMode32 = document9.quirksMode(); java.lang.String str33 = document9.toString(); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray38 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38); org.jsoup.nodes.Element element41 = document36.classNames((java.util.Set<java.lang.String>) strSet39); java.lang.String str42 = document36.nodeName(); org.jsoup.nodes.Element element43 = document9.prependChild((org.jsoup.nodes.Node) document36); org.jsoup.nodes.Document document45 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray50 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50); org.jsoup.nodes.Element element53 = document48.classNames((java.util.Set<java.lang.String>) strSet51); org.jsoup.nodes.Element element54 = document45.appendChild((org.jsoup.nodes.Node) element53); org.jsoup.nodes.Element element55 = element53.empty(); boolean boolean56 = attributeWithValueNot2.matches(element43, element53); org.jsoup.safety.Whitelist whitelist57 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist59 = whitelist57.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner60 = new org.jsoup.safety.Cleaner(whitelist57); org.jsoup.nodes.Document document63 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray65 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65); org.jsoup.nodes.Element element68 = document63.classNames((java.util.Set<java.lang.String>) strSet66); java.lang.String str69 = document63.nodeName(); java.lang.String str70 = document63.html(); boolean boolean71 = cleaner60.isValid(document63); org.jsoup.nodes.Document document73 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element74 = document73.body(); java.lang.String str75 = document73.toString(); org.jsoup.nodes.Document document76 = cleaner60.clean(document73); java.util.regex.Pattern pattern78 = null; org.jsoup.select.Elements elements79 = document73.getElementsByAttributeValueMatching(":matchesown(null=\"#document\"", pattern78); boolean boolean80 = element43.equals((java.lang.Object) document73); java.lang.String str81 = document73.nodeName(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]" + "'", str3, "[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#document" + "'", str15, "#document"); org.junit.Assert.assertNotNull(elements17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, ""); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + quirksMode32 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode32.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str33, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "#document" + "'", str42, "#document"); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertNotNull(strArray65); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertEquals("'" + str69 + "' != '" + "#document" + "'", str69, "#document"); org.junit.Assert.assertEquals("'" + str70 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str70, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true); org.junit.Assert.assertNotNull(document73); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str75, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document76); org.junit.Assert.assertNotNull(elements79); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false); org.junit.Assert.assertEquals("'" + str81 + "' != '" + "#document" + "'", str81, "#document"); }
public void test602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test602"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Attributes attributes21 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes22 = attributes21.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator23 = attributes21.spliterator(); java.lang.String str25 = attributes21.get("\n#document"); org.jsoup.nodes.Attributes attributes26 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes27 = attributes26.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator28 = attributes26.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap29 = attributes26.dataset(); attributes21.addAll(attributes26); java.lang.String str31 = attributes26.html(); boolean boolean32 = attribute16.equals((java.lang.Object) attributes26); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertNotNull(attributeSpliterator23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertNotNull(attributeSpliterator28); org.junit.Assert.assertNotNull(strMap29); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); }
public void test603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test603"); org.jsoup.select.Evaluator.Attribute attribute1 = new org.jsoup.select.Evaluator.Attribute(":containsOwn(                                                  "); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray6 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6); org.jsoup.nodes.Element element9 = document4.classNames((java.util.Set<java.lang.String>) strSet7); java.lang.String str10 = document4.nodeName(); org.jsoup.select.Elements elements12 = document4.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); org.jsoup.nodes.Element element18 = document15.addClass(""); org.jsoup.nodes.Element element19 = document4.appendChild((org.jsoup.nodes.Node) document15); org.jsoup.nodes.Element element21 = document15.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document25 = document24.clone(); org.jsoup.nodes.Element element27 = document24.addClass(""); java.lang.String str28 = document24.toString(); org.jsoup.nodes.Element element30 = document24.text(".#document"); org.jsoup.nodes.Node node31 = element21.after((org.jsoup.nodes.Node) document24); org.jsoup.nodes.Element element32 = element21.empty(); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document36 = document35.clone(); org.jsoup.nodes.Element element38 = document35.addClass(""); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str43 = document42.val(); java.util.List<org.jsoup.nodes.Node> nodeList45 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document42, "#document"); java.lang.String str46 = document42.baseUri(); org.jsoup.nodes.Document document49 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str50 = document49.val(); org.jsoup.nodes.Element element52 = document49.append("#document"); org.jsoup.nodes.Element element53 = document42.appendChild((org.jsoup.nodes.Node) element52); org.jsoup.nodes.Element element54 = document35.prependChild((org.jsoup.nodes.Node) document42); org.jsoup.nodes.Attributes attributes55 = element54.attributes(); boolean boolean56 = element21.equals((java.lang.Object) element54); org.jsoup.nodes.Element element58 = element21.toggleClass("#&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;"); org.jsoup.safety.Whitelist whitelist60 = org.jsoup.safety.Whitelist.basic(); boolean boolean61 = org.jsoup.Jsoup.isValid("hi!", whitelist60); java.lang.String[] strArray69 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist70 = whitelist60.addProtocols(".#document", "#doctype=\"\"", strArray69); org.jsoup.safety.Cleaner cleaner71 = new org.jsoup.safety.Cleaner(whitelist60); org.jsoup.nodes.Document document74 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document75 = document74.clone(); document75.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean78 = document75.isBlock(); org.jsoup.nodes.Document document79 = cleaner71.clean(document75); org.jsoup.select.Elements elements81 = document79.getElementsByAttribute("UTF-8UTF-8"); org.jsoup.nodes.Document document82 = document79.clone(); boolean boolean83 = attribute1.matches(element21, (org.jsoup.nodes.Element) document82); org.jsoup.nodes.Element element85 = document82.text("<html> <head></head> <body> hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; </body> </html>"); org.jsoup.select.Elements elements88 = document82.getElementsByAttributeValueNot("[:containsown(hi!:matchesown(null=&quot;&quot;*=:lt(10)]", ":containsown(hi!:matchesown(null=&quot;&quot;"); org.jsoup.nodes.Element element90 = document82.prepend(":eq(0)"); org.jsoup.select.Elements elements92 = document82.getElementsByClass(":containsOwn(:containsown(                                                  "); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#document" + "'", str10, "#document"); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str28, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(node31); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, ""); org.junit.Assert.assertNotNull(nodeList45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!"); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(attributes55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNotNull(strArray69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertNotNull(elements81); org.junit.Assert.assertNotNull(document82); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertNotNull(element85); org.junit.Assert.assertNotNull(elements88); org.junit.Assert.assertNotNull(element90); org.junit.Assert.assertNotNull(elements92); }
public void test604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test604"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray4 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4); org.jsoup.nodes.Element element7 = document2.classNames((java.util.Set<java.lang.String>) strSet5); java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>(); boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10); boolean boolean13 = strSet5.containsAll((java.util.Collection<java.lang.String>) strList11); java.util.List<java.lang.String> strList16 = strList11.subList(0, 0); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.safety.Whitelist whitelist20 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes22 = whitelist20.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); boolean boolean28 = org.jsoup.Jsoup.isValid("", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addTags(strArray34); org.jsoup.safety.Whitelist whitelist36 = whitelist20.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray34); org.jsoup.safety.Whitelist whitelist37 = whitelist17.addProtocols(":matchesOwn(null", ":matches(null", strArray34); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist42 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist44 = whitelist42.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.basic(); boolean boolean48 = org.jsoup.Jsoup.isValid("hi!", whitelist47); java.lang.String[] strArray56 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist57 = whitelist47.addProtocols(".#document", "#doctype=\"\"", strArray56); org.jsoup.safety.Whitelist whitelist58 = whitelist44.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray56); org.jsoup.safety.Whitelist whitelist59 = whitelist40.addAttributes(":containsOwn(hi!:matchesown(null", strArray56); boolean boolean60 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray56); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray56); org.jsoup.safety.Whitelist whitelist62 = whitelist17.addAttributes(":containsOwn(                                                  ", strArray56); boolean boolean63 = strList11.equals((java.lang.Object) whitelist62); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(strList16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(strArray56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); }
public void test605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test605"); org.jsoup.safety.Whitelist whitelist4 = new org.jsoup.safety.Whitelist(); boolean boolean5 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist4); java.lang.String str6 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist4); org.jsoup.nodes.Document document9 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray14 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14); org.jsoup.nodes.Element element17 = document12.classNames((java.util.Set<java.lang.String>) strSet15); org.jsoup.nodes.Element element18 = document9.appendChild((org.jsoup.nodes.Node) element17); java.lang.String str20 = document9.absUrl("hi!"); org.jsoup.nodes.Attribute attribute23 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean24 = whitelist4.isSafeAttribute("", (org.jsoup.nodes.Element) document9, attribute23); org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("", "hi!"); boolean boolean28 = attribute23.equals((java.lang.Object) document27); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]", (org.jsoup.nodes.Element) document27, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element32 = document27.toggleClass(":eq(52)\n<#root></#root>"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!:matchesOwn(null" + "'", str6, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertNotNull(element32); }
public void test606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test606"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.safety.Whitelist whitelist3 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes5 = whitelist3.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist10 = whitelist8.preserveRelativeLinks(false); boolean boolean11 = org.jsoup.Jsoup.isValid("", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addTags(strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist0.addProtocols(":matchesOwn(null", ":matches(null", strArray17); org.jsoup.safety.Cleaner cleaner21 = new org.jsoup.safety.Cleaner(whitelist20); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document25 = document24.clone(); document25.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document28 = cleaner21.clean(document25); org.jsoup.nodes.Element element30 = document28.appendElement("<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>"); org.jsoup.nodes.Document document31 = document28.normalise(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(document31); }
public void test607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test607"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean3 = whitelist1.isSafeTag("#root"); org.jsoup.safety.Whitelist whitelist5 = whitelist1.preserveRelativeLinks(false); boolean boolean6 = org.jsoup.Jsoup.isValid("[^#&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n&lt;/html&gt;]", whitelist1); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); }
public void test608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test608"); org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 1); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray6 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6); org.jsoup.nodes.Element element9 = document4.classNames((java.util.Set<java.lang.String>) strSet7); org.jsoup.nodes.Element element12 = element9.attr("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", ""); org.jsoup.nodes.Element element14 = element12.text(""); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray19 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19); org.jsoup.nodes.Element element22 = document17.classNames((java.util.Set<java.lang.String>) strSet20); java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>(); boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25); boolean boolean28 = strSet20.containsAll((java.util.Collection<java.lang.String>) strList26); java.lang.String str30 = org.jsoup.helper.StringUtil.join((java.util.Collection) strSet20, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element31 = element14.classNames((java.util.Set<java.lang.String>) strSet20); org.jsoup.nodes.Node node34 = element14.attr("##<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "<html>\n <head></head>\n <body>\n [^:containsOwn(hi!]\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist36 = new org.jsoup.safety.Whitelist(); boolean boolean37 = org.jsoup.Jsoup.isValid("", whitelist36); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray43 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43); org.jsoup.nodes.Element element46 = document41.classNames((java.util.Set<java.lang.String>) strSet44); org.jsoup.nodes.Element element48 = element46.prepend("#document"); org.jsoup.nodes.Attribute attribute51 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute51.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str54 = attribute51.getKey(); boolean boolean55 = whitelist36.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element48, attribute51); org.jsoup.nodes.Element element57 = element48.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements59 = element48.getElementsByClass("#root"); org.jsoup.helper.Validate.notNull((java.lang.Object) element48); boolean boolean61 = indexLessThan1.matches(element14, element48); org.jsoup.nodes.Element element63 = element14.getElementById("hi!#document"); boolean boolean65 = element14.hasClass(""); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, ""); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(node34); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str54, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertNotNull(elements59); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNull(element63); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true); }
public void test609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test609"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.safety.Whitelist whitelist3 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes5 = whitelist3.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist10 = whitelist8.preserveRelativeLinks(false); boolean boolean11 = org.jsoup.Jsoup.isValid("", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addTags(strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist0.addProtocols(":matchesOwn(null", ":matches(null", strArray17); org.jsoup.safety.Cleaner cleaner21 = new org.jsoup.safety.Cleaner(whitelist20); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document25 = document24.clone(); document25.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document28 = cleaner21.clean(document25); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parseBodyFragment("hi! hi!"); int int31 = document30.siblingIndex(); boolean boolean32 = cleaner21.isValid(document30); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); }
public void test610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test610"); org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot2 = new org.jsoup.select.Evaluator.AttributeWithValueNot("hi!  hi!", "UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8"); org.jsoup.select.Evaluator.IndexLessThan indexLessThan4 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 10); java.lang.String str5 = indexLessThan4.toString(); java.lang.String str6 = indexLessThan4.toString(); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element10 = document9.body(); java.lang.String str11 = element10.ownText(); org.jsoup.nodes.DataNode dataNode14 = org.jsoup.nodes.DataNode.createFromEncoded("", ":eq(52)"); org.jsoup.nodes.DataNode dataNode16 = dataNode14.setWholeData(""); java.lang.String str17 = dataNode16.getWholeData(); element10.replaceWith((org.jsoup.nodes.Node) dataNode16); org.jsoup.parser.Tag tag19 = element10.tag(); org.jsoup.nodes.Document document21 = new org.jsoup.nodes.Document("#doctype"); org.jsoup.select.Evaluator.IndexEquals indexEquals23 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray28 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28); org.jsoup.nodes.Element element31 = document26.classNames((java.util.Set<java.lang.String>) strSet29); org.jsoup.nodes.Document document33 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray38 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38); org.jsoup.nodes.Element element41 = document36.classNames((java.util.Set<java.lang.String>) strSet39); org.jsoup.nodes.Element element42 = document33.appendChild((org.jsoup.nodes.Node) element41); boolean boolean43 = indexEquals23.matches(element31, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Document.QuirksMode quirksMode44 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document45 = document33.quirksMode(quirksMode44); org.jsoup.nodes.Document document46 = document21.quirksMode(quirksMode44); java.util.Map<java.lang.String, java.lang.String> strMap47 = document21.dataset(); org.jsoup.nodes.Element element49 = document21.prepend(""); boolean boolean50 = indexLessThan4.matches(element10, element49); java.lang.String str51 = indexLessThan4.toString(); org.jsoup.nodes.Element element52 = null; org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist55 = whitelist53.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner56 = new org.jsoup.safety.Cleaner(whitelist53); org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray61 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61); org.jsoup.nodes.Element element64 = document59.classNames((java.util.Set<java.lang.String>) strSet62); java.lang.String str65 = document59.nodeName(); java.lang.String str66 = document59.html(); boolean boolean67 = cleaner56.isValid(document59); boolean boolean68 = indexLessThan4.matches(element52, (org.jsoup.nodes.Element) document59); org.jsoup.nodes.Document.OutputSettings outputSettings69 = document59.outputSettings(); java.lang.String str70 = document59.outerHtml(); org.jsoup.nodes.Document document72 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element74 = document72.createElement("#document"); org.jsoup.nodes.Document document75 = document72.clone(); org.jsoup.select.Elements elements78 = document75.getElementsByAttributeValueMatching("hi!", "\n#document"); org.jsoup.select.Elements elements80 = document75.getElementsByTag("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements83 = document75.getElementsByAttributeValue("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", ".:eq(52)=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n&lt;/html&gt;\""); org.jsoup.select.Elements elements85 = document75.getElementsContainingOwnText("#:gt(1)"); boolean boolean86 = attributeWithValueNot2.matches((org.jsoup.nodes.Element) document59, (org.jsoup.nodes.Element) document75); org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":lt(10)" + "'", str5, ":lt(10)"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ":lt(10)" + "'", str6, ":lt(10)"); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi! hi!" + "'", str11, "hi! hi!"); org.junit.Assert.assertNotNull(dataNode14); org.junit.Assert.assertNotNull(dataNode16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertNotNull(tag19); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertTrue("'" + quirksMode44 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode44.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(strMap47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertEquals("'" + str51 + "' != '" + ":lt(10)" + "'", str51, ":lt(10)"); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "#document" + "'", str65, "#document"); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str66, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertEquals("'" + str70 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str70, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertNotNull(elements78); org.junit.Assert.assertNotNull(elements80); org.junit.Assert.assertNotNull(elements83); org.junit.Assert.assertNotNull(elements85); org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true); }
public void test611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test611"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document16 = org.jsoup.nodes.Document.createShell("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document.QuirksMode quirksMode17 = document16.quirksMode(); org.jsoup.nodes.Document document18 = document6.quirksMode(quirksMode17); java.lang.String str19 = document6.nodeName(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertTrue("'" + quirksMode17 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode17.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "#document" + "'", str19, "#document"); }
public void test612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test612"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); document16.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean19 = document16.isBlock(); org.jsoup.nodes.Document document20 = cleaner12.clean(document16); org.jsoup.select.Evaluator.IndexEquals indexEquals22 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray27 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27); org.jsoup.nodes.Element element30 = document25.classNames((java.util.Set<java.lang.String>) strSet28); org.jsoup.nodes.Document document32 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray37 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37); org.jsoup.nodes.Element element40 = document35.classNames((java.util.Set<java.lang.String>) strSet38); org.jsoup.nodes.Element element41 = document32.appendChild((org.jsoup.nodes.Node) element40); boolean boolean42 = indexEquals22.matches(element30, (org.jsoup.nodes.Element) document32); java.lang.String str43 = indexEquals22.toString(); java.lang.String str44 = indexEquals22.toString(); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray49 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49); org.jsoup.nodes.Element element52 = document47.classNames((java.util.Set<java.lang.String>) strSet50); document47.title("#document"); org.jsoup.nodes.Document document56 = new org.jsoup.nodes.Document(""); org.jsoup.nodes.Element element57 = document47.prependChild((org.jsoup.nodes.Node) document56); java.lang.String str58 = document56.ownText(); java.lang.String str59 = document56.tagName(); org.jsoup.nodes.Element element61 = document56.before("[hi! hi!*=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"]"); org.jsoup.nodes.Document document64 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray66 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66); org.jsoup.nodes.Element element69 = document64.classNames((java.util.Set<java.lang.String>) strSet67); document64.title("#document"); org.jsoup.nodes.Document document73 = new org.jsoup.nodes.Document(""); org.jsoup.nodes.Element element74 = document64.prependChild((org.jsoup.nodes.Node) document73); boolean boolean75 = indexEquals22.matches((org.jsoup.nodes.Element) document56, element74); org.jsoup.nodes.Document document78 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document79 = document78.clone(); java.lang.String str80 = document79.val(); org.jsoup.helper.Validate.notNull((java.lang.Object) document79); org.jsoup.nodes.Document document84 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document85 = document84.clone(); org.jsoup.nodes.Element element87 = document84.addClass(""); java.lang.String str88 = document84.toString(); org.jsoup.nodes.Element element90 = document84.tagName("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.jsoup.nodes.Document.OutputSettings outputSettings91 = document84.outputSettings(); java.lang.String str93 = document84.absUrl("<body></body>"); boolean boolean94 = indexEquals22.matches((org.jsoup.nodes.Element) document79, (org.jsoup.nodes.Element) document84); org.jsoup.nodes.Document document95 = cleaner12.clean(document84); java.util.regex.Pattern pattern97 = null; org.jsoup.select.Elements elements98 = document84.getElementsByAttributeValueMatching("", pattern97); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertEquals("'" + str43 + "' != '" + ":eq(52)" + "'", str43, ":eq(52)"); org.junit.Assert.assertEquals("'" + str44 + "' != '" + ":eq(52)" + "'", str44, ":eq(52)"); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, ""); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "#root" + "'", str59, "#root"); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(document64); org.junit.Assert.assertNotNull(strArray66); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNotNull(document78); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, ""); org.junit.Assert.assertNotNull(document84); org.junit.Assert.assertNotNull(document85); org.junit.Assert.assertNotNull(element87); org.junit.Assert.assertEquals("'" + str88 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str88, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element90); org.junit.Assert.assertNotNull(outputSettings91); org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, ""); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); org.junit.Assert.assertNotNull(document95); org.junit.Assert.assertNotNull(elements98); }
public void test613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test613"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); boolean boolean13 = whitelist1.isSafeTag(""); org.jsoup.safety.Whitelist whitelist15 = whitelist1.preserveRelativeLinks(true); java.lang.Class<?> wildcardClass16 = whitelist15.getClass(); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(wildcardClass16); }
public void test614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test614"); org.jsoup.select.Evaluator.AttributeWithValue attributeWithValue2 = new org.jsoup.select.Evaluator.AttributeWithValue("hi!", ":eq(52)"); org.jsoup.nodes.Element element3 = null; org.jsoup.safety.Whitelist whitelist5 = new org.jsoup.safety.Whitelist(); boolean boolean6 = org.jsoup.Jsoup.isValid("", whitelist5); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray12 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12); org.jsoup.nodes.Element element15 = document10.classNames((java.util.Set<java.lang.String>) strSet13); org.jsoup.nodes.Element element17 = element15.prepend("#document"); org.jsoup.nodes.Attribute attribute20 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute20.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str23 = attribute20.getKey(); boolean boolean24 = whitelist5.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element17, attribute20); org.jsoup.nodes.Element element26 = element17.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements29 = element17.getElementsByAttributeValueMatching("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"[hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;!=.:eq(52)]\""); boolean boolean30 = attributeWithValue2.matches(element3, element17); java.util.Set<java.lang.String> strSet31 = element17.classNames(); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str23, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(strSet31); }
public void test615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test615"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist14 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray12); org.jsoup.safety.Cleaner cleaner15 = new org.jsoup.safety.Cleaner(whitelist14); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist14); }
public void test616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test616"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList3 = attributes2.asList(); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting6 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray11 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11); org.jsoup.nodes.Element element14 = document9.classNames((java.util.Set<java.lang.String>) strSet12); java.lang.String str15 = document9.nodeName(); org.jsoup.select.Elements elements17 = document9.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document21 = document20.clone(); org.jsoup.nodes.Element element23 = document20.addClass(""); org.jsoup.nodes.Element element24 = document9.appendChild((org.jsoup.nodes.Node) document20); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str28 = document27.val(); org.jsoup.nodes.Element element30 = document27.append("#document"); boolean boolean31 = attributeWithValueStarting6.matches((org.jsoup.nodes.Element) document9, element30); java.util.regex.Pattern pattern33 = null; org.jsoup.select.Elements elements34 = document9.getElementsByAttributeValueMatching("[^hi!]", pattern33); org.jsoup.select.Elements elements36 = document9.getElementsMatchingOwnText("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Element element38 = document9.tagName("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); boolean boolean39 = attributes2.equals((java.lang.Object) element38); org.jsoup.nodes.Attributes attributes40 = attributes2.clone(); attributes2.remove("<html>\n <head></head>\n <body>\n #document\n </body>\n</html>"); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(attributeList3); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#document" + "'", str15, "#document"); org.junit.Assert.assertNotNull(elements17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, ""); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(attributes40); }
public void test617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test617"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.safety.Whitelist whitelist3 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes5 = whitelist3.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist10 = whitelist8.preserveRelativeLinks(false); boolean boolean11 = org.jsoup.Jsoup.isValid("", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addTags(strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist0.addProtocols(":matchesOwn(null", ":matches(null", strArray17); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.basic(); boolean boolean31 = org.jsoup.Jsoup.isValid("hi!", whitelist30); java.lang.String[] strArray39 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist40 = whitelist30.addProtocols(".#document", "#doctype=\"\"", strArray39); org.jsoup.safety.Whitelist whitelist41 = whitelist27.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray39); org.jsoup.safety.Whitelist whitelist42 = whitelist23.addAttributes(":containsOwn(hi!:matchesown(null", strArray39); boolean boolean43 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray39); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray39); org.jsoup.safety.Whitelist whitelist45 = whitelist0.addAttributes(":containsOwn(                                                  ", strArray39); boolean boolean47 = whitelist45.isSafeTag("<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); }
public void test618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test618"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Attribute attribute21 = attribute16.clone(); java.lang.String str22 = attribute21.html(); java.lang.String str24 = attribute21.setValue(" [  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=\"##  hi!\" =\"#doctype\""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(attribute21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"" + "'", str22, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); }
public void test619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test619"); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList0 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings3.charset(); charsetList0.addFirst(charset4); java.util.Iterator<java.nio.charset.Charset> charsetItor6 = charsetList0.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList7 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); java.nio.charset.Charset charset11 = outputSettings10.charset(); charsetList7.addFirst(charset11); boolean boolean13 = charsetList0.offerFirst(charset11); int int14 = charsetList0.size(); java.nio.charset.Charset charset15 = charsetList0.peekLast(); java.nio.charset.Charset charset16 = charsetList0.pop(); java.nio.charset.Charset charset17 = charsetList0.pop(); java.nio.charset.Charset charset18 = charsetList0.peekLast(); java.nio.charset.Charset charset19 = charsetList0.pollLast(); org.jsoup.select.Evaluator.AttributeWithValue attributeWithValue22 = new org.jsoup.select.Evaluator.AttributeWithValue("hi!", ":eq(52)"); org.jsoup.nodes.Element element23 = null; org.jsoup.safety.Whitelist whitelist25 = new org.jsoup.safety.Whitelist(); boolean boolean26 = org.jsoup.Jsoup.isValid("", whitelist25); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray32 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32); org.jsoup.nodes.Element element35 = document30.classNames((java.util.Set<java.lang.String>) strSet33); org.jsoup.nodes.Element element37 = element35.prepend("#document"); org.jsoup.nodes.Attribute attribute40 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute40.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str43 = attribute40.getKey(); boolean boolean44 = whitelist25.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element37, attribute40); org.jsoup.nodes.Element element46 = element37.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements49 = element37.getElementsByAttributeValueMatching("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"[hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;!=.:eq(52)]\""); boolean boolean50 = attributeWithValue22.matches(element23, element37); org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str54 = document53.nodeName(); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText56 = new org.jsoup.select.Evaluator.ContainsOwnText("[^hi!]"); org.jsoup.nodes.Element element57 = null; org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str61 = document60.className(); boolean boolean62 = containsOwnText56.matches(element57, (org.jsoup.nodes.Element) document60); org.jsoup.nodes.Document document63 = document60.clone(); java.util.Map<java.lang.String, java.lang.String> strMap64 = document60.dataset(); org.jsoup.nodes.Element element65 = document60.body(); org.jsoup.nodes.Element element67 = element65.prependText("[hi!<html> <head></head> <body> hi! </body> </html>$=:gt(1)]"); boolean boolean68 = attributeWithValue22.matches((org.jsoup.nodes.Element) document53, element65); boolean boolean69 = charsetList0.contains((java.lang.Object) document53); java.nio.charset.Charset charset70 = charsetList0.pollLast(); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(charsetItor6); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNull(charset18); org.junit.Assert.assertNull(charset19); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str43, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(elements49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "#document" + "'", str54, "#document"); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, ""); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertNotNull(strMap64); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNull(charset70); }
public void test620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test620"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.nodes.Attributes attributes13 = whitelist1.getEnforcedAttributes(".#document"); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str21 = org.jsoup.Jsoup.clean("", "#data", whitelist20); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basic(); boolean boolean24 = org.jsoup.Jsoup.isValid("hi!", whitelist23); java.lang.String[] strArray32 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist33 = whitelist23.addProtocols(".#document", "#doctype=\"\"", strArray32); org.jsoup.safety.Whitelist whitelist34 = whitelist20.addTags(strArray32); org.jsoup.safety.Whitelist whitelist35 = whitelist17.addTags(strArray32); boolean boolean36 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist35); org.jsoup.safety.Whitelist whitelist40 = whitelist35.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist42 = whitelist35.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist49 = whitelist47.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist52 = org.jsoup.safety.Whitelist.basic(); boolean boolean53 = org.jsoup.Jsoup.isValid("hi!", whitelist52); java.lang.String[] strArray61 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist62 = whitelist52.addProtocols(".#document", "#doctype=\"\"", strArray61); org.jsoup.safety.Whitelist whitelist63 = whitelist49.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray61); org.jsoup.safety.Whitelist whitelist64 = whitelist45.addAttributes(":containsOwn(hi!:matchesown(null", strArray61); boolean boolean65 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray61); org.jsoup.safety.Whitelist whitelist66 = whitelist42.addAttributes(":containsOwn(hi!:matchesown(null", strArray61); org.jsoup.safety.Whitelist whitelist67 = whitelist1.addProtocols("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", ":eq(-1)", strArray61); org.jsoup.safety.Whitelist whitelist71 = whitelist1.addEnforcedAttribute("#document:contains( hi! hi!:contains( hi!", "#document [[#document^=<html> <head></head> <body> hi! </body> </html>]!=.#document]", "hi!<html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> "); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(attributes13); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, ""); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(whitelist71); }
public void test621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test621"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist5.addTags(strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); boolean boolean21 = org.jsoup.Jsoup.isValid("#doctype", whitelist2); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); boolean boolean28 = org.jsoup.Jsoup.isValid("", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addTags(strArray34); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray34); org.jsoup.safety.Whitelist whitelist37 = whitelist2.addProtocols("hi! hi! #comment", "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\":contains(&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", strArray34); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist41 = whitelist39.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner42 = new org.jsoup.safety.Cleaner(whitelist39); org.jsoup.safety.Whitelist whitelist44 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist46 = whitelist44.preserveRelativeLinks(false); boolean boolean47 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist44); org.jsoup.safety.Whitelist whitelist49 = org.jsoup.safety.Whitelist.basic(); boolean boolean50 = org.jsoup.Jsoup.isValid("hi!", whitelist49); java.lang.String[] strArray58 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist59 = whitelist49.addProtocols(".#document", "#doctype=\"\"", strArray58); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray58, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray58); org.jsoup.safety.Whitelist whitelist63 = whitelist44.addTags(strArray58); org.jsoup.safety.Whitelist whitelist64 = whitelist39.addTags(strArray58); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray58); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray58, "hi!  hi! =&quot;&quot;"); org.jsoup.safety.Whitelist whitelist68 = whitelist2.addAttributes("#<html> <head></head> <body> hi! </body> </html>", strArray58); boolean boolean69 = org.jsoup.Jsoup.isValid("[[:matches(null!=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]]!=utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8]", whitelist68); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true); }
public void test622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test622"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.select.Elements elements10 = document8.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements12 = document8.getElementsByAttribute("#document"); org.jsoup.select.Elements elements15 = document8.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); java.lang.String str18 = document16.absUrl("<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>"); org.jsoup.select.Elements elements20 = document16.getElementsByClass("hi!<html> <head></head> <body> hi! </body> </html>"); org.jsoup.nodes.Element element21 = document16.body(); org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", "[[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]!=.#document]"); org.jsoup.nodes.Node node25 = document24.parent(); // The following exception was thrown during execution in test generation try { document16.replaceWith(node25); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNull(node25); }
public void test623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test623"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist14 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray12); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(true); boolean boolean20 = whitelist16.isSafeTag("hi! =&quot;&quot;"); org.jsoup.safety.Whitelist whitelist23 = new org.jsoup.safety.Whitelist(); boolean boolean25 = whitelist23.isSafeTag("#root"); java.lang.String str26 = org.jsoup.Jsoup.clean("UTF-8bodyUTF-8", "", whitelist23); org.jsoup.nodes.Element element28 = null; org.jsoup.nodes.Attribute attribute31 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute32 = attribute31.clone(); java.lang.String str33 = attribute32.getKey(); java.lang.String str34 = attribute32.getKey(); boolean boolean35 = whitelist23.isSafeAttribute("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"^=hi! hi! #comment]", element28, attribute32); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.basic(); boolean boolean42 = org.jsoup.Jsoup.isValid("hi!", whitelist41); java.lang.String[] strArray50 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist51 = whitelist41.addProtocols(".#document", "#doctype=\"\"", strArray50); org.jsoup.safety.Whitelist whitelist52 = whitelist38.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray50); org.jsoup.safety.Whitelist whitelist54 = whitelist52.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist57 = org.jsoup.safety.Whitelist.basic(); boolean boolean58 = org.jsoup.Jsoup.isValid("hi!", whitelist57); java.lang.String[] strArray66 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist67 = whitelist57.addProtocols(".#document", "#doctype=\"\"", strArray66); org.jsoup.safety.Whitelist whitelist68 = whitelist52.addAttributes("                          ", strArray66); org.jsoup.safety.Whitelist whitelist69 = whitelist23.addProtocols(".#document\n<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root></#root>", strArray66); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray66); org.jsoup.safety.Whitelist whitelist71 = whitelist16.addTags(strArray66); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTF-8bodyUTF-8" + "'", str26, "UTF-8bodyUTF-8"); org.junit.Assert.assertNotNull(attribute31); org.junit.Assert.assertNotNull(attribute32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str33, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str34, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true); org.junit.Assert.assertNotNull(strArray66); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist71); }
public void test624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test624"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element17 = document16.body(); java.lang.String str18 = document16.toString(); org.jsoup.nodes.Document document19 = cleaner3.clean(document16); java.lang.String str20 = document16.nodeName(); org.jsoup.parser.Tag tag21 = document16.tag(); java.lang.String str22 = document16.nodeName(); org.jsoup.select.Elements elements23 = document16.getAllElements(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertNotNull(tag21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#document" + "'", str22, "#document"); org.junit.Assert.assertNotNull(elements23); }
public void test625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test625"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); java.lang.String str5 = org.jsoup.Jsoup.clean(":eq(97)", "[hi!  public &quot;#data&quot; &quot;#doctype&quot;&gt;^=hi!<html> <head></head> <body> hi! </body> </html>]", whitelist2); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":eq(97)" + "'", str5, ":eq(97)"); }
public void test626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test626"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); org.jsoup.nodes.Element element12 = document10.head(); org.jsoup.nodes.Element element14 = document10.child(0); org.jsoup.select.Evaluator.Attribute attribute16 = new org.jsoup.select.Evaluator.Attribute(""); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray21 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21); org.jsoup.nodes.Element element24 = document19.classNames((java.util.Set<java.lang.String>) strSet22); document19.title("#document"); java.lang.String str27 = document19.ownText(); org.jsoup.nodes.Element element29 = document19.prependElement("#<html> <head></head> <body> hi! </body> </html>"); org.jsoup.nodes.Element element31 = document19.text("[[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]!=.#document]"); org.jsoup.select.Evaluator.Id id33 = new org.jsoup.select.Evaluator.Id("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document37 = document36.clone(); org.jsoup.nodes.Element element39 = document36.addClass(""); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray44 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44); org.jsoup.nodes.Element element47 = document42.classNames((java.util.Set<java.lang.String>) strSet45); java.lang.String str48 = document42.nodeName(); org.jsoup.select.Elements elements50 = document42.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document54 = document53.clone(); org.jsoup.nodes.Element element56 = document53.addClass(""); org.jsoup.nodes.Element element57 = document42.appendChild((org.jsoup.nodes.Node) document53); boolean boolean58 = id33.matches(element39, element57); org.jsoup.nodes.Document document61 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document62 = document61.clone(); org.jsoup.nodes.Element element64 = document61.addClass(""); java.lang.String str65 = document61.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting67 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document70 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document73 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray75 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75); org.jsoup.nodes.Element element78 = document73.classNames((java.util.Set<java.lang.String>) strSet76); document73.title("#document"); boolean boolean81 = attributeStarting67.matches((org.jsoup.nodes.Element) document70, (org.jsoup.nodes.Element) document73); java.lang.String str82 = document70.id(); org.jsoup.select.Elements elements84 = document70.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements86 = document70.getElementsByIndexGreaterThan((int) (short) 10); boolean boolean87 = id33.matches((org.jsoup.nodes.Element) document61, (org.jsoup.nodes.Element) document70); java.lang.String str88 = document61.data(); java.lang.String str89 = document61.html(); boolean boolean90 = attribute16.matches(element31, (org.jsoup.nodes.Element) document61); org.jsoup.nodes.Element element91 = element14.prependChild((org.jsoup.nodes.Node) document61); java.lang.String str92 = document61.toString(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "#document" + "'", str48, "#document"); org.junit.Assert.assertNotNull(elements50); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str65, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(document73); org.junit.Assert.assertNotNull(strArray75); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false); org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, ""); org.junit.Assert.assertNotNull(elements84); org.junit.Assert.assertNotNull(elements86); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, ""); org.junit.Assert.assertEquals("'" + str89 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str89, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false); org.junit.Assert.assertNotNull(element91); org.junit.Assert.assertEquals("'" + str92 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str92, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); }
public void test627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test627"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.safety.Whitelist whitelist4 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes6 = whitelist4.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); boolean boolean12 = org.jsoup.Jsoup.isValid("", whitelist9); java.lang.String[] strArray18 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist19 = whitelist9.addTags(strArray18); org.jsoup.safety.Whitelist whitelist20 = whitelist4.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray18); org.jsoup.safety.Whitelist whitelist21 = whitelist1.addProtocols(":matchesOwn(null", ":matches(null", strArray18); boolean boolean22 = org.jsoup.helper.StringUtil.in(":contains(<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n hi!&amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; hi! &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;\n &lt;/body&gt;\n&lt;/html&gt;\"", strArray18); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test628"); org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText3 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Node node13 = document11.removeAttr("#doctype"); org.jsoup.nodes.Document document14 = cleaner7.clean(document11); org.jsoup.nodes.Attributes attributes15 = document14.attributes(); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner19 = new org.jsoup.safety.Cleaner(whitelist16); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Node node25 = document23.removeAttr("#doctype"); org.jsoup.nodes.Document document26 = cleaner19.clean(document23); org.jsoup.nodes.Attributes attributes27 = document26.attributes(); boolean boolean28 = containsOwnText3.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document26); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str33 = document32.val(); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document32, "#document"); java.lang.String str36 = document32.baseUri(); org.jsoup.nodes.Element element38 = document32.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); org.jsoup.nodes.Document.QuirksMode quirksMode40 = null; org.jsoup.nodes.Document document41 = document32.quirksMode(quirksMode40); boolean boolean42 = indexEquals1.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document41); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node44 = document14.before("[#document^= hi! ]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(node25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!"); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); }
public void test629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test629"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean3 = org.jsoup.Jsoup.isValid("#document", whitelist2); java.lang.String str4 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element9 = document8.body(); org.jsoup.nodes.Element element11 = element9.before(":contains([#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); java.util.List<org.jsoup.nodes.Node> nodeList12 = element9.childNodes(); org.jsoup.nodes.Attribute attribute15 = new org.jsoup.nodes.Attribute("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]", ".:matchesOwn(null"); org.jsoup.nodes.Attribute attribute16 = attribute15.clone(); boolean boolean17 = whitelist2.isSafeAttribute("#document [[#document^=<html> <head></head> <body> hi! </body> </html>]!=.#document]", element9, attribute15); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str4, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertNotNull(attribute16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test630"); org.jsoup.select.Evaluator.Attribute attribute1 = new org.jsoup.select.Evaluator.Attribute(":containsOwn(                                                  "); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray6 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6); org.jsoup.nodes.Element element9 = document4.classNames((java.util.Set<java.lang.String>) strSet7); java.lang.String str10 = document4.nodeName(); org.jsoup.select.Elements elements12 = document4.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); org.jsoup.nodes.Element element18 = document15.addClass(""); org.jsoup.nodes.Element element19 = document4.appendChild((org.jsoup.nodes.Node) document15); org.jsoup.nodes.Element element21 = document15.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document25 = document24.clone(); org.jsoup.nodes.Element element27 = document24.addClass(""); java.lang.String str28 = document24.toString(); org.jsoup.nodes.Element element30 = document24.text(".#document"); org.jsoup.nodes.Node node31 = element21.after((org.jsoup.nodes.Node) document24); org.jsoup.nodes.Element element32 = element21.empty(); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document36 = document35.clone(); org.jsoup.nodes.Element element38 = document35.addClass(""); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str43 = document42.val(); java.util.List<org.jsoup.nodes.Node> nodeList45 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document42, "#document"); java.lang.String str46 = document42.baseUri(); org.jsoup.nodes.Document document49 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str50 = document49.val(); org.jsoup.nodes.Element element52 = document49.append("#document"); org.jsoup.nodes.Element element53 = document42.appendChild((org.jsoup.nodes.Node) element52); org.jsoup.nodes.Element element54 = document35.prependChild((org.jsoup.nodes.Node) document42); org.jsoup.nodes.Attributes attributes55 = element54.attributes(); boolean boolean56 = element21.equals((java.lang.Object) element54); org.jsoup.nodes.Element element58 = element21.toggleClass("#&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;"); org.jsoup.safety.Whitelist whitelist60 = org.jsoup.safety.Whitelist.basic(); boolean boolean61 = org.jsoup.Jsoup.isValid("hi!", whitelist60); java.lang.String[] strArray69 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist70 = whitelist60.addProtocols(".#document", "#doctype=\"\"", strArray69); org.jsoup.safety.Cleaner cleaner71 = new org.jsoup.safety.Cleaner(whitelist60); org.jsoup.nodes.Document document74 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document75 = document74.clone(); document75.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean78 = document75.isBlock(); org.jsoup.nodes.Document document79 = cleaner71.clean(document75); org.jsoup.select.Elements elements81 = document79.getElementsByAttribute("UTF-8UTF-8"); org.jsoup.nodes.Document document82 = document79.clone(); boolean boolean83 = attribute1.matches(element21, (org.jsoup.nodes.Element) document82); org.jsoup.select.Elements elements85 = document82.getElementsContainingText(""); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#document" + "'", str10, "#document"); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str28, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(node31); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, ""); org.junit.Assert.assertNotNull(nodeList45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!"); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(attributes55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNotNull(strArray69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertNotNull(elements81); org.junit.Assert.assertNotNull(document82); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertNotNull(elements85); }
public void test631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test631"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.indentAmount((int) '4'); java.nio.charset.Charset charset6 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); int int10 = outputSettings9.indentAmount(); java.nio.charset.Charset charset11 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.charset(charset11); java.nio.charset.Charset[] charsetArray13 = new java.nio.charset.Charset[] { charset11 }; java.util.LinkedList<java.nio.charset.Charset> charsetList14 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList14, charsetArray13); java.nio.charset.Charset charset16 = charsetList14.pop(); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basic(); boolean boolean19 = org.jsoup.Jsoup.isValid("hi!", whitelist18); java.lang.String[] strArray27 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist28 = whitelist18.addProtocols(".#document", "#doctype=\"\"", strArray27); org.jsoup.safety.Cleaner cleaner29 = new org.jsoup.safety.Cleaner(whitelist18); boolean boolean30 = charsetList14.contains((java.lang.Object) whitelist18); org.jsoup.nodes.Attributes attributes32 = whitelist18.getEnforcedAttributes("<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.jsoup.safety.Cleaner cleaner33 = new org.jsoup.safety.Cleaner(whitelist18); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str37 = org.jsoup.Jsoup.clean("", "#data", whitelist36); org.jsoup.safety.Cleaner cleaner38 = new org.jsoup.safety.Cleaner(whitelist36); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document42 = document41.clone(); org.jsoup.select.Elements elements44 = document42.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements46 = document42.getElementsByAttribute("#document"); org.jsoup.select.Elements elements49 = document42.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document50 = cleaner38.clean(document42); org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document54 = document53.clone(); org.jsoup.nodes.Element element56 = document53.addClass(""); java.lang.String str57 = document53.toString(); org.jsoup.nodes.Element element59 = document53.text(".#document"); org.jsoup.nodes.Document.QuirksMode quirksMode60 = document53.quirksMode(); org.jsoup.nodes.Element element62 = document53.appendElement("#doctype=\"\""); org.jsoup.nodes.Document document63 = cleaner38.clean(document53); boolean boolean64 = cleaner33.isValid(document53); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(charset6); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charsetArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(attributes32); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, ""); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(elements44); org.junit.Assert.assertNotNull(elements46); org.junit.Assert.assertNotNull(elements49); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str57, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertTrue("'" + quirksMode60 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode60.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); }
public void test632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test632"); org.jsoup.nodes.Attribute attribute2 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); java.lang.String str4 = attribute2.setValue("hi! hi! #comment"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner8 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document12 = document11.clone(); org.jsoup.nodes.Node node14 = document12.removeAttr("#doctype"); org.jsoup.nodes.Document document15 = cleaner8.clean(document12); document12.setBaseUri("[^:containsOwn(hi!]"); org.jsoup.select.Elements elements20 = document12.getElementsByAttributeValue("##<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "#root"); org.jsoup.nodes.Document.OutputSettings outputSettings21 = document12.outputSettings(); org.jsoup.nodes.Entities.EscapeMode escapeMode22 = org.jsoup.nodes.Entities.EscapeMode.xhtml; java.util.Map<java.lang.Character, java.lang.String> charMap23 = escapeMode22.getMap(); java.util.Map<java.lang.Character, java.lang.String> charMap24 = escapeMode22.getMap(); java.util.Map<java.lang.Character, java.lang.String> charMap25 = escapeMode22.getMap(); java.util.Map<java.lang.Character, java.lang.String> charMap26 = escapeMode22.getMap(); org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings21.escapeMode(escapeMode22); boolean boolean28 = attribute2.equals((java.lang.Object) outputSettings21); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#document" + "'", str4, "#document"); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(node14); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.xhtml + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.xhtml)); org.junit.Assert.assertNotNull(charMap23); org.junit.Assert.assertNotNull(charMap24); org.junit.Assert.assertNotNull(charMap25); org.junit.Assert.assertNotNull(charMap26); org.junit.Assert.assertNotNull(outputSettings27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); }
public void test633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test633"); org.jsoup.select.Evaluator.Id id1 = new org.jsoup.select.Evaluator.Id("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document5 = document4.clone(); org.jsoup.nodes.Element element7 = document4.addClass(""); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray12 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12); org.jsoup.nodes.Element element15 = document10.classNames((java.util.Set<java.lang.String>) strSet13); java.lang.String str16 = document10.nodeName(); org.jsoup.select.Elements elements18 = document10.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document22 = document21.clone(); org.jsoup.nodes.Element element24 = document21.addClass(""); org.jsoup.nodes.Element element25 = document10.appendChild((org.jsoup.nodes.Node) document21); boolean boolean26 = id1.matches(element7, element25); org.jsoup.safety.Whitelist whitelist27 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist29 = whitelist27.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner30 = new org.jsoup.safety.Cleaner(whitelist27); org.jsoup.select.Evaluator.Class class32 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str33 = class32.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals35 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray40 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40); org.jsoup.nodes.Element element43 = document38.classNames((java.util.Set<java.lang.String>) strSet41); org.jsoup.nodes.Document document45 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray50 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50); org.jsoup.nodes.Element element53 = document48.classNames((java.util.Set<java.lang.String>) strSet51); org.jsoup.nodes.Element element54 = document45.appendChild((org.jsoup.nodes.Node) element53); boolean boolean55 = indexEquals35.matches(element43, (org.jsoup.nodes.Element) document45); org.jsoup.nodes.Document.QuirksMode quirksMode56 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document57 = document45.quirksMode(quirksMode56); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray62 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62); org.jsoup.nodes.Element element65 = document60.classNames((java.util.Set<java.lang.String>) strSet63); document60.title("#document"); boolean boolean68 = class32.matches((org.jsoup.nodes.Element) document57, (org.jsoup.nodes.Element) document60); org.jsoup.nodes.Document document69 = cleaner30.clean(document57); org.jsoup.select.Elements elements71 = document69.getElementsByAttributeStarting("hi!:matchesown(null=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); org.jsoup.nodes.Document document74 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", "[[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]!=.#document]"); org.jsoup.nodes.Node node75 = document74.parent(); boolean boolean76 = id1.matches((org.jsoup.nodes.Element) document69, (org.jsoup.nodes.Element) document74); org.jsoup.parser.Tag tag77 = document69.tag(); boolean boolean78 = document69.isBlock(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#document" + "'", str16, "#document"); org.junit.Assert.assertNotNull(elements18); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertEquals("'" + str33 + "' != '" + ".#document" + "'", str33, ".#document"); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + quirksMode56 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode56.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertNotNull(document69); org.junit.Assert.assertNotNull(elements71); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertNull(node75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertNotNull(tag77); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); }
public void test634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test634"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); int int12 = document10.siblingIndex(); org.jsoup.nodes.Element element14 = document10.prependElement("[^:containsOwn(hi!]"); org.jsoup.nodes.Node node15 = element14.clone(); java.util.List<org.jsoup.nodes.Node> nodeList16 = node15.childNodes(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(node15); org.junit.Assert.assertNotNull(nodeList16); }
public void test635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test635"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist5.addTags(strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); boolean boolean21 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist20); org.jsoup.safety.Whitelist whitelist25 = whitelist20.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner31 = new org.jsoup.safety.Cleaner(whitelist28); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist35 = whitelist33.preserveRelativeLinks(false); boolean boolean36 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist33); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.basic(); boolean boolean39 = org.jsoup.Jsoup.isValid("hi!", whitelist38); java.lang.String[] strArray47 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist48 = whitelist38.addProtocols(".#document", "#doctype=\"\"", strArray47); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray47, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray47); org.jsoup.safety.Whitelist whitelist52 = whitelist33.addTags(strArray47); org.jsoup.safety.Whitelist whitelist53 = whitelist28.addTags(strArray47); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray47); org.jsoup.safety.Whitelist whitelist55 = whitelist20.addProtocols("hi! hi! #comment", "[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]", strArray47); boolean boolean56 = org.jsoup.helper.StringUtil.in("[hi!=:eq(52)]", strArray47); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); }
public void test636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test636"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); boolean boolean7 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist4); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basic(); boolean boolean10 = org.jsoup.Jsoup.isValid("hi!", whitelist9); java.lang.String[] strArray18 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist19 = whitelist9.addProtocols(".#document", "#doctype=\"\"", strArray18); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray18, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray18); org.jsoup.safety.Whitelist whitelist23 = whitelist4.addTags(strArray18); org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.prettyPrint(false); java.nio.charset.Charset charset27 = outputSettings24.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings24.indentAmount((int) '4'); java.nio.charset.Charset charset30 = outputSettings24.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.prettyPrint(false); int int34 = outputSettings33.indentAmount(); java.nio.charset.Charset charset35 = outputSettings33.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings24.charset(charset35); java.nio.charset.Charset[] charsetArray37 = new java.nio.charset.Charset[] { charset35 }; java.util.LinkedList<java.nio.charset.Charset> charsetList38 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList38, charsetArray37); java.nio.charset.Charset charset40 = charsetList38.pop(); org.jsoup.safety.Whitelist whitelist42 = org.jsoup.safety.Whitelist.basic(); boolean boolean43 = org.jsoup.Jsoup.isValid("hi!", whitelist42); java.lang.String[] strArray51 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist52 = whitelist42.addProtocols(".#document", "#doctype=\"\"", strArray51); org.jsoup.safety.Cleaner cleaner53 = new org.jsoup.safety.Cleaner(whitelist42); boolean boolean54 = charsetList38.contains((java.lang.Object) whitelist42); org.jsoup.safety.Whitelist whitelist57 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes59 = whitelist57.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist62 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist64 = whitelist62.preserveRelativeLinks(false); boolean boolean65 = org.jsoup.Jsoup.isValid("", whitelist62); java.lang.String[] strArray71 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist72 = whitelist62.addTags(strArray71); org.jsoup.safety.Whitelist whitelist73 = whitelist57.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray71); org.jsoup.safety.Whitelist whitelist74 = whitelist42.addProtocols("#<html> <head></head> <body> hi! </body> </html>", "[[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>]", strArray71); org.jsoup.safety.Whitelist whitelist75 = whitelist4.addTags(strArray71); org.jsoup.safety.Whitelist whitelist79 = whitelist75.addEnforcedAttribute("[.#document$=:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", "hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;", "hi! =&quot;&quot;"); java.lang.String str80 = org.jsoup.Jsoup.clean("hi!  hi!", whitelist75); java.lang.String str81 = org.jsoup.Jsoup.clean("<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>\n<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", " ", whitelist75); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(charset27); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(charset30); org.junit.Assert.assertNotNull(outputSettings33); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1); org.junit.Assert.assertNotNull(charset35); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertNotNull(charsetArray37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(charset40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(attributes59); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true); org.junit.Assert.assertNotNull(strArray71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertNotNull(whitelist74); org.junit.Assert.assertNotNull(whitelist75); org.junit.Assert.assertNotNull(whitelist79); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi! hi!" + "'", str80, "hi! hi!"); org.junit.Assert.assertEquals("'" + str81 + "' != '" + "&lt;#root class=&quot;&quot;&gt;  hi!    hi!  &lt;#root class=&quot;&quot;&gt;  hi!" + "'", str81, "&lt;#root class=&quot;&quot;&gt;  hi!    hi!  &lt;#root class=&quot;&quot;&gt;  hi!"); }
public void test637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test637"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); org.jsoup.nodes.Element element39 = document17.removeClass("\n<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->"); java.lang.String str41 = element39.absUrl("[[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>]"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); }
public void test638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test638"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean3 = org.jsoup.Jsoup.isValid("#document", whitelist2); java.lang.String str4 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist2); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist2.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray16); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode22 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document23 = document21.quirksMode(quirksMode22); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.basic(); boolean boolean26 = org.jsoup.Jsoup.isValid("hi!", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addProtocols(".#document", "#doctype=\"\"", strArray34); org.jsoup.select.Evaluator.AttributeStarting attributeStarting38 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray46 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46); org.jsoup.nodes.Element element49 = document44.classNames((java.util.Set<java.lang.String>) strSet47); document44.title("#document"); boolean boolean52 = attributeStarting38.matches((org.jsoup.nodes.Element) document41, (org.jsoup.nodes.Element) document44); java.lang.String str53 = document41.id(); org.jsoup.select.Elements elements55 = document41.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements57 = document41.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute60 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean61 = whitelist25.isSafeAttribute("", (org.jsoup.nodes.Element) document41, attribute60); boolean boolean62 = whitelist18.isSafeAttribute("", (org.jsoup.nodes.Element) document21, attribute60); java.util.List<org.jsoup.nodes.Node> nodeList63 = document21.childNodes(); org.jsoup.select.Elements elements64 = document21.children(); boolean boolean65 = document21.hasText(); org.jsoup.nodes.Document document67 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element69 = document67.createElement("#document"); org.jsoup.nodes.Element element70 = document21.appendChild((org.jsoup.nodes.Node) document67); org.jsoup.select.Elements elements72 = document21.getElementsContainingOwnText("<#root class=\"\" hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\">\n <html>\n <head></head>\n <body>\n </body>\n </html>\n</#root>:eq(52)"); int int73 = document21.siblingIndex(); // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements76 = document21.getElementsByAttributeValue("", ".hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str4, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + quirksMode22 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode22.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, ""); org.junit.Assert.assertNotNull(elements55); org.junit.Assert.assertNotNull(elements57); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(nodeList63); org.junit.Assert.assertNotNull(elements64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(elements72); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0); }
public void test639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test639"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray4 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4); org.jsoup.nodes.Element element7 = document2.classNames((java.util.Set<java.lang.String>) strSet5); java.lang.String str8 = document2.nodeName(); org.jsoup.select.Elements elements10 = document2.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Element element16 = document13.addClass(""); org.jsoup.nodes.Element element17 = document2.appendChild((org.jsoup.nodes.Node) document13); org.jsoup.nodes.Element element19 = document13.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Element element25 = document22.addClass(""); java.lang.String str26 = document22.toString(); org.jsoup.nodes.Element element28 = document22.text(".#document"); org.jsoup.nodes.Node node29 = element19.after((org.jsoup.nodes.Node) document22); org.jsoup.nodes.Element element31 = element19.prependText("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str35 = org.jsoup.Jsoup.clean("", "#data", whitelist34); org.jsoup.safety.Cleaner cleaner36 = new org.jsoup.safety.Cleaner(whitelist34); org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str41 = document40.val(); java.util.List<org.jsoup.nodes.Node> nodeList43 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document40, "#document"); java.lang.String str44 = document40.baseUri(); org.jsoup.nodes.Element element46 = document40.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements47 = document40.parents(); org.jsoup.nodes.Document document48 = cleaner36.clean(document40); boolean boolean49 = element31.equals((java.lang.Object) cleaner36); org.jsoup.nodes.Element element50 = element31.clone(); org.jsoup.select.Elements elements53 = element50.getElementsByAttributeValueMatching("\n<!--<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"-->", "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); org.jsoup.nodes.Element element55 = element50.prependElement("[:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>$=<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>]"); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str59 = document58.val(); org.jsoup.nodes.Element element61 = document58.append("#document"); java.lang.String str62 = element61.nodeName(); org.jsoup.select.Elements elements64 = element61.getElementsMatchingOwnText("#root"); element55.replaceWith((org.jsoup.nodes.Node) element61); java.lang.String str66 = element55.html(); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#document" + "'", str8, "#document"); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str26, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(node29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(nodeList43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!"); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(elements47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(elements53); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, ""); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "#document" + "'", str62, "#document"); org.junit.Assert.assertNotNull(elements64); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, ""); }
public void test640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test640"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan16 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (byte) 1); java.lang.String str17 = indexGreaterThan16.toString(); org.jsoup.nodes.Document document19 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray24 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24); org.jsoup.nodes.Element element27 = document22.classNames((java.util.Set<java.lang.String>) strSet25); org.jsoup.nodes.Element element28 = document19.appendChild((org.jsoup.nodes.Node) element27); org.jsoup.nodes.Document.QuirksMode quirksMode29 = document19.quirksMode(); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("", "hi!"); java.lang.String str33 = document32.data(); boolean boolean34 = indexGreaterThan16.matches((org.jsoup.nodes.Element) document19, (org.jsoup.nodes.Element) document32); java.lang.String str35 = document19.val(); boolean boolean36 = cleaner3.isValid(document19); java.util.regex.Pattern pattern38 = null; org.jsoup.select.Elements elements39 = document19.getElementsByAttributeValueMatching("", pattern38); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertEquals("'" + str17 + "' != '" + ":gt(1)" + "'", str17, ":gt(1)"); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertTrue("'" + quirksMode29 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode29.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(elements39); }
public void test641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test641"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist4.addTags(strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist1.addTags(strArray16); boolean boolean20 = org.jsoup.Jsoup.isValid("#doctype", whitelist1); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); boolean boolean27 = org.jsoup.Jsoup.isValid("", whitelist24); java.lang.String[] strArray33 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist34 = whitelist24.addTags(strArray33); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray33); org.jsoup.safety.Whitelist whitelist36 = whitelist1.addProtocols("hi! hi! #comment", "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\":contains(&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", strArray33); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner41 = new org.jsoup.safety.Cleaner(whitelist38); org.jsoup.safety.Whitelist whitelist43 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist45 = whitelist43.preserveRelativeLinks(false); boolean boolean46 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist43); org.jsoup.safety.Whitelist whitelist48 = org.jsoup.safety.Whitelist.basic(); boolean boolean49 = org.jsoup.Jsoup.isValid("hi!", whitelist48); java.lang.String[] strArray57 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist58 = whitelist48.addProtocols(".#document", "#doctype=\"\"", strArray57); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray57, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray57); org.jsoup.safety.Whitelist whitelist62 = whitelist43.addTags(strArray57); org.jsoup.safety.Whitelist whitelist63 = whitelist38.addTags(strArray57); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray57); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray57, "hi!  hi! =&quot;&quot;"); org.jsoup.safety.Whitelist whitelist67 = whitelist1.addAttributes("#<html> <head></head> <body> hi! </body> </html>", strArray57); org.jsoup.safety.Whitelist whitelist69 = whitelist67.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner70 = new org.jsoup.safety.Cleaner(whitelist67); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true); org.junit.Assert.assertNotNull(strArray57); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(whitelist69); }
public void test642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test642"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner10 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Node node16 = document14.removeAttr("#doctype"); org.jsoup.nodes.Document document17 = cleaner10.clean(document14); org.jsoup.nodes.Attributes attributes18 = document17.attributes(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Node node28 = document26.removeAttr("#doctype"); org.jsoup.nodes.Document document29 = cleaner22.clean(document26); org.jsoup.nodes.Attributes attributes30 = document29.attributes(); boolean boolean31 = containsOwnText6.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document29); boolean boolean32 = cleaner4.isValid(document17); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean37 = document35.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document38 = cleaner4.clean(document35); org.jsoup.nodes.Document document41 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("<html> <head></head> <body> hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; </body> </html>", " class=\"\""); org.jsoup.nodes.Document document42 = cleaner4.clean(document41); org.jsoup.select.Elements elements44 = document41.getElementsByIndexLessThan(3); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(node16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(attributes18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(node28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(elements44); }
public void test643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test643"); org.jsoup.safety.Whitelist whitelist3 = new org.jsoup.safety.Whitelist(); boolean boolean4 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist3); java.lang.String str5 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist3); org.jsoup.nodes.Document document8 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Element element17 = document8.appendChild((org.jsoup.nodes.Node) element16); java.lang.String str19 = document8.absUrl("hi!"); org.jsoup.nodes.Attribute attribute22 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean23 = whitelist3.isSafeAttribute("", (org.jsoup.nodes.Element) document8, attribute22); org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("", "hi!"); boolean boolean27 = attribute22.equals((java.lang.Object) document26); java.lang.String str28 = attribute22.toString(); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!:matchesOwn(null" + "'", str5, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertEquals("'" + str28 + "' != '" + ":matchesown(null=\"#document\"" + "'", str28, ":matchesown(null=\"#document\""); }
public void test644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test644"); org.jsoup.safety.Whitelist whitelist4 = new org.jsoup.safety.Whitelist(); boolean boolean5 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist4); java.lang.String str6 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist4); org.jsoup.nodes.Document document9 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray14 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14); org.jsoup.nodes.Element element17 = document12.classNames((java.util.Set<java.lang.String>) strSet15); org.jsoup.nodes.Element element18 = document9.appendChild((org.jsoup.nodes.Node) element17); java.lang.String str20 = document9.absUrl("hi!"); org.jsoup.nodes.Attribute attribute23 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean24 = whitelist4.isSafeAttribute("", (org.jsoup.nodes.Element) document9, attribute23); java.lang.String str25 = org.jsoup.Jsoup.clean("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]", whitelist4); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str31 = document30.val(); java.util.List<org.jsoup.nodes.Node> nodeList33 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document30, "#document"); java.lang.String str34 = document30.baseUri(); org.jsoup.nodes.Element element36 = document30.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.basic(); boolean boolean39 = org.jsoup.Jsoup.isValid("hi!", whitelist38); java.lang.String[] strArray47 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist48 = whitelist38.addProtocols(".#document", "#doctype=\"\"", strArray47); org.jsoup.select.Evaluator.AttributeStarting attributeStarting51 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document54 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray59 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59); org.jsoup.nodes.Element element62 = document57.classNames((java.util.Set<java.lang.String>) strSet60); document57.title("#document"); boolean boolean65 = attributeStarting51.matches((org.jsoup.nodes.Element) document54, (org.jsoup.nodes.Element) document57); java.lang.String str66 = document54.id(); org.jsoup.select.Elements elements68 = document54.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements70 = document54.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute73 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean74 = whitelist38.isSafeAttribute("", (org.jsoup.nodes.Element) document54, attribute73); boolean boolean75 = whitelist4.isSafeAttribute("[#document^=#doctype]", (org.jsoup.nodes.Element) document30, attribute73); java.lang.String str76 = attribute73.toString(); attribute73.setKey("[:containsown(hi!:matchesown(null=&quot;&quot;*=:lt(10)]"); java.lang.String str79 = attribute73.getValue(); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!:matchesOwn(null" + "'", str6, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]" + "'", str25, "[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(nodeList33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, ""); org.junit.Assert.assertNotNull(elements68); org.junit.Assert.assertNotNull(elements70); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertEquals("'" + str76 + "' != '" + ":matchesown(null=\"#document\"" + "'", str76, ":matchesown(null=\"#document\""); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "#document" + "'", str79, "#document"); }
public void test645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test645"); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList0 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings3.charset(); charsetList0.addFirst(charset4); java.util.Iterator<java.nio.charset.Charset> charsetItor6 = charsetList0.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList7 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); java.nio.charset.Charset charset11 = outputSettings10.charset(); charsetList7.addFirst(charset11); boolean boolean13 = charsetList0.offerFirst(charset11); int int14 = charsetList0.size(); java.nio.charset.Charset charset15 = charsetList0.peekLast(); java.nio.charset.Charset charset16 = charsetList0.pop(); java.nio.charset.Charset charset17 = charsetList0.peekLast(); java.util.Spliterator<java.nio.charset.Charset> charsetSpliterator18 = charsetList0.spliterator(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str22 = org.jsoup.Jsoup.clean("", "#data", whitelist21); org.jsoup.safety.Cleaner cleaner23 = new org.jsoup.safety.Cleaner(whitelist21); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document27 = document26.clone(); org.jsoup.select.Elements elements29 = document27.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements31 = document27.getElementsByAttribute("#document"); org.jsoup.select.Elements elements34 = document27.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document35 = cleaner23.clean(document27); boolean boolean36 = charsetList0.remove((java.lang.Object) document35); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList37 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.prettyPrint(false); java.nio.charset.Charset charset41 = outputSettings40.charset(); charsetList37.addFirst(charset41); java.util.Iterator<java.nio.charset.Charset> charsetItor43 = charsetList37.iterator(); org.jsoup.nodes.Document document45 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element47 = document45.createElement("#document"); org.jsoup.nodes.Document document48 = document45.clone(); java.lang.String str49 = document45.val(); org.jsoup.nodes.Node node52 = document45.attr("#doctype", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean53 = charsetList37.removeLastOccurrence((java.lang.Object) "#doctype"); java.nio.charset.Charset charset54 = charsetList37.peekFirst(); charsetList0.push(charset54); org.jsoup.nodes.Document document57 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray62 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62); org.jsoup.nodes.Element element65 = document60.classNames((java.util.Set<java.lang.String>) strSet63); org.jsoup.nodes.Element element66 = document57.appendChild((org.jsoup.nodes.Node) element65); java.lang.String str68 = document57.absUrl("hi!"); org.jsoup.nodes.Node node69 = document57.nextSibling(); org.jsoup.nodes.Element element71 = document57.text("[#document^=#doctype]"); org.jsoup.parser.Tag tag72 = document57.tag(); boolean boolean73 = charsetList0.removeLastOccurrence((java.lang.Object) tag72); java.util.Iterator<java.nio.charset.Charset> charsetItor74 = charsetList0.iterator(); java.nio.charset.Charset charset75 = charsetList0.pollFirst(); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(charsetItor6); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(charsetSpliterator18); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(charset41); org.junit.Assert.assertNotNull(charsetItor43); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); org.junit.Assert.assertNotNull(node52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(charset54); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, ""); org.junit.Assert.assertNull(node69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(tag72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(charsetItor74); org.junit.Assert.assertNotNull(charset75); }
public void test646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test646"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.indentAmount((int) '4'); java.nio.charset.Charset charset6 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); int int10 = outputSettings9.indentAmount(); java.nio.charset.Charset charset11 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.charset(charset11); java.nio.charset.Charset[] charsetArray13 = new java.nio.charset.Charset[] { charset11 }; java.util.LinkedList<java.nio.charset.Charset> charsetList14 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList14, charsetArray13); java.nio.charset.Charset charset16 = charsetList14.pop(); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basic(); boolean boolean19 = org.jsoup.Jsoup.isValid("hi!", whitelist18); java.lang.String[] strArray27 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist28 = whitelist18.addProtocols(".#document", "#doctype=\"\"", strArray27); org.jsoup.safety.Cleaner cleaner29 = new org.jsoup.safety.Cleaner(whitelist18); boolean boolean30 = charsetList14.contains((java.lang.Object) whitelist18); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan33 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (byte) 1); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element36 = document35.body(); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element39 = document38.body(); boolean boolean40 = indexGreaterThan33.matches(element36, (org.jsoup.nodes.Element) document38); org.jsoup.nodes.Attribute attribute43 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute43.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str46 = attribute43.getKey(); java.lang.String str47 = attribute43.html(); boolean boolean48 = whitelist18.isSafeAttribute("#doctype=\"\"", element36, attribute43); java.lang.String str50 = attribute43.setValue(":contains([#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); java.lang.String str51 = attribute43.getKey(); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(charset6); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charsetArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str46, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"" + "'", str47, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str51, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); }
public void test647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test647"); org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) (byte) 1); org.jsoup.nodes.Element element2 = null; org.jsoup.parser.Tag tag4 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean5 = tag4.canContainBlock(); boolean boolean6 = tag4.formatAsBlock(); boolean boolean7 = tag4.isEmpty(); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist9); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); org.jsoup.nodes.Node node18 = document16.removeAttr("#doctype"); org.jsoup.nodes.Document document19 = cleaner12.clean(document16); org.jsoup.nodes.Attributes attributes20 = document19.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator21 = attributes20.spliterator(); org.jsoup.nodes.Element element22 = new org.jsoup.nodes.Element(tag4, "hi!:matchesOwn(null", attributes20); org.jsoup.nodes.Element element24 = element22.html("[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.jsoup.nodes.Element element26 = element24.toggleClass(""); boolean boolean27 = element26.hasText(); java.lang.String str28 = element26.text(); boolean boolean29 = indexLessThan1.matches(element2, element26); org.junit.Assert.assertNotNull(tag4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(node18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(attributeSpliterator21); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ hi! <#root class=\"\"> hi! !=#doctype=\"\"]" + "'", str28, "[ hi! <#root class=\"\"> hi! !=#doctype=\"\"]"); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); }
public void test648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test648"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); boolean boolean8 = org.jsoup.Jsoup.isValid("", whitelist5); java.lang.String[] strArray14 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist15 = whitelist5.addTags(strArray14); org.jsoup.safety.Whitelist whitelist16 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray14); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); boolean boolean27 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist24); org.jsoup.safety.Whitelist whitelist29 = org.jsoup.safety.Whitelist.basic(); boolean boolean30 = org.jsoup.Jsoup.isValid("hi!", whitelist29); java.lang.String[] strArray38 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist39 = whitelist29.addProtocols(".#document", "#doctype=\"\"", strArray38); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray38, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray38); org.jsoup.safety.Whitelist whitelist43 = whitelist24.addTags(strArray38); org.jsoup.safety.Whitelist whitelist44 = whitelist19.addTags(strArray38); org.jsoup.safety.Whitelist whitelist45 = whitelist0.addProtocols("#data", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray38); org.jsoup.nodes.Attributes attributes47 = whitelist0.getEnforcedAttributes("utf-8utf-8=\"#data\""); org.jsoup.safety.Cleaner cleaner48 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.safety.Cleaner cleaner49 = new org.jsoup.safety.Cleaner(whitelist0); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(attributes47); }
public void test649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test649"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); org.jsoup.nodes.Attributes attributes12 = attributes11.clone(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertNotNull(attributes12); }
public void test650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test650"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray10 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10); org.jsoup.nodes.Element element13 = document8.classNames((java.util.Set<java.lang.String>) strSet11); java.lang.String str14 = document8.nodeName(); java.lang.String str15 = document8.html(); boolean boolean16 = cleaner5.isValid(document8); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element19 = document18.body(); java.lang.String str20 = document18.toString(); org.jsoup.nodes.Document document21 = cleaner5.clean(document18); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document25 = document24.clone(); org.jsoup.nodes.Element element27 = document24.addClass(""); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str32 = document31.val(); java.util.List<org.jsoup.nodes.Node> nodeList34 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document31, "#document"); java.lang.String str35 = document31.baseUri(); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str39 = document38.val(); org.jsoup.nodes.Element element41 = document38.append("#document"); org.jsoup.nodes.Element element42 = document31.appendChild((org.jsoup.nodes.Node) element41); org.jsoup.nodes.Element element43 = document24.prependChild((org.jsoup.nodes.Node) document31); org.jsoup.nodes.Attributes attributes44 = element43.attributes(); java.lang.String str45 = element43.baseUri(); java.lang.String str46 = element43.text(); org.jsoup.nodes.Element element48 = element43.toggleClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean49 = containsOwnText1.matches((org.jsoup.nodes.Element) document21, element43); org.jsoup.select.Elements elements52 = element43.getElementsByAttributeValueNot("hi!:matchesown(null=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;", ".#document"); org.jsoup.nodes.Element element54 = element43.removeClass(" class=\" #doctype\""); org.jsoup.nodes.Node node56 = element54.childNode(0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#document" + "'", str14, "#document"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str15, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str20, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, ""); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!"); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, ""); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(attributes44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "#document" + "'", str45, "#document"); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi! hi!#document hi!" + "'", str46, "hi! hi!#document hi!"); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(elements52); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(node56); }
public void test651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test651"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); java.nio.charset.Charset[] charsetArray4 = new java.nio.charset.Charset[] { charset3 }; java.util.LinkedList<java.nio.charset.Charset> charsetList5 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList5, charsetArray4); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); java.nio.charset.Charset charset10 = outputSettings7.charset(); boolean boolean11 = charsetList5.add(charset10); java.lang.Object obj12 = null; boolean boolean13 = charsetList5.removeLastOccurrence(obj12); java.nio.charset.Charset charset14 = charsetList5.pollFirst(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList15 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.prettyPrint(false); java.nio.charset.Charset charset19 = outputSettings18.charset(); charsetList15.addFirst(charset19); java.util.Iterator<java.nio.charset.Charset> charsetItor21 = charsetList15.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList22 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.prettyPrint(false); java.nio.charset.Charset charset26 = outputSettings25.charset(); charsetList22.addFirst(charset26); boolean boolean28 = charsetList15.offerFirst(charset26); int int29 = charsetList15.size(); java.nio.charset.Charset charset30 = charsetList15.peekLast(); charsetList5.addFirst(charset30); java.nio.charset.Charset charset32 = charsetList5.poll(); java.nio.charset.Charset charset33 = charsetList5.removeFirst(); java.nio.charset.Charset charset34 = charsetList5.pollFirst(); java.nio.charset.Charset charset35 = charsetList5.peek(); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist43 = org.jsoup.safety.Whitelist.basic(); boolean boolean44 = org.jsoup.Jsoup.isValid("hi!", whitelist43); java.lang.String[] strArray52 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist53 = whitelist43.addProtocols(".#document", "#doctype=\"\"", strArray52); org.jsoup.safety.Whitelist whitelist54 = whitelist40.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray52); org.jsoup.safety.Whitelist whitelist55 = whitelist36.addAttributes(":containsOwn(hi!:matchesown(null", strArray52); java.lang.String[] strArray56 = charsetList5.toArray(strArray52); int int57 = charsetList5.size(); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(charsetArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(charset14); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charset19); org.junit.Assert.assertNotNull(charsetItor21); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(charset26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2); org.junit.Assert.assertNotNull(charset30); org.junit.Assert.assertNotNull(charset32); org.junit.Assert.assertNotNull(charset33); org.junit.Assert.assertNull(charset34); org.junit.Assert.assertNull(charset35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(strArray52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(strArray56); org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0); }
public void test652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test652"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray10 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10); org.jsoup.nodes.Element element13 = document8.classNames((java.util.Set<java.lang.String>) strSet11); java.lang.String str14 = document8.nodeName(); java.lang.String str15 = document8.html(); boolean boolean16 = cleaner5.isValid(document8); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element19 = document18.body(); java.lang.String str20 = document18.toString(); org.jsoup.nodes.Document document21 = cleaner5.clean(document18); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document25 = document24.clone(); org.jsoup.nodes.Element element27 = document24.addClass(""); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str32 = document31.val(); java.util.List<org.jsoup.nodes.Node> nodeList34 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document31, "#document"); java.lang.String str35 = document31.baseUri(); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str39 = document38.val(); org.jsoup.nodes.Element element41 = document38.append("#document"); org.jsoup.nodes.Element element42 = document31.appendChild((org.jsoup.nodes.Node) element41); org.jsoup.nodes.Element element43 = document24.prependChild((org.jsoup.nodes.Node) document31); org.jsoup.nodes.Attributes attributes44 = element43.attributes(); java.lang.String str45 = element43.baseUri(); java.lang.String str46 = element43.text(); org.jsoup.nodes.Element element48 = element43.toggleClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean49 = containsOwnText1.matches((org.jsoup.nodes.Element) document21, element43); java.lang.String str50 = containsOwnText1.toString(); java.lang.String str51 = containsOwnText1.toString(); java.lang.String str52 = containsOwnText1.toString(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#document" + "'", str14, "#document"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str15, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str20, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, ""); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!"); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, ""); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(attributes44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "#document" + "'", str45, "#document"); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi! hi!#document hi!" + "'", str46, "hi! hi!#document hi!"); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertEquals("'" + str50 + "' != '" + ":containsOwn(hi!" + "'", str50, ":containsOwn(hi!"); org.junit.Assert.assertEquals("'" + str51 + "' != '" + ":containsOwn(hi!" + "'", str51, ":containsOwn(hi!"); org.junit.Assert.assertEquals("'" + str52 + "' != '" + ":containsOwn(hi!" + "'", str52, ":containsOwn(hi!"); }
public void test653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test653"); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList0 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings3.charset(); charsetList0.addFirst(charset4); java.util.Iterator<java.nio.charset.Charset> charsetItor6 = charsetList0.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList7 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); java.nio.charset.Charset charset11 = outputSettings10.charset(); charsetList7.addFirst(charset11); boolean boolean13 = charsetList0.offerFirst(charset11); int int14 = charsetList0.size(); java.nio.charset.Charset charset15 = charsetList0.peekLast(); java.nio.charset.Charset charset16 = charsetList0.pop(); java.nio.charset.Charset charset17 = charsetList0.peekLast(); java.util.Spliterator<java.nio.charset.Charset> charsetSpliterator18 = charsetList0.spliterator(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str22 = org.jsoup.Jsoup.clean("", "#data", whitelist21); org.jsoup.safety.Cleaner cleaner23 = new org.jsoup.safety.Cleaner(whitelist21); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document27 = document26.clone(); org.jsoup.select.Elements elements29 = document27.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements31 = document27.getElementsByAttribute("#document"); org.jsoup.select.Elements elements34 = document27.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document35 = cleaner23.clean(document27); boolean boolean36 = charsetList0.remove((java.lang.Object) document35); java.nio.charset.Charset charset37 = charsetList0.getLast(); java.util.Spliterator<java.nio.charset.Charset> charsetSpliterator38 = charsetList0.spliterator(); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(charsetItor6); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(charsetSpliterator18); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(charset37); org.junit.Assert.assertNotNull(charsetSpliterator38); }
public void test654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test654"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); document11.title("#document"); boolean boolean19 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document11); org.jsoup.nodes.Element element21 = document11.html(""); java.lang.String str22 = element21.html(); java.lang.String str23 = element21.html(); org.jsoup.nodes.Attribute attribute26 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute27 = attribute26.clone(); java.lang.String str28 = attribute27.getKey(); java.lang.String str29 = attribute27.getValue(); org.jsoup.nodes.DocumentType documentType34 = new org.jsoup.nodes.DocumentType("#doctype", "#document", "#doctype", "hi!"); java.lang.String str35 = documentType34.nodeName(); java.lang.String str36 = documentType34.nodeName(); boolean boolean37 = attribute27.equals((java.lang.Object) str36); boolean boolean38 = whitelist1.isSafeAttribute("#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", element21, attribute27); java.lang.String str39 = element21.text(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node41 = element21.after("hi!hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(attribute26); org.junit.Assert.assertNotNull(attribute27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str28, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str29, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "#doctype" + "'", str35, "#doctype"); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "#doctype" + "'", str36, "#doctype"); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, ""); }
public void test655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test655"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist4.addTags(strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist1.addTags(strArray16); boolean boolean20 = org.jsoup.helper.StringUtil.in(":gt(1)=\":gt(1)\"", strArray16); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test656"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addProtocols(".#document", "#doctype=\"\"", strArray11); boolean boolean14 = whitelist2.isSafeTag(""); boolean boolean16 = whitelist2.isSafeTag(":containsOwn(hi!:matchesown(null"); boolean boolean17 = org.jsoup.Jsoup.isValid("UTF-8<html>\n <head>\n <title>#document</title>\n </head>\n <body>\n hi!\n </body>\n</html>UTF-8", whitelist2); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test657"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basic(); boolean boolean6 = org.jsoup.Jsoup.isValid("hi!", whitelist5); java.lang.String[] strArray14 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist15 = whitelist5.addProtocols(".#document", "#doctype=\"\"", strArray14); org.jsoup.safety.Whitelist whitelist16 = whitelist2.addTags(strArray14); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); java.lang.String str22 = org.jsoup.Jsoup.clean(".#document", whitelist21); org.jsoup.safety.Whitelist whitelist26 = whitelist21.addEnforcedAttribute("\n<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->", ":matchesown(null=\"#document\"", "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist27 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str31 = org.jsoup.Jsoup.clean("", "#data", whitelist30); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.basic(); boolean boolean34 = org.jsoup.Jsoup.isValid("hi!", whitelist33); java.lang.String[] strArray42 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist43 = whitelist33.addProtocols(".#document", "#doctype=\"\"", strArray42); org.jsoup.safety.Whitelist whitelist44 = whitelist30.addTags(strArray42); org.jsoup.safety.Whitelist whitelist45 = whitelist27.addTags(strArray42); org.jsoup.safety.Whitelist whitelist46 = whitelist26.addTags(strArray42); org.jsoup.safety.Whitelist whitelist47 = whitelist16.addAttributes("<html>\n <head></head> \n <body>\n hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>", strArray42); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + ".#document" + "'", str22, ".#document"); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist47); }
public void test658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test658"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList3 = attributes2.asList(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Node node13 = document11.removeAttr("#doctype"); org.jsoup.nodes.Document document14 = cleaner7.clean(document11); org.jsoup.nodes.Attributes attributes15 = document14.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator16 = attributes15.spliterator(); attributes2.addAll(attributes15); java.util.Map<java.lang.String, java.lang.String> strMap18 = attributes15.dataset(); int int19 = attributes15.size(); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(attributeList3); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(attributeSpliterator16); org.junit.Assert.assertNotNull(strMap18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); }
public void test659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test659"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.select.Elements elements15 = document13.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.Map<java.lang.String, java.lang.String> strMap16 = document13.dataset(); org.jsoup.nodes.Document document17 = cleaner3.clean(document13); java.lang.String str18 = document17.text(); java.util.regex.Pattern pattern19 = null; // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements20 = document17.getElementsMatchingOwnText(pattern19); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(strMap16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!"); }
public void test660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test660"); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray5 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5); org.jsoup.nodes.Element element8 = document3.classNames((java.util.Set<java.lang.String>) strSet6); java.lang.String str9 = document3.nodeName(); org.jsoup.select.Elements elements11 = document3.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document15 = document14.clone(); org.jsoup.nodes.Element element17 = document14.addClass(""); org.jsoup.nodes.Element element18 = document3.appendChild((org.jsoup.nodes.Node) document14); org.jsoup.nodes.Element element20 = document14.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document24 = document23.clone(); org.jsoup.nodes.Element element26 = document23.addClass(""); java.lang.String str27 = document23.toString(); org.jsoup.nodes.Element element29 = document23.text(".#document"); org.jsoup.nodes.Node node30 = element20.after((org.jsoup.nodes.Node) document23); org.jsoup.nodes.Element element32 = element20.prependText("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist35 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str36 = org.jsoup.Jsoup.clean("", "#data", whitelist35); org.jsoup.safety.Cleaner cleaner37 = new org.jsoup.safety.Cleaner(whitelist35); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str42 = document41.val(); java.util.List<org.jsoup.nodes.Node> nodeList44 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document41, "#document"); java.lang.String str45 = document41.baseUri(); org.jsoup.nodes.Element element47 = document41.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements48 = document41.parents(); org.jsoup.nodes.Document document49 = cleaner37.clean(document41); boolean boolean50 = element32.equals((java.lang.Object) cleaner37); org.jsoup.nodes.Element element51 = element32.clone(); org.jsoup.nodes.Node node53 = element32.removeAttr("[^[^:containsOwn(hi!]]"); org.jsoup.nodes.Attribute attribute56 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document60 = document59.clone(); org.jsoup.nodes.Element element62 = document59.addClass(""); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str67 = document66.val(); java.util.List<org.jsoup.nodes.Node> nodeList69 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document66, "#document"); java.lang.String str70 = document66.baseUri(); org.jsoup.nodes.Document document73 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str74 = document73.val(); org.jsoup.nodes.Element element76 = document73.append("#document"); org.jsoup.nodes.Element element77 = document66.appendChild((org.jsoup.nodes.Node) element76); org.jsoup.nodes.Element element78 = document59.prependChild((org.jsoup.nodes.Node) document66); boolean boolean79 = attribute56.equals((java.lang.Object) document66); org.jsoup.select.Elements elements82 = document66.getElementsByAttributeValueStarting("UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"UTF-8", "<html>\n <head></head>\n <body>\n </body>\n</html>"); org.jsoup.nodes.Element element84 = document66.append("[hi!:matchesown(null!=class=\" #doctype\"]"); element32.replaceWith((org.jsoup.nodes.Node) element84); java.util.List<org.jsoup.nodes.Node> nodeList87 = org.jsoup.parser.Parser.parseFragment(" [  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=\"##  hi!\" =\"#doctype\"", element84, "UTF-8bodyUTF-8"); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(strArray5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#document" + "'", str9, "#document"); org.junit.Assert.assertNotNull(elements11); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str27, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(node30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, ""); org.junit.Assert.assertNotNull(nodeList44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!"); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(elements48); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(node53); org.junit.Assert.assertNotNull(attribute56); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, ""); org.junit.Assert.assertNotNull(nodeList69); org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!"); org.junit.Assert.assertNotNull(document73); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, ""); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertNotNull(element77); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertNotNull(elements82); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertNotNull(nodeList87); }
public void test661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test661"); org.jsoup.safety.Whitelist.AttributeValue attributeValue1 = org.jsoup.safety.Whitelist.AttributeValue.valueOf(":containsown(hi!:matchesown(null=\"\""); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText8 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist9); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); org.jsoup.nodes.Node node18 = document16.removeAttr("#doctype"); org.jsoup.nodes.Document document19 = cleaner12.clean(document16); org.jsoup.nodes.Attributes attributes20 = document19.attributes(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist23 = whitelist21.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner24 = new org.jsoup.safety.Cleaner(whitelist21); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document28 = document27.clone(); org.jsoup.nodes.Node node30 = document28.removeAttr("#doctype"); org.jsoup.nodes.Document document31 = cleaner24.clean(document28); org.jsoup.nodes.Attributes attributes32 = document31.attributes(); boolean boolean33 = containsOwnText8.matches((org.jsoup.nodes.Element) document19, (org.jsoup.nodes.Element) document31); boolean boolean34 = cleaner6.isValid(document19); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean39 = document37.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document40 = cleaner6.clean(document37); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parseBodyFragment("#document"); org.jsoup.nodes.Document document43 = cleaner6.clean(document42); boolean boolean44 = attributeValue1.equals((java.lang.Object) document43); java.lang.String str45 = document43.title(); org.junit.Assert.assertNotNull(attributeValue1); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(node18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(node30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(attributes32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, ""); }
public void test662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test662"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist6); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.basic(); boolean boolean12 = org.jsoup.Jsoup.isValid("hi!", whitelist11); java.lang.String[] strArray20 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist21 = whitelist11.addProtocols(".#document", "#doctype=\"\"", strArray20); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray20, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray20); org.jsoup.safety.Whitelist whitelist25 = whitelist6.addTags(strArray20); org.jsoup.safety.Whitelist whitelist26 = whitelist1.addTags(strArray20); boolean boolean27 = org.jsoup.Jsoup.isValid(":contains([#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", whitelist26); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); }
public void test663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test663"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.safety.Whitelist whitelist3 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes5 = whitelist3.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist10 = whitelist8.preserveRelativeLinks(false); boolean boolean11 = org.jsoup.Jsoup.isValid("", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addTags(strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist0.addProtocols(":matchesOwn(null", ":matches(null", strArray17); org.jsoup.safety.Cleaner cleaner21 = new org.jsoup.safety.Cleaner(whitelist20); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document25 = document24.clone(); document25.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document28 = cleaner21.clean(document25); org.jsoup.nodes.Element element30 = document28.appendElement("<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>"); java.lang.String str31 = document28.outerHtml(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n <head></head>\n <body>\n  hi! \n </body>\n</html>\n<<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>></<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>>" + "'", str31, "<html>\n <head></head>\n <body>\n  hi! \n </body>\n</html>\n<<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>></<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>>"); }
public void test664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test664"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist5.addTags(strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); boolean boolean21 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist20); org.jsoup.safety.Whitelist whitelist25 = whitelist20.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist27 = whitelist20.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist34 = whitelist32.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.basic(); boolean boolean38 = org.jsoup.Jsoup.isValid("hi!", whitelist37); java.lang.String[] strArray46 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist47 = whitelist37.addProtocols(".#document", "#doctype=\"\"", strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist34.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray46); org.jsoup.safety.Whitelist whitelist49 = whitelist30.addAttributes(":containsOwn(hi!:matchesown(null", strArray46); boolean boolean50 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray46); org.jsoup.safety.Whitelist whitelist51 = whitelist27.addAttributes(":containsOwn(hi!:matchesown(null", strArray46); java.lang.String str52 = org.jsoup.Jsoup.clean(":containsOwn(hi!:matchesown(null", whitelist27); boolean boolean54 = whitelist27.isSafeTag("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">"); org.jsoup.safety.Whitelist whitelist58 = whitelist27.addEnforcedAttribute("##text", ":containsOwn([^hi!]", "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.jsoup.safety.Whitelist whitelist62 = whitelist27.addEnforcedAttribute("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "\n<!--:containsOwn(-->", "#hi!:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + ":containsOwn(hi!:matchesown(null" + "'", str52, ":containsOwn(hi!:matchesown(null"); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(whitelist62); }
public void test665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test665"); org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str3 = textNode2.toString(); org.jsoup.nodes.Attributes attributes4 = textNode2.attributes(); java.util.Map<java.lang.String, java.lang.String> strMap5 = attributes4.dataset(); java.util.Map<java.lang.String, java.lang.String> strMap6 = attributes4.dataset(); java.lang.String str7 = attributes4.html(); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor8 = attributes4.iterator(); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str18 = org.jsoup.Jsoup.clean("", "#data", whitelist17); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.basic(); boolean boolean21 = org.jsoup.Jsoup.isValid("hi!", whitelist20); java.lang.String[] strArray29 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist30 = whitelist20.addProtocols(".#document", "#doctype=\"\"", strArray29); org.jsoup.safety.Whitelist whitelist31 = whitelist17.addTags(strArray29); org.jsoup.safety.Whitelist whitelist32 = whitelist14.addTags(strArray29); boolean boolean33 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist32); org.jsoup.safety.Whitelist whitelist37 = whitelist32.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist39 = whitelist32.preserveRelativeLinks(true); boolean boolean40 = org.jsoup.Jsoup.isValid("", whitelist32); java.lang.String str41 = org.jsoup.Jsoup.clean(":matchesown(null=\"#document\"", whitelist32); java.lang.String str42 = org.jsoup.Jsoup.clean("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"", "                                                  ", whitelist32); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parseBodyFragment("#document"); org.jsoup.select.Elements elements47 = document46.getAllElements(); java.util.List<org.jsoup.nodes.Node> nodeList49 = org.jsoup.parser.Parser.parseFragment("#data", (org.jsoup.nodes.Element) document46, "#doctype=\"\""); org.jsoup.nodes.Attribute attribute52 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute53 = attribute52.clone(); attribute52.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean56 = whitelist32.isSafeAttribute("", (org.jsoup.nodes.Element) document46, attribute52); attributes4.put(attribute52); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(attributes4); org.junit.Assert.assertNotNull(strMap5); org.junit.Assert.assertNotNull(strMap6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " text=\"\"" + "'", str7, " text=\"\""); org.junit.Assert.assertNotNull(attributeItor8); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertEquals("'" + str41 + "' != '" + ":matchesown(null=&quot;#document&quot;" + "'", str41, ":matchesown(null=&quot;#document&quot;"); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;" + "'", str42, "hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;"); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(elements47); org.junit.Assert.assertNotNull(nodeList49); org.junit.Assert.assertNotNull(attribute52); org.junit.Assert.assertNotNull(attribute53); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); }
public void test001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test001"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); java.lang.String[] strArray6 = new java.lang.String[] { "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!" }; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist7 = whitelist0.addAttributes("", strArray6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(strArray6); }
public void test002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test002"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist4 = whitelist0.addEnforcedAttribute("hi!", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); }
public void test003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test003"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basic(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray6 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6); org.jsoup.nodes.Element element9 = document4.classNames((java.util.Set<java.lang.String>) strSet7); org.jsoup.nodes.Element element12 = element9.attr("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", ""); org.jsoup.nodes.Element element14 = element12.text(""); org.jsoup.nodes.Attribute attribute15 = null; // The following exception was thrown during execution in test generation try { boolean boolean16 = whitelist0.isSafeAttribute("hi!<html> <head></head> <body> hi! </body> </html>", element14, attribute15); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); }
public void test004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test004"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!", "", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#doctype" }; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist10 = whitelist0.addProtocols("#document", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(strArray9); }
public void test005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test005"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); java.lang.String[] strArray7 = new java.lang.String[] { ":gt(1)" }; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist8 = whitelist0.addProtocols("\n#document", "", strArray7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(strArray7); }
public void test006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test006"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.basicWithImages(); java.lang.String[] strArray6 = new java.lang.String[] { ":gt(1)", "#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "hi!<html> <head></head> <body> hi! </body> </html>" }; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist7 = whitelist0.addProtocols("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "", strArray6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(strArray6); }
public void test007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test007"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); // The following exception was thrown during execution in test generation try { attributes11.put("", ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); }
public void test008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test008"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); java.util.Map<java.lang.String, java.lang.String> strMap12 = attributes11.dataset(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertNotNull(strMap12); }
public void test009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test009"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.formatAsBlock(); boolean boolean4 = tag1.isEmpty(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist6); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document13 = document12.clone(); org.jsoup.nodes.Node node15 = document13.removeAttr("#doctype"); org.jsoup.nodes.Document document16 = cleaner9.clean(document13); org.jsoup.nodes.Attributes attributes17 = document16.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator18 = attributes17.spliterator(); org.jsoup.nodes.Element element19 = new org.jsoup.nodes.Element(tag1, "hi!:matchesOwn(null", attributes17); int int20 = attributes17.size(); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(node15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(attributes17); org.junit.Assert.assertNotNull(attributeSpliterator18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); }
public void test010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test010"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element12 = document7.createElement(""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); }
public void test011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test011"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.formatAsBlock(); boolean boolean4 = tag1.isEmpty(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist6); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document13 = document12.clone(); org.jsoup.nodes.Node node15 = document13.removeAttr("#doctype"); org.jsoup.nodes.Document document16 = cleaner9.clean(document13); org.jsoup.nodes.Attributes attributes17 = document16.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator18 = attributes17.spliterator(); org.jsoup.nodes.Element element19 = new org.jsoup.nodes.Element(tag1, "hi!:matchesOwn(null", attributes17); org.jsoup.select.Elements elements21 = element19.getElementsByAttribute("                          "); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(node15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(attributes17); org.junit.Assert.assertNotNull(attributeSpliterator18); org.junit.Assert.assertNotNull(elements21); }
public void test012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test012"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.formatAsBlock(); boolean boolean4 = tag1.isEmpty(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist6); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document13 = document12.clone(); org.jsoup.nodes.Node node15 = document13.removeAttr("#doctype"); org.jsoup.nodes.Document document16 = cleaner9.clean(document13); org.jsoup.nodes.Attributes attributes17 = document16.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator18 = attributes17.spliterator(); org.jsoup.nodes.Element element19 = new org.jsoup.nodes.Element(tag1, "hi!:matchesOwn(null", attributes17); boolean boolean20 = tag1.isBlock(); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(node15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(attributes17); org.junit.Assert.assertNotNull(attributeSpliterator18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test013"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings2.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings4.prettyPrint(false); int int7 = outputSettings6.indentAmount(); java.nio.charset.Charset charset8 = outputSettings6.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.prettyPrint(false); java.nio.charset.Charset charset12 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.prettyPrint(false); java.nio.charset.Charset charset16 = outputSettings15.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.prettyPrint(false); java.nio.charset.Charset charset20 = outputSettings17.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.indentAmount((int) '4'); java.nio.charset.Charset charset23 = outputSettings17.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.prettyPrint(false); int int27 = outputSettings26.indentAmount(); java.nio.charset.Charset charset28 = outputSettings26.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings17.charset(charset28); java.nio.charset.Charset[] charsetArray30 = new java.nio.charset.Charset[] { charset3, charset8, charset12, charset16, charset28 }; java.util.LinkedList<java.nio.charset.Charset> charsetList31 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList31, charsetArray30); java.util.Iterator<java.nio.charset.Charset> charsetItor33 = charsetList31.iterator(); org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.prettyPrint(false); java.nio.charset.Charset charset37 = outputSettings34.charset(); java.nio.charset.Charset[] charsetArray38 = new java.nio.charset.Charset[] { charset37 }; java.util.LinkedList<java.nio.charset.Charset> charsetList39 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList39, charsetArray38); org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.prettyPrint(false); java.nio.charset.Charset charset44 = outputSettings41.charset(); boolean boolean45 = charsetList39.add(charset44); boolean boolean46 = charsetList31.offerFirst(charset44); java.util.Spliterator<java.nio.charset.Charset> charsetSpliterator47 = charsetList31.spliterator(); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText49 = new org.jsoup.select.Evaluator.ContainsOwnText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText51 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist52 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist54 = whitelist52.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner55 = new org.jsoup.safety.Cleaner(whitelist52); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document59 = document58.clone(); org.jsoup.nodes.Node node61 = document59.removeAttr("#doctype"); org.jsoup.nodes.Document document62 = cleaner55.clean(document59); org.jsoup.nodes.Attributes attributes63 = document62.attributes(); org.jsoup.safety.Whitelist whitelist64 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist66 = whitelist64.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner67 = new org.jsoup.safety.Cleaner(whitelist64); org.jsoup.nodes.Document document70 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document71 = document70.clone(); org.jsoup.nodes.Node node73 = document71.removeAttr("#doctype"); org.jsoup.nodes.Document document74 = cleaner67.clean(document71); org.jsoup.nodes.Attributes attributes75 = document74.attributes(); boolean boolean76 = containsOwnText51.matches((org.jsoup.nodes.Element) document62, (org.jsoup.nodes.Element) document74); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText78 = new org.jsoup.select.Evaluator.ContainsOwnText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.select.Evaluator.ContainsOwnText[] containsOwnTextArray79 = new org.jsoup.select.Evaluator.ContainsOwnText[] { containsOwnText49, containsOwnText51, containsOwnText78 }; // The following exception was thrown during execution in test generation try { org.jsoup.select.Evaluator.ContainsOwnText[] containsOwnTextArray80 = charsetList31.toArray(containsOwnTextArray79); org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: sun.nio.cs.UTF_8"); } catch (java.lang.ArrayStoreException e) { // Expected exception. } org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertNotNull(charset8); org.junit.Assert.assertNotNull(outputSettings11); org.junit.Assert.assertNotNull(charset12); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(charset20); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1); org.junit.Assert.assertNotNull(charset28); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(charsetArray30); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(charsetItor33); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertNotNull(charset37); org.junit.Assert.assertNotNull(charsetArray38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertNotNull(outputSettings43); org.junit.Assert.assertNotNull(charset44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertNotNull(charsetSpliterator47); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(node61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(attributes63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertNotNull(node73); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertNotNull(attributes75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertNotNull(containsOwnTextArray79); }
public void test014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test014"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.nodes.Document document5 = new org.jsoup.nodes.Document("#document"); java.lang.String str6 = document5.title(); org.jsoup.nodes.Element element8 = document5.toggleClass("#doctype"); java.lang.String str9 = element8.tagName(); org.jsoup.nodes.Attribute attribute10 = null; // The following exception was thrown during execution in test generation try { boolean boolean11 = whitelist0.isSafeAttribute("hi!:matchesOwn(null", element8, attribute10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#root" + "'", str9, "#root"); }
public void test015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test015"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.formatAsBlock(); boolean boolean4 = tag1.isEmpty(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist6); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document13 = document12.clone(); org.jsoup.nodes.Node node15 = document13.removeAttr("#doctype"); org.jsoup.nodes.Document document16 = cleaner9.clean(document13); org.jsoup.nodes.Attributes attributes17 = document16.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator18 = attributes17.spliterator(); org.jsoup.nodes.Element element19 = new org.jsoup.nodes.Element(tag1, "hi!:matchesOwn(null", attributes17); org.jsoup.nodes.Document document20 = element19.ownerDocument(); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(node15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(attributes17); org.junit.Assert.assertNotNull(attributeSpliterator18); org.junit.Assert.assertNull(document20); }
public void test016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test016"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.indentAmount((int) '4'); java.nio.charset.Charset charset6 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); int int10 = outputSettings9.indentAmount(); java.nio.charset.Charset charset11 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.charset(charset11); java.nio.charset.Charset[] charsetArray13 = new java.nio.charset.Charset[] { charset11 }; java.util.LinkedList<java.nio.charset.Charset> charsetList14 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList14, charsetArray13); java.nio.charset.Charset charset16 = charsetList14.pop(); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basic(); boolean boolean19 = org.jsoup.Jsoup.isValid("hi!", whitelist18); java.lang.String[] strArray27 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist28 = whitelist18.addProtocols(".#document", "#doctype=\"\"", strArray27); org.jsoup.safety.Cleaner cleaner29 = new org.jsoup.safety.Cleaner(whitelist18); boolean boolean30 = charsetList14.contains((java.lang.Object) whitelist18); // The following exception was thrown during execution in test generation try { java.nio.charset.Charset charset31 = charsetList14.getLast(); org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null"); } catch (java.util.NoSuchElementException e) { // Expected exception. } org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(charset6); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charsetArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); }
public void test017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test017"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); boolean boolean43 = org.jsoup.Jsoup.isValid("", whitelist40); java.lang.String[] strArray49 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist50 = whitelist40.addTags(strArray49); org.jsoup.safety.Whitelist whitelist51 = whitelist1.addAttributes("[^hi!]", strArray49); boolean boolean53 = whitelist51.isSafeTag("#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); }
public void test018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test018"); org.jsoup.safety.Whitelist.AttributeValue attributeValue1 = new org.jsoup.safety.Whitelist.AttributeValue("hi!"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); java.lang.String str5 = org.jsoup.Jsoup.clean(":eq(52)", "hi!:matchesOwn(null", whitelist4); boolean boolean6 = attributeValue1.equals((java.lang.Object) str5); java.lang.String str7 = attributeValue1.toString(); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":eq(52)" + "'", str5, ":eq(52)"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!"); }
public void test019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test019"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addTags(strArray11); boolean boolean13 = org.jsoup.Jsoup.isValid(":lt(10)", whitelist2); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); }
public void test020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test020"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element17 = document16.body(); java.lang.String str18 = document16.toString(); org.jsoup.nodes.Document document19 = cleaner3.clean(document16); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node21 = document19.childNode((int) (short) 10); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document19); }
public void test021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test021"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Attributes attributes5 = whitelist0.getEnforcedAttributes(""); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor6 = attributes5.iterator(); java.lang.String str8 = org.jsoup.helper.StringUtil.join((java.util.Iterator) attributeItor6, "#data"); java.lang.String str10 = org.jsoup.helper.StringUtil.join((java.util.Iterator) attributeItor6, ""); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertNotNull(attributeItor6); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test022"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); java.lang.String str14 = org.jsoup.Jsoup.clean("#doctype", ".:eq(52)", whitelist13); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#doctype" + "'", str14, "#doctype"); }
public void test023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test023"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean3 = org.jsoup.Jsoup.isValid("#document", whitelist2); java.lang.String str4 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist2); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist2.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray16); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist22 = whitelist2.addEnforcedAttribute(".:eq(52)", "", ":matchesOwn(null"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str4, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); }
public void test024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test024"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Attribute attribute21 = attribute16.clone(); java.lang.String str22 = attribute16.getKey(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(attribute21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str22, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); }
public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist14 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray12); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(true); boolean boolean20 = whitelist18.isSafeTag(""); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test026"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); boolean boolean43 = org.jsoup.Jsoup.isValid("", whitelist40); java.lang.String[] strArray49 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist50 = whitelist40.addTags(strArray49); org.jsoup.safety.Whitelist whitelist51 = whitelist1.addAttributes("[^hi!]", strArray49); org.jsoup.safety.Whitelist whitelist55 = whitelist51.addEnforcedAttribute("#data", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "body"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist55); }
public void test027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test027"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.select.Elements elements10 = document8.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements12 = document8.getElementsByAttribute("#document"); org.jsoup.select.Elements elements15 = document8.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); java.lang.String str17 = document16.nodeName(); boolean boolean19 = document16.hasClass("#comment"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#document" + "'", str17, "#document"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test028"); org.jsoup.nodes.Attributes attributes1 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes2 = attributes1.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator3 = attributes1.spliterator(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.prettyPrint(false); java.nio.charset.Charset charset8 = outputSettings5.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.indentAmount((int) '4'); java.nio.charset.Charset charset11 = outputSettings5.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.prettyPrint(false); int int15 = outputSettings14.indentAmount(); java.nio.charset.Charset charset16 = outputSettings14.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings5.charset(charset16); java.nio.charset.Charset[] charsetArray18 = new java.nio.charset.Charset[] { charset16 }; java.util.LinkedList<java.nio.charset.Charset> charsetList19 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList19, charsetArray18); java.nio.charset.Charset charset21 = charsetList19.pop(); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basic(); boolean boolean24 = org.jsoup.Jsoup.isValid("hi!", whitelist23); java.lang.String[] strArray32 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist33 = whitelist23.addProtocols(".#document", "#doctype=\"\"", strArray32); org.jsoup.safety.Cleaner cleaner34 = new org.jsoup.safety.Cleaner(whitelist23); boolean boolean35 = charsetList19.contains((java.lang.Object) whitelist23); boolean boolean36 = org.jsoup.Jsoup.isValid(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist23); boolean boolean37 = attributes1.equals((java.lang.Object) whitelist23); boolean boolean38 = org.jsoup.Jsoup.isValid("", whitelist23); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(attributeSpliterator3); org.junit.Assert.assertNotNull(outputSettings7); org.junit.Assert.assertNotNull(charset8); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(charsetArray18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(charset21); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); }
public void test029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test029"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.nodes.Attributes attributes6 = whitelist1.getEnforcedAttributes(""); java.lang.String str7 = org.jsoup.Jsoup.clean("hi! =&quot;&quot;", whitelist1); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi! =&quot;&quot;" + "'", str7, "hi! =&quot;&quot;"); }
public void test030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test030"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); java.lang.String str38 = document17.outerHtml(); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str38, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); }
public void test031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test031"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.formatAsBlock(); boolean boolean4 = tag1.isEmpty(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist6); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document13 = document12.clone(); org.jsoup.nodes.Node node15 = document13.removeAttr("#doctype"); org.jsoup.nodes.Document document16 = cleaner9.clean(document13); org.jsoup.nodes.Attributes attributes17 = document16.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator18 = attributes17.spliterator(); org.jsoup.nodes.Element element19 = new org.jsoup.nodes.Element(tag1, "hi!:matchesOwn(null", attributes17); org.jsoup.nodes.Attributes attributes20 = null; // The following exception was thrown during execution in test generation try { attributes17.addAll(attributes20); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(node15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(attributes17); org.junit.Assert.assertNotNull(attributeSpliterator18); }
public void test032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test032"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); java.lang.String str38 = attribute36.html(); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertEquals("'" + str38 + "' != '" + ":matchesown(null=\"#document\"" + "'", str38, ":matchesown(null=\"#document\""); }
public void test033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test033"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist4); java.lang.String str7 = org.jsoup.Jsoup.clean("#data", "#data", whitelist4); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#data" + "'", str7, "#data"); }
public void test034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test034"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.select.Evaluator.Class class5 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str6 = class5.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals8 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) element26); boolean boolean28 = indexEquals8.matches(element16, (org.jsoup.nodes.Element) document18); org.jsoup.nodes.Document.QuirksMode quirksMode29 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document30 = document18.quirksMode(quirksMode29); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); document33.title("#document"); boolean boolean41 = class5.matches((org.jsoup.nodes.Element) document30, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Document document42 = cleaner3.clean(document30); org.jsoup.nodes.Element element44 = document42.toggleClass("#doctype=\"\""); org.jsoup.nodes.Node node45 = document42.parent(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".#document" + "'", str6, ".#document"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + quirksMode29 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode29.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNull(node45); }
public void test035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test035"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements25 = element22.getElementsByAttributeValueStarting(".:eq(52)", ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); }
public void test036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test036"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document3 = document2.clone(); org.jsoup.nodes.Element element5 = document2.addClass(""); java.lang.String str6 = element5.toString(); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str10 = org.jsoup.Jsoup.clean("", "#data", whitelist9); org.jsoup.safety.Cleaner cleaner11 = new org.jsoup.safety.Cleaner(whitelist9); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str16 = document15.val(); java.util.List<org.jsoup.nodes.Node> nodeList18 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document15, "#document"); java.lang.String str19 = document15.baseUri(); org.jsoup.nodes.Element element21 = document15.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements22 = document15.parents(); org.jsoup.nodes.Document document23 = cleaner11.clean(document15); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node24 = element5.after((org.jsoup.nodes.Node) document15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(element5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str6, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(nodeList18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!"); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(elements22); org.junit.Assert.assertNotNull(document23); }
public void test037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test037"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element17 = document16.body(); java.lang.String str18 = document16.toString(); org.jsoup.nodes.Document document19 = cleaner3.clean(document16); org.jsoup.nodes.Document document21 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray26 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26); org.jsoup.nodes.Element element29 = document24.classNames((java.util.Set<java.lang.String>) strSet27); org.jsoup.nodes.Element element30 = document21.appendChild((org.jsoup.nodes.Node) element29); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); org.jsoup.nodes.Element element39 = document21.classNames((java.util.Set<java.lang.String>) strSet36); java.lang.String str40 = document21.className(); boolean boolean41 = cleaner3.isValid(document21); org.jsoup.nodes.Node node42 = null; // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element43 = document21.before(node42); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); }
public void test038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test038"); org.jsoup.safety.Whitelist whitelist3 = new org.jsoup.safety.Whitelist(); boolean boolean4 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist3); java.lang.String str5 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist3); org.jsoup.nodes.Document document8 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Element element17 = document8.appendChild((org.jsoup.nodes.Node) element16); java.lang.String str19 = document8.absUrl("hi!"); org.jsoup.nodes.Attribute attribute22 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean23 = whitelist3.isSafeAttribute("", (org.jsoup.nodes.Element) document8, attribute22); org.jsoup.select.Elements elements24 = document8.getAllElements(); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!:matchesOwn(null" + "'", str5, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(elements24); }
public void test039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test039"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements24 = element13.getElementsByClass("#root"); org.jsoup.nodes.Element element26 = element13.text("#data"); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node27 = element26.unwrap(); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertNotNull(element26); }
public void test040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test040"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.MatchesOwn matchesOwn1 = new org.jsoup.select.Evaluator.MatchesOwn(pattern0); java.lang.String str2 = matchesOwn1.toString(); org.jsoup.safety.Whitelist whitelist4 = new org.jsoup.safety.Whitelist(); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist4); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray11 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11); org.jsoup.nodes.Element element14 = document9.classNames((java.util.Set<java.lang.String>) strSet12); org.jsoup.nodes.Element element16 = element14.prepend("#document"); org.jsoup.nodes.Attribute attribute19 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute19.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str22 = attribute19.getKey(); boolean boolean23 = whitelist4.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element16, attribute19); org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("#document", ""); org.jsoup.nodes.Element element28 = document26.prependElement("hi!"); org.jsoup.nodes.Element element30 = document26.addClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); // The following exception was thrown during execution in test generation try { boolean boolean31 = matchesOwn1.matches(element16, (org.jsoup.nodes.Element) document26); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":matchesOwn(null" + "'", str2, ":matchesOwn(null"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str22, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(element30); }
public void test041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test041"); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings1.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings1.indentAmount((int) '4'); java.nio.charset.Charset charset7 = outputSettings1.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); int int11 = outputSettings10.indentAmount(); java.nio.charset.Charset charset12 = outputSettings10.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings1.charset(charset12); java.nio.charset.Charset[] charsetArray14 = new java.nio.charset.Charset[] { charset12 }; java.util.LinkedList<java.nio.charset.Charset> charsetList15 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList15, charsetArray14); java.nio.charset.Charset charset17 = charsetList15.pop(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.basic(); boolean boolean20 = org.jsoup.Jsoup.isValid("hi!", whitelist19); java.lang.String[] strArray28 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist29 = whitelist19.addProtocols(".#document", "#doctype=\"\"", strArray28); org.jsoup.safety.Cleaner cleaner30 = new org.jsoup.safety.Cleaner(whitelist19); boolean boolean31 = charsetList15.contains((java.lang.Object) whitelist19); boolean boolean32 = org.jsoup.Jsoup.isValid(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist19); org.jsoup.safety.Cleaner cleaner33 = new org.jsoup.safety.Cleaner(whitelist19); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertNotNull(charset7); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertNotNull(charset12); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertNotNull(charsetArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); }
public void test042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test042"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addProtocols(".#document", "#doctype=\"\"", strArray11); org.jsoup.safety.Cleaner cleaner13 = new org.jsoup.safety.Cleaner(whitelist2); boolean boolean14 = org.jsoup.Jsoup.isValid("hi!<html> <head></head> <body> hi! </body> </html>=\"\"", whitelist2); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); }
public void test043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test043"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str4 = org.jsoup.Jsoup.clean("", "#data", whitelist3); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basic(); boolean boolean7 = org.jsoup.Jsoup.isValid("hi!", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addProtocols(".#document", "#doctype=\"\"", strArray15); org.jsoup.safety.Whitelist whitelist17 = whitelist3.addTags(strArray15); org.jsoup.safety.Whitelist whitelist18 = whitelist0.addTags(strArray15); boolean boolean20 = whitelist18.isSafeTag(":eq(-1)"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test044"); org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText3 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Node node13 = document11.removeAttr("#doctype"); org.jsoup.nodes.Document document14 = cleaner7.clean(document11); org.jsoup.nodes.Attributes attributes15 = document14.attributes(); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner19 = new org.jsoup.safety.Cleaner(whitelist16); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Node node25 = document23.removeAttr("#doctype"); org.jsoup.nodes.Document document26 = cleaner19.clean(document23); org.jsoup.nodes.Attributes attributes27 = document26.attributes(); boolean boolean28 = containsOwnText3.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document26); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str33 = document32.val(); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document32, "#document"); java.lang.String str36 = document32.baseUri(); org.jsoup.nodes.Element element38 = document32.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); org.jsoup.nodes.Document.QuirksMode quirksMode40 = null; org.jsoup.nodes.Document document41 = document32.quirksMode(quirksMode40); boolean boolean42 = indexEquals1.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document41); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node44 = document14.wrap(":matchesown(null=\"#document\""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(node25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!"); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); }
public void test045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test045"); org.jsoup.select.Evaluator.Id id1 = new org.jsoup.select.Evaluator.Id("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); java.lang.String str2 = id1.toString(); org.jsoup.nodes.Element element3 = null; org.jsoup.parser.Tag tag5 = org.jsoup.parser.Tag.valueOf("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Attributes attributes7 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes8 = attributes7.clone(); org.jsoup.nodes.Attributes attributes9 = attributes8.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator10 = attributes8.spliterator(); org.jsoup.nodes.Attributes attributes11 = attributes8.clone(); boolean boolean13 = attributes11.hasKey(" #document"); org.jsoup.nodes.Element element14 = new org.jsoup.nodes.Element(tag5, "hi! hi!#document hi!", attributes11); boolean boolean15 = id1.matches(element3, element14); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str19 = org.jsoup.Jsoup.clean("", "#data", whitelist18); org.jsoup.safety.Cleaner cleaner20 = new org.jsoup.safety.Cleaner(whitelist18); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText22 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner26 = new org.jsoup.safety.Cleaner(whitelist23); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document30 = document29.clone(); org.jsoup.nodes.Node node32 = document30.removeAttr("#doctype"); org.jsoup.nodes.Document document33 = cleaner26.clean(document30); org.jsoup.nodes.Attributes attributes34 = document33.attributes(); org.jsoup.safety.Whitelist whitelist35 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist37 = whitelist35.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner38 = new org.jsoup.safety.Cleaner(whitelist35); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document42 = document41.clone(); org.jsoup.nodes.Node node44 = document42.removeAttr("#doctype"); org.jsoup.nodes.Document document45 = cleaner38.clean(document42); org.jsoup.nodes.Attributes attributes46 = document45.attributes(); boolean boolean47 = containsOwnText22.matches((org.jsoup.nodes.Element) document33, (org.jsoup.nodes.Element) document45); boolean boolean48 = cleaner20.isValid(document33); org.jsoup.nodes.Document document51 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean53 = document51.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document54 = cleaner20.clean(document51); org.jsoup.nodes.Element element55 = null; // The following exception was thrown during execution in test generation try { boolean boolean56 = id1.matches((org.jsoup.nodes.Element) document51, element55); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + "#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str2, "#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(tag5); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertNotNull(attributes9); org.junit.Assert.assertNotNull(attributeSpliterator10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(node32); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(attributes34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(node44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(attributes46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(document54); }
public void test046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test046"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText2 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist3); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray11 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11); org.jsoup.nodes.Element element14 = document9.classNames((java.util.Set<java.lang.String>) strSet12); java.lang.String str15 = document9.nodeName(); java.lang.String str16 = document9.html(); boolean boolean17 = cleaner6.isValid(document9); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element20 = document19.body(); java.lang.String str21 = document19.toString(); org.jsoup.nodes.Document document22 = cleaner6.clean(document19); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Element element28 = document25.addClass(""); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str33 = document32.val(); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document32, "#document"); java.lang.String str36 = document32.baseUri(); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str40 = document39.val(); org.jsoup.nodes.Element element42 = document39.append("#document"); org.jsoup.nodes.Element element43 = document32.appendChild((org.jsoup.nodes.Node) element42); org.jsoup.nodes.Element element44 = document25.prependChild((org.jsoup.nodes.Node) document32); org.jsoup.nodes.Attributes attributes45 = element44.attributes(); java.lang.String str46 = element44.baseUri(); java.lang.String str47 = element44.text(); org.jsoup.nodes.Element element49 = element44.toggleClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean50 = containsOwnText2.matches((org.jsoup.nodes.Element) document22, element44); java.util.List<org.jsoup.nodes.Node> nodeList52 = org.jsoup.parser.Parser.parseFragment(":contains([#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", (org.jsoup.nodes.Element) document22, " #document"); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#document" + "'", str15, "#document"); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str16, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str21, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!"); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(attributes45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#document" + "'", str46, "#document"); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi! hi!#document hi!" + "'", str47, "hi! hi!#document hi!"); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(nodeList52); }
public void test047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test047"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist1); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basic(); boolean boolean7 = org.jsoup.Jsoup.isValid("hi!", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addProtocols(".#document", "#doctype=\"\"", strArray15); org.jsoup.select.Evaluator.AttributeStarting attributeStarting19 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray27 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27); org.jsoup.nodes.Element element30 = document25.classNames((java.util.Set<java.lang.String>) strSet28); document25.title("#document"); boolean boolean33 = attributeStarting19.matches((org.jsoup.nodes.Element) document22, (org.jsoup.nodes.Element) document25); java.lang.String str34 = document22.id(); org.jsoup.select.Elements elements36 = document22.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements38 = document22.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute41 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean42 = whitelist6.isSafeAttribute("", (org.jsoup.nodes.Element) document22, attribute41); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist47 = whitelist45.preserveRelativeLinks(false); boolean boolean48 = org.jsoup.Jsoup.isValid("", whitelist45); java.lang.String[] strArray54 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist55 = whitelist45.addTags(strArray54); org.jsoup.safety.Whitelist whitelist56 = whitelist6.addAttributes("[^hi!]", strArray54); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist57 = whitelist1.addProtocols(" class=\" #doctype\"", "", strArray54); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertNotNull(elements38); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist56); }
public void test048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test048"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str9 = document8.val(); java.util.List<org.jsoup.nodes.Node> nodeList11 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document8, "#document"); java.lang.String str12 = document8.baseUri(); org.jsoup.nodes.Element element14 = document8.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements15 = document8.parents(); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node18 = document8.childNode((int) (byte) 100); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(nodeList11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); }
public void test049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test049"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean3 = org.jsoup.Jsoup.isValid("#document", whitelist2); java.lang.String str4 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist2); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist2.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray16); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode22 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document23 = document21.quirksMode(quirksMode22); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.basic(); boolean boolean26 = org.jsoup.Jsoup.isValid("hi!", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addProtocols(".#document", "#doctype=\"\"", strArray34); org.jsoup.select.Evaluator.AttributeStarting attributeStarting38 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray46 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46); org.jsoup.nodes.Element element49 = document44.classNames((java.util.Set<java.lang.String>) strSet47); document44.title("#document"); boolean boolean52 = attributeStarting38.matches((org.jsoup.nodes.Element) document41, (org.jsoup.nodes.Element) document44); java.lang.String str53 = document41.id(); org.jsoup.select.Elements elements55 = document41.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements57 = document41.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute60 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean61 = whitelist25.isSafeAttribute("", (org.jsoup.nodes.Element) document41, attribute60); boolean boolean62 = whitelist18.isSafeAttribute("", (org.jsoup.nodes.Element) document21, attribute60); attribute60.setKey("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str4, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + quirksMode22 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode22.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, ""); org.junit.Assert.assertNotNull(elements55); org.junit.Assert.assertNotNull(elements57); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); }
public void test050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test050"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str7 = org.jsoup.Jsoup.clean("", "#data", whitelist6); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basic(); boolean boolean10 = org.jsoup.Jsoup.isValid("hi!", whitelist9); java.lang.String[] strArray18 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist19 = whitelist9.addProtocols(".#document", "#doctype=\"\"", strArray18); org.jsoup.safety.Whitelist whitelist20 = whitelist6.addTags(strArray18); org.jsoup.safety.Whitelist whitelist21 = whitelist3.addTags(strArray18); boolean boolean22 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist21); org.jsoup.safety.Whitelist whitelist26 = whitelist21.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist28 = whitelist21.preserveRelativeLinks(true); boolean boolean29 = org.jsoup.Jsoup.isValid("", whitelist21); java.lang.String str30 = org.jsoup.Jsoup.clean(":matchesown(null=\"#document\"", whitelist21); org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse(":containsOwn(hi!", "[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); org.jsoup.safety.Whitelist whitelist36 = new org.jsoup.safety.Whitelist(); boolean boolean37 = org.jsoup.Jsoup.isValid("", whitelist36); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray43 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43); org.jsoup.nodes.Element element46 = document41.classNames((java.util.Set<java.lang.String>) strSet44); org.jsoup.nodes.Element element48 = element46.prepend("#document"); org.jsoup.nodes.Attribute attribute51 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute51.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str54 = attribute51.getKey(); boolean boolean55 = whitelist36.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element48, attribute51); org.jsoup.nodes.Attribute attribute56 = attribute51.clone(); boolean boolean57 = whitelist21.isSafeAttribute("hi! hi!#document hi!", (org.jsoup.nodes.Element) document34, attribute51); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertEquals("'" + str30 + "' != '" + ":matchesown(null=&quot;#document&quot;" + "'", str30, ":matchesown(null=&quot;#document&quot;"); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str54, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(attribute56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); }
public void test051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test051"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Attribute attribute21 = attribute16.clone(); java.lang.String str23 = attribute21.setValue(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); attribute21.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(attribute21); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); }
public void test052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test052"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist14 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray12); org.jsoup.safety.Whitelist whitelist15 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes17 = whitelist15.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(false); boolean boolean23 = org.jsoup.Jsoup.isValid("", whitelist20); java.lang.String[] strArray29 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist30 = whitelist20.addTags(strArray29); org.jsoup.safety.Whitelist whitelist31 = whitelist15.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray29); org.jsoup.safety.Whitelist whitelist32 = whitelist0.addTags(strArray29); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist36 = whitelist0.addEnforcedAttribute("hi!<html> <head></head> <body> hi! </body> </html>", "#&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n&lt;/html&gt;", ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(attributes17); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(whitelist32); }
public void test053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test053"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.MatchesOwn matchesOwn1 = new org.jsoup.select.Evaluator.MatchesOwn(pattern0); java.lang.String str2 = matchesOwn1.toString(); java.lang.String str3 = matchesOwn1.toString(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean7 = org.jsoup.Jsoup.isValid("#document", whitelist6); java.lang.String str8 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist6); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.basic(); boolean boolean12 = org.jsoup.Jsoup.isValid("hi!", whitelist11); java.lang.String[] strArray20 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist21 = whitelist11.addProtocols(".#document", "#doctype=\"\"", strArray20); org.jsoup.safety.Whitelist whitelist22 = whitelist6.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray20); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode26 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document27 = document25.quirksMode(quirksMode26); org.jsoup.safety.Whitelist whitelist29 = org.jsoup.safety.Whitelist.basic(); boolean boolean30 = org.jsoup.Jsoup.isValid("hi!", whitelist29); java.lang.String[] strArray38 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist39 = whitelist29.addProtocols(".#document", "#doctype=\"\"", strArray38); org.jsoup.select.Evaluator.AttributeStarting attributeStarting42 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document45 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray50 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50); org.jsoup.nodes.Element element53 = document48.classNames((java.util.Set<java.lang.String>) strSet51); document48.title("#document"); boolean boolean56 = attributeStarting42.matches((org.jsoup.nodes.Element) document45, (org.jsoup.nodes.Element) document48); java.lang.String str57 = document45.id(); org.jsoup.select.Elements elements59 = document45.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements61 = document45.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute64 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean65 = whitelist29.isSafeAttribute("", (org.jsoup.nodes.Element) document45, attribute64); boolean boolean66 = whitelist22.isSafeAttribute("", (org.jsoup.nodes.Element) document25, attribute64); java.util.List<org.jsoup.nodes.Node> nodeList67 = document25.childNodes(); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText69 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist70 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist72 = whitelist70.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner73 = new org.jsoup.safety.Cleaner(whitelist70); org.jsoup.nodes.Document document76 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document77 = document76.clone(); org.jsoup.nodes.Node node79 = document77.removeAttr("#doctype"); org.jsoup.nodes.Document document80 = cleaner73.clean(document77); org.jsoup.nodes.Attributes attributes81 = document80.attributes(); org.jsoup.safety.Whitelist whitelist82 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist84 = whitelist82.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner85 = new org.jsoup.safety.Cleaner(whitelist82); org.jsoup.nodes.Document document88 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document89 = document88.clone(); org.jsoup.nodes.Node node91 = document89.removeAttr("#doctype"); org.jsoup.nodes.Document document92 = cleaner85.clean(document89); org.jsoup.nodes.Attributes attributes93 = document92.attributes(); boolean boolean94 = containsOwnText69.matches((org.jsoup.nodes.Element) document80, (org.jsoup.nodes.Element) document92); org.jsoup.nodes.Element element96 = document80.val(" text=\"\""); // The following exception was thrown during execution in test generation try { boolean boolean97 = matchesOwn1.matches((org.jsoup.nodes.Element) document25, element96); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":matchesOwn(null" + "'", str2, ":matchesOwn(null"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":matchesOwn(null" + "'", str3, ":matchesOwn(null"); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str8, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertTrue("'" + quirksMode26 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode26.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, ""); org.junit.Assert.assertNotNull(elements59); org.junit.Assert.assertNotNull(elements61); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertNotNull(nodeList67); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(document76); org.junit.Assert.assertNotNull(document77); org.junit.Assert.assertNotNull(node79); org.junit.Assert.assertNotNull(document80); org.junit.Assert.assertNotNull(attributes81); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(whitelist84); org.junit.Assert.assertNotNull(document88); org.junit.Assert.assertNotNull(document89); org.junit.Assert.assertNotNull(node91); org.junit.Assert.assertNotNull(document92); org.junit.Assert.assertNotNull(attributes93); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); org.junit.Assert.assertNotNull(element96); }
public void test054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test054"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements24 = element13.getElementsByClass("#root"); org.jsoup.nodes.Element element26 = element13.text("#data"); org.jsoup.select.Elements elements27 = element13.getAllElements(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements27); }
public void test055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test055"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist14 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray12); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(true); java.lang.String[] strArray19 = null; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist20 = whitelist18.addTags(strArray19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); }
public void test056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test056"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist4.addTags(strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist1.addTags(strArray16); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basic(); boolean boolean23 = org.jsoup.Jsoup.isValid("hi!", whitelist22); java.lang.String[] strArray31 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist32 = whitelist22.addProtocols(".#document", "#doctype=\"\"", strArray31); org.jsoup.select.Evaluator.AttributeStarting attributeStarting35 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray43 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43); org.jsoup.nodes.Element element46 = document41.classNames((java.util.Set<java.lang.String>) strSet44); document41.title("#document"); boolean boolean49 = attributeStarting35.matches((org.jsoup.nodes.Element) document38, (org.jsoup.nodes.Element) document41); java.lang.String str50 = document38.id(); org.jsoup.select.Elements elements52 = document38.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements54 = document38.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute57 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean58 = whitelist22.isSafeAttribute("", (org.jsoup.nodes.Element) document38, attribute57); org.jsoup.safety.Whitelist whitelist61 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist63 = whitelist61.preserveRelativeLinks(false); boolean boolean64 = org.jsoup.Jsoup.isValid("", whitelist61); java.lang.String[] strArray70 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist71 = whitelist61.addTags(strArray70); org.jsoup.safety.Whitelist whitelist72 = whitelist22.addAttributes("[^hi!]", strArray70); org.jsoup.safety.Whitelist whitelist74 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist77 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str78 = org.jsoup.Jsoup.clean("", "#data", whitelist77); org.jsoup.safety.Whitelist whitelist80 = org.jsoup.safety.Whitelist.basic(); boolean boolean81 = org.jsoup.Jsoup.isValid("hi!", whitelist80); java.lang.String[] strArray89 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist90 = whitelist80.addProtocols(".#document", "#doctype=\"\"", strArray89); org.jsoup.safety.Whitelist whitelist91 = whitelist77.addTags(strArray89); org.jsoup.safety.Whitelist whitelist92 = whitelist74.addTags(strArray89); org.jsoup.safety.Whitelist whitelist93 = whitelist72.addAttributes("[^:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", strArray89); org.jsoup.safety.Whitelist whitelist94 = whitelist19.addAttributes("                                                  ", strArray89); java.lang.String str95 = org.jsoup.Jsoup.clean("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", whitelist94); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertNotNull(elements52); org.junit.Assert.assertNotNull(elements54); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertNotNull(strArray70); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist74); org.junit.Assert.assertNotNull(whitelist77); org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, ""); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true); org.junit.Assert.assertNotNull(strArray89); org.junit.Assert.assertNotNull(whitelist90); org.junit.Assert.assertNotNull(whitelist91); org.junit.Assert.assertNotNull(whitelist92); org.junit.Assert.assertNotNull(whitelist93); org.junit.Assert.assertNotNull(whitelist94); org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[#document^=  hi! ]" + "'", str95, "[#document^=  hi! ]"); }
public void test057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test057"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); org.jsoup.safety.Whitelist whitelist5 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes7 = whitelist5.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist12 = whitelist10.preserveRelativeLinks(false); boolean boolean13 = org.jsoup.Jsoup.isValid("", whitelist10); java.lang.String[] strArray19 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist20 = whitelist10.addTags(strArray19); org.jsoup.safety.Whitelist whitelist21 = whitelist5.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray19); boolean boolean22 = org.jsoup.helper.StringUtil.in("", strArray19); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist23 = whitelist1.addAttributes("", strArray19); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test058"); org.jsoup.select.NodeVisitor nodeVisitor0 = null; org.jsoup.select.NodeTraversor nodeTraversor1 = new org.jsoup.select.NodeTraversor(nodeVisitor0); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str11 = document10.val(); java.util.List<org.jsoup.nodes.Node> nodeList13 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document10, "#document"); java.lang.String str14 = document10.baseUri(); org.jsoup.nodes.Element element16 = document10.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements17 = document10.parents(); org.jsoup.nodes.Document document18 = cleaner6.clean(document10); // The following exception was thrown during execution in test generation try { nodeTraversor1.traverse((org.jsoup.nodes.Node) document18); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertNotNull(nodeList13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!"); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(elements17); org.junit.Assert.assertNotNull(document18); }
public void test059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test059"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); boolean boolean4 = org.jsoup.Jsoup.isValid("", whitelist1); boolean boolean6 = whitelist1.isSafeTag("&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test060"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); boolean boolean4 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Attributes attributes6 = whitelist1.getEnforcedAttributes(":eq(52)"); int int7 = attributes6.size(); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test061"); org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements(); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.nodes.Node node10 = document8.removeAttr("#doctype"); org.jsoup.nodes.Document document11 = cleaner4.clean(document8); org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.select.Elements elements16 = document14.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.Map<java.lang.String, java.lang.String> strMap17 = document14.dataset(); org.jsoup.nodes.Document document18 = cleaner4.clean(document14); org.jsoup.nodes.Element element19 = null; boolean boolean20 = allElements0.matches((org.jsoup.nodes.Element) document18, element19); java.lang.String str21 = allElements0.toString(); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(node10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(elements16); org.junit.Assert.assertNotNull(strMap17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "*" + "'", str21, "*"); }
public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); org.jsoup.nodes.Element element12 = document10.head(); org.jsoup.nodes.Element element14 = document10.child(0); org.jsoup.nodes.Element element16 = element14.toggleClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\""); java.lang.String str17 = element16.data(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); }
public void test063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test063"); org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements(); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.nodes.Node node10 = document8.removeAttr("#doctype"); org.jsoup.nodes.Document document11 = cleaner4.clean(document8); org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.select.Elements elements16 = document14.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.Map<java.lang.String, java.lang.String> strMap17 = document14.dataset(); org.jsoup.nodes.Document document18 = cleaner4.clean(document14); org.jsoup.nodes.Element element19 = null; boolean boolean20 = allElements0.matches((org.jsoup.nodes.Element) document18, element19); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element22 = document18.wrap("#data"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(node10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(elements16); org.junit.Assert.assertNotNull(strMap17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); }
public void test064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test064"); org.jsoup.select.Evaluator.AttributeStarting attributeStarting1 = new org.jsoup.select.Evaluator.AttributeStarting("[^:containsOwn(hi!]"); org.jsoup.nodes.Document document3 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element12 = document3.appendChild((org.jsoup.nodes.Node) element11); org.jsoup.nodes.Element element13 = element11.empty(); org.jsoup.select.Elements elements15 = element11.getElementsByIndexLessThan((int) (byte) 1); org.jsoup.helper.Validate.notNull((java.lang.Object) element11); org.jsoup.parser.Tag tag18 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean19 = tag18.canContainBlock(); boolean boolean20 = tag18.formatAsBlock(); boolean boolean21 = tag18.isEmpty(); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner26 = new org.jsoup.safety.Cleaner(whitelist23); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document30 = document29.clone(); org.jsoup.nodes.Node node32 = document30.removeAttr("#doctype"); org.jsoup.nodes.Document document33 = cleaner26.clean(document30); org.jsoup.nodes.Attributes attributes34 = document33.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator35 = attributes34.spliterator(); org.jsoup.nodes.Element element36 = new org.jsoup.nodes.Element(tag18, "hi!:matchesOwn(null", attributes34); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray41 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41); org.jsoup.nodes.Element element44 = document39.classNames((java.util.Set<java.lang.String>) strSet42); org.jsoup.nodes.Element element47 = element44.attr("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", ""); org.jsoup.nodes.Element element49 = element47.text(""); boolean boolean50 = tag18.equals((java.lang.Object) element49); boolean boolean51 = attributeStarting1.matches(element11, element49); java.util.Set<java.lang.String> strSet52 = null; // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element53 = element11.classNames(strSet52); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(tag18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(node32); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(attributes34); org.junit.Assert.assertNotNull(attributeSpliterator35); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); }
public void test065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test065"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("                                                  "); org.jsoup.nodes.Element element2 = null; org.jsoup.select.Evaluator.ContainsOwnText containsOwnText4 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner8 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document12 = document11.clone(); org.jsoup.nodes.Node node14 = document12.removeAttr("#doctype"); org.jsoup.nodes.Document document15 = cleaner8.clean(document12); org.jsoup.nodes.Attributes attributes16 = document15.attributes(); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist19 = whitelist17.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner20 = new org.jsoup.safety.Cleaner(whitelist17); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document24 = document23.clone(); org.jsoup.nodes.Node node26 = document24.removeAttr("#doctype"); org.jsoup.nodes.Document document27 = cleaner20.clean(document24); org.jsoup.nodes.Attributes attributes28 = document27.attributes(); boolean boolean29 = containsOwnText4.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document27); boolean boolean30 = containsOwnText1.matches(element2, (org.jsoup.nodes.Element) document15); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(node14); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(attributes16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(node26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(attributes28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); }
public void test066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test066"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basic(); boolean boolean5 = org.jsoup.Jsoup.isValid("hi!", whitelist4); java.lang.String[] strArray13 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist14 = whitelist4.addProtocols(".#document", "#doctype=\"\"", strArray13); org.jsoup.safety.Whitelist whitelist15 = whitelist1.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray13); org.jsoup.safety.Whitelist whitelist17 = whitelist15.preserveRelativeLinks(false); java.lang.String str18 = org.jsoup.Jsoup.clean("[hi!, <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", whitelist15); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[hi!,  hi! ]" + "'", str18, "[hi!,  hi! ]"); }
public void test067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test067"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.MatchesOwn matchesOwn1 = new org.jsoup.select.Evaluator.MatchesOwn(pattern0); java.lang.String str2 = matchesOwn1.toString(); org.jsoup.safety.Whitelist whitelist4 = new org.jsoup.safety.Whitelist(); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist4); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray11 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11); org.jsoup.nodes.Element element14 = document9.classNames((java.util.Set<java.lang.String>) strSet12); org.jsoup.nodes.Element element16 = element14.prepend("#document"); org.jsoup.nodes.Attribute attribute19 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute19.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str22 = attribute19.getKey(); boolean boolean23 = whitelist4.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element16, attribute19); org.jsoup.nodes.Element element25 = element16.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element26 = element25.empty(); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan29 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (byte) 1); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element32 = document31.body(); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element35 = document34.body(); boolean boolean36 = indexGreaterThan29.matches(element32, (org.jsoup.nodes.Element) document34); org.jsoup.nodes.Element element38 = element32.toggleClass("#<html> <head></head> <body> hi! </body> </html>"); java.util.List<org.jsoup.nodes.Node> nodeList40 = org.jsoup.parser.Parser.parseFragment("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", element38, "#root"); // The following exception was thrown during execution in test generation try { boolean boolean41 = matchesOwn1.matches(element26, element38); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":matchesOwn(null" + "'", str2, ":matchesOwn(null"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str22, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(nodeList40); }
public void test068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test068"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); boolean boolean13 = whitelist1.isSafeTag(""); org.jsoup.safety.Whitelist whitelist15 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist18 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes20 = whitelist18.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(false); boolean boolean26 = org.jsoup.Jsoup.isValid("", whitelist23); java.lang.String[] strArray32 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist33 = whitelist23.addTags(strArray32); org.jsoup.safety.Whitelist whitelist34 = whitelist18.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray32); org.jsoup.safety.Whitelist whitelist35 = whitelist15.addProtocols("#comment", ".:eq(52)", strArray32); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray32); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist35); }
public void test069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test069"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.select.Evaluator.Class class5 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str6 = class5.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals8 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) element26); boolean boolean28 = indexEquals8.matches(element16, (org.jsoup.nodes.Element) document18); org.jsoup.nodes.Document.QuirksMode quirksMode29 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document30 = document18.quirksMode(quirksMode29); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); document33.title("#document"); boolean boolean41 = class5.matches((org.jsoup.nodes.Element) document30, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Document document42 = cleaner3.clean(document30); org.jsoup.nodes.Element element44 = document42.toggleClass("#doctype=\"\""); // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements46 = document42.getElementsMatchingOwnText("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\":contains(&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Pattern syntax error: [#document^=<html>? <head></head>? <body>? hi!? </body>?</html>]=\":contains(&lt;html&gt;? &lt;head&gt;&lt;/head&gt;? &lt;body&gt;? hi!? &lt;/body&gt;?&lt;/html&gt;\""); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".#document" + "'", str6, ".#document"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + quirksMode29 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode29.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(element44); }
public void test070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test070"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Node node11 = document9.removeAttr("#doctype"); org.jsoup.nodes.Document document12 = cleaner5.clean(document9); org.jsoup.nodes.Attributes attributes13 = document12.attributes(); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner17 = new org.jsoup.safety.Cleaner(whitelist14); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document21 = document20.clone(); org.jsoup.nodes.Node node23 = document21.removeAttr("#doctype"); org.jsoup.nodes.Document document24 = cleaner17.clean(document21); org.jsoup.nodes.Attributes attributes25 = document24.attributes(); boolean boolean26 = containsOwnText1.matches((org.jsoup.nodes.Element) document12, (org.jsoup.nodes.Element) document24); org.jsoup.nodes.Element element28 = document12.text(":lt(10)"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(node11); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(attributes13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(node23); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(attributes25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(element28); }
public void test071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test071"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist7 = whitelist2.addEnforcedAttribute("[#document^=  hi! ]", "", "<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test072"); org.jsoup.safety.Whitelist whitelist3 = new org.jsoup.safety.Whitelist(); boolean boolean4 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist3); java.lang.String str5 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist3); org.jsoup.nodes.Document document8 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Element element17 = document8.appendChild((org.jsoup.nodes.Node) element16); java.lang.String str19 = document8.absUrl("hi!"); org.jsoup.nodes.Attribute attribute22 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean23 = whitelist3.isSafeAttribute("", (org.jsoup.nodes.Element) document8, attribute22); java.lang.String str25 = attribute22.setValue("[text=\"\"$=hi!  public &quot;#data&quot; &quot;#doctype&quot;&gt;]"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!:matchesOwn(null" + "'", str5, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "#document" + "'", str25, "#document"); }
public void test073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test073"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); boolean boolean2 = whitelist0.isSafeTag("[#document, hi!, ]"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test074"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray27 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27); org.jsoup.nodes.Element element30 = document25.classNames((java.util.Set<java.lang.String>) strSet28); org.jsoup.nodes.Element element32 = element30.prepend("#document"); org.jsoup.nodes.Element element34 = element30.toggleClass("#doctype=\"\""); boolean boolean36 = element30.hasClass(":eq(52)"); org.jsoup.select.Elements elements38 = element30.getElementsByClass(":containsOwn(hi!:matchesown(null"); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node39 = element13.before((org.jsoup.nodes.Node) element30); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(elements38); }
public void test075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test075"); org.jsoup.select.Evaluator.Class class1 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str2 = class1.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals4 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray9 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9); org.jsoup.nodes.Element element12 = document7.classNames((java.util.Set<java.lang.String>) strSet10); org.jsoup.nodes.Document document14 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray19 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19); org.jsoup.nodes.Element element22 = document17.classNames((java.util.Set<java.lang.String>) strSet20); org.jsoup.nodes.Element element23 = document14.appendChild((org.jsoup.nodes.Node) element22); boolean boolean24 = indexEquals4.matches(element12, (org.jsoup.nodes.Element) document14); org.jsoup.nodes.Document.QuirksMode quirksMode25 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document26 = document14.quirksMode(quirksMode25); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray31 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31); org.jsoup.nodes.Element element34 = document29.classNames((java.util.Set<java.lang.String>) strSet32); document29.title("#document"); boolean boolean37 = class1.matches((org.jsoup.nodes.Element) document26, (org.jsoup.nodes.Element) document29); org.jsoup.nodes.Document document39 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element41 = document39.createElement("#document"); org.jsoup.nodes.Document document42 = document39.clone(); org.jsoup.select.Elements elements45 = document42.getElementsByAttributeValueMatching("hi!", "\n#document"); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document49 = document48.clone(); org.jsoup.nodes.Element element51 = document48.addClass(""); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str56 = document55.val(); java.util.List<org.jsoup.nodes.Node> nodeList58 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document55, "#document"); java.lang.String str59 = document55.baseUri(); org.jsoup.nodes.Document document62 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str63 = document62.val(); org.jsoup.nodes.Element element65 = document62.append("#document"); org.jsoup.nodes.Element element66 = document55.appendChild((org.jsoup.nodes.Node) element65); org.jsoup.nodes.Element element67 = document48.prependChild((org.jsoup.nodes.Node) document55); org.jsoup.nodes.Attributes attributes68 = element67.attributes(); boolean boolean69 = class1.matches((org.jsoup.nodes.Element) document42, element67); org.jsoup.nodes.Element element70 = document42.clone(); org.jsoup.safety.Whitelist whitelist71 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist73 = whitelist71.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner74 = new org.jsoup.safety.Cleaner(whitelist71); org.jsoup.nodes.Document document77 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray79 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79); org.jsoup.nodes.Element element82 = document77.classNames((java.util.Set<java.lang.String>) strSet80); java.lang.String str83 = document77.nodeName(); java.lang.String str84 = document77.html(); boolean boolean85 = cleaner74.isValid(document77); org.jsoup.nodes.Document document87 = org.jsoup.nodes.Document.createShell("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document.QuirksMode quirksMode88 = document87.quirksMode(); org.jsoup.nodes.Document document89 = document77.quirksMode(quirksMode88); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element90 = document42.before((org.jsoup.nodes.Node) document89); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ".#document" + "'", str2, ".#document"); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + quirksMode25 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode25.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(elements45); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, ""); org.junit.Assert.assertNotNull(nodeList58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!"); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, ""); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertNotNull(attributes68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertNotNull(document77); org.junit.Assert.assertNotNull(strArray79); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true); org.junit.Assert.assertNotNull(element82); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "#document" + "'", str83, "#document"); org.junit.Assert.assertEquals("'" + str84 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str84, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true); org.junit.Assert.assertNotNull(document87); org.junit.Assert.assertTrue("'" + quirksMode88 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode88.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document89); }
public void test076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test076"); org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str1 = allElements0.toString(); java.lang.String str2 = allElements0.toString(); java.lang.String str3 = allElements0.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Element element11 = document8.addClass(""); org.jsoup.nodes.Document document13 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element15 = document13.createElement("#document"); boolean boolean16 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document13); org.jsoup.nodes.Element element18 = document13.toggleClass("#doctype"); org.jsoup.select.Elements elements20 = element18.getElementsMatchingOwnText("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str24 = org.jsoup.Jsoup.clean("", "#data", whitelist23); org.jsoup.safety.Cleaner cleaner25 = new org.jsoup.safety.Cleaner(whitelist23); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText27 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner31 = new org.jsoup.safety.Cleaner(whitelist28); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document35 = document34.clone(); org.jsoup.nodes.Node node37 = document35.removeAttr("#doctype"); org.jsoup.nodes.Document document38 = cleaner31.clean(document35); org.jsoup.nodes.Attributes attributes39 = document38.attributes(); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document47 = document46.clone(); org.jsoup.nodes.Node node49 = document47.removeAttr("#doctype"); org.jsoup.nodes.Document document50 = cleaner43.clean(document47); org.jsoup.nodes.Attributes attributes51 = document50.attributes(); boolean boolean52 = containsOwnText27.matches((org.jsoup.nodes.Element) document38, (org.jsoup.nodes.Element) document50); boolean boolean53 = cleaner25.isValid(document38); boolean boolean54 = allElements0.matches(element18, (org.jsoup.nodes.Element) document38); org.jsoup.select.Evaluator.IndexEquals indexEquals56 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray61 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61); org.jsoup.nodes.Element element64 = document59.classNames((java.util.Set<java.lang.String>) strSet62); org.jsoup.nodes.Document document66 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document69 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray71 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71); org.jsoup.nodes.Element element74 = document69.classNames((java.util.Set<java.lang.String>) strSet72); org.jsoup.nodes.Element element75 = document66.appendChild((org.jsoup.nodes.Node) element74); boolean boolean76 = indexEquals56.matches(element64, (org.jsoup.nodes.Element) document66); org.jsoup.nodes.Document.QuirksMode quirksMode77 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document78 = document66.quirksMode(quirksMode77); org.jsoup.select.Elements elements80 = document66.getElementsByTag("hi!:matchesOwn(null"); java.lang.String str81 = document66.ownText(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element82 = document38.after((org.jsoup.nodes.Node) document66); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "*" + "'", str1, "*"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "*" + "'", str2, "*"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "*" + "'", str3, "*"); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(node37); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(attributes39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(node49); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(attributes51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(document69); org.junit.Assert.assertNotNull(strArray71); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(element75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertTrue("'" + quirksMode77 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode77.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document78); org.junit.Assert.assertNotNull(elements80); org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, ""); }
public void test077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test077"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); document11.title("#document"); boolean boolean19 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document11); org.jsoup.nodes.Element element21 = document11.html(""); java.lang.String str22 = element21.html(); java.lang.String str23 = element21.html(); org.jsoup.nodes.Attribute attribute26 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute27 = attribute26.clone(); java.lang.String str28 = attribute27.getKey(); java.lang.String str29 = attribute27.getValue(); org.jsoup.nodes.DocumentType documentType34 = new org.jsoup.nodes.DocumentType("#doctype", "#document", "#doctype", "hi!"); java.lang.String str35 = documentType34.nodeName(); java.lang.String str36 = documentType34.nodeName(); boolean boolean37 = attribute27.equals((java.lang.Object) str36); boolean boolean38 = whitelist1.isSafeAttribute("#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", element21, attribute27); org.jsoup.select.Elements elements41 = element21.getElementsByAttributeValueStarting("#&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n&lt;/html&gt;", "[<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>=:matchesown(null]"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(attribute26); org.junit.Assert.assertNotNull(attribute27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str28, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str29, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "#doctype" + "'", str35, "#doctype"); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "#doctype" + "'", str36, "#doctype"); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(elements41); }
public void test078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test078"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.formatAsBlock(); boolean boolean4 = tag1.isEmpty(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist6); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document13 = document12.clone(); org.jsoup.nodes.Node node15 = document13.removeAttr("#doctype"); org.jsoup.nodes.Document document16 = cleaner9.clean(document13); org.jsoup.nodes.Attributes attributes17 = document16.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator18 = attributes17.spliterator(); org.jsoup.nodes.Element element19 = new org.jsoup.nodes.Element(tag1, "hi!:matchesOwn(null", attributes17); org.jsoup.nodes.Element element21 = element19.html("[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray26 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26); org.jsoup.nodes.Element element29 = document24.classNames((java.util.Set<java.lang.String>) strSet27); document24.title("#document"); org.jsoup.nodes.Document document33 = new org.jsoup.nodes.Document(""); org.jsoup.nodes.Element element34 = document24.prependChild((org.jsoup.nodes.Node) document33); org.jsoup.select.Evaluator.IndexEquals indexEquals36 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray41 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41); org.jsoup.nodes.Element element44 = document39.classNames((java.util.Set<java.lang.String>) strSet42); org.jsoup.nodes.Document document46 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document49 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray51 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51); org.jsoup.nodes.Element element54 = document49.classNames((java.util.Set<java.lang.String>) strSet52); org.jsoup.nodes.Element element55 = document46.appendChild((org.jsoup.nodes.Node) element54); boolean boolean56 = indexEquals36.matches(element44, (org.jsoup.nodes.Element) document46); boolean boolean57 = element34.equals((java.lang.Object) document46); org.jsoup.nodes.Node node58 = document46.nextSibling(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element59 = element21.after(node58); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(node15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(attributes17); org.junit.Assert.assertNotNull(attributeSpliterator18); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNull(node58); }
public void test079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test079"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner10 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Node node16 = document14.removeAttr("#doctype"); org.jsoup.nodes.Document document17 = cleaner10.clean(document14); org.jsoup.nodes.Attributes attributes18 = document17.attributes(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Node node28 = document26.removeAttr("#doctype"); org.jsoup.nodes.Document document29 = cleaner22.clean(document26); org.jsoup.nodes.Attributes attributes30 = document29.attributes(); boolean boolean31 = containsOwnText6.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document29); boolean boolean32 = cleaner4.isValid(document17); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean37 = document35.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document38 = cleaner4.clean(document35); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node39 = document35.unwrap(); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(node16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(attributes18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(node28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document38); }
public void test080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test080"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); boolean boolean43 = org.jsoup.Jsoup.isValid("", whitelist40); java.lang.String[] strArray49 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist50 = whitelist40.addTags(strArray49); org.jsoup.safety.Whitelist whitelist51 = whitelist1.addAttributes("[^hi!]", strArray49); org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist56 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str57 = org.jsoup.Jsoup.clean("", "#data", whitelist56); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.basic(); boolean boolean60 = org.jsoup.Jsoup.isValid("hi!", whitelist59); java.lang.String[] strArray68 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist69 = whitelist59.addProtocols(".#document", "#doctype=\"\"", strArray68); org.jsoup.safety.Whitelist whitelist70 = whitelist56.addTags(strArray68); org.jsoup.safety.Whitelist whitelist71 = whitelist53.addTags(strArray68); org.jsoup.safety.Whitelist whitelist72 = whitelist51.addAttributes("[^:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", strArray68); boolean boolean74 = whitelist72.isSafeTag("[text=\"\"$=hi!  public &quot;#data&quot; &quot;#doctype&quot;&gt;]"); java.lang.String[] strArray77 = null; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist78 = whitelist72.addProtocols("#doctype", "", strArray77); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, ""); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); }
public void test081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test081"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist1); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basic(); boolean boolean7 = org.jsoup.Jsoup.isValid("hi!", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addProtocols(".#document", "#doctype=\"\"", strArray15); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray15, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray15); org.jsoup.safety.Whitelist whitelist20 = whitelist1.addTags(strArray15); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); boolean boolean27 = org.jsoup.Jsoup.isValid("", whitelist24); org.jsoup.nodes.Attributes attributes29 = whitelist24.getEnforcedAttributes(":eq(52)"); boolean boolean30 = org.jsoup.Jsoup.isValid("", whitelist24); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.basic(); boolean boolean37 = org.jsoup.Jsoup.isValid("hi!", whitelist36); java.lang.String[] strArray45 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist46 = whitelist36.addProtocols(".#document", "#doctype=\"\"", strArray45); org.jsoup.safety.Whitelist whitelist47 = whitelist33.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray45); org.jsoup.safety.Whitelist whitelist49 = whitelist47.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist51 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist55 = whitelist53.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist58 = org.jsoup.safety.Whitelist.basic(); boolean boolean59 = org.jsoup.Jsoup.isValid("hi!", whitelist58); java.lang.String[] strArray67 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist68 = whitelist58.addProtocols(".#document", "#doctype=\"\"", strArray67); org.jsoup.safety.Whitelist whitelist69 = whitelist55.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray67); org.jsoup.safety.Whitelist whitelist70 = whitelist51.addAttributes(":containsOwn(hi!:matchesown(null", strArray67); org.jsoup.safety.Whitelist whitelist71 = whitelist47.addAttributes(" text=\"\"", strArray67); org.jsoup.safety.Whitelist whitelist72 = whitelist24.addProtocols("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray67); org.jsoup.safety.Whitelist whitelist73 = whitelist20.addAttributes("#doctype=\"\"", strArray67); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray67); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(attributes29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist73); }
public void test082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test082"); org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", "[[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]!=.#document]"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist3); org.jsoup.select.Evaluator.Class class8 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str9 = class8.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals11 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray16 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16); org.jsoup.nodes.Element element19 = document14.classNames((java.util.Set<java.lang.String>) strSet17); org.jsoup.nodes.Document document21 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray26 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26); org.jsoup.nodes.Element element29 = document24.classNames((java.util.Set<java.lang.String>) strSet27); org.jsoup.nodes.Element element30 = document21.appendChild((org.jsoup.nodes.Node) element29); boolean boolean31 = indexEquals11.matches(element19, (org.jsoup.nodes.Element) document21); org.jsoup.nodes.Document.QuirksMode quirksMode32 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document33 = document21.quirksMode(quirksMode32); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray38 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38); org.jsoup.nodes.Element element41 = document36.classNames((java.util.Set<java.lang.String>) strSet39); document36.title("#document"); boolean boolean44 = class8.matches((org.jsoup.nodes.Element) document33, (org.jsoup.nodes.Element) document36); org.jsoup.nodes.Document document45 = cleaner6.clean(document33); org.jsoup.nodes.Element element47 = document45.toggleClass("#doctype=\"\""); // The following exception was thrown during execution in test generation try { document2.replaceWith((org.jsoup.nodes.Node) document45); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str9 + "' != '" + ".#document" + "'", str9, ".#document"); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + quirksMode32 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode32.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(element47); }
public void test083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test083"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements24 = element13.getElementsByClass("#root"); org.jsoup.nodes.Element element26 = element13.text("#data"); org.jsoup.select.Elements elements29 = element26.getElementsByAttributeValueEnding("\n<!--<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>-->", "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements29); }
public void test084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test084"); org.jsoup.safety.Whitelist whitelist3 = new org.jsoup.safety.Whitelist(); boolean boolean4 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist3); java.lang.String str5 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist3); org.jsoup.nodes.Document document8 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Element element17 = document8.appendChild((org.jsoup.nodes.Node) element16); java.lang.String str19 = document8.absUrl("hi!"); org.jsoup.nodes.Attribute attribute22 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean23 = whitelist3.isSafeAttribute("", (org.jsoup.nodes.Element) document8, attribute22); org.jsoup.nodes.Element element26 = document8.attr("##<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ""); java.lang.String str27 = element26.val(); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!:matchesOwn(null" + "'", str5, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); }
public void test085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test085"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); boolean boolean6 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist3); java.lang.String str7 = org.jsoup.Jsoup.clean(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist3); java.lang.String str8 = org.jsoup.Jsoup.clean("", whitelist3); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist3); org.jsoup.nodes.Attributes attributes11 = whitelist3.getEnforcedAttributes(""); java.lang.String[] strArray14 = null; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist15 = whitelist3.addProtocols(":contains([#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi! =&quot;&quot;" + "'", str7, "hi! =&quot;&quot;"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertNotNull(attributes11); }
public void test086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test086"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings4.prettyPrint(false); java.nio.charset.Charset charset7 = outputSettings4.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings4.indentAmount((int) '4'); java.nio.charset.Charset charset10 = outputSettings4.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.prettyPrint(false); int int14 = outputSettings13.indentAmount(); java.nio.charset.Charset charset15 = outputSettings13.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings4.charset(charset15); java.nio.charset.Charset[] charsetArray17 = new java.nio.charset.Charset[] { charset15 }; java.util.LinkedList<java.nio.charset.Charset> charsetList18 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList18, charsetArray17); java.nio.charset.Charset charset20 = charsetList18.pop(); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basic(); boolean boolean23 = org.jsoup.Jsoup.isValid("hi!", whitelist22); java.lang.String[] strArray31 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist32 = whitelist22.addProtocols(".#document", "#doctype=\"\"", strArray31); org.jsoup.safety.Cleaner cleaner33 = new org.jsoup.safety.Cleaner(whitelist22); boolean boolean34 = charsetList18.contains((java.lang.Object) whitelist22); boolean boolean35 = org.jsoup.Jsoup.isValid(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist22); boolean boolean36 = attributes0.equals((java.lang.Object) whitelist22); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor37 = attributes0.iterator(); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertNotNull(charset7); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(outputSettings16); org.junit.Assert.assertNotNull(charsetArray17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(charset20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(attributeItor37); }
public void test087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test087"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("[:matches(null]", pattern1); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.select.Elements elements13 = document11.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements15 = document11.getElementsByAttribute("#document"); org.jsoup.select.Elements elements18 = document11.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document19 = cleaner7.clean(document11); org.jsoup.select.Evaluator.IndexLessThan indexLessThan21 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 10); java.lang.String str22 = indexLessThan21.toString(); org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("#document", "#data"); org.jsoup.select.Elements elements27 = document25.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document31 = document30.clone(); org.jsoup.nodes.Element element33 = document30.addClass(""); java.lang.String str34 = document30.toString(); org.jsoup.nodes.Element element36 = document30.tagName("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); boolean boolean37 = indexLessThan21.matches((org.jsoup.nodes.Element) document25, element36); java.lang.String str38 = element36.text(); boolean boolean39 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document19, element36); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element41 = document19.after("<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(elements18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + ":lt(10)" + "'", str22, ":lt(10)"); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(elements27); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str34, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); }
public void test088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test088"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Node node11 = document9.removeAttr("#doctype"); org.jsoup.nodes.Document document12 = cleaner5.clean(document9); org.jsoup.nodes.Attributes attributes13 = document12.attributes(); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner17 = new org.jsoup.safety.Cleaner(whitelist14); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document21 = document20.clone(); org.jsoup.nodes.Node node23 = document21.removeAttr("#doctype"); org.jsoup.nodes.Document document24 = cleaner17.clean(document21); org.jsoup.nodes.Attributes attributes25 = document24.attributes(); boolean boolean26 = containsOwnText1.matches((org.jsoup.nodes.Element) document12, (org.jsoup.nodes.Element) document24); org.jsoup.nodes.Document document28 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element30 = document28.createElement("#document"); org.jsoup.nodes.Document document31 = document28.clone(); org.jsoup.select.Elements elements34 = document31.getElementsByAttributeValueMatching("hi!", "\n#document"); boolean boolean35 = document12.equals((java.lang.Object) document31); org.jsoup.select.Elements elements38 = document31.getElementsByAttributeValueEnding("UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]UTF-8", "#&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n&lt;/html&gt;"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(node11); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(attributes13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(node23); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(attributes25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(elements38); }
public void test089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test089"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); org.jsoup.nodes.Element element13 = document10.appendText("<html>\n <head>\n <title>#document</title>\n </head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Node node16 = element13.attr("#[:matches(null]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\":eq(52)\""); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(node16); }
public void test090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test090"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.isEmpty(); org.jsoup.safety.Whitelist whitelist5 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes7 = whitelist5.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList8 = attributes7.asList(); org.jsoup.nodes.Element element9 = new org.jsoup.nodes.Element(tag1, "hi! =&quot;&quot;", attributes7); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor10 = attributes7.iterator(); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertNotNull(attributeList8); org.junit.Assert.assertNotNull(attributeItor10); }
public void test091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test091"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.nodes.Attributes attributes13 = whitelist1.getEnforcedAttributes(".#document"); java.lang.String[] strArray14 = null; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist15 = whitelist1.addTags(strArray14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(attributes13); }
public void test092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test092"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element5 = document4.body(); boolean boolean6 = tag1.equals((java.lang.Object) document4); org.jsoup.nodes.Element element8 = new org.jsoup.nodes.Element(tag1, "hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist9); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray17 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17); org.jsoup.nodes.Element element20 = document15.classNames((java.util.Set<java.lang.String>) strSet18); java.lang.String str21 = document15.nodeName(); java.lang.String str22 = document15.html(); boolean boolean23 = cleaner12.isValid(document15); org.jsoup.nodes.Document document25 = org.jsoup.nodes.Document.createShell("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document.QuirksMode quirksMode26 = document25.quirksMode(); org.jsoup.nodes.Document document27 = document15.quirksMode(quirksMode26); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element28 = element8.before((org.jsoup.nodes.Node) document27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(element5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#document" + "'", str21, "#document"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str22, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertTrue("'" + quirksMode26 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode26.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document27); }
public void test093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test093"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.indentAmount((int) '4'); java.nio.charset.Charset charset6 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); int int10 = outputSettings9.indentAmount(); java.nio.charset.Charset charset11 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.charset(charset11); java.nio.charset.Charset[] charsetArray13 = new java.nio.charset.Charset[] { charset11 }; java.util.LinkedList<java.nio.charset.Charset> charsetList14 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList14, charsetArray13); java.nio.charset.Charset charset16 = charsetList14.pop(); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basic(); boolean boolean19 = org.jsoup.Jsoup.isValid("hi!", whitelist18); java.lang.String[] strArray27 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist28 = whitelist18.addProtocols(".#document", "#doctype=\"\"", strArray27); org.jsoup.safety.Cleaner cleaner29 = new org.jsoup.safety.Cleaner(whitelist18); boolean boolean30 = charsetList14.contains((java.lang.Object) whitelist18); org.jsoup.safety.Whitelist whitelist33 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes35 = whitelist33.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(false); boolean boolean41 = org.jsoup.Jsoup.isValid("", whitelist38); java.lang.String[] strArray47 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist48 = whitelist38.addTags(strArray47); org.jsoup.safety.Whitelist whitelist49 = whitelist33.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray47); org.jsoup.safety.Whitelist whitelist50 = whitelist18.addProtocols("#<html> <head></head> <body> hi! </body> </html>", "[[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>]", strArray47); org.jsoup.safety.Whitelist whitelist52 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes54 = whitelist52.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist57 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist59 = whitelist57.preserveRelativeLinks(false); boolean boolean60 = org.jsoup.Jsoup.isValid("", whitelist57); java.lang.String[] strArray66 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist67 = whitelist57.addTags(strArray66); org.jsoup.safety.Whitelist whitelist68 = whitelist52.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray66); org.jsoup.safety.Whitelist whitelist71 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist73 = whitelist71.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner74 = new org.jsoup.safety.Cleaner(whitelist71); org.jsoup.safety.Whitelist whitelist76 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist78 = whitelist76.preserveRelativeLinks(false); boolean boolean79 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist76); org.jsoup.safety.Whitelist whitelist81 = org.jsoup.safety.Whitelist.basic(); boolean boolean82 = org.jsoup.Jsoup.isValid("hi!", whitelist81); java.lang.String[] strArray90 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist91 = whitelist81.addProtocols(".#document", "#doctype=\"\"", strArray90); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray90, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray90); org.jsoup.safety.Whitelist whitelist95 = whitelist76.addTags(strArray90); org.jsoup.safety.Whitelist whitelist96 = whitelist71.addTags(strArray90); org.jsoup.safety.Whitelist whitelist97 = whitelist52.addProtocols("#data", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray90); org.jsoup.safety.Whitelist whitelist98 = whitelist18.addAttributes("[:matches(null]", strArray90); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(charset6); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charsetArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(attributes35); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(attributes54); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(strArray66); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertNotNull(whitelist76); org.junit.Assert.assertNotNull(whitelist78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true); org.junit.Assert.assertNotNull(whitelist81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true); org.junit.Assert.assertNotNull(strArray90); org.junit.Assert.assertNotNull(whitelist91); org.junit.Assert.assertNotNull(whitelist95); org.junit.Assert.assertNotNull(whitelist96); org.junit.Assert.assertNotNull(whitelist97); org.junit.Assert.assertNotNull(whitelist98); }
public void test094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test094"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.safety.Whitelist whitelist14 = whitelist1.preserveRelativeLinks(false); java.lang.String[] strArray16 = null; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist17 = whitelist1.addAttributes("#documenthi!", strArray16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist14); }
public void test095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test095"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;", pattern1); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText4 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner8 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); java.lang.String str17 = document11.nodeName(); java.lang.String str18 = document11.html(); boolean boolean19 = cleaner8.isValid(document11); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element22 = document21.body(); java.lang.String str23 = document21.toString(); org.jsoup.nodes.Document document24 = cleaner8.clean(document21); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document28 = document27.clone(); org.jsoup.nodes.Element element30 = document27.addClass(""); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str35 = document34.val(); java.util.List<org.jsoup.nodes.Node> nodeList37 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document34, "#document"); java.lang.String str38 = document34.baseUri(); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str42 = document41.val(); org.jsoup.nodes.Element element44 = document41.append("#document"); org.jsoup.nodes.Element element45 = document34.appendChild((org.jsoup.nodes.Node) element44); org.jsoup.nodes.Element element46 = document27.prependChild((org.jsoup.nodes.Node) document34); org.jsoup.nodes.Attributes attributes47 = element46.attributes(); java.lang.String str48 = element46.baseUri(); java.lang.String str49 = element46.text(); org.jsoup.nodes.Element element51 = element46.toggleClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean52 = containsOwnText4.matches((org.jsoup.nodes.Element) document24, element46); org.jsoup.nodes.Element element53 = null; // The following exception was thrown during execution in test generation try { boolean boolean54 = attributeWithValueMatching2.matches(element46, element53); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#document" + "'", str17, "#document"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str23, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertNotNull(nodeList37); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!"); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, ""); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(attributes47); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "#document" + "'", str48, "#document"); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi! hi!#document hi!" + "'", str49, "hi! hi!#document hi!"); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); }
public void test096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test096"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist4.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist0.addAttributes(":containsOwn(hi!:matchesown(null", strArray16); org.jsoup.safety.Whitelist whitelist21 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes23 = whitelist21.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(false); boolean boolean29 = org.jsoup.Jsoup.isValid("", whitelist26); java.lang.String[] strArray35 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist36 = whitelist26.addTags(strArray35); org.jsoup.safety.Whitelist whitelist37 = whitelist21.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray35); boolean boolean38 = org.jsoup.helper.StringUtil.in("", strArray35); org.jsoup.safety.Whitelist whitelist39 = whitelist0.addTags(strArray35); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(attributes23); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(whitelist39); }
public void test097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test097"); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList0 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings3.charset(); charsetList0.addFirst(charset4); java.util.Iterator<java.nio.charset.Charset> charsetItor6 = charsetList0.iterator(); org.jsoup.nodes.Document document8 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element10 = document8.createElement("#document"); org.jsoup.nodes.Document document11 = document8.clone(); java.lang.String str12 = document8.val(); org.jsoup.nodes.Node node15 = document8.attr("#doctype", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean16 = charsetList0.removeLastOccurrence((java.lang.Object) "#doctype"); java.nio.charset.Charset charset17 = charsetList0.peekFirst(); java.util.ListIterator<java.nio.charset.Charset> charsetItor19 = charsetList0.listIterator(0); org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.prettyPrint(false); java.nio.charset.Charset charset23 = outputSettings20.charset(); java.nio.charset.Charset charset24 = outputSettings20.charset(); boolean boolean25 = charsetList0.offerLast(charset24); java.lang.Object obj26 = charsetList0.clone(); boolean boolean28 = charsetList0.contains((java.lang.Object) 0); java.nio.charset.Charset charset29 = null; charsetList0.addLast(charset29); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.basic(); boolean boolean33 = org.jsoup.Jsoup.isValid("hi!", whitelist32); java.lang.String[] strArray41 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist42 = whitelist32.addProtocols(".#document", "#doctype=\"\"", strArray41); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist32); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document47 = document46.clone(); document47.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean50 = document47.isBlock(); org.jsoup.nodes.Document document51 = cleaner43.clean(document47); int int52 = charsetList0.lastIndexOf((java.lang.Object) document47); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(charsetItor6); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertNotNull(node15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(charsetItor19); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(charset24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(obj26); org.junit.Assert.assertEquals(obj26.toString(), "[UTF-8, UTF-8]"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "[UTF-8, UTF-8]"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "[UTF-8, UTF-8]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1)); }
public void test098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test098"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner10 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Node node16 = document14.removeAttr("#doctype"); org.jsoup.nodes.Document document17 = cleaner10.clean(document14); org.jsoup.nodes.Attributes attributes18 = document17.attributes(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Node node28 = document26.removeAttr("#doctype"); org.jsoup.nodes.Document document29 = cleaner22.clean(document26); org.jsoup.nodes.Attributes attributes30 = document29.attributes(); boolean boolean31 = containsOwnText6.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document29); boolean boolean32 = cleaner4.isValid(document17); org.jsoup.nodes.Document document33 = null; // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Document document34 = cleaner4.clean(document33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(node16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(attributes18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(node28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); }
public void test099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test099"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist4.addTags(strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist1.addTags(strArray16); boolean boolean20 = org.jsoup.helper.StringUtil.in("[^hi!]", strArray16); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test100"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.nodes.Attributes attributes13 = whitelist1.getEnforcedAttributes(".#document"); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean18 = org.jsoup.Jsoup.isValid("#document", whitelist17); java.lang.String str19 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist17); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basic(); boolean boolean23 = org.jsoup.Jsoup.isValid("hi!", whitelist22); java.lang.String[] strArray31 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist32 = whitelist22.addProtocols(".#document", "#doctype=\"\"", strArray31); org.jsoup.safety.Whitelist whitelist33 = whitelist17.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray31); boolean boolean34 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray31); org.jsoup.safety.Whitelist whitelist35 = whitelist1.addTags(strArray31); boolean boolean37 = whitelist35.isSafeTag("UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"[hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;!=.:eq(52)]\"UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"[hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;!=.:eq(52)]\"null"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(attributes13); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str19, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); }
public void test101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test101"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist5.addTags(strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); java.lang.String str21 = org.jsoup.Jsoup.clean("UTF-8UTF-8", ":matches(null", whitelist20); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTF-8UTF-8" + "'", str21, "UTF-8UTF-8"); }
public void test102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test102"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); boolean boolean8 = org.jsoup.Jsoup.isValid("", whitelist5); java.lang.String[] strArray14 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist15 = whitelist5.addTags(strArray14); org.jsoup.safety.Whitelist whitelist16 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray14); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); boolean boolean27 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist24); org.jsoup.safety.Whitelist whitelist29 = org.jsoup.safety.Whitelist.basic(); boolean boolean30 = org.jsoup.Jsoup.isValid("hi!", whitelist29); java.lang.String[] strArray38 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist39 = whitelist29.addProtocols(".#document", "#doctype=\"\"", strArray38); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray38, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray38); org.jsoup.safety.Whitelist whitelist43 = whitelist24.addTags(strArray38); org.jsoup.safety.Whitelist whitelist44 = whitelist19.addTags(strArray38); org.jsoup.safety.Whitelist whitelist45 = whitelist0.addProtocols("#data", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray38); org.jsoup.safety.Whitelist whitelist49 = whitelist0.addEnforcedAttribute("*", "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", " "); org.jsoup.safety.Cleaner cleaner50 = new org.jsoup.safety.Cleaner(whitelist0); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist49); }
public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); boolean boolean6 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist3); java.lang.String str7 = org.jsoup.Jsoup.clean(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist3); java.lang.String str8 = org.jsoup.Jsoup.clean("", whitelist3); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist3); org.jsoup.nodes.Attributes attributes11 = whitelist3.getEnforcedAttributes(""); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); org.jsoup.nodes.Element element18 = document15.addClass(""); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str23 = document22.val(); java.util.List<org.jsoup.nodes.Node> nodeList25 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document22, "#document"); java.lang.String str26 = document22.baseUri(); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str30 = document29.val(); org.jsoup.nodes.Element element32 = document29.append("#document"); org.jsoup.nodes.Element element33 = document22.appendChild((org.jsoup.nodes.Node) element32); org.jsoup.nodes.Element element34 = document15.prependChild((org.jsoup.nodes.Node) document22); org.jsoup.nodes.Attribute attribute37 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute37.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str40 = attribute37.getValue(); boolean boolean41 = whitelist3.isSafeAttribute("utf-8utf-8=\"#data\"", element34, attribute37); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi! =&quot;&quot;" + "'", str7, "hi! =&quot;&quot;"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(nodeList25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!"); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, ""); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); }
public void test104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test104"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); java.lang.String str4 = attributes0.get("\n#document"); org.jsoup.nodes.Attributes attributes5 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes6 = attributes5.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator7 = attributes5.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap8 = attributes5.dataset(); attributes0.addAll(attributes5); java.lang.String str10 = attributes0.toString(); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner14 = new org.jsoup.safety.Cleaner(whitelist11); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document18 = document17.clone(); org.jsoup.nodes.Node node20 = document18.removeAttr("#doctype"); org.jsoup.nodes.Document document21 = cleaner14.clean(document18); boolean boolean22 = attributes0.equals((java.lang.Object) document18); org.jsoup.nodes.Element element23 = document18.head(); org.jsoup.nodes.Element element25 = document18.append("[^:containsOwn(hi!]"); java.lang.String str26 = element25.text(); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(attributeSpliterator7); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(node20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi! [^:containsOwn(hi!]" + "'", str26, "hi! [^:containsOwn(hi!]"); }
public void test105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test105"); org.jsoup.select.Evaluator.ContainsText containsText1 = new org.jsoup.select.Evaluator.ContainsText(". class=\" #doctype\""); java.util.regex.Pattern pattern3 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching4 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("[:matches(null]", pattern3); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str8 = org.jsoup.Jsoup.clean("", "#data", whitelist7); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document13 = document12.clone(); org.jsoup.select.Elements elements15 = document13.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements17 = document13.getElementsByAttribute("#document"); org.jsoup.select.Elements elements20 = document13.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document21 = cleaner9.clean(document13); org.jsoup.select.Evaluator.IndexLessThan indexLessThan23 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 10); java.lang.String str24 = indexLessThan23.toString(); org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("#document", "#data"); org.jsoup.select.Elements elements29 = document27.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document33 = document32.clone(); org.jsoup.nodes.Element element35 = document32.addClass(""); java.lang.String str36 = document32.toString(); org.jsoup.nodes.Element element38 = document32.tagName("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); boolean boolean39 = indexLessThan23.matches((org.jsoup.nodes.Element) document27, element38); java.lang.String str40 = element38.text(); boolean boolean41 = attributeWithValueMatching4.matches((org.jsoup.nodes.Element) document21, element38); org.jsoup.nodes.Element element42 = null; // The following exception was thrown during execution in test generation try { boolean boolean43 = containsText1.matches((org.jsoup.nodes.Element) document21, element42); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(elements17); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertEquals("'" + str24 + "' != '" + ":lt(10)" + "'", str24, ":lt(10)"); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str36, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!"); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); }
public void test106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test106"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist1); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist7 = whitelist1.addEnforcedAttribute("", "[#document, hi!, ]", "[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner10 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Node node16 = document14.removeAttr("#doctype"); org.jsoup.nodes.Document document17 = cleaner10.clean(document14); org.jsoup.nodes.Attributes attributes18 = document17.attributes(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Node node28 = document26.removeAttr("#doctype"); org.jsoup.nodes.Document document29 = cleaner22.clean(document26); org.jsoup.nodes.Attributes attributes30 = document29.attributes(); boolean boolean31 = containsOwnText6.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document29); boolean boolean32 = cleaner4.isValid(document17); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean37 = document35.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document38 = cleaner4.clean(document35); boolean boolean40 = document38.hasClass("[hi!, <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); java.lang.String str41 = document38.val(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(node16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(attributes18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(node28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); }
public void test108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test108"); org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText3 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Node node13 = document11.removeAttr("#doctype"); org.jsoup.nodes.Document document14 = cleaner7.clean(document11); org.jsoup.nodes.Attributes attributes15 = document14.attributes(); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner19 = new org.jsoup.safety.Cleaner(whitelist16); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Node node25 = document23.removeAttr("#doctype"); org.jsoup.nodes.Document document26 = cleaner19.clean(document23); org.jsoup.nodes.Attributes attributes27 = document26.attributes(); boolean boolean28 = containsOwnText3.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document26); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str33 = document32.val(); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document32, "#document"); java.lang.String str36 = document32.baseUri(); org.jsoup.nodes.Element element38 = document32.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); org.jsoup.nodes.Document.QuirksMode quirksMode40 = null; org.jsoup.nodes.Document document41 = document32.quirksMode(quirksMode40); boolean boolean42 = indexEquals1.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document41); java.util.List<org.jsoup.nodes.Node> nodeList43 = document41.childNodes(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element45 = document41.createElement(""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(node25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!"); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(nodeList43); }
public void test109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test109"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); boolean boolean6 = org.jsoup.Jsoup.isValid("", whitelist3); org.jsoup.nodes.Attributes attributes8 = whitelist3.getEnforcedAttributes(":eq(52)"); boolean boolean9 = org.jsoup.Jsoup.isValid("", whitelist3); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basic(); boolean boolean16 = org.jsoup.Jsoup.isValid("hi!", whitelist15); java.lang.String[] strArray24 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist25 = whitelist15.addProtocols(".#document", "#doctype=\"\"", strArray24); org.jsoup.safety.Whitelist whitelist26 = whitelist12.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray24); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist34 = whitelist32.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.basic(); boolean boolean38 = org.jsoup.Jsoup.isValid("hi!", whitelist37); java.lang.String[] strArray46 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist47 = whitelist37.addProtocols(".#document", "#doctype=\"\"", strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist34.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray46); org.jsoup.safety.Whitelist whitelist49 = whitelist30.addAttributes(":containsOwn(hi!:matchesown(null", strArray46); org.jsoup.safety.Whitelist whitelist50 = whitelist26.addAttributes(" text=\"\"", strArray46); org.jsoup.safety.Whitelist whitelist51 = whitelist3.addProtocols("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray46); boolean boolean52 = org.jsoup.helper.StringUtil.in("", strArray46); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); }
public void test110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test110"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.nodes.Node node10 = document8.removeAttr("#doctype"); org.jsoup.nodes.Document document11 = cleaner4.clean(document8); org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.select.Elements elements16 = document14.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.Map<java.lang.String, java.lang.String> strMap17 = document14.dataset(); org.jsoup.nodes.Document document18 = cleaner4.clean(document14); java.util.List<org.jsoup.nodes.Node> nodeList20 = org.jsoup.parser.Parser.parseFragment("<body></body>", (org.jsoup.nodes.Element) document18, "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(node10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(elements16); org.junit.Assert.assertNotNull(strMap17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(nodeList20); }
public void test111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test111"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist2); org.jsoup.nodes.Attributes attributes7 = whitelist2.getEnforcedAttributes(":eq(52)"); boolean boolean8 = org.jsoup.Jsoup.isValid("", whitelist2); org.jsoup.nodes.Attributes attributes10 = whitelist2.getEnforcedAttributes(":eq(52)"); java.lang.String str11 = attributes10.html(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(attributes10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); }
public void test112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test112"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings2.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings4.prettyPrint(false); int int7 = outputSettings6.indentAmount(); java.nio.charset.Charset charset8 = outputSettings6.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.prettyPrint(false); java.nio.charset.Charset charset12 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.prettyPrint(false); java.nio.charset.Charset charset16 = outputSettings15.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.prettyPrint(false); java.nio.charset.Charset charset20 = outputSettings17.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.indentAmount((int) '4'); java.nio.charset.Charset charset23 = outputSettings17.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.prettyPrint(false); int int27 = outputSettings26.indentAmount(); java.nio.charset.Charset charset28 = outputSettings26.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings17.charset(charset28); java.nio.charset.Charset[] charsetArray30 = new java.nio.charset.Charset[] { charset3, charset8, charset12, charset16, charset28 }; java.util.LinkedList<java.nio.charset.Charset> charsetList31 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList31, charsetArray30); java.util.Iterator<java.nio.charset.Charset> charsetItor33 = charsetList31.iterator(); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str37 = document36.val(); org.jsoup.select.Elements elements39 = document36.getElementsContainingText("#doctype"); java.lang.String str40 = document36.baseUri(); int int41 = charsetList31.lastIndexOf((java.lang.Object) document36); org.jsoup.safety.Whitelist whitelist43 = new org.jsoup.safety.Whitelist(); boolean boolean44 = org.jsoup.Jsoup.isValid("", whitelist43); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray50 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50); org.jsoup.nodes.Element element53 = document48.classNames((java.util.Set<java.lang.String>) strSet51); org.jsoup.nodes.Element element55 = element53.prepend("#document"); org.jsoup.nodes.Attribute attribute58 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute58.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str61 = attribute58.getKey(); boolean boolean62 = whitelist43.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element55, attribute58); org.jsoup.nodes.Element element64 = element55.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element65 = element64.empty(); org.jsoup.nodes.Element element67 = element65.appendElement(":matchesOwn(null"); org.jsoup.nodes.Element element68 = document36.appendChild((org.jsoup.nodes.Node) element67); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertNotNull(charset8); org.junit.Assert.assertNotNull(outputSettings11); org.junit.Assert.assertNotNull(charset12); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(charset20); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1); org.junit.Assert.assertNotNull(charset28); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(charsetArray30); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(charsetItor33); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, ""); org.junit.Assert.assertNotNull(elements39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!"); org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1)); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str61, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertNotNull(element68); }
public void test113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test113"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor2 = attributes1.iterator(); java.util.Map<java.lang.String, java.lang.String> strMap3 = attributes1.dataset(); attributes1.remove(":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.prettyPrint(false); java.nio.charset.Charset charset9 = outputSettings6.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings6.indentAmount((int) '4'); java.nio.charset.Charset charset12 = outputSettings6.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.prettyPrint(false); int int16 = outputSettings15.indentAmount(); java.nio.charset.Charset charset17 = outputSettings15.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings6.charset(charset17); java.nio.charset.Charset[] charsetArray19 = new java.nio.charset.Charset[] { charset17 }; java.util.LinkedList<java.nio.charset.Charset> charsetList20 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList20, charsetArray19); java.nio.charset.Charset charset22 = charsetList20.pop(); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.basic(); boolean boolean25 = org.jsoup.Jsoup.isValid("hi!", whitelist24); java.lang.String[] strArray33 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist34 = whitelist24.addProtocols(".#document", "#doctype=\"\"", strArray33); org.jsoup.safety.Cleaner cleaner35 = new org.jsoup.safety.Cleaner(whitelist24); boolean boolean36 = charsetList20.contains((java.lang.Object) whitelist24); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan39 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (byte) 1); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element42 = document41.body(); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element45 = document44.body(); boolean boolean46 = indexGreaterThan39.matches(element42, (org.jsoup.nodes.Element) document44); org.jsoup.nodes.Attribute attribute49 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute49.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str52 = attribute49.getKey(); java.lang.String str53 = attribute49.html(); boolean boolean54 = whitelist24.isSafeAttribute("#doctype=\"\"", element42, attribute49); attribute49.setKey("hi!"); attributes1.put(attribute49); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeItor2); org.junit.Assert.assertNotNull(strMap3); org.junit.Assert.assertNotNull(outputSettings8); org.junit.Assert.assertNotNull(charset9); org.junit.Assert.assertNotNull(outputSettings11); org.junit.Assert.assertNotNull(charset12); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charsetArray19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(charset22); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str52, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"" + "'", str53, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); }
public void test114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test114"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); boolean boolean6 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist3); java.lang.String str7 = org.jsoup.Jsoup.clean(".:matchesOwn(null", ":gt(100)", whitelist3); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertEquals("'" + str7 + "' != '" + ".:matchesOwn(null" + "'", str7, ".:matchesOwn(null"); }
public void test115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test115"); org.jsoup.select.Evaluator.Class class1 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str2 = class1.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals4 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray9 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9); org.jsoup.nodes.Element element12 = document7.classNames((java.util.Set<java.lang.String>) strSet10); org.jsoup.nodes.Document document14 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray19 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19); org.jsoup.nodes.Element element22 = document17.classNames((java.util.Set<java.lang.String>) strSet20); org.jsoup.nodes.Element element23 = document14.appendChild((org.jsoup.nodes.Node) element22); boolean boolean24 = indexEquals4.matches(element12, (org.jsoup.nodes.Element) document14); org.jsoup.nodes.Document.QuirksMode quirksMode25 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document26 = document14.quirksMode(quirksMode25); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray31 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31); org.jsoup.nodes.Element element34 = document29.classNames((java.util.Set<java.lang.String>) strSet32); document29.title("#document"); boolean boolean37 = class1.matches((org.jsoup.nodes.Element) document26, (org.jsoup.nodes.Element) document29); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.basic(); boolean boolean40 = org.jsoup.Jsoup.isValid("hi!", whitelist39); java.lang.String[] strArray48 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist49 = whitelist39.addProtocols(".#document", "#doctype=\"\"", strArray48); org.jsoup.select.Evaluator.AttributeStarting attributeStarting52 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray60 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60); org.jsoup.nodes.Element element63 = document58.classNames((java.util.Set<java.lang.String>) strSet61); document58.title("#document"); boolean boolean66 = attributeStarting52.matches((org.jsoup.nodes.Element) document55, (org.jsoup.nodes.Element) document58); java.lang.String str67 = document55.id(); org.jsoup.select.Elements elements69 = document55.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements71 = document55.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute74 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean75 = whitelist39.isSafeAttribute("", (org.jsoup.nodes.Element) document55, attribute74); org.jsoup.nodes.Document document79 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str80 = document79.val(); java.util.List<org.jsoup.nodes.Node> nodeList82 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document79, "#document"); org.jsoup.nodes.Document.QuirksMode quirksMode83 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document84 = document79.quirksMode(quirksMode83); boolean boolean85 = class1.matches((org.jsoup.nodes.Element) document55, (org.jsoup.nodes.Element) document79); org.jsoup.nodes.Document document88 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str89 = document88.val(); org.jsoup.nodes.Element element91 = document88.append("#document"); java.lang.String str92 = element91.nodeName(); org.jsoup.select.Elements elements94 = element91.getElementsMatchingOwnText("#root"); org.jsoup.select.Elements elements96 = element91.getElementsByIndexGreaterThan(0); // The following exception was thrown during execution in test generation try { document79.replaceWith((org.jsoup.nodes.Node) element91); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ".#document" + "'", str2, ".#document"); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + quirksMode25 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode25.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertNotNull(strArray60); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, ""); org.junit.Assert.assertNotNull(elements69); org.junit.Assert.assertNotNull(elements71); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, ""); org.junit.Assert.assertNotNull(nodeList82); org.junit.Assert.assertTrue("'" + quirksMode83 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode83.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertNotNull(document88); org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, ""); org.junit.Assert.assertNotNull(element91); org.junit.Assert.assertEquals("'" + str92 + "' != '" + "#document" + "'", str92, "#document"); org.junit.Assert.assertNotNull(elements94); org.junit.Assert.assertNotNull(elements96); }
public void test116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test116"); org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText3 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Node node13 = document11.removeAttr("#doctype"); org.jsoup.nodes.Document document14 = cleaner7.clean(document11); org.jsoup.nodes.Attributes attributes15 = document14.attributes(); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner19 = new org.jsoup.safety.Cleaner(whitelist16); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Node node25 = document23.removeAttr("#doctype"); org.jsoup.nodes.Document document26 = cleaner19.clean(document23); org.jsoup.nodes.Attributes attributes27 = document26.attributes(); boolean boolean28 = containsOwnText3.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document26); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str33 = document32.val(); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document32, "#document"); java.lang.String str36 = document32.baseUri(); org.jsoup.nodes.Element element38 = document32.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); org.jsoup.nodes.Document.QuirksMode quirksMode40 = null; org.jsoup.nodes.Document document41 = document32.quirksMode(quirksMode40); boolean boolean42 = indexEquals1.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document41); org.jsoup.select.Elements elements43 = document14.getAllElements(); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(node25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!"); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(elements43); }
public void test117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test117"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str9 = org.jsoup.Jsoup.clean("", "#data", whitelist8); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.basic(); boolean boolean12 = org.jsoup.Jsoup.isValid("hi!", whitelist11); java.lang.String[] strArray20 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist21 = whitelist11.addProtocols(".#document", "#doctype=\"\"", strArray20); org.jsoup.safety.Whitelist whitelist22 = whitelist8.addTags(strArray20); org.jsoup.safety.Whitelist whitelist23 = whitelist5.addTags(strArray20); boolean boolean24 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist23); org.jsoup.safety.Whitelist whitelist28 = whitelist23.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist30 = whitelist23.preserveRelativeLinks(true); boolean boolean31 = org.jsoup.Jsoup.isValid("", whitelist23); java.lang.String str32 = org.jsoup.Jsoup.clean(":matchesown(null=\"#document\"", whitelist23); java.lang.String str33 = org.jsoup.Jsoup.clean("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"", "                                                  ", whitelist23); boolean boolean35 = whitelist23.isSafeTag("\n<!--<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"-->"); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertEquals("'" + str32 + "' != '" + ":matchesown(null=&quot;#document&quot;" + "'", str32, ":matchesown(null=&quot;#document&quot;"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;" + "'", str33, "hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;"); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); }
public void test118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test118"); org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str1 = allElements0.toString(); java.lang.String str2 = allElements0.toString(); java.lang.String str3 = allElements0.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Element element11 = document8.addClass(""); org.jsoup.nodes.Document document13 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element15 = document13.createElement("#document"); boolean boolean16 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document13); org.jsoup.nodes.Element element18 = document13.toggleClass("#doctype"); org.jsoup.select.Elements elements20 = element18.getElementsMatchingOwnText("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str24 = org.jsoup.Jsoup.clean("", "#data", whitelist23); org.jsoup.safety.Cleaner cleaner25 = new org.jsoup.safety.Cleaner(whitelist23); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText27 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner31 = new org.jsoup.safety.Cleaner(whitelist28); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document35 = document34.clone(); org.jsoup.nodes.Node node37 = document35.removeAttr("#doctype"); org.jsoup.nodes.Document document38 = cleaner31.clean(document35); org.jsoup.nodes.Attributes attributes39 = document38.attributes(); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document47 = document46.clone(); org.jsoup.nodes.Node node49 = document47.removeAttr("#doctype"); org.jsoup.nodes.Document document50 = cleaner43.clean(document47); org.jsoup.nodes.Attributes attributes51 = document50.attributes(); boolean boolean52 = containsOwnText27.matches((org.jsoup.nodes.Element) document38, (org.jsoup.nodes.Element) document50); boolean boolean53 = cleaner25.isValid(document38); boolean boolean54 = allElements0.matches(element18, (org.jsoup.nodes.Element) document38); org.jsoup.select.Evaluator.ContainsText containsText56 = new org.jsoup.select.Evaluator.ContainsText("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Element element57 = null; org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting60 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document63 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray65 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65); org.jsoup.nodes.Element element68 = document63.classNames((java.util.Set<java.lang.String>) strSet66); java.lang.String str69 = document63.nodeName(); org.jsoup.select.Elements elements71 = document63.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document74 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document75 = document74.clone(); org.jsoup.nodes.Element element77 = document74.addClass(""); org.jsoup.nodes.Element element78 = document63.appendChild((org.jsoup.nodes.Node) document74); org.jsoup.nodes.Document document81 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str82 = document81.val(); org.jsoup.nodes.Element element84 = document81.append("#document"); boolean boolean85 = attributeWithValueStarting60.matches((org.jsoup.nodes.Element) document63, element84); java.util.regex.Pattern pattern87 = null; org.jsoup.select.Elements elements88 = document63.getElementsByAttributeValueMatching("[^hi!]", pattern87); org.jsoup.nodes.Element element90 = document63.prependText("[hi!=:eq(52)]"); boolean boolean91 = containsText56.matches(element57, element90); org.jsoup.nodes.Document document93 = org.jsoup.nodes.Document.createShell("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean94 = allElements0.matches(element57, (org.jsoup.nodes.Element) document93); org.jsoup.nodes.Document document96 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode97 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document98 = document96.quirksMode(quirksMode97); org.jsoup.nodes.Document document99 = document93.quirksMode(quirksMode97); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "*" + "'", str1, "*"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "*" + "'", str2, "*"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "*" + "'", str3, "*"); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(node37); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(attributes39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(node49); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(attributes51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertNotNull(strArray65); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertEquals("'" + str69 + "' != '" + "#document" + "'", str69, "#document"); org.junit.Assert.assertNotNull(elements71); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertNotNull(element77); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertNotNull(document81); org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, ""); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertNotNull(elements88); org.junit.Assert.assertNotNull(element90); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false); org.junit.Assert.assertNotNull(document93); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true); org.junit.Assert.assertNotNull(document96); org.junit.Assert.assertTrue("'" + quirksMode97 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode97.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document98); org.junit.Assert.assertNotNull(document99); }
public void test119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test119"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); document11.title("#document"); boolean boolean19 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document11); org.jsoup.nodes.Element element21 = document11.html(""); java.lang.String str22 = element21.html(); java.lang.String str23 = element21.html(); org.jsoup.nodes.Attribute attribute26 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute27 = attribute26.clone(); java.lang.String str28 = attribute27.getKey(); java.lang.String str29 = attribute27.getValue(); org.jsoup.nodes.DocumentType documentType34 = new org.jsoup.nodes.DocumentType("#doctype", "#document", "#doctype", "hi!"); java.lang.String str35 = documentType34.nodeName(); java.lang.String str36 = documentType34.nodeName(); boolean boolean37 = attribute27.equals((java.lang.Object) str36); boolean boolean38 = whitelist1.isSafeAttribute("#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", element21, attribute27); java.lang.String str39 = attribute27.toString(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(attribute26); org.junit.Assert.assertNotNull(attribute27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str28, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str29, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "#doctype" + "'", str35, "#doctype"); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "#doctype" + "'", str36, "#doctype"); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"" + "'", str39, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\""); }
public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner10 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Node node16 = document14.removeAttr("#doctype"); org.jsoup.nodes.Document document17 = cleaner10.clean(document14); org.jsoup.nodes.Attributes attributes18 = document17.attributes(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Node node28 = document26.removeAttr("#doctype"); org.jsoup.nodes.Document document29 = cleaner22.clean(document26); org.jsoup.nodes.Attributes attributes30 = document29.attributes(); boolean boolean31 = containsOwnText6.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document29); boolean boolean32 = cleaner4.isValid(document17); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document36 = document35.clone(); boolean boolean38 = document36.hasClass("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); org.jsoup.nodes.Element element40 = document36.prependText(""); org.jsoup.nodes.Document document41 = cleaner4.clean(document36); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document45 = document44.clone(); org.jsoup.nodes.Element element47 = document44.addClass(""); java.lang.String str48 = document44.toString(); org.jsoup.nodes.Element element50 = document44.text(".#document"); org.jsoup.select.Elements elements53 = document44.getElementsByAttributeValueMatching("[^hi!]", " <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); org.jsoup.nodes.Node node55 = document44.childNode((int) (byte) 0); org.jsoup.nodes.Document document56 = cleaner4.clean(document44); org.jsoup.nodes.Element element58 = document44.text(":gt(1)"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(node16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(attributes18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(node28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str48, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(elements53); org.junit.Assert.assertNotNull(node55); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(element58); }
public void test121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test121"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray4 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4); org.jsoup.nodes.Element element7 = document2.classNames((java.util.Set<java.lang.String>) strSet5); java.lang.String str8 = document2.nodeName(); org.jsoup.select.Elements elements10 = document2.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Element element16 = document13.addClass(""); org.jsoup.nodes.Element element17 = document2.appendChild((org.jsoup.nodes.Node) document13); org.jsoup.nodes.Element element19 = document13.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Element element25 = document22.addClass(""); java.lang.String str26 = document22.toString(); org.jsoup.nodes.Element element28 = document22.text(".#document"); org.jsoup.nodes.Node node29 = element19.after((org.jsoup.nodes.Node) document22); org.jsoup.nodes.Element element31 = element19.prependText("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str35 = org.jsoup.Jsoup.clean("", "#data", whitelist34); org.jsoup.safety.Cleaner cleaner36 = new org.jsoup.safety.Cleaner(whitelist34); org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str41 = document40.val(); java.util.List<org.jsoup.nodes.Node> nodeList43 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document40, "#document"); java.lang.String str44 = document40.baseUri(); org.jsoup.nodes.Element element46 = document40.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements47 = document40.parents(); org.jsoup.nodes.Document document48 = cleaner36.clean(document40); boolean boolean49 = element31.equals((java.lang.Object) cleaner36); org.jsoup.nodes.Element element50 = element31.clone(); org.jsoup.select.Elements elements53 = element50.getElementsByAttributeValueMatching("\n<!--<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"-->", "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); org.jsoup.nodes.Element element55 = element50.prependElement("[:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>$=<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>]"); org.jsoup.select.Elements elements57 = element55.getElementsByIndexEquals(100); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#document" + "'", str8, "#document"); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str26, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(node29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(nodeList43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!"); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(elements47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(elements53); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertNotNull(elements57); }
public void test122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test122"); org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.prettyPrint(false); java.nio.charset.Charset charset5 = outputSettings2.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings2.indentAmount((int) '4'); java.nio.charset.Charset charset8 = outputSettings2.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.prettyPrint(false); int int12 = outputSettings11.indentAmount(); java.nio.charset.Charset charset13 = outputSettings11.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings2.charset(charset13); java.nio.charset.Charset[] charsetArray15 = new java.nio.charset.Charset[] { charset13 }; java.util.LinkedList<java.nio.charset.Charset> charsetList16 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList16, charsetArray15); java.nio.charset.Charset charset18 = charsetList16.pop(); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.basic(); boolean boolean21 = org.jsoup.Jsoup.isValid("hi!", whitelist20); java.lang.String[] strArray29 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist30 = whitelist20.addProtocols(".#document", "#doctype=\"\"", strArray29); org.jsoup.safety.Cleaner cleaner31 = new org.jsoup.safety.Cleaner(whitelist20); boolean boolean32 = charsetList16.contains((java.lang.Object) whitelist20); boolean boolean33 = org.jsoup.Jsoup.isValid("hi! hi!", whitelist20); boolean boolean34 = org.jsoup.Jsoup.isValid("#document", whitelist20); org.junit.Assert.assertNotNull(outputSettings4); org.junit.Assert.assertNotNull(charset5); org.junit.Assert.assertNotNull(outputSettings7); org.junit.Assert.assertNotNull(charset8); org.junit.Assert.assertNotNull(outputSettings11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); org.junit.Assert.assertNotNull(charset13); org.junit.Assert.assertNotNull(outputSettings14); org.junit.Assert.assertNotNull(charsetArray15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(charset18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); }
public void test123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test123"); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.select.Evaluator.AttributeWithValueStarting(" class=\"\"", "#document"); java.lang.String str3 = attributeWithValueStarting2.toString(); org.jsoup.safety.Whitelist whitelist5 = new org.jsoup.safety.Whitelist(); boolean boolean6 = org.jsoup.Jsoup.isValid("", whitelist5); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray12 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12); org.jsoup.nodes.Element element15 = document10.classNames((java.util.Set<java.lang.String>) strSet13); org.jsoup.nodes.Element element17 = element15.prepend("#document"); org.jsoup.nodes.Attribute attribute20 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute20.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str23 = attribute20.getKey(); boolean boolean24 = whitelist5.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element17, attribute20); org.jsoup.nodes.Element element26 = element17.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element28 = element17.val(":contains(<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document32 = document31.clone(); org.jsoup.nodes.Element element34 = document31.addClass(""); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str39 = document38.val(); java.util.List<org.jsoup.nodes.Node> nodeList41 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document38, "#document"); java.lang.String str42 = document38.baseUri(); org.jsoup.nodes.Document document45 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str46 = document45.val(); org.jsoup.nodes.Element element48 = document45.append("#document"); org.jsoup.nodes.Element element49 = document38.appendChild((org.jsoup.nodes.Node) element48); org.jsoup.nodes.Element element50 = document31.prependChild((org.jsoup.nodes.Node) document38); org.jsoup.nodes.Document document52 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element54 = document52.createElement("#document"); org.jsoup.nodes.Document document55 = document52.clone(); java.lang.String str56 = document55.toString(); org.jsoup.nodes.Element element57 = document38.prependChild((org.jsoup.nodes.Node) document55); org.jsoup.nodes.Node node59 = document55.wrap("<html>\n <head></head>\n <body>\n  #document\n </body>\n</html>"); boolean boolean60 = attributeWithValueStarting2.matches(element28, (org.jsoup.nodes.Element) document55); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[class=\"\"^=#document]" + "'", str3, "[class=\"\"^=#document]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str23, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, ""); org.junit.Assert.assertNotNull(nodeList41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!"); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, ""); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, ""); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertNull(node59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); }
public void test124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test124"); org.jsoup.nodes.Attribute attribute2 = new org.jsoup.nodes.Attribute("#doctype", ""); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist3); boolean boolean7 = attribute2.equals((java.lang.Object) cleaner6); attribute2.setKey("[:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>$=<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>]"); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test125"); org.jsoup.safety.Whitelist whitelist2 = new org.jsoup.safety.Whitelist(); boolean boolean4 = whitelist2.isSafeTag("#root"); java.lang.String str5 = org.jsoup.Jsoup.clean("UTF-8bodyUTF-8", "", whitelist2); org.jsoup.nodes.Element element7 = null; org.jsoup.nodes.Attribute attribute10 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute11 = attribute10.clone(); java.lang.String str12 = attribute11.getKey(); java.lang.String str13 = attribute11.getKey(); boolean boolean14 = whitelist2.isSafeAttribute("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"^=hi! hi! #comment]", element7, attribute11); java.lang.String str15 = attribute11.html(); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTF-8bodyUTF-8" + "'", str5, "UTF-8bodyUTF-8"); org.junit.Assert.assertNotNull(attribute10); org.junit.Assert.assertNotNull(attribute11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str12, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"" + "'", str15, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\""); }
public void test126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test126"); org.jsoup.safety.Whitelist whitelist4 = new org.jsoup.safety.Whitelist(); boolean boolean5 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist4); java.lang.String str6 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist4); org.jsoup.nodes.Document document9 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray14 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14); org.jsoup.nodes.Element element17 = document12.classNames((java.util.Set<java.lang.String>) strSet15); org.jsoup.nodes.Element element18 = document9.appendChild((org.jsoup.nodes.Node) element17); java.lang.String str20 = document9.absUrl("hi!"); org.jsoup.nodes.Attribute attribute23 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean24 = whitelist4.isSafeAttribute("", (org.jsoup.nodes.Element) document9, attribute23); java.lang.String str25 = org.jsoup.Jsoup.clean("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]", whitelist4); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str31 = document30.val(); java.util.List<org.jsoup.nodes.Node> nodeList33 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document30, "#document"); java.lang.String str34 = document30.baseUri(); org.jsoup.nodes.Element element36 = document30.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.basic(); boolean boolean39 = org.jsoup.Jsoup.isValid("hi!", whitelist38); java.lang.String[] strArray47 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist48 = whitelist38.addProtocols(".#document", "#doctype=\"\"", strArray47); org.jsoup.select.Evaluator.AttributeStarting attributeStarting51 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document54 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray59 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59); org.jsoup.nodes.Element element62 = document57.classNames((java.util.Set<java.lang.String>) strSet60); document57.title("#document"); boolean boolean65 = attributeStarting51.matches((org.jsoup.nodes.Element) document54, (org.jsoup.nodes.Element) document57); java.lang.String str66 = document54.id(); org.jsoup.select.Elements elements68 = document54.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements70 = document54.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute73 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean74 = whitelist38.isSafeAttribute("", (org.jsoup.nodes.Element) document54, attribute73); boolean boolean75 = whitelist4.isSafeAttribute("[#document^=#doctype]", (org.jsoup.nodes.Element) document30, attribute73); java.lang.String str77 = attribute73.setValue("\n<!--<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>-->"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!:matchesOwn(null" + "'", str6, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]" + "'", str25, "[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(nodeList33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!"); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, ""); org.junit.Assert.assertNotNull(elements68); org.junit.Assert.assertNotNull(elements70); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "#document" + "'", str77, "#document"); }
public void test127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test127"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist5.addTags(strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); java.lang.String str21 = org.jsoup.Jsoup.clean("hi! [^:containsOwn(hi!]", "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist20); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi! [^:containsOwn(hi!]" + "'", str21, "hi! [^:containsOwn(hi!]"); }
public void test128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test128"); org.jsoup.select.Evaluator.AttributeStarting attributeStarting1 = new org.jsoup.select.Evaluator.AttributeStarting(":containsOwn(hi!"); java.lang.String str2 = attributeStarting1.toString(); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray7 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7); org.jsoup.nodes.Element element10 = document5.classNames((java.util.Set<java.lang.String>) strSet8); java.lang.String str11 = document5.nodeName(); org.jsoup.select.Elements elements13 = document5.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document17 = document16.clone(); org.jsoup.nodes.Element element19 = document16.addClass(""); org.jsoup.nodes.Element element20 = document5.appendChild((org.jsoup.nodes.Node) document16); org.jsoup.nodes.Element element22 = document16.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Element element28 = document25.addClass(""); java.lang.String str29 = document25.toString(); org.jsoup.nodes.Element element31 = document25.text(".#document"); org.jsoup.nodes.Node node32 = element22.after((org.jsoup.nodes.Node) document25); org.jsoup.nodes.Element element34 = element22.html("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); org.jsoup.parser.Tag tag36 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean37 = tag36.canContainBlock(); boolean boolean38 = tag36.formatAsBlock(); boolean boolean39 = tag36.isEmpty(); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist43 = whitelist41.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner44 = new org.jsoup.safety.Cleaner(whitelist41); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document48 = document47.clone(); org.jsoup.nodes.Node node50 = document48.removeAttr("#doctype"); org.jsoup.nodes.Document document51 = cleaner44.clean(document48); org.jsoup.nodes.Attributes attributes52 = document51.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator53 = attributes52.spliterator(); org.jsoup.nodes.Element element54 = new org.jsoup.nodes.Element(tag36, "hi!:matchesOwn(null", attributes52); org.jsoup.nodes.Element element56 = element54.html("[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.jsoup.nodes.Element element58 = element56.toggleClass(""); boolean boolean59 = attributeStarting1.matches(element22, element56); org.jsoup.select.Elements elements61 = element56.getElementsByIndexEquals(3); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[^:containsOwn(hi!]" + "'", str2, "[^:containsOwn(hi!]"); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#document" + "'", str11, "#document"); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str29, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(node32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(tag36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(node50); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(attributes52); org.junit.Assert.assertNotNull(attributeSpliterator53); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(elements61); }
public void test129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test129"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("\n#document", pattern1); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean6 = org.jsoup.Jsoup.isValid("#document", whitelist5); java.lang.String str7 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist5); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basic(); boolean boolean11 = org.jsoup.Jsoup.isValid("hi!", whitelist10); java.lang.String[] strArray19 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist20 = whitelist10.addProtocols(".#document", "#doctype=\"\"", strArray19); org.jsoup.safety.Whitelist whitelist21 = whitelist5.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray19); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode25 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document26 = document24.quirksMode(quirksMode25); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.basic(); boolean boolean29 = org.jsoup.Jsoup.isValid("hi!", whitelist28); java.lang.String[] strArray37 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist38 = whitelist28.addProtocols(".#document", "#doctype=\"\"", strArray37); org.jsoup.select.Evaluator.AttributeStarting attributeStarting41 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray49 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49); org.jsoup.nodes.Element element52 = document47.classNames((java.util.Set<java.lang.String>) strSet50); document47.title("#document"); boolean boolean55 = attributeStarting41.matches((org.jsoup.nodes.Element) document44, (org.jsoup.nodes.Element) document47); java.lang.String str56 = document44.id(); org.jsoup.select.Elements elements58 = document44.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements60 = document44.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute63 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean64 = whitelist28.isSafeAttribute("", (org.jsoup.nodes.Element) document44, attribute63); boolean boolean65 = whitelist21.isSafeAttribute("", (org.jsoup.nodes.Element) document24, attribute63); org.jsoup.parser.Tag tag66 = document24.tag(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting68 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document71 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document72 = document71.clone(); org.jsoup.nodes.Element element74 = document71.addClass(""); org.jsoup.nodes.Document document76 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element78 = document76.createElement("#document"); boolean boolean79 = attributeStarting68.matches((org.jsoup.nodes.Element) document71, (org.jsoup.nodes.Element) document76); document76.setBaseUri(""); boolean boolean82 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document76); org.jsoup.nodes.Element element84 = document24.createElement(":containsOwn(                                                  "); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node86 = element84.after("[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str7, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertTrue("'" + quirksMode25 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode25.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, ""); org.junit.Assert.assertNotNull(elements58); org.junit.Assert.assertNotNull(elements60); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(tag66); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertNotNull(document72); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(element84); }
public void test130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test130"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); boolean boolean7 = org.jsoup.Jsoup.isValid("", whitelist4); org.jsoup.nodes.Attributes attributes9 = whitelist4.getEnforcedAttributes(":eq(52)"); boolean boolean10 = org.jsoup.Jsoup.isValid("", whitelist4); java.lang.String str11 = org.jsoup.Jsoup.clean(":containsOwn(                                                  ", ":containsOwn(                                                  ", whitelist4); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(attributes9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertEquals("'" + str11 + "' != '" + ":containsOwn(" + "'", str11, ":containsOwn("); }
public void test131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test131"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); java.lang.String str11 = document7.outerHtml(); org.jsoup.nodes.Node node13 = document7.removeAttr(":matchesown(null=\"#document\""); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node15 = document7.after("[hi!=:eq(52)] hi! hi!"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str11, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(node13); }
public void test132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test132"); org.jsoup.select.NodeVisitor nodeVisitor0 = null; org.jsoup.select.NodeTraversor nodeTraversor1 = new org.jsoup.select.NodeTraversor(nodeVisitor0); org.jsoup.nodes.Node node2 = null; nodeTraversor1.traverse(node2); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray12 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12); org.jsoup.nodes.Element element15 = document10.classNames((java.util.Set<java.lang.String>) strSet13); java.lang.String str16 = document10.nodeName(); java.lang.String str17 = document10.html(); boolean boolean18 = cleaner7.isValid(document10); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element21 = document20.body(); java.lang.String str22 = document20.toString(); org.jsoup.nodes.Document document23 = cleaner7.clean(document20); // The following exception was thrown during execution in test generation try { nodeTraversor1.traverse((org.jsoup.nodes.Node) document20); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#document" + "'", str16, "#document"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str17, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str22, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document23); }
public void test133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test133"); org.jsoup.select.Evaluator.Class class1 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str2 = class1.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals4 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray9 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9); org.jsoup.nodes.Element element12 = document7.classNames((java.util.Set<java.lang.String>) strSet10); org.jsoup.nodes.Document document14 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray19 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19); org.jsoup.nodes.Element element22 = document17.classNames((java.util.Set<java.lang.String>) strSet20); org.jsoup.nodes.Element element23 = document14.appendChild((org.jsoup.nodes.Node) element22); boolean boolean24 = indexEquals4.matches(element12, (org.jsoup.nodes.Element) document14); org.jsoup.nodes.Document.QuirksMode quirksMode25 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document26 = document14.quirksMode(quirksMode25); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray31 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31); org.jsoup.nodes.Element element34 = document29.classNames((java.util.Set<java.lang.String>) strSet32); document29.title("#document"); boolean boolean37 = class1.matches((org.jsoup.nodes.Element) document26, (org.jsoup.nodes.Element) document29); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.basic(); boolean boolean40 = org.jsoup.Jsoup.isValid("hi!", whitelist39); java.lang.String[] strArray48 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist49 = whitelist39.addProtocols(".#document", "#doctype=\"\"", strArray48); org.jsoup.select.Evaluator.AttributeStarting attributeStarting52 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray60 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60); org.jsoup.nodes.Element element63 = document58.classNames((java.util.Set<java.lang.String>) strSet61); document58.title("#document"); boolean boolean66 = attributeStarting52.matches((org.jsoup.nodes.Element) document55, (org.jsoup.nodes.Element) document58); java.lang.String str67 = document55.id(); org.jsoup.select.Elements elements69 = document55.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements71 = document55.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute74 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean75 = whitelist39.isSafeAttribute("", (org.jsoup.nodes.Element) document55, attribute74); org.jsoup.nodes.Document document79 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str80 = document79.val(); java.util.List<org.jsoup.nodes.Node> nodeList82 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document79, "#document"); org.jsoup.nodes.Document.QuirksMode quirksMode83 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document84 = document79.quirksMode(quirksMode83); boolean boolean85 = class1.matches((org.jsoup.nodes.Element) document55, (org.jsoup.nodes.Element) document79); java.lang.String str86 = class1.toString(); java.lang.String str87 = class1.toString(); org.junit.Assert.assertEquals("'" + str2 + "' != '" + ".#document" + "'", str2, ".#document"); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + quirksMode25 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode25.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertNotNull(strArray60); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, ""); org.junit.Assert.assertNotNull(elements69); org.junit.Assert.assertNotNull(elements71); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, ""); org.junit.Assert.assertNotNull(nodeList82); org.junit.Assert.assertTrue("'" + quirksMode83 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode83.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertEquals("'" + str86 + "' != '" + ".#document" + "'", str86, ".#document"); org.junit.Assert.assertEquals("'" + str87 + "' != '" + ".#document" + "'", str87, ".#document"); }
public void test134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test134"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Node node11 = document9.removeAttr("#doctype"); org.jsoup.nodes.Document document12 = cleaner5.clean(document9); org.jsoup.nodes.Attributes attributes13 = document12.attributes(); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner17 = new org.jsoup.safety.Cleaner(whitelist14); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document21 = document20.clone(); org.jsoup.nodes.Node node23 = document21.removeAttr("#doctype"); org.jsoup.nodes.Document document24 = cleaner17.clean(document21); org.jsoup.nodes.Attributes attributes25 = document24.attributes(); boolean boolean26 = containsOwnText1.matches((org.jsoup.nodes.Element) document12, (org.jsoup.nodes.Element) document24); boolean boolean27 = document12.hasText(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(node11); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(attributes13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(node23); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(attributes25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); }
public void test135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test135"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); java.lang.String str4 = org.jsoup.Jsoup.clean(".#document", whitelist3); org.jsoup.safety.Whitelist whitelist8 = whitelist3.addEnforcedAttribute("\n<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->", ":matchesown(null=\"#document\"", "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str13 = org.jsoup.Jsoup.clean("", "#data", whitelist12); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basic(); boolean boolean16 = org.jsoup.Jsoup.isValid("hi!", whitelist15); java.lang.String[] strArray24 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist25 = whitelist15.addProtocols(".#document", "#doctype=\"\"", strArray24); org.jsoup.safety.Whitelist whitelist26 = whitelist12.addTags(strArray24); org.jsoup.safety.Whitelist whitelist27 = whitelist9.addTags(strArray24); org.jsoup.safety.Whitelist whitelist28 = whitelist8.addTags(strArray24); org.jsoup.safety.Cleaner cleaner29 = new org.jsoup.safety.Cleaner(whitelist8); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ".#document" + "'", str4, ".#document"); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist28); }
public void test136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test136"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); org.jsoup.nodes.Node node38 = document17.parent(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node40 = node38.after("[#document^=#doctype]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNull(node38); }
public void test137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test137"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings4.prettyPrint(false); java.nio.charset.Charset charset7 = outputSettings4.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings4.indentAmount((int) '4'); java.nio.charset.Charset charset10 = outputSettings4.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.prettyPrint(false); int int14 = outputSettings13.indentAmount(); java.nio.charset.Charset charset15 = outputSettings13.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings4.charset(charset15); java.nio.charset.Charset[] charsetArray17 = new java.nio.charset.Charset[] { charset15 }; java.util.LinkedList<java.nio.charset.Charset> charsetList18 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList18, charsetArray17); java.nio.charset.Charset charset20 = charsetList18.pop(); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basic(); boolean boolean23 = org.jsoup.Jsoup.isValid("hi!", whitelist22); java.lang.String[] strArray31 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist32 = whitelist22.addProtocols(".#document", "#doctype=\"\"", strArray31); org.jsoup.safety.Cleaner cleaner33 = new org.jsoup.safety.Cleaner(whitelist22); boolean boolean34 = charsetList18.contains((java.lang.Object) whitelist22); boolean boolean35 = org.jsoup.Jsoup.isValid(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist22); boolean boolean36 = attributes0.equals((java.lang.Object) whitelist22); boolean boolean38 = whitelist22.isSafeTag("[:matches(null!=[#document^=<html> <head></head> <body> hi! </body> </html>]]"); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertNotNull(charset7); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(outputSettings16); org.junit.Assert.assertNotNull(charsetArray17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(charset20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); }
public void test138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test138"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); boolean boolean43 = org.jsoup.Jsoup.isValid("", whitelist40); java.lang.String[] strArray49 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist50 = whitelist40.addTags(strArray49); org.jsoup.safety.Whitelist whitelist51 = whitelist1.addAttributes("[^hi!]", strArray49); org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist56 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str57 = org.jsoup.Jsoup.clean("", "#data", whitelist56); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.basic(); boolean boolean60 = org.jsoup.Jsoup.isValid("hi!", whitelist59); java.lang.String[] strArray68 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist69 = whitelist59.addProtocols(".#document", "#doctype=\"\"", strArray68); org.jsoup.safety.Whitelist whitelist70 = whitelist56.addTags(strArray68); org.jsoup.safety.Whitelist whitelist71 = whitelist53.addTags(strArray68); org.jsoup.safety.Whitelist whitelist72 = whitelist51.addAttributes("[^:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", strArray68); org.jsoup.safety.Cleaner cleaner73 = new org.jsoup.safety.Cleaner(whitelist72); org.jsoup.nodes.Attributes attributes75 = whitelist72.getEnforcedAttributes(":containsOwn(hi!"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, ""); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(attributes75); }
public void test139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test139"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); boolean boolean7 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist4); java.lang.String str8 = org.jsoup.Jsoup.clean("[hi! hi!*=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"]", whitelist4); java.lang.String str9 = org.jsoup.Jsoup.clean("hi!:matchesown(null=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", "##  hi!", whitelist4); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[hi! hi!*=[#document^=  hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;]" + "'", str8, "[hi! hi!*=[#document^=  hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;]"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!:matchesown(null=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;" + "'", str9, "hi!:matchesown(null=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;"); }
public void test140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test140"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist5.addTags(strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); boolean boolean21 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist20); org.jsoup.safety.Whitelist whitelist25 = whitelist20.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist27 = whitelist20.preserveRelativeLinks(true); boolean boolean28 = org.jsoup.Jsoup.isValid(".#document", whitelist20); org.jsoup.nodes.Attributes attributes30 = whitelist20.getEnforcedAttributes("<html>\n <head></head>\n <body>\n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(attributes30); }
public void test141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test141"); org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 10); java.lang.String str2 = indexLessThan1.toString(); java.lang.String str3 = indexLessThan1.toString(); java.lang.String str4 = indexLessThan1.toString(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basic(); boolean boolean7 = org.jsoup.Jsoup.isValid("hi!", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addProtocols(".#document", "#doctype=\"\"", strArray15); org.jsoup.select.Evaluator.AttributeStarting attributeStarting19 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray27 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27); org.jsoup.nodes.Element element30 = document25.classNames((java.util.Set<java.lang.String>) strSet28); document25.title("#document"); boolean boolean33 = attributeStarting19.matches((org.jsoup.nodes.Element) document22, (org.jsoup.nodes.Element) document25); java.lang.String str34 = document22.id(); org.jsoup.select.Elements elements36 = document22.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements38 = document22.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute41 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean42 = whitelist6.isSafeAttribute("", (org.jsoup.nodes.Element) document22, attribute41); org.jsoup.safety.Whitelist whitelist43 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist45 = whitelist43.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner46 = new org.jsoup.safety.Cleaner(whitelist43); org.jsoup.nodes.Document document49 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray51 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51); org.jsoup.nodes.Element element54 = document49.classNames((java.util.Set<java.lang.String>) strSet52); java.lang.String str55 = document49.nodeName(); java.lang.String str56 = document49.html(); boolean boolean57 = cleaner46.isValid(document49); org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element60 = document59.body(); java.lang.String str61 = document59.toString(); org.jsoup.nodes.Document document62 = cleaner46.clean(document59); org.jsoup.nodes.Document document64 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document67 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray69 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69); org.jsoup.nodes.Element element72 = document67.classNames((java.util.Set<java.lang.String>) strSet70); org.jsoup.nodes.Element element73 = document64.appendChild((org.jsoup.nodes.Node) element72); org.jsoup.nodes.Document document76 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray78 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78); org.jsoup.nodes.Element element81 = document76.classNames((java.util.Set<java.lang.String>) strSet79); org.jsoup.nodes.Element element82 = document64.classNames((java.util.Set<java.lang.String>) strSet79); java.lang.String str83 = document64.className(); boolean boolean84 = cleaner46.isValid(document64); boolean boolean85 = indexLessThan1.matches((org.jsoup.nodes.Element) document22, (org.jsoup.nodes.Element) document64); java.lang.String str86 = indexLessThan1.toString(); java.lang.String str87 = indexLessThan1.toString(); org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":lt(10)" + "'", str2, ":lt(10)"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":lt(10)" + "'", str3, ":lt(10)"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":lt(10)" + "'", str4, ":lt(10)"); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertNotNull(elements38); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "#document" + "'", str55, "#document"); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str56, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str61, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertNotNull(strArray69); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertNotNull(document76); org.junit.Assert.assertNotNull(strArray78); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true); org.junit.Assert.assertNotNull(element81); org.junit.Assert.assertNotNull(element82); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, ""); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true); org.junit.Assert.assertEquals("'" + str86 + "' != '" + ":lt(10)" + "'", str86, ":lt(10)"); org.junit.Assert.assertEquals("'" + str87 + "' != '" + ":lt(10)" + "'", str87, ":lt(10)"); }
public void test142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test142"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("[:matches(null]", pattern1); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.select.Elements elements13 = document11.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements15 = document11.getElementsByAttribute("#document"); org.jsoup.select.Elements elements18 = document11.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document19 = cleaner7.clean(document11); org.jsoup.select.Evaluator.IndexLessThan indexLessThan21 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 10); java.lang.String str22 = indexLessThan21.toString(); org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("#document", "#data"); org.jsoup.select.Elements elements27 = document25.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document31 = document30.clone(); org.jsoup.nodes.Element element33 = document30.addClass(""); java.lang.String str34 = document30.toString(); org.jsoup.nodes.Element element36 = document30.tagName("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); boolean boolean37 = indexLessThan21.matches((org.jsoup.nodes.Element) document25, element36); java.lang.String str38 = element36.text(); boolean boolean39 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document19, element36); org.jsoup.nodes.Element element41 = document19.text("[[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>]"); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(elements18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + ":lt(10)" + "'", str22, ":lt(10)"); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(elements27); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str34, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(element41); }
public void test143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test143"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str9 = document8.val(); java.util.List<org.jsoup.nodes.Node> nodeList11 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document8, "#document"); java.lang.String str12 = document8.baseUri(); org.jsoup.nodes.Element element14 = document8.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str15 = document8.nodeName(); boolean boolean16 = containsOwnText1.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document8); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document20 = document19.clone(); org.jsoup.nodes.Element element22 = document19.addClass(""); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str27 = document26.val(); java.util.List<org.jsoup.nodes.Node> nodeList29 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document26, "#document"); java.lang.String str30 = document26.baseUri(); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str34 = document33.val(); org.jsoup.nodes.Element element36 = document33.append("#document"); org.jsoup.nodes.Element element37 = document26.appendChild((org.jsoup.nodes.Node) element36); org.jsoup.nodes.Element element38 = document19.prependChild((org.jsoup.nodes.Node) document26); org.jsoup.nodes.Document document40 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element42 = document40.createElement("#document"); org.jsoup.nodes.Document document43 = document40.clone(); java.lang.String str44 = document43.toString(); org.jsoup.nodes.Element element45 = document26.prependChild((org.jsoup.nodes.Node) document43); org.jsoup.safety.Whitelist whitelist46 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist48 = whitelist46.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner49 = new org.jsoup.safety.Cleaner(whitelist46); org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document53 = document52.clone(); org.jsoup.nodes.Node node55 = document53.removeAttr("#doctype"); org.jsoup.nodes.Document document56 = cleaner49.clean(document53); org.jsoup.nodes.Attributes attributes57 = document56.attributes(); org.jsoup.nodes.Element element58 = document56.head(); org.jsoup.nodes.Node node60 = element58.after("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str61 = element58.className(); boolean boolean62 = containsOwnText1.matches(element45, element58); org.jsoup.nodes.Element element63 = null; org.jsoup.nodes.Element element64 = null; // The following exception was thrown during execution in test generation try { boolean boolean65 = containsOwnText1.matches(element63, element64); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(nodeList11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#document" + "'", str15, "#document"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(nodeList29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!"); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, ""); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(node55); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(attributes57); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(node60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, ""); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); }
public void test144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test144"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); attributes1.remove(":gt(1)"); org.jsoup.safety.Whitelist whitelist7 = new org.jsoup.safety.Whitelist(); boolean boolean8 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist7); java.lang.String str9 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist7); org.jsoup.nodes.Document document12 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray17 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17); org.jsoup.nodes.Element element20 = document15.classNames((java.util.Set<java.lang.String>) strSet18); org.jsoup.nodes.Element element21 = document12.appendChild((org.jsoup.nodes.Node) element20); java.lang.String str23 = document12.absUrl("hi!"); org.jsoup.nodes.Attribute attribute26 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean27 = whitelist7.isSafeAttribute("", (org.jsoup.nodes.Element) document12, attribute26); org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("", "hi!"); boolean boolean31 = attribute26.equals((java.lang.Object) document30); org.jsoup.nodes.Attribute attribute32 = attribute26.clone(); attributes1.put(attribute32); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!:matchesOwn(null" + "'", str9, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(attribute32); }
public void test145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test145"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); boolean boolean4 = org.jsoup.Jsoup.isValid("", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addTags(strArray10); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist19 = whitelist17.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basic(); boolean boolean23 = org.jsoup.Jsoup.isValid("hi!", whitelist22); java.lang.String[] strArray31 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist32 = whitelist22.addProtocols(".#document", "#doctype=\"\"", strArray31); org.jsoup.safety.Whitelist whitelist33 = whitelist19.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray31); org.jsoup.safety.Whitelist whitelist34 = whitelist15.addAttributes(":containsOwn(hi!:matchesown(null", strArray31); boolean boolean35 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray31); boolean boolean36 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>#document", strArray31); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist37 = whitelist11.addAttributes("", strArray31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); }
public void test146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test146"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist4.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray16); org.jsoup.safety.Whitelist whitelist20 = whitelist18.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(true); java.lang.String str23 = org.jsoup.Jsoup.clean(":containsOwn(hi!", "UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"UTF-8", whitelist22); java.lang.String str24 = org.jsoup.Jsoup.clean("[#document^=#doctype]", "<#root>\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n <#root>\n <html>\n  <head></head>\n  <body>\n  hi!\n  </body>\n </html>#document\n </#root>\n</#root>\n<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", whitelist22); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + ":containsOwn(hi!" + "'", str23, ":containsOwn(hi!"); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[#document^=#doctype]" + "'", str24, "[#document^=#doctype]"); }
public void test147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test147"); org.jsoup.nodes.DataNode dataNode2 = org.jsoup.nodes.DataNode.createFromEncoded("", ":eq(52)"); org.jsoup.nodes.DataNode dataNode4 = dataNode2.setWholeData(""); org.jsoup.nodes.DataNode dataNode6 = dataNode2.setWholeData("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); java.lang.String str8 = dataNode6.attr(":gt(1)"); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist12 = whitelist10.preserveRelativeLinks(false); boolean boolean13 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist10); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basic(); boolean boolean16 = org.jsoup.Jsoup.isValid("hi!", whitelist15); java.lang.String[] strArray24 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist25 = whitelist15.addProtocols(".#document", "#doctype=\"\"", strArray24); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray24, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray24); org.jsoup.safety.Whitelist whitelist29 = whitelist10.addTags(strArray24); boolean boolean30 = dataNode6.equals((java.lang.Object) whitelist29); org.jsoup.nodes.DataNode dataNode32 = dataNode6.setWholeData("<#root>\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n <#root>\n <html>\n  <head></head>\n  <body>\n  hi!\n  </body>\n </html>#document\n </#root>\n</#root>\n<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(dataNode2); org.junit.Assert.assertNotNull(dataNode4); org.junit.Assert.assertNotNull(dataNode6); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(dataNode32); }
public void test148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test148"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); java.nio.charset.Charset[] charsetArray4 = new java.nio.charset.Charset[] { charset3 }; java.util.LinkedList<java.nio.charset.Charset> charsetList5 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList5, charsetArray4); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); java.nio.charset.Charset charset10 = outputSettings7.charset(); boolean boolean11 = charsetList5.add(charset10); java.lang.Object obj12 = null; boolean boolean13 = charsetList5.removeLastOccurrence(obj12); java.nio.charset.Charset charset14 = charsetList5.pollFirst(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList15 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.prettyPrint(false); java.nio.charset.Charset charset19 = outputSettings18.charset(); charsetList15.addFirst(charset19); java.util.Iterator<java.nio.charset.Charset> charsetItor21 = charsetList15.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList22 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.prettyPrint(false); java.nio.charset.Charset charset26 = outputSettings25.charset(); charsetList22.addFirst(charset26); boolean boolean28 = charsetList15.offerFirst(charset26); int int29 = charsetList15.size(); java.nio.charset.Charset charset30 = charsetList15.peekLast(); charsetList5.addFirst(charset30); java.nio.charset.Charset charset32 = charsetList5.poll(); org.jsoup.safety.Whitelist whitelist34 = new org.jsoup.safety.Whitelist(); boolean boolean35 = org.jsoup.Jsoup.isValid("", whitelist34); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray41 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41); org.jsoup.nodes.Element element44 = document39.classNames((java.util.Set<java.lang.String>) strSet42); org.jsoup.nodes.Element element46 = element44.prepend("#document"); org.jsoup.nodes.Attribute attribute49 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute49.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str52 = attribute49.getKey(); boolean boolean53 = whitelist34.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element46, attribute49); boolean boolean54 = charsetList5.remove((java.lang.Object) boolean53); java.lang.Object obj55 = null; int int56 = charsetList5.indexOf(obj55); java.util.Iterator<java.nio.charset.Charset> charsetItor57 = charsetList5.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList59 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings60.prettyPrint(false); java.nio.charset.Charset charset63 = outputSettings62.charset(); charsetList59.addFirst(charset63); java.util.Iterator<java.nio.charset.Charset> charsetItor65 = charsetList59.iterator(); java.util.Iterator<java.nio.charset.Charset> charsetItor66 = charsetList59.descendingIterator(); org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings67.prettyPrint(false); java.nio.charset.Charset charset70 = outputSettings67.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings67.indentAmount((int) '4'); org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings73.prettyPrint(false); java.nio.charset.Charset charset76 = outputSettings73.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings73.indentAmount((int) '4'); java.nio.charset.Charset charset79 = outputSettings73.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings80 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings80.prettyPrint(false); int int83 = outputSettings82.indentAmount(); java.nio.charset.Charset charset84 = outputSettings82.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings73.charset(charset84); org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings67.charset(charset84); boolean boolean87 = charsetList59.add(charset84); java.util.Iterator<java.nio.charset.Charset> charsetItor88 = charsetList59.descendingIterator(); java.nio.charset.Charset charset89 = charsetList59.pollLast(); java.lang.Object obj90 = null; boolean boolean91 = charsetList59.contains(obj90); java.nio.charset.Charset charset92 = charsetList59.getLast(); java.nio.charset.Charset charset93 = charsetList5.set(0, charset92); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(charsetArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(charset14); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charset19); org.junit.Assert.assertNotNull(charsetItor21); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(charset26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2); org.junit.Assert.assertNotNull(charset30); org.junit.Assert.assertNotNull(charset32); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str52, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1)); org.junit.Assert.assertNotNull(charsetItor57); org.junit.Assert.assertNotNull(outputSettings62); org.junit.Assert.assertNotNull(charset63); org.junit.Assert.assertNotNull(charsetItor65); org.junit.Assert.assertNotNull(charsetItor66); org.junit.Assert.assertNotNull(outputSettings69); org.junit.Assert.assertNotNull(charset70); org.junit.Assert.assertNotNull(outputSettings72); org.junit.Assert.assertNotNull(outputSettings75); org.junit.Assert.assertNotNull(charset76); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertNotNull(charset79); org.junit.Assert.assertNotNull(outputSettings82); org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1); org.junit.Assert.assertNotNull(charset84); org.junit.Assert.assertNotNull(outputSettings85); org.junit.Assert.assertNotNull(outputSettings86); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true); org.junit.Assert.assertNotNull(charsetItor88); org.junit.Assert.assertNotNull(charset89); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false); org.junit.Assert.assertNotNull(charset92); org.junit.Assert.assertNotNull(charset93); }
public void test149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test149"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist5.addTags(strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); boolean boolean21 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist20); org.jsoup.safety.Whitelist whitelist25 = whitelist20.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner31 = new org.jsoup.safety.Cleaner(whitelist28); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist35 = whitelist33.preserveRelativeLinks(false); boolean boolean36 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist33); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.basic(); boolean boolean39 = org.jsoup.Jsoup.isValid("hi!", whitelist38); java.lang.String[] strArray47 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist48 = whitelist38.addProtocols(".#document", "#doctype=\"\"", strArray47); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray47, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray47); org.jsoup.safety.Whitelist whitelist52 = whitelist33.addTags(strArray47); org.jsoup.safety.Whitelist whitelist53 = whitelist28.addTags(strArray47); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray47); org.jsoup.safety.Whitelist whitelist55 = whitelist20.addProtocols("hi! hi! #comment", "[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]", strArray47); boolean boolean56 = org.jsoup.Jsoup.isValid(":eq(97)", whitelist20); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true); }
public void test150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test150"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.formatAsBlock(); boolean boolean4 = tag1.isEmpty(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist6); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document13 = document12.clone(); org.jsoup.nodes.Node node15 = document13.removeAttr("#doctype"); org.jsoup.nodes.Document document16 = cleaner9.clean(document13); org.jsoup.nodes.Attributes attributes17 = document16.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator18 = attributes17.spliterator(); org.jsoup.nodes.Element element19 = new org.jsoup.nodes.Element(tag1, "hi!:matchesOwn(null", attributes17); org.jsoup.nodes.Element element21 = element19.append("#text"); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(node15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(attributes17); org.junit.Assert.assertNotNull(attributeSpliterator18); org.junit.Assert.assertNotNull(element21); }
public void test151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test151"); org.jsoup.safety.Whitelist.TagName tagName1 = new org.jsoup.safety.Whitelist.TagName(""); java.lang.String[] strArray5 = new java.lang.String[] { "#document", "hi!", "" }; java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>(); boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5); java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13); boolean boolean16 = strList6.containsAll((java.util.Collection<java.lang.String>) strList14); boolean boolean17 = tagName1.equals((java.lang.Object) strList6); org.jsoup.nodes.Attributes attributes18 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes19 = attributes18.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator20 = attributes18.spliterator(); java.lang.String str22 = attributes18.get("\n#document"); org.jsoup.nodes.Attributes attributes23 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes24 = attributes23.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator25 = attributes23.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap26 = attributes23.dataset(); attributes18.addAll(attributes23); java.lang.String str28 = attributes18.toString(); org.jsoup.safety.Whitelist whitelist29 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist31 = whitelist29.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner32 = new org.jsoup.safety.Cleaner(whitelist29); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document36 = document35.clone(); org.jsoup.nodes.Node node38 = document36.removeAttr("#doctype"); org.jsoup.nodes.Document document39 = cleaner32.clean(document36); boolean boolean40 = attributes18.equals((java.lang.Object) document36); boolean boolean42 = attributes18.hasKey(".#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean43 = tagName1.equals((java.lang.Object) ".#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(strArray5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(attributes19); org.junit.Assert.assertNotNull(attributeSpliterator20); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(attributes24); org.junit.Assert.assertNotNull(attributeSpliterator25); org.junit.Assert.assertNotNull(strMap26); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, ""); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(node38); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); }
public void test152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test152"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str4 = org.jsoup.Jsoup.clean("", "#data", whitelist3); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basic(); boolean boolean7 = org.jsoup.Jsoup.isValid("hi!", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addProtocols(".#document", "#doctype=\"\"", strArray15); org.jsoup.safety.Whitelist whitelist17 = whitelist3.addTags(strArray15); org.jsoup.safety.Whitelist whitelist18 = whitelist0.addTags(strArray15); org.jsoup.safety.Whitelist whitelist22 = whitelist0.addEnforcedAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "[#document^=#doctype]", ".hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist27 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist29 = whitelist27.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.basic(); boolean boolean33 = org.jsoup.Jsoup.isValid("hi!", whitelist32); java.lang.String[] strArray41 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist42 = whitelist32.addProtocols(".#document", "#doctype=\"\"", strArray41); org.jsoup.safety.Whitelist whitelist43 = whitelist29.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray41); org.jsoup.safety.Whitelist whitelist44 = whitelist25.addAttributes(":containsOwn(hi!:matchesown(null", strArray41); boolean boolean45 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray41); org.jsoup.safety.Whitelist whitelist46 = whitelist0.addAttributes(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", strArray41); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertNotNull(whitelist46); }
public void test153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test153"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str4 = org.jsoup.Jsoup.clean("", "#data", whitelist3); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basic(); boolean boolean7 = org.jsoup.Jsoup.isValid("hi!", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addProtocols(".#document", "#doctype=\"\"", strArray15); org.jsoup.safety.Whitelist whitelist17 = whitelist3.addTags(strArray15); org.jsoup.safety.Whitelist whitelist18 = whitelist0.addTags(strArray15); org.jsoup.safety.Whitelist whitelist22 = whitelist0.addEnforcedAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "[#document^=#doctype]", ".hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray28 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28); org.jsoup.nodes.Element element31 = document26.classNames((java.util.Set<java.lang.String>) strSet29); org.jsoup.nodes.Element element33 = element31.prepend("#document"); org.jsoup.nodes.Element element35 = element31.toggleClass("#doctype=\"\""); org.jsoup.select.Elements elements38 = element35.getElementsByAttributeValueContaining("<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>", "\n#document"); org.jsoup.nodes.Attribute attribute39 = null; // The following exception was thrown during execution in test generation try { boolean boolean40 = whitelist22.isSafeAttribute("hi! =&quot;&quot;", element35, attribute39); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(elements38); }
public void test154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test154"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addProtocols(".#document", "#doctype=\"\"", strArray11); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray11, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean15 = org.jsoup.helper.StringUtil.in(":matchesown(null=&quot;#document&quot;", strArray11); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test155"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.safety.Whitelist whitelist14 = whitelist1.preserveRelativeLinks(false); org.jsoup.nodes.Attributes attributes16 = whitelist14.getEnforcedAttributes(""); int int17 = attributes16.size(); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(attributes16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); }
public void test156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test156"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addTags(strArray11); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.basic(); boolean boolean17 = org.jsoup.Jsoup.isValid("hi!", whitelist16); java.lang.String[] strArray25 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist26 = whitelist16.addProtocols(".#document", "#doctype=\"\"", strArray25); org.jsoup.nodes.Attributes attributes28 = whitelist16.getEnforcedAttributes(".#document"); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean33 = org.jsoup.Jsoup.isValid("#document", whitelist32); java.lang.String str34 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist32); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.basic(); boolean boolean38 = org.jsoup.Jsoup.isValid("hi!", whitelist37); java.lang.String[] strArray46 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist47 = whitelist37.addProtocols(".#document", "#doctype=\"\"", strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist32.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray46); boolean boolean49 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray46); org.jsoup.safety.Whitelist whitelist50 = whitelist16.addTags(strArray46); org.jsoup.safety.Whitelist whitelist51 = whitelist12.addProtocols("hi!:matchesown(null=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", "[*]", strArray46); boolean boolean52 = org.jsoup.helper.StringUtil.in("#\n#document", strArray46); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray46); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray46, "hi!"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(attributes28); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str34, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); }
public void test157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test157"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings2.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings4.prettyPrint(false); int int7 = outputSettings6.indentAmount(); java.nio.charset.Charset charset8 = outputSettings6.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.prettyPrint(false); java.nio.charset.Charset charset12 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.prettyPrint(false); java.nio.charset.Charset charset16 = outputSettings15.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.prettyPrint(false); java.nio.charset.Charset charset20 = outputSettings17.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.indentAmount((int) '4'); java.nio.charset.Charset charset23 = outputSettings17.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.prettyPrint(false); int int27 = outputSettings26.indentAmount(); java.nio.charset.Charset charset28 = outputSettings26.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings17.charset(charset28); java.nio.charset.Charset[] charsetArray30 = new java.nio.charset.Charset[] { charset3, charset8, charset12, charset16, charset28 }; java.util.LinkedList<java.nio.charset.Charset> charsetList31 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList31, charsetArray30); java.util.Iterator<java.nio.charset.Charset> charsetItor33 = charsetList31.iterator(); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray38 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38); org.jsoup.nodes.Element element41 = document36.classNames((java.util.Set<java.lang.String>) strSet39); document36.title("#document"); java.lang.String str44 = document36.ownText(); org.jsoup.nodes.Element element46 = document36.prependElement("#<html> <head></head> <body> hi! </body> </html>"); org.jsoup.nodes.Element element48 = document36.text("[[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]!=.#document]"); int int49 = charsetList31.indexOf((java.lang.Object) "[[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]!=.#document]"); org.jsoup.safety.Whitelist whitelist50 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes52 = whitelist50.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList53 = attributes52.asList(); java.lang.String str55 = attributes52.get("<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>"); int int56 = charsetList31.lastIndexOf((java.lang.Object) "<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>"); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertNotNull(charset8); org.junit.Assert.assertNotNull(outputSettings11); org.junit.Assert.assertNotNull(charset12); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(charset20); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1); org.junit.Assert.assertNotNull(charset28); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(charsetArray30); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(charsetItor33); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, ""); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1)); org.junit.Assert.assertNotNull(attributes52); org.junit.Assert.assertNotNull(attributeList53); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, ""); org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1)); }
public void test158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test158"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist15 = whitelist13.preserveRelativeLinks(true); java.lang.String str16 = org.jsoup.Jsoup.clean("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root></#root>", ":contains([#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", whitelist15); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!  &lt;#root&gt;" + "'", str16, "hi!  &lt;#root&gt;"); }
public void test159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test159"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap3 = attributes0.dataset(); java.lang.String str4 = attributes0.html(); org.jsoup.safety.Whitelist whitelist5 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes7 = whitelist5.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList8 = attributes7.asList(); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist9); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); org.jsoup.nodes.Node node18 = document16.removeAttr("#doctype"); org.jsoup.nodes.Document document19 = cleaner12.clean(document16); org.jsoup.nodes.Attributes attributes20 = document19.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator21 = attributes20.spliterator(); attributes7.addAll(attributes20); attributes0.addAll(attributes20); java.lang.String str24 = attributes0.toString(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator25 = attributes0.spliterator(); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertNotNull(strMap3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertNotNull(attributeList8); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(node18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(attributeSpliterator21); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(attributeSpliterator25); }
public void test160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test160"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); boolean boolean4 = org.jsoup.Jsoup.isValid("", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addTags(strArray10); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basic(); boolean boolean16 = org.jsoup.Jsoup.isValid("hi!", whitelist15); java.lang.String[] strArray24 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist25 = whitelist15.addProtocols(".#document", "#doctype=\"\"", strArray24); org.jsoup.nodes.Attributes attributes27 = whitelist15.getEnforcedAttributes(".#document"); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean32 = org.jsoup.Jsoup.isValid("#document", whitelist31); java.lang.String str33 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist31); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.basic(); boolean boolean37 = org.jsoup.Jsoup.isValid("hi!", whitelist36); java.lang.String[] strArray45 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist46 = whitelist36.addProtocols(".#document", "#doctype=\"\"", strArray45); org.jsoup.safety.Whitelist whitelist47 = whitelist31.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray45); boolean boolean48 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray45); org.jsoup.safety.Whitelist whitelist49 = whitelist15.addTags(strArray45); org.jsoup.safety.Whitelist whitelist50 = whitelist11.addProtocols("hi!:matchesown(null=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", "[*]", strArray45); java.lang.Class<?> wildcardClass51 = whitelist50.getClass(); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str33, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(wildcardClass51); }
public void test161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test161"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist14 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray12); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist20 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes22 = whitelist20.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); boolean boolean28 = org.jsoup.Jsoup.isValid("", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addTags(strArray34); org.jsoup.safety.Whitelist whitelist36 = whitelist20.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray34); boolean boolean37 = org.jsoup.helper.StringUtil.in("", strArray34); org.jsoup.safety.Whitelist whitelist38 = whitelist16.addProtocols("                          ", ".#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray34); org.jsoup.safety.Whitelist whitelist42 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist44 = whitelist42.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.basic(); boolean boolean48 = org.jsoup.Jsoup.isValid("hi!", whitelist47); java.lang.String[] strArray56 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist57 = whitelist47.addProtocols(".#document", "#doctype=\"\"", strArray56); org.jsoup.safety.Whitelist whitelist58 = whitelist44.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray56); boolean boolean59 = org.jsoup.helper.StringUtil.in("hi!<html> <head></head> <body> hi! </body> </html>", strArray56); org.jsoup.safety.Whitelist whitelist60 = whitelist16.addProtocols("<html>\n <head></head> \n <body>\n hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>", "<html> <head></head> <body> hi! </body> </html>", strArray56); org.jsoup.safety.Whitelist whitelist62 = whitelist60.preserveRelativeLinks(true); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(strArray56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(whitelist62); }
public void test162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test162"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.MatchesOwn matchesOwn1 = new org.jsoup.select.Evaluator.MatchesOwn(pattern0); java.lang.String str2 = matchesOwn1.toString(); java.lang.String str3 = matchesOwn1.toString(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Element element15 = element11.toggleClass("#doctype=\"\""); boolean boolean17 = element11.hasClass(":eq(52)"); java.lang.String str19 = element11.attr(":eq(52)"); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str23 = org.jsoup.Jsoup.clean("", "#data", whitelist22); org.jsoup.safety.Cleaner cleaner24 = new org.jsoup.safety.Cleaner(whitelist22); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document28 = document27.clone(); org.jsoup.select.Elements elements30 = document28.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements32 = document28.getElementsByAttribute("#document"); org.jsoup.select.Elements elements35 = document28.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document36 = cleaner24.clean(document28); // The following exception was thrown during execution in test generation try { boolean boolean37 = matchesOwn1.matches(element11, (org.jsoup.nodes.Element) document28); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":matchesOwn(null" + "'", str2, ":matchesOwn(null"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":matchesOwn(null" + "'", str3, ":matchesOwn(null"); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(elements30); org.junit.Assert.assertNotNull(elements32); org.junit.Assert.assertNotNull(elements35); org.junit.Assert.assertNotNull(document36); }
public void test163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test163"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element23 = element22.empty(); java.lang.String str24 = element23.val(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); }
public void test164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test164"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str14 = document13.val(); java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document13, "#document"); java.lang.String str17 = document13.baseUri(); org.jsoup.nodes.Element element19 = document13.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str20 = document13.nodeName(); boolean boolean21 = containsOwnText6.matches((org.jsoup.nodes.Element) document9, (org.jsoup.nodes.Element) document13); org.jsoup.select.Elements elements23 = document13.getElementsContainingOwnText("hi!<html> <head></head> <body> hi! </body> </html>"); java.lang.String str25 = document13.attr("[^hi!]"); org.jsoup.nodes.Document document26 = cleaner4.clean(document13); org.jsoup.select.Evaluator.IndexEquals indexEquals28 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray33 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33); org.jsoup.nodes.Element element36 = document31.classNames((java.util.Set<java.lang.String>) strSet34); org.jsoup.nodes.Document document38 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray43 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43); org.jsoup.nodes.Element element46 = document41.classNames((java.util.Set<java.lang.String>) strSet44); org.jsoup.nodes.Element element47 = document38.appendChild((org.jsoup.nodes.Node) element46); boolean boolean48 = indexEquals28.matches(element36, (org.jsoup.nodes.Element) document38); org.jsoup.nodes.Document.QuirksMode quirksMode49 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document50 = document38.quirksMode(quirksMode49); org.jsoup.nodes.Element element52 = document50.createElement("#root"); org.jsoup.nodes.Document document53 = cleaner4.clean(document50); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document57 = document56.clone(); org.jsoup.nodes.Element element59 = document56.addClass(""); org.jsoup.nodes.Document document63 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str64 = document63.val(); java.util.List<org.jsoup.nodes.Node> nodeList66 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document63, "#document"); java.lang.String str67 = document63.baseUri(); org.jsoup.nodes.Document document70 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str71 = document70.val(); org.jsoup.nodes.Element element73 = document70.append("#document"); org.jsoup.nodes.Element element74 = document63.appendChild((org.jsoup.nodes.Node) element73); org.jsoup.nodes.Element element75 = document56.prependChild((org.jsoup.nodes.Node) document63); org.jsoup.nodes.Document document77 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element79 = document77.createElement("#document"); org.jsoup.nodes.Document document80 = document77.clone(); java.lang.String str81 = document80.toString(); org.jsoup.nodes.Element element82 = document63.prependChild((org.jsoup.nodes.Node) document80); org.jsoup.nodes.Document document83 = cleaner4.clean(document63); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertNotNull(nodeList16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!"); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(elements23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + quirksMode49 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode49.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, ""); org.junit.Assert.assertNotNull(nodeList66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!"); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, ""); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(element75); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(document80); org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, ""); org.junit.Assert.assertNotNull(element82); org.junit.Assert.assertNotNull(document83); }
public void test165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test165"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element23 = element22.empty(); org.jsoup.nodes.Element element25 = element23.appendElement(":matchesOwn(null"); org.jsoup.nodes.Attributes attributes26 = element25.attributes(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(attributes26); }
public void test166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test166"); org.jsoup.nodes.Document document1 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element3 = document1.createElement("#document"); org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings4.prettyPrint(false); java.nio.charset.Charset charset7 = outputSettings4.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings4.indentAmount((int) '4'); java.nio.charset.Charset charset10 = outputSettings4.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.prettyPrint(false); int int14 = outputSettings13.indentAmount(); java.nio.charset.Charset charset15 = outputSettings13.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings4.charset(charset15); java.nio.charset.Charset[] charsetArray17 = new java.nio.charset.Charset[] { charset15 }; java.util.LinkedList<java.nio.charset.Charset> charsetList18 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList18, charsetArray17); java.nio.charset.Charset charset20 = charsetList18.pop(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(false); java.nio.charset.Charset charset24 = outputSettings21.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings21.indentAmount((int) '4'); java.nio.charset.Charset charset27 = outputSettings21.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.prettyPrint(false); int int31 = outputSettings30.indentAmount(); java.nio.charset.Charset charset32 = outputSettings30.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings21.charset(charset32); java.nio.charset.Charset[] charsetArray34 = new java.nio.charset.Charset[] { charset32 }; java.util.LinkedList<java.nio.charset.Charset> charsetList35 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList35, charsetArray34); java.nio.charset.Charset charset37 = charsetList35.pop(); org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.prettyPrint(false); java.nio.charset.Charset charset41 = outputSettings38.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings38.indentAmount((int) '4'); java.nio.charset.Charset charset44 = outputSettings38.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.prettyPrint(false); int int48 = outputSettings47.indentAmount(); java.nio.charset.Charset charset49 = outputSettings47.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings38.charset(charset49); boolean boolean51 = charsetList35.remove((java.lang.Object) outputSettings50); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList52 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.prettyPrint(false); java.nio.charset.Charset charset56 = outputSettings55.charset(); charsetList52.addFirst(charset56); java.util.Iterator<java.nio.charset.Charset> charsetItor58 = charsetList52.iterator(); org.jsoup.nodes.Document document60 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element62 = document60.createElement("#document"); org.jsoup.nodes.Document document63 = document60.clone(); java.lang.String str64 = document60.val(); org.jsoup.nodes.Node node67 = document60.attr("#doctype", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean68 = charsetList52.removeLastOccurrence((java.lang.Object) "#doctype"); java.nio.charset.Charset charset69 = charsetList52.pollFirst(); org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings50.charset(charset69); charsetList18.addLast(charset69); java.nio.charset.Charset charset72 = charsetList18.element(); org.jsoup.safety.Whitelist whitelist73 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes75 = whitelist73.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist78 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist80 = whitelist78.preserveRelativeLinks(false); boolean boolean81 = org.jsoup.Jsoup.isValid("", whitelist78); java.lang.String[] strArray87 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist88 = whitelist78.addTags(strArray87); org.jsoup.safety.Whitelist whitelist89 = whitelist73.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray87); boolean boolean90 = charsetList18.removeFirstOccurrence((java.lang.Object) "hi!<html> <head></head> <body> hi! </body> </html>"); boolean boolean91 = element3.equals((java.lang.Object) charsetList18); java.lang.String str93 = org.jsoup.helper.StringUtil.join((java.util.Collection) charsetList18, "<:matchesown(null></:matchesown(null>"); org.junit.Assert.assertNotNull(element3); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertNotNull(charset7); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(outputSettings16); org.junit.Assert.assertNotNull(charsetArray17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(charset20); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(charset24); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(charset27); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1); org.junit.Assert.assertNotNull(charset32); org.junit.Assert.assertNotNull(outputSettings33); org.junit.Assert.assertNotNull(charsetArray34); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(charset37); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(charset41); org.junit.Assert.assertNotNull(outputSettings43); org.junit.Assert.assertNotNull(charset44); org.junit.Assert.assertNotNull(outputSettings47); org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1); org.junit.Assert.assertNotNull(charset49); org.junit.Assert.assertNotNull(outputSettings50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertNotNull(charset56); org.junit.Assert.assertNotNull(charsetItor58); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, ""); org.junit.Assert.assertNotNull(node67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertNotNull(charset69); org.junit.Assert.assertNotNull(outputSettings70); org.junit.Assert.assertNotNull(charset72); org.junit.Assert.assertNotNull(attributes75); org.junit.Assert.assertNotNull(whitelist78); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true); org.junit.Assert.assertNotNull(strArray87); org.junit.Assert.assertNotNull(whitelist88); org.junit.Assert.assertNotNull(whitelist89); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false); org.junit.Assert.assertEquals("'" + str93 + "' != '" + "UTF-8" + "'", str93, "UTF-8"); }
public void test167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test167"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.select.Elements elements10 = document8.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements12 = document8.getElementsByAttribute("#document"); org.jsoup.select.Elements elements15 = document8.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); org.jsoup.nodes.Element element18 = document8.prependElement("hi! class=\"\"<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.regex.Pattern pattern19 = null; // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements20 = element18.getElementsMatchingText(pattern19); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element18); }
public void test168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test168"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); org.jsoup.select.Elements elements40 = document17.getElementsByAttributeValueMatching("<html> <head></head> <body> hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; </body> </html>", "<html>\n <head></head>\n <body>\n [^:containsOwn(hi!]\n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(elements40); }
public void test169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test169"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); attribute16.setKey("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test170"); org.jsoup.select.Evaluator.ContainsText containsText1 = new org.jsoup.select.Evaluator.ContainsText("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray6 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6); org.jsoup.nodes.Element element9 = document4.classNames((java.util.Set<java.lang.String>) strSet7); java.lang.String str10 = document4.nodeName(); java.lang.String str11 = document4.html(); org.jsoup.nodes.Element element13 = document4.removeClass("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str21 = document20.val(); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document20, "#document"); org.jsoup.nodes.Document.QuirksMode quirksMode24 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document25 = document20.quirksMode(quirksMode24); org.jsoup.nodes.Document document26 = document16.quirksMode(quirksMode24); org.jsoup.nodes.Document document27 = document4.quirksMode(quirksMode24); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText30 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist33 = whitelist31.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner34 = new org.jsoup.safety.Cleaner(whitelist31); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray39 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39); org.jsoup.nodes.Element element42 = document37.classNames((java.util.Set<java.lang.String>) strSet40); java.lang.String str43 = document37.nodeName(); java.lang.String str44 = document37.html(); boolean boolean45 = cleaner34.isValid(document37); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element48 = document47.body(); java.lang.String str49 = document47.toString(); org.jsoup.nodes.Document document50 = cleaner34.clean(document47); org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document54 = document53.clone(); org.jsoup.nodes.Element element56 = document53.addClass(""); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str61 = document60.val(); java.util.List<org.jsoup.nodes.Node> nodeList63 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document60, "#document"); java.lang.String str64 = document60.baseUri(); org.jsoup.nodes.Document document67 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str68 = document67.val(); org.jsoup.nodes.Element element70 = document67.append("#document"); org.jsoup.nodes.Element element71 = document60.appendChild((org.jsoup.nodes.Node) element70); org.jsoup.nodes.Element element72 = document53.prependChild((org.jsoup.nodes.Node) document60); org.jsoup.nodes.Attributes attributes73 = element72.attributes(); java.lang.String str74 = element72.baseUri(); java.lang.String str75 = element72.text(); org.jsoup.nodes.Element element77 = element72.toggleClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean78 = containsOwnText30.matches((org.jsoup.nodes.Element) document50, element72); org.jsoup.nodes.Element element79 = document50.clone(); java.util.List<org.jsoup.nodes.Node> nodeList81 = org.jsoup.parser.Parser.parseFragment(":matches(null", (org.jsoup.nodes.Element) document50, ""); boolean boolean82 = containsText1.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document50); java.lang.String str83 = containsText1.toString(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#document" + "'", str10, "#document"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, ""); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertTrue("'" + quirksMode24 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode24.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "#document" + "'", str43, "#document"); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str44, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str49, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, ""); org.junit.Assert.assertNotNull(nodeList63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!"); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, ""); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertNotNull(attributes73); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "#document" + "'", str74, "#document"); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi! hi!#document hi!" + "'", str75, "hi! hi!#document hi!"); org.junit.Assert.assertNotNull(element77); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(nodeList81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertEquals("'" + str83 + "' != '" + ":contains(<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str83, ":contains(<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); }
public void test171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test171"); org.jsoup.safety.Whitelist whitelist4 = new org.jsoup.safety.Whitelist(); boolean boolean5 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist4); java.lang.String str6 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist4); org.jsoup.nodes.Document document9 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray14 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14); org.jsoup.nodes.Element element17 = document12.classNames((java.util.Set<java.lang.String>) strSet15); org.jsoup.nodes.Element element18 = document9.appendChild((org.jsoup.nodes.Node) element17); java.lang.String str20 = document9.absUrl("hi!"); org.jsoup.nodes.Attribute attribute23 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean24 = whitelist4.isSafeAttribute("", (org.jsoup.nodes.Element) document9, attribute23); java.lang.String str25 = org.jsoup.Jsoup.clean("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]", whitelist4); org.jsoup.safety.Whitelist whitelist27 = whitelist4.preserveRelativeLinks(true); org.jsoup.safety.Cleaner cleaner28 = new org.jsoup.safety.Cleaner(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!:matchesOwn(null" + "'", str6, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]" + "'", str25, "[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.junit.Assert.assertNotNull(whitelist27); }
public void test172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test172"); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList0 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings3.charset(); charsetList0.addFirst(charset4); java.util.Iterator<java.nio.charset.Charset> charsetItor6 = charsetList0.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList7 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); java.nio.charset.Charset charset11 = outputSettings10.charset(); charsetList7.addFirst(charset11); boolean boolean13 = charsetList0.offerFirst(charset11); int int14 = charsetList0.size(); java.nio.charset.Charset charset15 = charsetList0.peekLast(); java.nio.charset.Charset charset16 = charsetList0.pop(); java.nio.charset.Charset charset17 = charsetList0.peekLast(); java.util.Spliterator<java.nio.charset.Charset> charsetSpliterator18 = charsetList0.spliterator(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str22 = org.jsoup.Jsoup.clean("", "#data", whitelist21); org.jsoup.safety.Cleaner cleaner23 = new org.jsoup.safety.Cleaner(whitelist21); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document27 = document26.clone(); org.jsoup.select.Elements elements29 = document27.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements31 = document27.getElementsByAttribute("#document"); org.jsoup.select.Elements elements34 = document27.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document35 = cleaner23.clean(document27); boolean boolean36 = charsetList0.remove((java.lang.Object) document35); boolean boolean37 = document35.isBlock(); org.jsoup.select.Evaluator.Attribute attribute39 = new org.jsoup.select.Evaluator.Attribute(""); org.jsoup.nodes.Document document41 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray46 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46); org.jsoup.nodes.Element element49 = document44.classNames((java.util.Set<java.lang.String>) strSet47); org.jsoup.nodes.Element element50 = document41.appendChild((org.jsoup.nodes.Node) element49); org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray55 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55); org.jsoup.nodes.Element element58 = document53.classNames((java.util.Set<java.lang.String>) strSet56); org.jsoup.nodes.Element element59 = document41.classNames((java.util.Set<java.lang.String>) strSet56); org.jsoup.nodes.Document document62 = org.jsoup.parser.Parser.parseBodyFragment("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ".#document"); boolean boolean63 = attribute39.matches((org.jsoup.nodes.Element) document41, (org.jsoup.nodes.Element) document62); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("hi!<html> <head></head> <body> hi! </body> </html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements69 = document66.getElementsByAttributeValueStarting("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document72 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str73 = document72.className(); boolean boolean74 = attribute39.matches((org.jsoup.nodes.Element) document66, (org.jsoup.nodes.Element) document72); org.jsoup.nodes.Document document77 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str78 = document77.val(); org.jsoup.nodes.Element element80 = document77.prepend("[hi! hi!*=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"]"); org.jsoup.nodes.Document document84 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str85 = document84.val(); java.util.List<org.jsoup.nodes.Node> nodeList87 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document84, "#document"); java.lang.String str88 = document84.baseUri(); int int89 = document84.siblingIndex(); java.util.regex.Pattern pattern91 = null; org.jsoup.select.Elements elements92 = document84.getElementsByAttributeValueMatching("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", pattern91); org.jsoup.select.Elements elements94 = document84.getElementsByAttribute("[^hi!]"); java.lang.String str95 = document84.toString(); boolean boolean96 = attribute39.matches(element80, (org.jsoup.nodes.Element) document84); org.jsoup.nodes.Element element98 = element80.append(""); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node99 = document35.after((org.jsoup.nodes.Node) element98); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(charsetItor6); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(charsetSpliterator18); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(strArray55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(elements69); org.junit.Assert.assertNotNull(document72); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, ""); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertNotNull(document77); org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, ""); org.junit.Assert.assertNotNull(element80); org.junit.Assert.assertNotNull(document84); org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, ""); org.junit.Assert.assertNotNull(nodeList87); org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!"); org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0); org.junit.Assert.assertNotNull(elements92); org.junit.Assert.assertNotNull(elements94); org.junit.Assert.assertEquals("'" + str95 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str95, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false); org.junit.Assert.assertNotNull(element98); }
public void test173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test173"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist14 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray12); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.basic(); boolean boolean26 = org.jsoup.Jsoup.isValid("hi!", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addProtocols(".#document", "#doctype=\"\"", strArray34); org.jsoup.safety.Whitelist whitelist36 = whitelist22.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray34); org.jsoup.safety.Whitelist whitelist37 = whitelist18.addAttributes(":containsOwn(hi!:matchesown(null", strArray34); org.jsoup.safety.Whitelist whitelist38 = whitelist14.addAttributes(" text=\"\"", strArray34); org.jsoup.nodes.Attributes attributes40 = whitelist38.getEnforcedAttributes(":containsown(hi!:matchesown(null=\"\""); java.lang.String str41 = attributes40.toString(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(attributes40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); }
public void test174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test174"); org.jsoup.safety.Whitelist whitelist3 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes5 = whitelist3.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist10 = whitelist8.preserveRelativeLinks(false); boolean boolean11 = org.jsoup.Jsoup.isValid("", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addTags(strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray17); java.lang.String str20 = org.jsoup.Jsoup.clean("", whitelist3); org.jsoup.safety.Whitelist whitelist24 = whitelist3.addEnforcedAttribute("#document", "#comment", " "); java.lang.String str25 = org.jsoup.Jsoup.clean("[hi! hi!*=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"]", "#root", whitelist24); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[hi! hi!*=[#document^=  hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;]" + "'", str25, "[hi! hi!*=[#document^=  hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;]"); }
public void test175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test175"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addProtocols(".#document", "#doctype=\"\"", strArray11); boolean boolean13 = org.jsoup.Jsoup.isValid("hi!<html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root>hi!<html> <head></head> <body> hi! </body> </html><html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root><html> <head></head> <body> hi! </body> </html><html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root>hi!<html> <head></head> <body> hi! </body> </html><html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root><html> <head></head> <body> hi! </body> </html>", whitelist2); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist20 = whitelist18.preserveRelativeLinks(false); boolean boolean21 = org.jsoup.Jsoup.isValid("", whitelist18); org.jsoup.nodes.Attributes attributes23 = whitelist18.getEnforcedAttributes(":eq(52)"); boolean boolean24 = org.jsoup.Jsoup.isValid("", whitelist18); org.jsoup.safety.Whitelist whitelist27 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.basic(); boolean boolean31 = org.jsoup.Jsoup.isValid("hi!", whitelist30); java.lang.String[] strArray39 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist40 = whitelist30.addProtocols(".#document", "#doctype=\"\"", strArray39); org.jsoup.safety.Whitelist whitelist41 = whitelist27.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray39); org.jsoup.safety.Whitelist whitelist43 = whitelist41.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist49 = whitelist47.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist52 = org.jsoup.safety.Whitelist.basic(); boolean boolean53 = org.jsoup.Jsoup.isValid("hi!", whitelist52); java.lang.String[] strArray61 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist62 = whitelist52.addProtocols(".#document", "#doctype=\"\"", strArray61); org.jsoup.safety.Whitelist whitelist63 = whitelist49.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray61); org.jsoup.safety.Whitelist whitelist64 = whitelist45.addAttributes(":containsOwn(hi!:matchesown(null", strArray61); org.jsoup.safety.Whitelist whitelist65 = whitelist41.addAttributes(" text=\"\"", strArray61); org.jsoup.safety.Whitelist whitelist66 = whitelist18.addProtocols("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray61); org.jsoup.safety.Whitelist whitelist67 = whitelist2.addProtocols("*", "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>", strArray61); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(attributes23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(whitelist67); }
public void test176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test176"); java.lang.String[] strArray3 = new java.lang.String[] { "#document", "hi!", "" }; java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>(); boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3); java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11); boolean boolean14 = strList4.containsAll((java.util.Collection<java.lang.String>) strList12); java.util.ListIterator<java.lang.String> strItor15 = strList4.listIterator(); java.util.ListIterator<java.lang.String> strItor16 = strList4.listIterator(); java.lang.String[] strArray20 = new java.lang.String[] { "#document", "hi!", "" }; java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>(); boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20); java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>(); boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28); boolean boolean31 = strList21.containsAll((java.util.Collection<java.lang.String>) strList29); java.util.stream.Stream<java.lang.String> strStream32 = strList29.stream(); java.util.stream.Stream<java.lang.String> strStream33 = strList29.stream(); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray38 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38); org.jsoup.nodes.Element element41 = document36.classNames((java.util.Set<java.lang.String>) strSet39); java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>(); boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44); boolean boolean47 = strSet39.containsAll((java.util.Collection<java.lang.String>) strList45); java.lang.String str49 = org.jsoup.helper.StringUtil.join((java.util.Collection) strSet39, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean50 = strSet39.isEmpty(); boolean boolean51 = strList29.containsAll((java.util.Collection<java.lang.String>) strSet39); org.jsoup.nodes.DocumentType documentType56 = new org.jsoup.nodes.DocumentType("#doctype", "#document", "#doctype", "hi!"); java.lang.String str57 = documentType56.nodeName(); documentType56.setBaseUri("[#document^=#doctype]"); boolean boolean60 = strList29.equals((java.lang.Object) "[#document^=#doctype]"); boolean boolean61 = strList4.removeAll((java.util.Collection<java.lang.String>) strList29); org.jsoup.safety.Whitelist whitelist63 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist65 = whitelist63.preserveRelativeLinks(false); boolean boolean66 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist63); org.jsoup.safety.Whitelist whitelist68 = org.jsoup.safety.Whitelist.basic(); boolean boolean69 = org.jsoup.Jsoup.isValid("hi!", whitelist68); java.lang.String[] strArray77 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist78 = whitelist68.addProtocols(".#document", "#doctype=\"\"", strArray77); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray77, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray77); org.jsoup.safety.Whitelist whitelist82 = whitelist63.addTags(strArray77); org.jsoup.safety.Whitelist whitelist84 = org.jsoup.safety.Whitelist.basic(); boolean boolean85 = org.jsoup.Jsoup.isValid("hi!", whitelist84); java.lang.String[] strArray93 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist94 = whitelist84.addProtocols(".#document", "#doctype=\"\"", strArray93); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray93, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist97 = whitelist82.addTags(strArray93); boolean boolean98 = strList4.equals((java.lang.Object) whitelist97); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(strItor15); org.junit.Assert.assertNotNull(strItor16); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(strStream32); org.junit.Assert.assertNotNull(strStream33); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "#doctype" + "'", str57, "#doctype"); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true); org.junit.Assert.assertNotNull(strArray77); org.junit.Assert.assertNotNull(whitelist78); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(whitelist84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true); org.junit.Assert.assertNotNull(strArray93); org.junit.Assert.assertNotNull(whitelist94); org.junit.Assert.assertNotNull(whitelist97); org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false); }
public void test177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test177"); org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 10); java.lang.String str2 = indexLessThan1.toString(); java.lang.String str3 = indexLessThan1.toString(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element7 = document6.body(); java.lang.String str8 = element7.ownText(); org.jsoup.nodes.DataNode dataNode11 = org.jsoup.nodes.DataNode.createFromEncoded("", ":eq(52)"); org.jsoup.nodes.DataNode dataNode13 = dataNode11.setWholeData(""); java.lang.String str14 = dataNode13.getWholeData(); element7.replaceWith((org.jsoup.nodes.Node) dataNode13); org.jsoup.parser.Tag tag16 = element7.tag(); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#doctype"); org.jsoup.select.Evaluator.IndexEquals indexEquals20 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray25 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25); org.jsoup.nodes.Element element28 = document23.classNames((java.util.Set<java.lang.String>) strSet26); org.jsoup.nodes.Document document30 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); org.jsoup.nodes.Element element39 = document30.appendChild((org.jsoup.nodes.Node) element38); boolean boolean40 = indexEquals20.matches(element28, (org.jsoup.nodes.Element) document30); org.jsoup.nodes.Document.QuirksMode quirksMode41 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document42 = document30.quirksMode(quirksMode41); org.jsoup.nodes.Document document43 = document18.quirksMode(quirksMode41); java.util.Map<java.lang.String, java.lang.String> strMap44 = document18.dataset(); org.jsoup.nodes.Element element46 = document18.prepend(""); boolean boolean47 = indexLessThan1.matches(element7, element46); java.lang.String str48 = indexLessThan1.toString(); org.jsoup.nodes.Element element49 = null; org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist52 = whitelist50.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner53 = new org.jsoup.safety.Cleaner(whitelist50); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray58 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58); org.jsoup.nodes.Element element61 = document56.classNames((java.util.Set<java.lang.String>) strSet59); java.lang.String str62 = document56.nodeName(); java.lang.String str63 = document56.html(); boolean boolean64 = cleaner53.isValid(document56); boolean boolean65 = indexLessThan1.matches(element49, (org.jsoup.nodes.Element) document56); java.lang.String str66 = indexLessThan1.toString(); org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":lt(10)" + "'", str2, ":lt(10)"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":lt(10)" + "'", str3, ":lt(10)"); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi! hi!" + "'", str8, "hi! hi!"); org.junit.Assert.assertNotNull(dataNode11); org.junit.Assert.assertNotNull(dataNode13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertNotNull(tag16); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + quirksMode41 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode41.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(strMap44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertEquals("'" + str48 + "' != '" + ":lt(10)" + "'", str48, ":lt(10)"); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "#document" + "'", str62, "#document"); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str63, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true); org.junit.Assert.assertEquals("'" + str66 + "' != '" + ":lt(10)" + "'", str66, ":lt(10)"); }
public void test178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test178"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes3 = whitelist1.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); boolean boolean9 = org.jsoup.Jsoup.isValid("", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addTags(strArray15); org.jsoup.safety.Whitelist whitelist17 = whitelist1.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray15); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray15, ""); boolean boolean20 = org.jsoup.helper.StringUtil.in("hi!:matchesown(null=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;", strArray15); org.junit.Assert.assertNotNull(attributes3); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test179"); org.jsoup.select.Evaluator.ContainsText containsText1 = new org.jsoup.select.Evaluator.ContainsText(". class=\" #doctype\""); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting4 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray9 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9); org.jsoup.nodes.Element element12 = document7.classNames((java.util.Set<java.lang.String>) strSet10); java.lang.String str13 = document7.nodeName(); org.jsoup.select.Elements elements15 = document7.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document19 = document18.clone(); org.jsoup.nodes.Element element21 = document18.addClass(""); org.jsoup.nodes.Element element22 = document7.appendChild((org.jsoup.nodes.Node) document18); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str26 = document25.val(); org.jsoup.nodes.Element element28 = document25.append("#document"); boolean boolean29 = attributeWithValueStarting4.matches((org.jsoup.nodes.Element) document7, element28); org.jsoup.nodes.Document.QuirksMode quirksMode30 = document7.quirksMode(); java.lang.String str31 = document7.toString(); java.lang.String str32 = document7.toString(); java.lang.String str33 = document7.toString(); org.jsoup.nodes.Element element35 = document7.appendElement("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\":contains(&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); org.jsoup.select.Evaluator.AllElements allElements36 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str37 = allElements36.toString(); java.lang.String str38 = allElements36.toString(); java.lang.String str39 = allElements36.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting41 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document45 = document44.clone(); org.jsoup.nodes.Element element47 = document44.addClass(""); org.jsoup.nodes.Document document49 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element51 = document49.createElement("#document"); boolean boolean52 = attributeStarting41.matches((org.jsoup.nodes.Element) document44, (org.jsoup.nodes.Element) document49); org.jsoup.nodes.Element element54 = document49.toggleClass("#doctype"); org.jsoup.select.Elements elements56 = element54.getElementsMatchingOwnText("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str60 = org.jsoup.Jsoup.clean("", "#data", whitelist59); org.jsoup.safety.Cleaner cleaner61 = new org.jsoup.safety.Cleaner(whitelist59); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText63 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist64 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist66 = whitelist64.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner67 = new org.jsoup.safety.Cleaner(whitelist64); org.jsoup.nodes.Document document70 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document71 = document70.clone(); org.jsoup.nodes.Node node73 = document71.removeAttr("#doctype"); org.jsoup.nodes.Document document74 = cleaner67.clean(document71); org.jsoup.nodes.Attributes attributes75 = document74.attributes(); org.jsoup.safety.Whitelist whitelist76 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist78 = whitelist76.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner79 = new org.jsoup.safety.Cleaner(whitelist76); org.jsoup.nodes.Document document82 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document83 = document82.clone(); org.jsoup.nodes.Node node85 = document83.removeAttr("#doctype"); org.jsoup.nodes.Document document86 = cleaner79.clean(document83); org.jsoup.nodes.Attributes attributes87 = document86.attributes(); boolean boolean88 = containsOwnText63.matches((org.jsoup.nodes.Element) document74, (org.jsoup.nodes.Element) document86); boolean boolean89 = cleaner61.isValid(document74); boolean boolean90 = allElements36.matches(element54, (org.jsoup.nodes.Element) document74); boolean boolean91 = containsText1.matches((org.jsoup.nodes.Element) document7, element54); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#document" + "'", str13, "#document"); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, ""); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + quirksMode30 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode30.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str31, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str32, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str33, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "*" + "'", str37, "*"); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "*" + "'", str38, "*"); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "*" + "'", str39, "*"); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(elements56); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertNotNull(node73); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertNotNull(attributes75); org.junit.Assert.assertNotNull(whitelist76); org.junit.Assert.assertNotNull(whitelist78); org.junit.Assert.assertNotNull(document82); org.junit.Assert.assertNotNull(document83); org.junit.Assert.assertNotNull(node85); org.junit.Assert.assertNotNull(document86); org.junit.Assert.assertNotNull(attributes87); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false); }
public void test180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test180"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings4.prettyPrint(false); java.nio.charset.Charset charset7 = outputSettings4.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings4.indentAmount((int) '4'); java.nio.charset.Charset charset10 = outputSettings4.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.prettyPrint(false); int int14 = outputSettings13.indentAmount(); java.nio.charset.Charset charset15 = outputSettings13.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings4.charset(charset15); java.nio.charset.Charset[] charsetArray17 = new java.nio.charset.Charset[] { charset15 }; java.util.LinkedList<java.nio.charset.Charset> charsetList18 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList18, charsetArray17); java.nio.charset.Charset charset20 = charsetList18.pop(); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basic(); boolean boolean23 = org.jsoup.Jsoup.isValid("hi!", whitelist22); java.lang.String[] strArray31 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist32 = whitelist22.addProtocols(".#document", "#doctype=\"\"", strArray31); org.jsoup.safety.Cleaner cleaner33 = new org.jsoup.safety.Cleaner(whitelist22); boolean boolean34 = charsetList18.contains((java.lang.Object) whitelist22); boolean boolean35 = org.jsoup.Jsoup.isValid(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist22); boolean boolean36 = attributes0.equals((java.lang.Object) whitelist22); java.lang.String str37 = attributes0.toString(); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertNotNull(charset7); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(outputSettings16); org.junit.Assert.assertNotNull(charsetArray17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(charset20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, ""); }
public void test181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test181"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str4 = org.jsoup.Jsoup.clean("", "#data", whitelist3); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basic(); boolean boolean7 = org.jsoup.Jsoup.isValid("hi!", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addProtocols(".#document", "#doctype=\"\"", strArray15); org.jsoup.safety.Whitelist whitelist17 = whitelist3.addTags(strArray15); org.jsoup.safety.Whitelist whitelist18 = whitelist0.addTags(strArray15); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray15); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); }
public void test182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test182"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); boolean boolean13 = whitelist1.isSafeTag(""); boolean boolean15 = whitelist1.isSafeTag("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root></#root>"); org.jsoup.nodes.Attributes attributes17 = whitelist1.getEnforcedAttributes("#&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(attributes17); }
public void test183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test183"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.select.Elements elements13 = document10.getElementsByAttributeValueContaining("[hi!, hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>, <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>, hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>, <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", "[*]"); org.jsoup.nodes.Document document14 = document10.normalise(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(document14); }
public void test184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test184"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); org.jsoup.nodes.Element element39 = document17.removeClass("\n<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->"); org.jsoup.select.Elements elements41 = document17.getElementsMatchingOwnText("[text=\"\"$=hi!  public &quot;#data&quot; &quot;#doctype&quot;&gt;]"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(elements41); }
public void test185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test185"); org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", ""); boolean boolean4 = textNode2.hasAttr("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); java.lang.String str5 = textNode2.text(); java.lang.String str6 = textNode2.text(); org.jsoup.nodes.Attributes attributes7 = textNode2.attributes(); org.jsoup.nodes.Attributes attributes8 = attributes7.clone(); java.util.List<org.jsoup.nodes.Attribute> attributeList9 = attributes8.asList(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.prettyPrint(false); java.nio.charset.Charset charset13 = outputSettings10.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.indentAmount((int) '4'); java.nio.charset.Charset charset16 = outputSettings10.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.prettyPrint(false); int int20 = outputSettings19.indentAmount(); java.nio.charset.Charset charset21 = outputSettings19.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings10.charset(charset21); java.nio.charset.Charset[] charsetArray23 = new java.nio.charset.Charset[] { charset21 }; java.util.LinkedList<java.nio.charset.Charset> charsetList24 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList24, charsetArray23); java.nio.charset.Charset charset26 = charsetList24.pop(); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.basic(); boolean boolean29 = org.jsoup.Jsoup.isValid("hi!", whitelist28); java.lang.String[] strArray37 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist38 = whitelist28.addProtocols(".#document", "#doctype=\"\"", strArray37); org.jsoup.safety.Cleaner cleaner39 = new org.jsoup.safety.Cleaner(whitelist28); boolean boolean40 = charsetList24.contains((java.lang.Object) whitelist28); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan43 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (byte) 1); org.jsoup.nodes.Document document45 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element46 = document45.body(); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element49 = document48.body(); boolean boolean50 = indexGreaterThan43.matches(element46, (org.jsoup.nodes.Element) document48); org.jsoup.nodes.Attribute attribute53 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute53.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str56 = attribute53.getKey(); java.lang.String str57 = attribute53.html(); boolean boolean58 = whitelist28.isSafeAttribute("#doctype=\"\"", element46, attribute53); java.lang.String str60 = attribute53.setValue(":contains([#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); java.lang.String str61 = attribute53.getValue(); attributes8.put(attribute53); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertNotNull(attributeList9); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charset13); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1); org.junit.Assert.assertNotNull(charset21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charsetArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(charset26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str56, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"" + "'", str57, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertEquals("'" + str61 + "' != '" + ":contains([#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]" + "'", str61, ":contains([#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); }
public void test186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test186"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList3 = attributes2.asList(); java.lang.String str5 = attributes2.get("<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>"); java.util.Map<java.lang.String, java.lang.String> strMap6 = attributes2.dataset(); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(attributeList3); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(strMap6); }
public void test187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test187"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.safety.Whitelist whitelist3 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes5 = whitelist3.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist10 = whitelist8.preserveRelativeLinks(false); boolean boolean11 = org.jsoup.Jsoup.isValid("", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addTags(strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist0.addProtocols(":matchesOwn(null", ":matches(null", strArray17); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray17); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray17, "[<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->$=<html>\n <head>\n <title>#document</title>\n </head>\n <body>\n hi!\n </body>\n</html>]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); }
public void test188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test188"); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList0 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings3.charset(); charsetList0.addFirst(charset4); java.util.Iterator<java.nio.charset.Charset> charsetItor6 = charsetList0.iterator(); org.jsoup.nodes.Document document8 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element10 = document8.createElement("#document"); org.jsoup.nodes.Document document11 = document8.clone(); java.lang.String str12 = document8.val(); org.jsoup.nodes.Node node15 = document8.attr("#doctype", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean16 = charsetList0.removeLastOccurrence((java.lang.Object) "#doctype"); java.util.Iterator<java.nio.charset.Charset> charsetItor17 = charsetList0.descendingIterator(); java.lang.Object obj18 = charsetList0.clone(); java.util.Iterator<java.nio.charset.Charset> charsetItor19 = charsetList0.iterator(); java.nio.charset.Charset charset21 = charsetList0.get(0); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(false); boolean boolean26 = org.jsoup.Jsoup.isValid("", whitelist23); org.jsoup.nodes.Attributes attributes28 = whitelist23.getEnforcedAttributes(":eq(52)"); org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parseBodyFragment("#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Node node34 = document31.attr("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#doctype"); boolean boolean35 = attributes28.equals((java.lang.Object) "#doctype"); boolean boolean36 = charsetList0.removeLastOccurrence((java.lang.Object) boolean35); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(charsetItor6); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertNotNull(node15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(charsetItor17); org.junit.Assert.assertNotNull(obj18); org.junit.Assert.assertEquals(obj18.toString(), "[UTF-8]"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "[UTF-8]"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "[UTF-8]"); org.junit.Assert.assertNotNull(charsetItor19); org.junit.Assert.assertNotNull(charset21); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(attributes28); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(node34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); }
public void test189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test189"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element17 = document16.body(); java.lang.String str18 = document16.toString(); org.jsoup.nodes.Document document19 = cleaner3.clean(document16); org.jsoup.nodes.Document document21 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray26 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26); org.jsoup.nodes.Element element29 = document24.classNames((java.util.Set<java.lang.String>) strSet27); org.jsoup.nodes.Element element30 = document21.appendChild((org.jsoup.nodes.Node) element29); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); org.jsoup.nodes.Element element39 = document21.classNames((java.util.Set<java.lang.String>) strSet36); java.lang.String str40 = document21.className(); boolean boolean41 = cleaner3.isValid(document21); org.jsoup.nodes.Element element43 = document21.prepend(""); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(element43); }
public void test190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test190"); org.jsoup.safety.Whitelist whitelist4 = new org.jsoup.safety.Whitelist(); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist4); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray11 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11); org.jsoup.nodes.Element element14 = document9.classNames((java.util.Set<java.lang.String>) strSet12); org.jsoup.nodes.Element element16 = element14.prepend("#document"); org.jsoup.nodes.Attribute attribute19 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute19.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str22 = attribute19.getKey(); boolean boolean23 = whitelist4.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element16, attribute19); java.lang.String str24 = org.jsoup.Jsoup.clean("hi!<html> <head></head> <body> hi! </body> </html>=\"\"", "", whitelist4); java.lang.String str25 = org.jsoup.Jsoup.clean("#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str22, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!  hi! =&quot;&quot;" + "'", str24, "hi!  hi! =&quot;&quot;"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "#document:contains(  hi! hi!:contains(  hi!" + "'", str25, "#document:contains(  hi! hi!:contains(  hi!"); }
public void test191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test191"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode17 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document18 = document16.quirksMode(quirksMode17); org.jsoup.nodes.Document document19 = cleaner3.clean(document18); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Element element25 = document22.addClass(""); org.jsoup.nodes.Element element27 = document22.prependElement("#doctype"); org.jsoup.nodes.Element element28 = document22.body(); org.jsoup.nodes.Element element29 = document18.prependChild((org.jsoup.nodes.Node) element28); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertTrue("'" + quirksMode17 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode17.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(element29); }
public void test192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test192"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings4.prettyPrint(false); java.nio.charset.Charset charset7 = outputSettings4.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings4.indentAmount((int) '4'); java.nio.charset.Charset charset10 = outputSettings4.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.prettyPrint(false); int int14 = outputSettings13.indentAmount(); java.nio.charset.Charset charset15 = outputSettings13.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings4.charset(charset15); java.nio.charset.Charset[] charsetArray17 = new java.nio.charset.Charset[] { charset15 }; java.util.LinkedList<java.nio.charset.Charset> charsetList18 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList18, charsetArray17); java.nio.charset.Charset charset20 = charsetList18.pop(); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basic(); boolean boolean23 = org.jsoup.Jsoup.isValid("hi!", whitelist22); java.lang.String[] strArray31 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist32 = whitelist22.addProtocols(".#document", "#doctype=\"\"", strArray31); org.jsoup.safety.Cleaner cleaner33 = new org.jsoup.safety.Cleaner(whitelist22); boolean boolean34 = charsetList18.contains((java.lang.Object) whitelist22); boolean boolean35 = org.jsoup.Jsoup.isValid(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist22); boolean boolean36 = attributes0.equals((java.lang.Object) whitelist22); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean42 = org.jsoup.Jsoup.isValid("#document", whitelist41); java.lang.String str43 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist41); org.jsoup.safety.Whitelist whitelist46 = org.jsoup.safety.Whitelist.basic(); boolean boolean47 = org.jsoup.Jsoup.isValid("hi!", whitelist46); java.lang.String[] strArray55 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist56 = whitelist46.addProtocols(".#document", "#doctype=\"\"", strArray55); org.jsoup.safety.Whitelist whitelist57 = whitelist41.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray55); org.jsoup.safety.Whitelist whitelist58 = whitelist22.addProtocols("<html>\n <head></head>\n <body>\n hi!:matchesOwn(null\n </body>\n</html>", "#\n#document", strArray55); org.jsoup.safety.Whitelist whitelist62 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes64 = whitelist62.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist67 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist69 = whitelist67.preserveRelativeLinks(false); boolean boolean70 = org.jsoup.Jsoup.isValid("", whitelist67); java.lang.String[] strArray76 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist77 = whitelist67.addTags(strArray76); org.jsoup.safety.Whitelist whitelist78 = whitelist62.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray76); boolean boolean79 = org.jsoup.helper.StringUtil.in("", strArray76); org.jsoup.safety.Whitelist whitelist80 = whitelist22.addProtocols("[#document^= hi! ]", "[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"^=hi! hi! #comment]", strArray76); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray76); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertNotNull(charset7); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(outputSettings16); org.junit.Assert.assertNotNull(charsetArray17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(charset20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str43, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertNotNull(strArray55); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(attributes64); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true); org.junit.Assert.assertNotNull(strArray76); org.junit.Assert.assertNotNull(whitelist77); org.junit.Assert.assertNotNull(whitelist78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertNotNull(whitelist80); }
public void test193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test193"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); boolean boolean4 = org.jsoup.Jsoup.isValid("[#document^=  hi! ]", whitelist3); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist10 = whitelist8.preserveRelativeLinks(false); boolean boolean11 = org.jsoup.Jsoup.isValid("", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addTags(strArray17); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basic(); boolean boolean23 = org.jsoup.Jsoup.isValid("hi!", whitelist22); java.lang.String[] strArray31 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist32 = whitelist22.addProtocols(".#document", "#doctype=\"\"", strArray31); org.jsoup.nodes.Attributes attributes34 = whitelist22.getEnforcedAttributes(".#document"); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean39 = org.jsoup.Jsoup.isValid("#document", whitelist38); java.lang.String str40 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist38); org.jsoup.safety.Whitelist whitelist43 = org.jsoup.safety.Whitelist.basic(); boolean boolean44 = org.jsoup.Jsoup.isValid("hi!", whitelist43); java.lang.String[] strArray52 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist53 = whitelist43.addProtocols(".#document", "#doctype=\"\"", strArray52); org.jsoup.safety.Whitelist whitelist54 = whitelist38.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray52); boolean boolean55 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray52); org.jsoup.safety.Whitelist whitelist56 = whitelist22.addTags(strArray52); org.jsoup.safety.Whitelist whitelist57 = whitelist18.addProtocols("hi!:matchesown(null=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", "[*]", strArray52); boolean boolean58 = org.jsoup.helper.StringUtil.in("#\n#document", strArray52); org.jsoup.safety.Whitelist whitelist59 = whitelist3.addAttributes("    ", strArray52); org.jsoup.safety.Whitelist whitelist63 = whitelist3.addEnforcedAttribute("[#document, hi!, ]", "#doctype", "hi! class=\"\"<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(attributes34); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str40, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(strArray52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist63); }
public void test194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test194"); org.jsoup.parser.Tag tag0 = null; org.jsoup.nodes.Attributes attributes2 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes3 = attributes2.clone(); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor4 = attributes3.iterator(); attributes3.put("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", ".#document"); java.util.Map<java.lang.String, java.lang.String> strMap8 = attributes3.dataset(); org.jsoup.safety.Whitelist whitelist12 = new org.jsoup.safety.Whitelist(); boolean boolean13 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist12); java.lang.String str14 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist12); org.jsoup.nodes.Document document17 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); org.jsoup.nodes.Element element26 = document17.appendChild((org.jsoup.nodes.Node) element25); java.lang.String str28 = document17.absUrl("hi!"); org.jsoup.nodes.Attribute attribute31 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean32 = whitelist12.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute31); org.jsoup.nodes.Attribute attribute33 = attribute31.clone(); attributes3.put(attribute31); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element35 = new org.jsoup.nodes.Element(tag0, "#[text=\"\"$=hi!  public &quot;#data&quot; &quot;#doctype&quot;&gt;]", attributes3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(attributes3); org.junit.Assert.assertNotNull(attributeItor4); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!:matchesOwn(null" + "'", str14, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, ""); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(attribute33); }
public void test195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test195"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addProtocols(".#document", "#doctype=\"\"", strArray11); boolean boolean13 = org.jsoup.helper.StringUtil.in("*", strArray11); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test196"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str7 = org.jsoup.Jsoup.clean("", "#data", whitelist6); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basic(); boolean boolean10 = org.jsoup.Jsoup.isValid("hi!", whitelist9); java.lang.String[] strArray18 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist19 = whitelist9.addProtocols(".#document", "#doctype=\"\"", strArray18); org.jsoup.safety.Whitelist whitelist20 = whitelist6.addTags(strArray18); org.jsoup.safety.Whitelist whitelist21 = whitelist3.addTags(strArray18); boolean boolean22 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist21); org.jsoup.safety.Whitelist whitelist26 = whitelist21.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist28 = whitelist21.preserveRelativeLinks(true); boolean boolean29 = org.jsoup.Jsoup.isValid("", whitelist21); java.lang.String str30 = org.jsoup.Jsoup.clean(":matchesown(null=\"#document\"", whitelist21); org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.prettyPrint(false); java.nio.charset.Charset charset36 = outputSettings33.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.indentAmount((int) '4'); java.nio.charset.Charset charset39 = outputSettings33.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.prettyPrint(false); int int43 = outputSettings42.indentAmount(); java.nio.charset.Charset charset44 = outputSettings42.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings33.charset(charset44); java.nio.charset.Charset[] charsetArray46 = new java.nio.charset.Charset[] { charset44 }; java.util.LinkedList<java.nio.charset.Charset> charsetList47 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList47, charsetArray46); java.nio.charset.Charset charset49 = charsetList47.pop(); org.jsoup.safety.Whitelist whitelist51 = org.jsoup.safety.Whitelist.basic(); boolean boolean52 = org.jsoup.Jsoup.isValid("hi!", whitelist51); java.lang.String[] strArray60 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist61 = whitelist51.addProtocols(".#document", "#doctype=\"\"", strArray60); org.jsoup.safety.Cleaner cleaner62 = new org.jsoup.safety.Cleaner(whitelist51); boolean boolean63 = charsetList47.contains((java.lang.Object) whitelist51); org.jsoup.safety.Whitelist whitelist66 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes68 = whitelist66.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist71 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist73 = whitelist71.preserveRelativeLinks(false); boolean boolean74 = org.jsoup.Jsoup.isValid("", whitelist71); java.lang.String[] strArray80 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist81 = whitelist71.addTags(strArray80); org.jsoup.safety.Whitelist whitelist82 = whitelist66.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray80); org.jsoup.safety.Whitelist whitelist83 = whitelist51.addProtocols("#<html> <head></head> <body> hi! </body> </html>", "[[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>]", strArray80); org.jsoup.safety.Whitelist whitelist84 = whitelist21.addProtocols(":eq(0)", "#doctype", strArray80); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertEquals("'" + str30 + "' != '" + ":matchesown(null=&quot;#document&quot;" + "'", str30, ":matchesown(null=&quot;#document&quot;"); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertNotNull(charset36); org.junit.Assert.assertNotNull(outputSettings38); org.junit.Assert.assertNotNull(charset39); org.junit.Assert.assertNotNull(outputSettings42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1); org.junit.Assert.assertNotNull(charset44); org.junit.Assert.assertNotNull(outputSettings45); org.junit.Assert.assertNotNull(charsetArray46); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(charset49); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(strArray60); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(attributes68); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true); org.junit.Assert.assertNotNull(strArray80); org.junit.Assert.assertNotNull(whitelist81); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(whitelist83); org.junit.Assert.assertNotNull(whitelist84); }
public void test197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test197"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addProtocols(".#document", "#doctype=\"\"", strArray11); org.jsoup.nodes.Attributes attributes14 = whitelist2.getEnforcedAttributes(".#document"); boolean boolean15 = org.jsoup.Jsoup.isValid("hi!:matchesown(null=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", whitelist2); java.lang.Class<?> wildcardClass16 = whitelist2.getClass(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(attributes14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(wildcardClass16); }
public void test198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test198"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist14 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray12); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.basic(); boolean boolean26 = org.jsoup.Jsoup.isValid("hi!", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addProtocols(".#document", "#doctype=\"\"", strArray34); org.jsoup.safety.Whitelist whitelist36 = whitelist22.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray34); org.jsoup.safety.Whitelist whitelist37 = whitelist18.addAttributes(":containsOwn(hi!:matchesown(null", strArray34); org.jsoup.safety.Whitelist whitelist38 = whitelist14.addAttributes(" text=\"\"", strArray34); org.jsoup.safety.Whitelist whitelist42 = whitelist14.addEnforcedAttribute("text=\"\"", "[^:matchesown(null=\"#document\"]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>#document"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist42); }
public void test199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test199"); org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray7 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7); org.jsoup.nodes.Element element10 = document5.classNames((java.util.Set<java.lang.String>) strSet8); java.lang.String str11 = document5.nodeName(); org.jsoup.select.Elements elements13 = document5.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document17 = document16.clone(); org.jsoup.nodes.Element element19 = document16.addClass(""); org.jsoup.nodes.Element element20 = document5.appendChild((org.jsoup.nodes.Node) document16); org.jsoup.nodes.Element element22 = document16.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Element element28 = document25.addClass(""); java.lang.String str29 = document25.toString(); org.jsoup.nodes.Element element31 = document25.text(".#document"); org.jsoup.nodes.Node node32 = element22.after((org.jsoup.nodes.Node) document25); org.jsoup.nodes.Element element34 = element22.prependText("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str38 = org.jsoup.Jsoup.clean("", "#data", whitelist37); org.jsoup.safety.Cleaner cleaner39 = new org.jsoup.safety.Cleaner(whitelist37); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str44 = document43.val(); java.util.List<org.jsoup.nodes.Node> nodeList46 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document43, "#document"); java.lang.String str47 = document43.baseUri(); org.jsoup.nodes.Element element49 = document43.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements50 = document43.parents(); org.jsoup.nodes.Document document51 = cleaner39.clean(document43); boolean boolean52 = element34.equals((java.lang.Object) cleaner39); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node53 = document2.before((org.jsoup.nodes.Node) element34); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#document" + "'", str11, "#document"); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str29, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(node32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, ""); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, ""); org.junit.Assert.assertNotNull(nodeList46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!"); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(elements50); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); }
public void test200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test200"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements17 = document6.getElementsByAttributeValueContaining("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"", ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); }
public void test201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test201"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.isEmpty(); org.jsoup.safety.Whitelist whitelist5 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes7 = whitelist5.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList8 = attributes7.asList(); org.jsoup.nodes.Element element9 = new org.jsoup.nodes.Element(tag1, "hi! =&quot;&quot;", attributes7); boolean boolean10 = tag1.isData(); boolean boolean11 = tag1.isSelfClosing(); boolean boolean12 = tag1.preserveWhitespace(); boolean boolean13 = tag1.isSelfClosing(); boolean boolean14 = tag1.canContainBlock(); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertNotNull(attributeList8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); }
public void test202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test202"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); java.lang.String str4 = attributes0.get("\n#document"); org.jsoup.nodes.Attributes attributes5 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes6 = attributes5.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator7 = attributes5.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap8 = attributes5.dataset(); attributes0.addAll(attributes5); java.lang.String str10 = attributes0.toString(); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner14 = new org.jsoup.safety.Cleaner(whitelist11); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document18 = document17.clone(); org.jsoup.nodes.Node node20 = document18.removeAttr("#doctype"); org.jsoup.nodes.Document document21 = cleaner14.clean(document18); boolean boolean22 = attributes0.equals((java.lang.Object) document18); org.jsoup.nodes.Element element23 = document18.head(); org.jsoup.select.Elements elements24 = document18.getAllElements(); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray29 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29); org.jsoup.nodes.Element element32 = document27.classNames((java.util.Set<java.lang.String>) strSet30); document27.title("#document"); org.jsoup.nodes.Document document36 = new org.jsoup.nodes.Document(""); org.jsoup.nodes.Element element37 = document27.prependChild((org.jsoup.nodes.Node) document36); int int38 = document27.siblingIndex(); org.jsoup.nodes.Element element40 = document27.appendText(":matches(null"); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node41 = document18.after((org.jsoup.nodes.Node) document27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(attributeSpliterator7); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(node20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertNotNull(element40); }
public void test203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test203"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Node node11 = document9.removeAttr("#doctype"); org.jsoup.nodes.Document document12 = cleaner5.clean(document9); org.jsoup.nodes.Attributes attributes13 = document12.attributes(); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner17 = new org.jsoup.safety.Cleaner(whitelist14); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document21 = document20.clone(); org.jsoup.nodes.Node node23 = document21.removeAttr("#doctype"); org.jsoup.nodes.Document document24 = cleaner17.clean(document21); org.jsoup.nodes.Attributes attributes25 = document24.attributes(); boolean boolean26 = containsOwnText1.matches((org.jsoup.nodes.Element) document12, (org.jsoup.nodes.Element) document24); org.jsoup.nodes.Document document28 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element30 = document28.createElement("#document"); org.jsoup.nodes.Document document31 = document28.clone(); org.jsoup.select.Elements elements34 = document31.getElementsByAttributeValueMatching("hi!", "\n#document"); boolean boolean35 = document12.equals((java.lang.Object) document31); org.jsoup.nodes.Element element37 = document12.createElement("hi!:matchesOwn(null"); org.jsoup.nodes.Attributes attributes38 = document12.attributes(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(node11); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(attributes13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(node23); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(attributes25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(attributes38); }
public void test204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test204"); org.jsoup.safety.Whitelist whitelist3 = new org.jsoup.safety.Whitelist(); boolean boolean4 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist3); java.lang.String str5 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist3); org.jsoup.nodes.Document document8 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Element element17 = document8.appendChild((org.jsoup.nodes.Node) element16); java.lang.String str19 = document8.absUrl("hi!"); org.jsoup.nodes.Attribute attribute22 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean23 = whitelist3.isSafeAttribute("", (org.jsoup.nodes.Element) document8, attribute22); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist27 = whitelist3.addEnforcedAttribute("", "     ", "<#root>\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n <#root>\n <html>\n  <head></head>\n  <body>\n  hi!\n  </body>\n </html>#document\n </#root>\n</#root>\n<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!:matchesOwn(null" + "'", str5, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); }
public void test205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test205"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist14 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray12); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray12, "<#root>\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n <#root>\n <html>\n  <head></head>\n  <body>\n  hi!\n  </body>\n </html>#document\n </#root>\n</#root>\n<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist14); }
public void test206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test206"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basic(); boolean boolean6 = org.jsoup.Jsoup.isValid("hi!", whitelist5); java.lang.String[] strArray14 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist15 = whitelist5.addProtocols(".#document", "#doctype=\"\"", strArray14); org.jsoup.safety.Whitelist whitelist16 = whitelist2.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray14); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist20 = whitelist18.preserveRelativeLinks(true); java.lang.String str21 = org.jsoup.Jsoup.clean("#document", "hi!<html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root>hi!<html> <head></head> <body> hi! </body> </html><html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root><html> <head></head> <body> hi! </body> </html><html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root>hi!<html> <head></head> <body> hi! </body> </html><html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root><html> <head></head> <body> hi! </body> </html>", whitelist18); org.jsoup.safety.Whitelist whitelist23 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes25 = whitelist23.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist27 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist29 = whitelist27.preserveRelativeLinks(false); java.lang.String str30 = org.jsoup.Jsoup.clean(".#document", whitelist29); org.jsoup.safety.Whitelist whitelist34 = whitelist29.addEnforcedAttribute("\n<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->", ":matchesown(null=\"#document\"", "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist35 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str39 = org.jsoup.Jsoup.clean("", "#data", whitelist38); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.basic(); boolean boolean42 = org.jsoup.Jsoup.isValid("hi!", whitelist41); java.lang.String[] strArray50 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist51 = whitelist41.addProtocols(".#document", "#doctype=\"\"", strArray50); org.jsoup.safety.Whitelist whitelist52 = whitelist38.addTags(strArray50); org.jsoup.safety.Whitelist whitelist53 = whitelist35.addTags(strArray50); org.jsoup.safety.Whitelist whitelist54 = whitelist34.addTags(strArray50); org.jsoup.safety.Whitelist whitelist55 = whitelist23.addTags(strArray50); org.jsoup.safety.Whitelist whitelist56 = whitelist18.addAttributes(":gt(-1)", strArray50); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#document" + "'", str21, "#document"); org.junit.Assert.assertNotNull(attributes25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + ".#document" + "'", str30, ".#document"); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, ""); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist56); }
public void test207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test207"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); document16.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean19 = document16.isBlock(); org.jsoup.nodes.Document document20 = cleaner12.clean(document16); org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parseBodyFragment("[[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>]", " <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\".#document\""); boolean boolean24 = cleaner12.isValid(document23); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); }
public void test208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test208"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str14 = document13.val(); java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document13, "#document"); java.lang.String str17 = document13.baseUri(); org.jsoup.nodes.Element element19 = document13.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str20 = document13.nodeName(); boolean boolean21 = containsOwnText6.matches((org.jsoup.nodes.Element) document9, (org.jsoup.nodes.Element) document13); org.jsoup.select.Elements elements23 = document13.getElementsContainingOwnText("hi!<html> <head></head> <body> hi! </body> </html>"); java.lang.String str25 = document13.attr("[^hi!]"); org.jsoup.nodes.Document document26 = cleaner4.clean(document13); org.jsoup.select.Evaluator.IndexEquals indexEquals28 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray33 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33); org.jsoup.nodes.Element element36 = document31.classNames((java.util.Set<java.lang.String>) strSet34); org.jsoup.nodes.Document document38 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray43 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43); org.jsoup.nodes.Element element46 = document41.classNames((java.util.Set<java.lang.String>) strSet44); org.jsoup.nodes.Element element47 = document38.appendChild((org.jsoup.nodes.Node) element46); boolean boolean48 = indexEquals28.matches(element36, (org.jsoup.nodes.Element) document38); org.jsoup.nodes.Document.QuirksMode quirksMode49 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document50 = document38.quirksMode(quirksMode49); org.jsoup.nodes.Element element52 = document50.createElement("#root"); org.jsoup.nodes.Document document53 = cleaner4.clean(document50); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("hi!<html> <head></head> <body> hi! </body> </html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements59 = document56.getElementsByAttributeValueStarting("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean60 = cleaner4.isValid(document56); org.jsoup.nodes.Document document64 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str65 = document64.val(); java.util.List<org.jsoup.nodes.Node> nodeList67 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document64, "#document"); java.lang.String str68 = document64.baseUri(); org.jsoup.nodes.Element element70 = document64.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str71 = document64.nodeName(); boolean boolean72 = document64.hasText(); org.jsoup.nodes.Element element74 = document64.text("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); org.jsoup.nodes.Node node76 = document64.removeAttr("\n<!--<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"-->"); boolean boolean77 = cleaner4.isValid(document64); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertNotNull(nodeList16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!"); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(elements23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + quirksMode49 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode49.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(elements59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(document64); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, ""); org.junit.Assert.assertNotNull(nodeList67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!"); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "#document" + "'", str71, "#document"); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(node76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true); }
public void test209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test209"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap3 = attributes0.dataset(); java.lang.String str4 = attributes0.html(); org.jsoup.safety.Whitelist whitelist5 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes7 = whitelist5.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList8 = attributes7.asList(); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist9); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); org.jsoup.nodes.Node node18 = document16.removeAttr("#doctype"); org.jsoup.nodes.Document document19 = cleaner12.clean(document16); org.jsoup.nodes.Attributes attributes20 = document19.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator21 = attributes20.spliterator(); attributes7.addAll(attributes20); attributes0.addAll(attributes20); java.lang.String str24 = attributes0.toString(); java.util.Map<java.lang.String, java.lang.String> strMap25 = attributes0.dataset(); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertNotNull(strMap3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertNotNull(attributeList8); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(node18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(attributeSpliterator21); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(strMap25); }
public void test210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test210"); org.jsoup.safety.Whitelist whitelist6 = new org.jsoup.safety.Whitelist(); boolean boolean7 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist6); java.lang.String str8 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist6); org.jsoup.nodes.Document document11 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray16 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16); org.jsoup.nodes.Element element19 = document14.classNames((java.util.Set<java.lang.String>) strSet17); org.jsoup.nodes.Element element20 = document11.appendChild((org.jsoup.nodes.Node) element19); java.lang.String str22 = document11.absUrl("hi!"); org.jsoup.nodes.Attribute attribute25 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean26 = whitelist6.isSafeAttribute("", (org.jsoup.nodes.Element) document11, attribute25); java.lang.String str27 = org.jsoup.Jsoup.clean("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]", whitelist6); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str33 = document32.val(); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document32, "#document"); java.lang.String str36 = document32.baseUri(); org.jsoup.nodes.Element element38 = document32.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.basic(); boolean boolean41 = org.jsoup.Jsoup.isValid("hi!", whitelist40); java.lang.String[] strArray49 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist50 = whitelist40.addProtocols(".#document", "#doctype=\"\"", strArray49); org.jsoup.select.Evaluator.AttributeStarting attributeStarting53 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray61 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61); org.jsoup.nodes.Element element64 = document59.classNames((java.util.Set<java.lang.String>) strSet62); document59.title("#document"); boolean boolean67 = attributeStarting53.matches((org.jsoup.nodes.Element) document56, (org.jsoup.nodes.Element) document59); java.lang.String str68 = document56.id(); org.jsoup.select.Elements elements70 = document56.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements72 = document56.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute75 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean76 = whitelist40.isSafeAttribute("", (org.jsoup.nodes.Element) document56, attribute75); boolean boolean77 = whitelist6.isSafeAttribute("[#document^=#doctype]", (org.jsoup.nodes.Element) document32, attribute75); java.lang.String str78 = org.jsoup.Jsoup.clean("", "<html>\n <head></head>\n <body>\n [#document^=  hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;\n </body>\n</html>", whitelist6); java.lang.String[] strArray79 = null; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist80 = whitelist6.addTags(strArray79); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!:matchesOwn(null" + "'", str8, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]" + "'", str27, "[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!"); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, ""); org.junit.Assert.assertNotNull(elements70); org.junit.Assert.assertNotNull(elements72); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, ""); }
public void test211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test211"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean18 = cleaner3.isValid(document17); java.lang.String str19 = document17.title(); document17.title("[[:matches(null!=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]]!=utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); }
public void test212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test212"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist2); org.jsoup.nodes.Attributes attributes7 = whitelist2.getEnforcedAttributes(":eq(52)"); boolean boolean8 = org.jsoup.Jsoup.isValid("", whitelist2); org.jsoup.nodes.Attributes attributes10 = whitelist2.getEnforcedAttributes(":eq(52)"); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor11 = attributes10.iterator(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(attributes10); org.junit.Assert.assertNotNull(attributeItor11); }
public void test213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test213"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str9 = document8.val(); java.util.List<org.jsoup.nodes.Node> nodeList11 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document8, "#document"); java.lang.String str12 = document8.baseUri(); org.jsoup.nodes.Element element14 = document8.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements15 = document8.parents(); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse(".:eq(52)"); java.lang.String str19 = document18.html(); org.jsoup.nodes.Element element21 = document18.prependElement("[^hi!]"); boolean boolean22 = cleaner4.isValid(document18); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str27 = document26.val(); java.util.List<org.jsoup.nodes.Node> nodeList29 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document26, "#document"); java.lang.String str30 = document26.baseUri(); org.jsoup.nodes.Element element32 = document26.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element34 = document26.prependElement("#<html> <head></head> <body> hi! </body> </html>"); boolean boolean35 = cleaner4.isValid(document26); java.lang.String str36 = document26.ownText(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(nodeList11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(nodeList29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!"); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); }
public void test214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test214"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); boolean boolean6 = org.jsoup.Jsoup.isValid("", whitelist3); org.jsoup.nodes.Attributes attributes8 = whitelist3.getEnforcedAttributes(":eq(52)"); boolean boolean9 = org.jsoup.Jsoup.isValid("", whitelist3); org.jsoup.nodes.Attributes attributes11 = whitelist3.getEnforcedAttributes(":eq(52)"); java.lang.String str12 = org.jsoup.Jsoup.clean("*", whitelist3); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "*" + "'", str12, "*"); }
public void test215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test215"); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList0 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting3 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); org.jsoup.select.Elements elements14 = document6.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document18 = document17.clone(); org.jsoup.nodes.Element element20 = document17.addClass(""); org.jsoup.nodes.Element element21 = document6.appendChild((org.jsoup.nodes.Node) document17); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str25 = document24.val(); org.jsoup.nodes.Element element27 = document24.append("#document"); boolean boolean28 = attributeWithValueStarting3.matches((org.jsoup.nodes.Element) document6, element27); java.lang.String str29 = document6.title(); org.jsoup.nodes.Element element30 = document6.body(); boolean boolean31 = charsetList0.removeLastOccurrence((java.lang.Object) document6); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.none(); java.lang.String str35 = org.jsoup.Jsoup.clean(":eq(52)", "hi!:matchesOwn(null", whitelist34); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document40 = document39.clone(); org.jsoup.nodes.Element element42 = document39.addClass(""); org.jsoup.nodes.Element element44 = document39.prependElement("#doctype"); java.lang.String str45 = element44.nodeName(); org.jsoup.nodes.Attribute attribute48 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute49 = attribute48.clone(); boolean boolean50 = whitelist34.isSafeAttribute("                ", element44, attribute49); org.jsoup.safety.Whitelist[] whitelistArray51 = new org.jsoup.safety.Whitelist[] { whitelist34 }; org.jsoup.safety.Whitelist[] whitelistArray52 = charsetList0.toArray(whitelistArray51); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertNotNull(elements14); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + ":eq(52)" + "'", str35, ":eq(52)"); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "#doctype" + "'", str45, "#doctype"); org.junit.Assert.assertNotNull(attribute48); org.junit.Assert.assertNotNull(attribute49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(whitelistArray51); org.junit.Assert.assertNotNull(whitelistArray52); }
public void test216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test216"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("\n#document", pattern1); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean6 = org.jsoup.Jsoup.isValid("#document", whitelist5); java.lang.String str7 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist5); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basic(); boolean boolean11 = org.jsoup.Jsoup.isValid("hi!", whitelist10); java.lang.String[] strArray19 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist20 = whitelist10.addProtocols(".#document", "#doctype=\"\"", strArray19); org.jsoup.safety.Whitelist whitelist21 = whitelist5.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray19); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode25 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document26 = document24.quirksMode(quirksMode25); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.basic(); boolean boolean29 = org.jsoup.Jsoup.isValid("hi!", whitelist28); java.lang.String[] strArray37 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist38 = whitelist28.addProtocols(".#document", "#doctype=\"\"", strArray37); org.jsoup.select.Evaluator.AttributeStarting attributeStarting41 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray49 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49); org.jsoup.nodes.Element element52 = document47.classNames((java.util.Set<java.lang.String>) strSet50); document47.title("#document"); boolean boolean55 = attributeStarting41.matches((org.jsoup.nodes.Element) document44, (org.jsoup.nodes.Element) document47); java.lang.String str56 = document44.id(); org.jsoup.select.Elements elements58 = document44.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements60 = document44.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute63 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean64 = whitelist28.isSafeAttribute("", (org.jsoup.nodes.Element) document44, attribute63); boolean boolean65 = whitelist21.isSafeAttribute("", (org.jsoup.nodes.Element) document24, attribute63); org.jsoup.parser.Tag tag66 = document24.tag(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting68 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document71 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document72 = document71.clone(); org.jsoup.nodes.Element element74 = document71.addClass(""); org.jsoup.nodes.Document document76 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element78 = document76.createElement("#document"); boolean boolean79 = attributeStarting68.matches((org.jsoup.nodes.Element) document71, (org.jsoup.nodes.Element) document76); document76.setBaseUri(""); boolean boolean82 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document76); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node83 = document24.previousSibling(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str7, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertTrue("'" + quirksMode25 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode25.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, ""); org.junit.Assert.assertNotNull(elements58); org.junit.Assert.assertNotNull(elements60); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(tag66); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertNotNull(document72); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); }
public void test217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test217"); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean7 = org.jsoup.Jsoup.isValid("#document", whitelist6); java.lang.String str8 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist6); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.basic(); boolean boolean12 = org.jsoup.Jsoup.isValid("hi!", whitelist11); java.lang.String[] strArray20 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist21 = whitelist11.addProtocols(".#document", "#doctype=\"\"", strArray20); org.jsoup.safety.Whitelist whitelist22 = whitelist6.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray20); boolean boolean23 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray20); boolean boolean24 = org.jsoup.helper.StringUtil.in("&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;", strArray20); boolean boolean25 = org.jsoup.helper.StringUtil.in(":matchesOwn(null", strArray20); boolean boolean26 = org.jsoup.helper.StringUtil.in("[:containsown(^=#document]", strArray20); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str8, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); }
public void test218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test218"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); int int12 = document10.siblingIndex(); org.jsoup.nodes.Document document14 = new org.jsoup.nodes.Document(""); org.jsoup.nodes.Element element16 = document14.toggleClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements17 = document14.children(); org.jsoup.nodes.Document document18 = document14.normalise(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node19 = document10.after((org.jsoup.nodes.Node) document14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(elements17); org.junit.Assert.assertNotNull(document18); }
public void test219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test219"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.prependElement("[[]]"); element22.remove(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); }
public void test220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test220"); org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText3 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Node node13 = document11.removeAttr("#doctype"); org.jsoup.nodes.Document document14 = cleaner7.clean(document11); org.jsoup.nodes.Attributes attributes15 = document14.attributes(); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner19 = new org.jsoup.safety.Cleaner(whitelist16); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Node node25 = document23.removeAttr("#doctype"); org.jsoup.nodes.Document document26 = cleaner19.clean(document23); org.jsoup.nodes.Attributes attributes27 = document26.attributes(); boolean boolean28 = containsOwnText3.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document26); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str33 = document32.val(); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document32, "#document"); java.lang.String str36 = document32.baseUri(); org.jsoup.nodes.Element element38 = document32.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); org.jsoup.nodes.Document.QuirksMode quirksMode40 = null; org.jsoup.nodes.Document document41 = document32.quirksMode(quirksMode40); boolean boolean42 = indexEquals1.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document41); org.jsoup.nodes.Document.OutputSettings outputSettings43 = document14.outputSettings(); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(node25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!"); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(outputSettings43); }
public void test221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test221"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean3 = org.jsoup.Jsoup.isValid("#document", whitelist2); java.lang.String str4 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist2); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist2.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray16); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode22 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document23 = document21.quirksMode(quirksMode22); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.basic(); boolean boolean26 = org.jsoup.Jsoup.isValid("hi!", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addProtocols(".#document", "#doctype=\"\"", strArray34); org.jsoup.select.Evaluator.AttributeStarting attributeStarting38 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray46 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46); org.jsoup.nodes.Element element49 = document44.classNames((java.util.Set<java.lang.String>) strSet47); document44.title("#document"); boolean boolean52 = attributeStarting38.matches((org.jsoup.nodes.Element) document41, (org.jsoup.nodes.Element) document44); java.lang.String str53 = document41.id(); org.jsoup.select.Elements elements55 = document41.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements57 = document41.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute60 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean61 = whitelist25.isSafeAttribute("", (org.jsoup.nodes.Element) document41, attribute60); boolean boolean62 = whitelist18.isSafeAttribute("", (org.jsoup.nodes.Element) document21, attribute60); java.util.List<org.jsoup.nodes.Node> nodeList63 = document21.childNodes(); org.jsoup.select.Elements elements64 = document21.getAllElements(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str4, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + quirksMode22 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode22.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, ""); org.junit.Assert.assertNotNull(elements55); org.junit.Assert.assertNotNull(elements57); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(nodeList63); org.junit.Assert.assertNotNull(elements64); }
public void test222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test222"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist2); boolean boolean6 = org.jsoup.Jsoup.isValid("", whitelist2); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.safety.Whitelist whitelist11 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes13 = whitelist11.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(false); boolean boolean19 = org.jsoup.Jsoup.isValid("", whitelist16); java.lang.String[] strArray25 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist26 = whitelist16.addTags(strArray25); org.jsoup.safety.Whitelist whitelist27 = whitelist11.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray25); org.jsoup.safety.Whitelist whitelist28 = whitelist8.addProtocols(":matchesOwn(null", ":matches(null", strArray25); org.jsoup.safety.Whitelist whitelist29 = whitelist2.addAttributes(":gt(-1)", strArray25); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(attributes13); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist29); }
public void test223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test223"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist5.addTags(strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); boolean boolean21 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist20); org.jsoup.safety.Whitelist whitelist25 = whitelist20.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist27 = whitelist20.preserveRelativeLinks(true); boolean boolean28 = org.jsoup.Jsoup.isValid(".#document", whitelist20); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.basic(); boolean boolean32 = org.jsoup.Jsoup.isValid("hi!", whitelist31); java.lang.String[] strArray40 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist41 = whitelist31.addProtocols(".#document", "#doctype=\"\"", strArray40); org.jsoup.nodes.Attributes attributes43 = whitelist31.getEnforcedAttributes(".#document"); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean48 = org.jsoup.Jsoup.isValid("#document", whitelist47); java.lang.String str49 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist47); org.jsoup.safety.Whitelist whitelist52 = org.jsoup.safety.Whitelist.basic(); boolean boolean53 = org.jsoup.Jsoup.isValid("hi!", whitelist52); java.lang.String[] strArray61 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist62 = whitelist52.addProtocols(".#document", "#doctype=\"\"", strArray61); org.jsoup.safety.Whitelist whitelist63 = whitelist47.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray61); boolean boolean64 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray61); org.jsoup.safety.Whitelist whitelist65 = whitelist31.addTags(strArray61); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray61); org.jsoup.safety.Whitelist whitelist67 = whitelist20.addAttributes("UTF-8bodyUTF-8", strArray61); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(attributes43); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str49, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertNotNull(whitelist67); }
public void test224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test224"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist1); org.jsoup.safety.Whitelist whitelist4 = whitelist1.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.basic(); boolean boolean13 = org.jsoup.Jsoup.isValid("hi!", whitelist12); java.lang.String[] strArray21 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist22 = whitelist12.addProtocols(".#document", "#doctype=\"\"", strArray21); org.jsoup.safety.Whitelist whitelist23 = whitelist9.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray21); org.jsoup.safety.Whitelist whitelist24 = whitelist1.addProtocols("##<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "[#document^= hi! ]", strArray21); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist24); }
public void test225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test225"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist5.addTags(strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); boolean boolean21 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist20); org.jsoup.safety.Whitelist whitelist25 = whitelist20.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist27 = whitelist20.preserveRelativeLinks(true); boolean boolean28 = org.jsoup.Jsoup.isValid(".#document", whitelist20); org.jsoup.nodes.Document document31 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element33 = document31.createElement("#document"); org.jsoup.nodes.Document document34 = document31.clone(); java.lang.String str35 = document34.nodeName(); org.jsoup.nodes.Element element37 = document34.tagName("#doctype"); java.lang.String str38 = document34.tagName(); document34.setBaseUri(":containsown(hi!:matchesown(null=\"\""); org.jsoup.nodes.Attribute attribute43 = new org.jsoup.nodes.Attribute("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); boolean boolean44 = whitelist20.isSafeAttribute("                ", (org.jsoup.nodes.Element) document34, attribute43); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "#document" + "'", str35, "#document"); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "#doctype" + "'", str38, "#doctype"); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); }
public void test226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test226"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.select.Elements elements15 = document13.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.Map<java.lang.String, java.lang.String> strMap16 = document13.dataset(); org.jsoup.nodes.Document document17 = cleaner3.clean(document13); org.jsoup.select.Elements elements18 = document13.getAllElements(); org.jsoup.select.Elements elements19 = document13.children(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(strMap16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(elements18); org.junit.Assert.assertNotNull(elements19); }
public void test227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test227"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.select.Elements elements10 = document8.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements12 = document8.getElementsByAttribute("#document"); org.jsoup.select.Elements elements15 = document8.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document20 = document19.clone(); org.jsoup.nodes.Element element22 = document19.addClass(""); java.lang.String str23 = document19.toString(); org.jsoup.nodes.Element element25 = document19.text(".#document"); org.jsoup.nodes.Document.QuirksMode quirksMode26 = document19.quirksMode(); org.jsoup.nodes.Element element28 = document19.appendElement("#doctype=\"\""); org.jsoup.nodes.Document document29 = cleaner4.clean(document19); org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("#doctype=\"\"", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document33 = document32.normalise(); org.jsoup.select.Elements elements35 = document32.getElementsByAttribute("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\":contains(&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); boolean boolean36 = cleaner4.isValid(document32); org.jsoup.nodes.Document document37 = null; // The following exception was thrown during execution in test generation try { boolean boolean38 = cleaner4.isValid(document37); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str23, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + quirksMode26 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode26.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(elements35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); }
public void test228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test228"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner10 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Node node16 = document14.removeAttr("#doctype"); org.jsoup.nodes.Document document17 = cleaner10.clean(document14); org.jsoup.nodes.Attributes attributes18 = document17.attributes(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Node node28 = document26.removeAttr("#doctype"); org.jsoup.nodes.Document document29 = cleaner22.clean(document26); org.jsoup.nodes.Attributes attributes30 = document29.attributes(); boolean boolean31 = containsOwnText6.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document29); boolean boolean32 = cleaner4.isValid(document17); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean37 = document35.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document38 = cleaner4.clean(document35); org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parseBodyFragment("#document"); org.jsoup.nodes.Document document41 = cleaner4.clean(document40); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting44 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str45 = attributeWithValueStarting44.toString(); java.lang.String str46 = attributeWithValueStarting44.toString(); java.lang.String str47 = attributeWithValueStarting44.toString(); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting50 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray55 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55); org.jsoup.nodes.Element element58 = document53.classNames((java.util.Set<java.lang.String>) strSet56); java.lang.String str59 = document53.nodeName(); org.jsoup.select.Elements elements61 = document53.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document64 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document65 = document64.clone(); org.jsoup.nodes.Element element67 = document64.addClass(""); org.jsoup.nodes.Element element68 = document53.appendChild((org.jsoup.nodes.Node) document64); org.jsoup.nodes.Document document71 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str72 = document71.val(); org.jsoup.nodes.Element element74 = document71.append("#document"); boolean boolean75 = attributeWithValueStarting50.matches((org.jsoup.nodes.Element) document53, element74); java.util.regex.Pattern pattern77 = null; org.jsoup.select.Elements elements78 = document53.getElementsByAttributeValueMatching("[^hi!]", pattern77); org.jsoup.nodes.Document document81 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element82 = document81.body(); boolean boolean83 = attributeWithValueStarting44.matches((org.jsoup.nodes.Element) document53, element82); org.jsoup.nodes.Document document84 = cleaner4.clean(document53); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(node16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(attributes18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(node28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]" + "'", str45, "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]" + "'", str46, "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]" + "'", str47, "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(strArray55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "#document" + "'", str59, "#document"); org.junit.Assert.assertNotNull(elements61); org.junit.Assert.assertNotNull(document64); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, ""); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNotNull(elements78); org.junit.Assert.assertNotNull(document81); org.junit.Assert.assertNotNull(element82); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertNotNull(document84); }
public void test229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test229"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.select.Evaluator.Class class5 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str6 = class5.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals8 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) element26); boolean boolean28 = indexEquals8.matches(element16, (org.jsoup.nodes.Element) document18); org.jsoup.nodes.Document.QuirksMode quirksMode29 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document30 = document18.quirksMode(quirksMode29); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); document33.title("#document"); boolean boolean41 = class5.matches((org.jsoup.nodes.Element) document30, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Document document42 = cleaner3.clean(document30); org.jsoup.nodes.Element element44 = document42.prependElement("hi! hi!#document hi!"); org.jsoup.nodes.Node node45 = document42.parent(); java.lang.String str46 = document42.outerHtml(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".#document" + "'", str6, ".#document"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + quirksMode29 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode29.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNull(node45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "<hi! hi!#document hi!></hi! hi!#document hi!>\n<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str46, "<hi! hi!#document hi!></hi! hi!#document hi!>\n<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); }
public void test230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test230"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("[:matches(null]", pattern1); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.select.Elements elements13 = document11.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements15 = document11.getElementsByAttribute("#document"); org.jsoup.select.Elements elements18 = document11.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document19 = cleaner7.clean(document11); org.jsoup.select.Evaluator.IndexLessThan indexLessThan21 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 10); java.lang.String str22 = indexLessThan21.toString(); org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("#document", "#data"); org.jsoup.select.Elements elements27 = document25.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document31 = document30.clone(); org.jsoup.nodes.Element element33 = document30.addClass(""); java.lang.String str34 = document30.toString(); org.jsoup.nodes.Element element36 = document30.tagName("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); boolean boolean37 = indexLessThan21.matches((org.jsoup.nodes.Element) document25, element36); java.lang.String str38 = element36.text(); boolean boolean39 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document19, element36); org.jsoup.nodes.Element element41 = document19.prependText("#:gt(1)"); org.jsoup.nodes.Element element43 = document19.toggleClass(":containsOwn(hi!"); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(elements18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + ":lt(10)" + "'", str22, ":lt(10)"); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(elements27); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str34, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element43); }
public void test231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test231"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray4 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4); org.jsoup.nodes.Element element7 = document2.classNames((java.util.Set<java.lang.String>) strSet5); java.lang.String str8 = document2.nodeName(); org.jsoup.select.Elements elements10 = document2.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Element element16 = document13.addClass(""); org.jsoup.nodes.Element element17 = document2.appendChild((org.jsoup.nodes.Node) document13); org.jsoup.nodes.Element element19 = document13.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Element element25 = document22.addClass(""); java.lang.String str26 = document22.toString(); org.jsoup.nodes.Element element28 = document22.text(".#document"); org.jsoup.nodes.Node node29 = element19.after((org.jsoup.nodes.Node) document22); org.jsoup.nodes.Element element31 = element19.prependText("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str35 = org.jsoup.Jsoup.clean("", "#data", whitelist34); org.jsoup.safety.Cleaner cleaner36 = new org.jsoup.safety.Cleaner(whitelist34); org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str41 = document40.val(); java.util.List<org.jsoup.nodes.Node> nodeList43 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document40, "#document"); java.lang.String str44 = document40.baseUri(); org.jsoup.nodes.Element element46 = document40.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements47 = document40.parents(); org.jsoup.nodes.Document document48 = cleaner36.clean(document40); boolean boolean49 = element31.equals((java.lang.Object) cleaner36); org.jsoup.select.Elements elements51 = element31.getElementsByTag("<#root class=\"\">\n <html>\n <head></head>\n <body>\n  [#document^=#doctype]\n </body>\n </html>\n</#root>"); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#document" + "'", str8, "#document"); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str26, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(node29); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, ""); org.junit.Assert.assertNotNull(nodeList43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!"); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(elements47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(elements51); }
public void test232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test232"); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings1.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings1.indentAmount((int) '4'); java.nio.charset.Charset charset7 = outputSettings1.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); int int11 = outputSettings10.indentAmount(); java.nio.charset.Charset charset12 = outputSettings10.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings1.charset(charset12); java.nio.charset.Charset[] charsetArray14 = new java.nio.charset.Charset[] { charset12 }; java.util.LinkedList<java.nio.charset.Charset> charsetList15 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList15, charsetArray14); java.nio.charset.Charset charset17 = charsetList15.pop(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.basic(); boolean boolean20 = org.jsoup.Jsoup.isValid("hi!", whitelist19); java.lang.String[] strArray28 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist29 = whitelist19.addProtocols(".#document", "#doctype=\"\"", strArray28); org.jsoup.safety.Cleaner cleaner30 = new org.jsoup.safety.Cleaner(whitelist19); boolean boolean31 = charsetList15.contains((java.lang.Object) whitelist19); boolean boolean32 = org.jsoup.Jsoup.isValid("hi! hi!", whitelist19); org.jsoup.nodes.Attributes attributes34 = whitelist19.getEnforcedAttributes("\n<!--hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;-->"); java.lang.String str36 = attributes34.get("\n#document"); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertNotNull(charset7); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertNotNull(charset12); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertNotNull(charsetArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(attributes34); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); }
public void test233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test233"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); boolean boolean8 = org.jsoup.Jsoup.isValid("", whitelist5); java.lang.String[] strArray14 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist15 = whitelist5.addTags(strArray14); org.jsoup.safety.Whitelist whitelist16 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray14); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); boolean boolean27 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist24); org.jsoup.safety.Whitelist whitelist29 = org.jsoup.safety.Whitelist.basic(); boolean boolean30 = org.jsoup.Jsoup.isValid("hi!", whitelist29); java.lang.String[] strArray38 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist39 = whitelist29.addProtocols(".#document", "#doctype=\"\"", strArray38); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray38, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray38); org.jsoup.safety.Whitelist whitelist43 = whitelist24.addTags(strArray38); org.jsoup.safety.Whitelist whitelist44 = whitelist19.addTags(strArray38); org.jsoup.safety.Whitelist whitelist45 = whitelist0.addProtocols("#data", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray38); org.jsoup.safety.Whitelist whitelist49 = whitelist0.addEnforcedAttribute("*", "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", " "); org.jsoup.safety.Whitelist whitelist52 = org.jsoup.safety.Whitelist.basic(); boolean boolean53 = org.jsoup.Jsoup.isValid("hi!", whitelist52); java.lang.String[] strArray61 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist62 = whitelist52.addProtocols(".#document", "#doctype=\"\"", strArray61); org.jsoup.safety.Cleaner cleaner63 = new org.jsoup.safety.Cleaner(whitelist52); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document67 = document66.clone(); document67.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean70 = document67.isBlock(); org.jsoup.nodes.Document document71 = cleaner63.clean(document67); org.jsoup.nodes.Attribute attribute74 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); java.lang.String str76 = attribute74.setValue(" class=\"\""); boolean boolean77 = whitelist49.isSafeAttribute("hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;", (org.jsoup.nodes.Element) document67, attribute74); java.lang.String str79 = attribute74.setValue(".:matchesOwn(null"); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertNotNull(attribute74); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str76, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertEquals("'" + str79 + "' != '" + " class=\"\"" + "'", str79, " class=\"\""); }
public void test234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test234"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); java.lang.String str11 = document7.outerHtml(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element13 = document7.before(".:eq(52)"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str11, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); }
public void test235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test235"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist5.addTags(strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); boolean boolean21 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist20); org.jsoup.safety.Whitelist whitelist25 = whitelist20.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist27 = whitelist20.preserveRelativeLinks(true); boolean boolean28 = org.jsoup.Jsoup.isValid(".#document", whitelist20); org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.prettyPrint(false); java.nio.charset.Charset charset34 = outputSettings31.charset(); java.nio.charset.Charset[] charsetArray35 = new java.nio.charset.Charset[] { charset34 }; java.util.LinkedList<java.nio.charset.Charset> charsetList36 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList36, charsetArray35); org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.prettyPrint(false); java.nio.charset.Charset charset41 = outputSettings38.charset(); boolean boolean42 = charsetList36.add(charset41); java.lang.Object obj43 = null; boolean boolean44 = charsetList36.removeLastOccurrence(obj43); java.nio.charset.Charset charset45 = charsetList36.pollFirst(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList46 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.prettyPrint(false); java.nio.charset.Charset charset50 = outputSettings49.charset(); charsetList46.addFirst(charset50); java.util.Iterator<java.nio.charset.Charset> charsetItor52 = charsetList46.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList53 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings54.prettyPrint(false); java.nio.charset.Charset charset57 = outputSettings56.charset(); charsetList53.addFirst(charset57); boolean boolean59 = charsetList46.offerFirst(charset57); int int60 = charsetList46.size(); java.nio.charset.Charset charset61 = charsetList46.peekLast(); charsetList36.addFirst(charset61); java.nio.charset.Charset charset63 = charsetList36.poll(); java.nio.charset.Charset charset64 = charsetList36.removeFirst(); java.nio.charset.Charset charset65 = charsetList36.pollFirst(); java.nio.charset.Charset charset66 = charsetList36.peek(); org.jsoup.safety.Whitelist whitelist67 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist69 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist71 = whitelist69.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist74 = org.jsoup.safety.Whitelist.basic(); boolean boolean75 = org.jsoup.Jsoup.isValid("hi!", whitelist74); java.lang.String[] strArray83 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist84 = whitelist74.addProtocols(".#document", "#doctype=\"\"", strArray83); org.jsoup.safety.Whitelist whitelist85 = whitelist71.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray83); org.jsoup.safety.Whitelist whitelist86 = whitelist67.addAttributes(":containsOwn(hi!:matchesown(null", strArray83); java.lang.String[] strArray87 = charsetList36.toArray(strArray83); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist88 = whitelist20.addProtocols("", "", strArray87); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(outputSettings33); org.junit.Assert.assertNotNull(charset34); org.junit.Assert.assertNotNull(charsetArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(charset41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(charset45); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertNotNull(charset50); org.junit.Assert.assertNotNull(charsetItor52); org.junit.Assert.assertNotNull(outputSettings56); org.junit.Assert.assertNotNull(charset57); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true); org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2); org.junit.Assert.assertNotNull(charset61); org.junit.Assert.assertNotNull(charset63); org.junit.Assert.assertNotNull(charset64); org.junit.Assert.assertNull(charset65); org.junit.Assert.assertNull(charset66); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true); org.junit.Assert.assertNotNull(strArray83); org.junit.Assert.assertNotNull(whitelist84); org.junit.Assert.assertNotNull(whitelist85); org.junit.Assert.assertNotNull(whitelist86); org.junit.Assert.assertNotNull(strArray87); }
public void test236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test236"); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings1.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings1.indentAmount((int) '4'); java.nio.charset.Charset charset7 = outputSettings1.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); int int11 = outputSettings10.indentAmount(); java.nio.charset.Charset charset12 = outputSettings10.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings1.charset(charset12); java.nio.charset.Charset[] charsetArray14 = new java.nio.charset.Charset[] { charset12 }; java.util.LinkedList<java.nio.charset.Charset> charsetList15 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList15, charsetArray14); java.nio.charset.Charset charset17 = charsetList15.pop(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.basic(); boolean boolean20 = org.jsoup.Jsoup.isValid("hi!", whitelist19); java.lang.String[] strArray28 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist29 = whitelist19.addProtocols(".#document", "#doctype=\"\"", strArray28); org.jsoup.safety.Cleaner cleaner30 = new org.jsoup.safety.Cleaner(whitelist19); boolean boolean31 = charsetList15.contains((java.lang.Object) whitelist19); boolean boolean32 = org.jsoup.Jsoup.isValid("hi! hi!", whitelist19); org.jsoup.nodes.Attributes attributes34 = whitelist19.getEnforcedAttributes("\n<!--hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;-->"); java.lang.String str36 = attributes34.get(":eq(52)\n<#root></#root>"); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertNotNull(charset7); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertNotNull(charset12); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertNotNull(charsetArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(attributes34); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); }
public void test237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test237"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist2); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray16, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray16); org.jsoup.safety.Whitelist whitelist21 = whitelist2.addTags(strArray16); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basic(); boolean boolean24 = org.jsoup.Jsoup.isValid("hi!", whitelist23); java.lang.String[] strArray32 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist33 = whitelist23.addProtocols(".#document", "#doctype=\"\"", strArray32); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray32, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist36 = whitelist21.addTags(strArray32); java.lang.String str37 = org.jsoup.Jsoup.clean(" hi!<html> <head></head> <body> hi! </body> </html>=\"\"", whitelist36); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!  hi! =&quot;&quot;" + "'", str37, "hi!  hi! =&quot;&quot;"); }
public void test238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test238"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.safety.Whitelist whitelist6 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes8 = whitelist6.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(false); boolean boolean14 = org.jsoup.Jsoup.isValid("", whitelist11); java.lang.String[] strArray20 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist21 = whitelist11.addTags(strArray20); org.jsoup.safety.Whitelist whitelist22 = whitelist6.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray20); org.jsoup.safety.Whitelist whitelist23 = whitelist3.addProtocols(":matchesOwn(null", ":matches(null", strArray20); org.jsoup.safety.Cleaner cleaner24 = new org.jsoup.safety.Cleaner(whitelist23); boolean boolean25 = org.jsoup.Jsoup.isValid(" class=\" #doctype\"", whitelist23); java.lang.String str26 = org.jsoup.Jsoup.clean(":eq(52)", "[[]]", whitelist23); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertEquals("'" + str26 + "' != '" + ":eq(52)" + "'", str26, ":eq(52)"); }
public void test239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test239"); org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str1 = allElements0.toString(); java.lang.String str2 = allElements0.toString(); java.lang.String str3 = allElements0.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Element element11 = document8.addClass(""); org.jsoup.nodes.Document document13 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element15 = document13.createElement("#document"); boolean boolean16 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document13); org.jsoup.nodes.Element element18 = document13.toggleClass("#doctype"); org.jsoup.select.Elements elements20 = element18.getElementsMatchingOwnText("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str24 = org.jsoup.Jsoup.clean("", "#data", whitelist23); org.jsoup.safety.Cleaner cleaner25 = new org.jsoup.safety.Cleaner(whitelist23); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText27 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner31 = new org.jsoup.safety.Cleaner(whitelist28); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document35 = document34.clone(); org.jsoup.nodes.Node node37 = document35.removeAttr("#doctype"); org.jsoup.nodes.Document document38 = cleaner31.clean(document35); org.jsoup.nodes.Attributes attributes39 = document38.attributes(); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document47 = document46.clone(); org.jsoup.nodes.Node node49 = document47.removeAttr("#doctype"); org.jsoup.nodes.Document document50 = cleaner43.clean(document47); org.jsoup.nodes.Attributes attributes51 = document50.attributes(); boolean boolean52 = containsOwnText27.matches((org.jsoup.nodes.Element) document38, (org.jsoup.nodes.Element) document50); boolean boolean53 = cleaner25.isValid(document38); boolean boolean54 = allElements0.matches(element18, (org.jsoup.nodes.Element) document38); org.jsoup.nodes.Element element56 = document38.prependElement(".#document"); java.util.regex.Pattern pattern57 = null; // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements58 = element56.getElementsMatchingText(pattern57); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "*" + "'", str1, "*"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "*" + "'", str2, "*"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "*" + "'", str3, "*"); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(node37); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(attributes39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(node49); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(attributes51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(element56); }
public void test240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test240"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist2); org.jsoup.nodes.Attributes attributes7 = whitelist2.getEnforcedAttributes(":eq(52)"); boolean boolean8 = org.jsoup.Jsoup.isValid("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]", whitelist2); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); }
public void test241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test241"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.select.Evaluator.Class class5 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str6 = class5.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals8 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) element26); boolean boolean28 = indexEquals8.matches(element16, (org.jsoup.nodes.Element) document18); org.jsoup.nodes.Document.QuirksMode quirksMode29 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document30 = document18.quirksMode(quirksMode29); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); document33.title("#document"); boolean boolean41 = class5.matches((org.jsoup.nodes.Element) document30, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Document document42 = cleaner3.clean(document30); org.jsoup.nodes.Element element44 = document42.prependElement("hi! hi!#document hi!"); org.jsoup.select.Elements elements47 = element44.getElementsByAttributeValue("<html>\n <head></head>\n <body></body>\n</html>:containsOwn(hi!", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n "); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".#document" + "'", str6, ".#document"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + quirksMode29 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode29.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(elements47); }
public void test242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test242"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element17 = document16.body(); java.lang.String str18 = document16.toString(); org.jsoup.nodes.Document document19 = cleaner3.clean(document16); java.lang.String str20 = document16.nodeName(); org.jsoup.parser.Tag tag21 = document16.tag(); boolean boolean22 = tag21.canContainBlock(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertNotNull(tag21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); }
public void test243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test243"); org.jsoup.select.Evaluator.Attribute attribute1 = new org.jsoup.select.Evaluator.Attribute(""); org.jsoup.nodes.Document document3 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element12 = document3.appendChild((org.jsoup.nodes.Node) element11); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray17 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17); org.jsoup.nodes.Element element20 = document15.classNames((java.util.Set<java.lang.String>) strSet18); org.jsoup.nodes.Element element21 = document3.classNames((java.util.Set<java.lang.String>) strSet18); org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parseBodyFragment("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ".#document"); boolean boolean25 = attribute1.matches((org.jsoup.nodes.Element) document3, (org.jsoup.nodes.Element) document24); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("hi!<html> <head></head> <body> hi! </body> </html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements31 = document28.getElementsByAttributeValueStarting("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str35 = document34.className(); boolean boolean36 = attribute1.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document34); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str40 = document39.val(); org.jsoup.select.Elements elements42 = document39.getElementsContainingText("#doctype"); org.jsoup.nodes.Document document45 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document46 = document45.clone(); org.jsoup.nodes.Document.QuirksMode quirksMode47 = document45.quirksMode(); org.jsoup.nodes.Attributes attributes48 = document45.attributes(); org.jsoup.nodes.Element element50 = document45.toggleClass(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); boolean boolean51 = attribute1.matches((org.jsoup.nodes.Element) document39, (org.jsoup.nodes.Element) document45); java.lang.String str52 = attribute1.toString(); java.lang.String str53 = attribute1.toString(); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parseBodyFragment("<html> <head></head> <body> hi! </body> </html>"); org.jsoup.safety.Whitelist whitelist56 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist58 = whitelist56.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner59 = new org.jsoup.safety.Cleaner(whitelist56); org.jsoup.nodes.Document document62 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray64 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64); org.jsoup.nodes.Element element67 = document62.classNames((java.util.Set<java.lang.String>) strSet65); java.lang.String str68 = document62.nodeName(); java.lang.String str69 = document62.html(); boolean boolean70 = cleaner59.isValid(document62); org.jsoup.nodes.Document document72 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element73 = document72.body(); java.lang.String str74 = document72.toString(); org.jsoup.nodes.Document document75 = cleaner59.clean(document72); java.lang.String str76 = document72.id(); org.jsoup.nodes.Element element77 = document72.head(); boolean boolean78 = attribute1.matches((org.jsoup.nodes.Element) document55, (org.jsoup.nodes.Element) document72); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); org.junit.Assert.assertNotNull(elements42); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertTrue("'" + quirksMode47 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode47.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(attributes48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]"); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]"); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(strArray64); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "#document" + "'", str68, "#document"); org.junit.Assert.assertEquals("'" + str69 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str69, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true); org.junit.Assert.assertNotNull(document72); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str74, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, ""); org.junit.Assert.assertNotNull(element77); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); }
public void test244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test244"); org.jsoup.select.Evaluator.AttributeWithValue attributeWithValue2 = new org.jsoup.select.Evaluator.AttributeWithValue("hi!", ":eq(52)"); org.jsoup.nodes.Element element3 = null; org.jsoup.safety.Whitelist whitelist5 = new org.jsoup.safety.Whitelist(); boolean boolean6 = org.jsoup.Jsoup.isValid("", whitelist5); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray12 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12); org.jsoup.nodes.Element element15 = document10.classNames((java.util.Set<java.lang.String>) strSet13); org.jsoup.nodes.Element element17 = element15.prepend("#document"); org.jsoup.nodes.Attribute attribute20 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute20.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str23 = attribute20.getKey(); boolean boolean24 = whitelist5.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element17, attribute20); org.jsoup.nodes.Element element26 = element17.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements29 = element17.getElementsByAttributeValueMatching("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"[hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;!=.:eq(52)]\""); boolean boolean30 = attributeWithValue2.matches(element3, element17); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document34 = document33.clone(); org.jsoup.select.Elements elements36 = document34.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements38 = document34.getElementsByIndexLessThan((int) (byte) 1); org.jsoup.nodes.Element element40 = document34.text("#doctype"); java.lang.String str41 = document34.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals43 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray48 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48); org.jsoup.nodes.Element element51 = document46.classNames((java.util.Set<java.lang.String>) strSet49); org.jsoup.nodes.Document document53 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray58 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58); org.jsoup.nodes.Element element61 = document56.classNames((java.util.Set<java.lang.String>) strSet59); org.jsoup.nodes.Element element62 = document53.appendChild((org.jsoup.nodes.Node) element61); boolean boolean63 = indexEquals43.matches(element51, (org.jsoup.nodes.Element) document53); java.lang.String str64 = indexEquals43.toString(); org.jsoup.nodes.Document document67 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document68 = document67.clone(); org.jsoup.nodes.Element element70 = document67.addClass(""); java.lang.String str71 = document67.toString(); org.jsoup.nodes.Element element73 = document67.text(".#document"); org.jsoup.select.Elements elements75 = document67.getElementsByClass("#document"); org.jsoup.nodes.Document document79 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str80 = document79.val(); java.util.List<org.jsoup.nodes.Node> nodeList82 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document79, "#document"); java.lang.String str83 = document79.baseUri(); org.jsoup.nodes.Element element85 = document79.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements86 = document79.parents(); boolean boolean87 = indexEquals43.matches((org.jsoup.nodes.Element) document67, (org.jsoup.nodes.Element) document79); boolean boolean88 = attributeWithValue2.matches((org.jsoup.nodes.Element) document34, (org.jsoup.nodes.Element) document79); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str23, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertNotNull(elements38); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "<html>\n <head></head> \n <body>\n #doctype\n </body>\n</html>" + "'", str41, "<html>\n <head></head> \n <body>\n #doctype\n </body>\n</html>"); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertEquals("'" + str64 + "' != '" + ":eq(52)" + "'", str64, ":eq(52)"); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertNotNull(document68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str71, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertNotNull(elements75); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, ""); org.junit.Assert.assertNotNull(nodeList82); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!"); org.junit.Assert.assertNotNull(element85); org.junit.Assert.assertNotNull(elements86); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); }
public void test245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test245"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document3 = document2.clone(); org.jsoup.nodes.Element element5 = document2.addClass(""); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str10 = document9.val(); java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document9, "#document"); java.lang.String str13 = document9.baseUri(); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str17 = document16.val(); org.jsoup.nodes.Element element19 = document16.append("#document"); org.jsoup.nodes.Element element20 = document9.appendChild((org.jsoup.nodes.Node) element19); org.jsoup.nodes.Element element21 = document2.prependChild((org.jsoup.nodes.Node) document9); org.jsoup.nodes.Attributes attributes22 = element21.attributes(); java.lang.String str23 = attributes22.html(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator24 = attributes22.spliterator(); org.jsoup.nodes.Attributes attributes25 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes26 = attributes25.clone(); java.lang.String str27 = attributes26.toString(); attributes22.addAll(attributes26); org.jsoup.safety.Whitelist whitelist29 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes31 = whitelist29.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList32 = attributes31.asList(); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist35 = whitelist33.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner36 = new org.jsoup.safety.Cleaner(whitelist33); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document40 = document39.clone(); org.jsoup.nodes.Node node42 = document40.removeAttr("#doctype"); org.jsoup.nodes.Document document43 = cleaner36.clean(document40); org.jsoup.nodes.Attributes attributes44 = document43.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator45 = attributes44.spliterator(); attributes31.addAll(attributes44); java.util.Map<java.lang.String, java.lang.String> strMap47 = attributes44.dataset(); attributes22.addAll(attributes44); org.jsoup.nodes.Attributes attributes49 = null; // The following exception was thrown during execution in test generation try { attributes22.addAll(attributes49); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(element5); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!"); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + " class=\"\"" + "'", str23, " class=\"\""); org.junit.Assert.assertNotNull(attributeSpliterator24); org.junit.Assert.assertNotNull(attributes26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(attributes31); org.junit.Assert.assertNotNull(attributeList32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(node42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(attributes44); org.junit.Assert.assertNotNull(attributeSpliterator45); org.junit.Assert.assertNotNull(strMap47); }
public void test246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test246"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element23 = element22.empty(); org.jsoup.nodes.Element element25 = element23.appendElement(":matchesOwn(null"); java.util.Map<java.lang.String, java.lang.String> strMap26 = element25.dataset(); org.jsoup.nodes.Element element28 = element25.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\" &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;\""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(strMap26); org.junit.Assert.assertNotNull(element28); }
public void test247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test247"); java.lang.String[] strArray3 = new java.lang.String[] { "#document", "hi!", "" }; java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>(); boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3); java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11); boolean boolean14 = strList4.containsAll((java.util.Collection<java.lang.String>) strList12); java.util.stream.Stream<java.lang.String> strStream15 = strList12.stream(); java.util.stream.Stream<java.lang.String> strStream16 = strList12.stream(); boolean boolean17 = strList12.isEmpty(); org.jsoup.safety.Whitelist whitelist18 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes20 = whitelist18.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList21 = attributes20.asList(); boolean boolean22 = strList12.equals((java.lang.Object) attributes20); java.util.stream.Stream<java.lang.String> strStream23 = strList12.stream(); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(strStream15); org.junit.Assert.assertNotNull(strStream16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(attributeList21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(strStream23); }
public void test248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test248"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str9 = org.jsoup.Jsoup.clean("", "#data", whitelist8); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.basic(); boolean boolean12 = org.jsoup.Jsoup.isValid("hi!", whitelist11); java.lang.String[] strArray20 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist21 = whitelist11.addProtocols(".#document", "#doctype=\"\"", strArray20); org.jsoup.safety.Whitelist whitelist22 = whitelist8.addTags(strArray20); org.jsoup.safety.Whitelist whitelist23 = whitelist5.addTags(strArray20); boolean boolean24 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist23); org.jsoup.safety.Whitelist whitelist28 = whitelist23.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist30 = whitelist23.preserveRelativeLinks(true); boolean boolean31 = org.jsoup.Jsoup.isValid("", whitelist23); java.lang.String str32 = org.jsoup.Jsoup.clean(":matchesown(null=\"#document\"", whitelist23); java.lang.String str33 = org.jsoup.Jsoup.clean("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"", "                                                  ", whitelist23); org.jsoup.safety.Whitelist whitelist35 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes37 = whitelist35.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); boolean boolean43 = org.jsoup.Jsoup.isValid("", whitelist40); java.lang.String[] strArray49 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist50 = whitelist40.addTags(strArray49); org.jsoup.safety.Whitelist whitelist51 = whitelist35.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray49); org.jsoup.safety.Whitelist whitelist52 = whitelist23.addAttributes(" text=\"\"", strArray49); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertEquals("'" + str32 + "' != '" + ":matchesown(null=&quot;#document&quot;" + "'", str32, ":matchesown(null=&quot;#document&quot;"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;" + "'", str33, "hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;"); org.junit.Assert.assertNotNull(attributes37); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist52); }
public void test249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test249"); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan1 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (byte) 1); java.lang.String str2 = indexGreaterThan1.toString(); org.jsoup.nodes.Document document4 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray9 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9); org.jsoup.nodes.Element element12 = document7.classNames((java.util.Set<java.lang.String>) strSet10); org.jsoup.nodes.Element element13 = document4.appendChild((org.jsoup.nodes.Node) element12); org.jsoup.nodes.Document.QuirksMode quirksMode14 = document4.quirksMode(); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("", "hi!"); java.lang.String str18 = document17.data(); boolean boolean19 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document17); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str26 = document25.val(); java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document25, "#document"); java.lang.String str29 = document25.baseUri(); org.jsoup.nodes.Element element30 = document25.body(); java.lang.String str31 = element30.baseUri(); boolean boolean32 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document21, element30); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray37 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37); org.jsoup.nodes.Element element40 = document35.classNames((java.util.Set<java.lang.String>) strSet38); java.lang.String str41 = document35.nodeName(); org.jsoup.select.Elements elements43 = document35.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document47 = document46.clone(); org.jsoup.nodes.Element element49 = document46.addClass(""); org.jsoup.nodes.Element element50 = document35.appendChild((org.jsoup.nodes.Node) document46); org.jsoup.nodes.Element element52 = document46.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document56 = document55.clone(); org.jsoup.nodes.Element element58 = document55.addClass(""); java.lang.String str59 = document55.toString(); org.jsoup.nodes.Element element61 = document55.text(".#document"); org.jsoup.nodes.Node node62 = element52.after((org.jsoup.nodes.Node) document55); org.jsoup.nodes.Element element64 = element52.prependText("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist67 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str68 = org.jsoup.Jsoup.clean("", "#data", whitelist67); org.jsoup.safety.Cleaner cleaner69 = new org.jsoup.safety.Cleaner(whitelist67); org.jsoup.nodes.Document document73 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str74 = document73.val(); java.util.List<org.jsoup.nodes.Node> nodeList76 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document73, "#document"); java.lang.String str77 = document73.baseUri(); org.jsoup.nodes.Element element79 = document73.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements80 = document73.parents(); org.jsoup.nodes.Document document81 = cleaner69.clean(document73); boolean boolean82 = element64.equals((java.lang.Object) cleaner69); org.jsoup.nodes.Element element83 = element64.clone(); org.jsoup.nodes.Element element84 = document21.prependChild((org.jsoup.nodes.Node) element83); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node86 = document21.before("<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>\n<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":gt(1)" + "'", str2, ":gt(1)"); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertTrue("'" + quirksMode14 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode14.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, ""); org.junit.Assert.assertNotNull(nodeList28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!"); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!"); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "#document" + "'", str41, "#document"); org.junit.Assert.assertNotNull(elements43); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str59, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(node62); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, ""); org.junit.Assert.assertNotNull(document73); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, ""); org.junit.Assert.assertNotNull(nodeList76); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!"); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(elements80); org.junit.Assert.assertNotNull(document81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(element83); org.junit.Assert.assertNotNull(element84); }
public void test250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test250"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes3 = whitelist1.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); boolean boolean9 = org.jsoup.Jsoup.isValid("", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addTags(strArray15); org.jsoup.safety.Whitelist whitelist17 = whitelist1.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray15); java.lang.String str18 = org.jsoup.Jsoup.clean("", whitelist1); org.jsoup.safety.Whitelist whitelist22 = whitelist1.addEnforcedAttribute("#document", "#comment", " "); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean29 = org.jsoup.Jsoup.isValid("#document", whitelist28); java.lang.String str30 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist28); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.basic(); boolean boolean34 = org.jsoup.Jsoup.isValid("hi!", whitelist33); java.lang.String[] strArray42 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist43 = whitelist33.addProtocols(".#document", "#doctype=\"\"", strArray42); org.jsoup.safety.Whitelist whitelist44 = whitelist28.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray42); boolean boolean45 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray42); org.jsoup.safety.Whitelist whitelist46 = whitelist22.addProtocols(".hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", strArray42); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray42); org.junit.Assert.assertNotNull(attributes3); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str30, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertNotNull(whitelist46); }
public void test251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test251"); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings1.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings1.indentAmount((int) '4'); java.nio.charset.Charset charset7 = outputSettings1.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); int int11 = outputSettings10.indentAmount(); java.nio.charset.Charset charset12 = outputSettings10.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings1.charset(charset12); java.nio.charset.Charset[] charsetArray14 = new java.nio.charset.Charset[] { charset12 }; java.util.LinkedList<java.nio.charset.Charset> charsetList15 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList15, charsetArray14); java.nio.charset.Charset charset17 = charsetList15.pop(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.basic(); boolean boolean20 = org.jsoup.Jsoup.isValid("hi!", whitelist19); java.lang.String[] strArray28 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist29 = whitelist19.addProtocols(".#document", "#doctype=\"\"", strArray28); org.jsoup.safety.Cleaner cleaner30 = new org.jsoup.safety.Cleaner(whitelist19); boolean boolean31 = charsetList15.contains((java.lang.Object) whitelist19); org.jsoup.nodes.Attributes attributes33 = whitelist19.getEnforcedAttributes("<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); boolean boolean34 = org.jsoup.Jsoup.isValid("", whitelist19); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertNotNull(charset7); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertNotNull(charset12); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertNotNull(charsetArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(attributes33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); }
public void test252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test252"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist5); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basic(); boolean boolean11 = org.jsoup.Jsoup.isValid("hi!", whitelist10); java.lang.String[] strArray19 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist20 = whitelist10.addProtocols(".#document", "#doctype=\"\"", strArray19); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray19, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray19); org.jsoup.safety.Whitelist whitelist24 = whitelist5.addTags(strArray19); org.jsoup.safety.Whitelist whitelist25 = whitelist0.addTags(strArray19); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean34 = org.jsoup.Jsoup.isValid("#document", whitelist33); java.lang.String str35 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist33); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.basic(); boolean boolean39 = org.jsoup.Jsoup.isValid("hi!", whitelist38); java.lang.String[] strArray47 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist48 = whitelist38.addProtocols(".#document", "#doctype=\"\"", strArray47); org.jsoup.safety.Whitelist whitelist49 = whitelist33.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray47); boolean boolean50 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray47); boolean boolean51 = org.jsoup.helper.StringUtil.in("&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;", strArray47); boolean boolean52 = org.jsoup.helper.StringUtil.in(":matchesOwn(null", strArray47); org.jsoup.safety.Whitelist whitelist53 = whitelist25.addProtocols("#comment", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray47); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str35, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(whitelist53); }
public void test253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test253"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.select.Elements elements10 = document8.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements12 = document8.getElementsByAttribute("#document"); org.jsoup.select.Elements elements15 = document8.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); org.jsoup.select.Evaluator.Id id18 = new org.jsoup.select.Evaluator.Id("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document22 = document21.clone(); org.jsoup.nodes.Element element24 = document21.addClass(""); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray29 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29); org.jsoup.nodes.Element element32 = document27.classNames((java.util.Set<java.lang.String>) strSet30); java.lang.String str33 = document27.nodeName(); org.jsoup.select.Elements elements35 = document27.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document39 = document38.clone(); org.jsoup.nodes.Element element41 = document38.addClass(""); org.jsoup.nodes.Element element42 = document27.appendChild((org.jsoup.nodes.Node) document38); boolean boolean43 = id18.matches(element24, element42); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document47 = document46.clone(); org.jsoup.nodes.Element element49 = document46.addClass(""); java.lang.String str50 = document46.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting52 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document58 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray60 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60); org.jsoup.nodes.Element element63 = document58.classNames((java.util.Set<java.lang.String>) strSet61); document58.title("#document"); boolean boolean66 = attributeStarting52.matches((org.jsoup.nodes.Element) document55, (org.jsoup.nodes.Element) document58); java.lang.String str67 = document55.id(); org.jsoup.select.Elements elements69 = document55.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements71 = document55.getElementsByIndexGreaterThan((int) (short) 10); boolean boolean72 = id18.matches((org.jsoup.nodes.Element) document46, (org.jsoup.nodes.Element) document55); org.jsoup.nodes.Document document75 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray77 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77); org.jsoup.nodes.Element element80 = document75.classNames((java.util.Set<java.lang.String>) strSet78); org.jsoup.nodes.Element element82 = element80.prepend("#document"); org.jsoup.nodes.Document document84 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document87 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray89 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet90 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet90, strArray89); org.jsoup.nodes.Element element92 = document87.classNames((java.util.Set<java.lang.String>) strSet90); org.jsoup.nodes.Element element93 = document84.appendChild((org.jsoup.nodes.Node) element92); org.jsoup.nodes.Document.QuirksMode quirksMode94 = document84.quirksMode(); boolean boolean95 = id18.matches(element80, (org.jsoup.nodes.Element) document84); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element96 = document8.before((org.jsoup.nodes.Node) document84); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "#document" + "'", str33, "#document"); org.junit.Assert.assertNotNull(elements35); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str50, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertNotNull(strArray60); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, ""); org.junit.Assert.assertNotNull(elements69); org.junit.Assert.assertNotNull(elements71); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertNotNull(strArray77); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true); org.junit.Assert.assertNotNull(element80); org.junit.Assert.assertNotNull(element82); org.junit.Assert.assertNotNull(document87); org.junit.Assert.assertNotNull(strArray89); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true); org.junit.Assert.assertNotNull(element92); org.junit.Assert.assertNotNull(element93); org.junit.Assert.assertTrue("'" + quirksMode94 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode94.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false); }
public void test254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test254"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); boolean boolean15 = whitelist3.isSafeTag(""); org.jsoup.safety.Whitelist whitelist17 = whitelist3.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist20 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes22 = whitelist20.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); boolean boolean28 = org.jsoup.Jsoup.isValid("", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addTags(strArray34); org.jsoup.safety.Whitelist whitelist36 = whitelist20.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray34); org.jsoup.safety.Whitelist whitelist37 = whitelist17.addProtocols("#comment", ".:eq(52)", strArray34); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist41 = whitelist39.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner42 = new org.jsoup.safety.Cleaner(whitelist39); org.jsoup.safety.Whitelist whitelist44 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist46 = whitelist44.preserveRelativeLinks(false); boolean boolean47 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist44); org.jsoup.safety.Whitelist whitelist49 = org.jsoup.safety.Whitelist.basic(); boolean boolean50 = org.jsoup.Jsoup.isValid("hi!", whitelist49); java.lang.String[] strArray58 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist59 = whitelist49.addProtocols(".#document", "#doctype=\"\"", strArray58); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray58, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray58); org.jsoup.safety.Whitelist whitelist63 = whitelist44.addTags(strArray58); org.jsoup.safety.Whitelist whitelist64 = whitelist39.addTags(strArray58); org.jsoup.safety.Whitelist whitelist65 = whitelist17.addAttributes("<html>\n <head></head>\n <body></body>\n</html>", strArray58); org.jsoup.safety.Whitelist whitelist69 = whitelist65.addEnforcedAttribute("hi!:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "[:matches(null]", "<html>\n <head></head> \n <body>\n hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>"); java.lang.String str70 = org.jsoup.Jsoup.clean("[hi!:matchesown(null!=class=\" #doctype\"]", "hi! =&quot;&quot;", whitelist69); org.jsoup.safety.Whitelist whitelist75 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean76 = org.jsoup.Jsoup.isValid("#document", whitelist75); java.lang.String str77 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist75); org.jsoup.safety.Whitelist whitelist80 = org.jsoup.safety.Whitelist.basic(); boolean boolean81 = org.jsoup.Jsoup.isValid("hi!", whitelist80); java.lang.String[] strArray89 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist90 = whitelist80.addProtocols(".#document", "#doctype=\"\"", strArray89); org.jsoup.safety.Whitelist whitelist91 = whitelist75.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray89); org.jsoup.safety.Whitelist whitelist92 = whitelist69.addProtocols("<html>\n <head></head>\n <body>\n #document\n </body>\n</html>", "<body></body>body\n<html>\n <head></head> \n <body>\n </body>\n</html>", strArray89); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[hi!:matchesown(null!=class=&quot; #doctype&quot;]" + "'", str70, "[hi!:matchesown(null!=class=&quot; #doctype&quot;]"); org.junit.Assert.assertNotNull(whitelist75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str77, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true); org.junit.Assert.assertNotNull(strArray89); org.junit.Assert.assertNotNull(whitelist90); org.junit.Assert.assertNotNull(whitelist91); org.junit.Assert.assertNotNull(whitelist92); }
public void test255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test255"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); int int11 = document7.siblingIndex(); org.jsoup.nodes.Element element13 = document7.text("#[text=\"\"$=hi!  public &quot;#data&quot; &quot;#doctype&quot;&gt;]"); java.lang.String str14 = element13.nodeName(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#document" + "'", str14, "#document"); }
public void test256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test256"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist4.addTags(strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist1.addTags(strArray16); boolean boolean20 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist19); org.jsoup.nodes.Attributes attributes22 = whitelist19.getEnforcedAttributes("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"[hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;!=.:eq(52)]\""); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.basic(); boolean boolean27 = org.jsoup.Jsoup.isValid("hi!", whitelist26); java.lang.String[] strArray35 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist36 = whitelist26.addProtocols(".#document", "#doctype=\"\"", strArray35); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray35); org.jsoup.safety.Whitelist whitelist38 = whitelist19.addProtocols("UTF-8UTF-8", "#doctype=\"\"", strArray35); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); }
public void test257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test257"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist5.addTags(strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); boolean boolean21 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist20); org.jsoup.safety.Whitelist whitelist25 = whitelist20.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist27 = whitelist20.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist34 = whitelist32.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.basic(); boolean boolean38 = org.jsoup.Jsoup.isValid("hi!", whitelist37); java.lang.String[] strArray46 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist47 = whitelist37.addProtocols(".#document", "#doctype=\"\"", strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist34.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray46); org.jsoup.safety.Whitelist whitelist49 = whitelist30.addAttributes(":containsOwn(hi!:matchesown(null", strArray46); boolean boolean50 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray46); org.jsoup.safety.Whitelist whitelist51 = whitelist27.addAttributes(":containsOwn(hi!:matchesown(null", strArray46); java.lang.String str52 = org.jsoup.Jsoup.clean(":containsOwn(hi!:matchesown(null", whitelist27); boolean boolean54 = whitelist27.isSafeTag("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">"); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist58 = whitelist27.addEnforcedAttribute("<html>\n <head></head>\n <body></body>\n</html>", "", "<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + ":containsOwn(hi!:matchesown(null" + "'", str52, ":containsOwn(hi!:matchesown(null"); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); }
public void test258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test258"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("<html>\n <head></head>\n <body>\n [#document^=  hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;\n </body>\n</html>"); org.jsoup.nodes.Document document3 = new org.jsoup.nodes.Document(".#document"); org.jsoup.nodes.Document document4 = document3.clone(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner8 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); java.lang.String str17 = document11.nodeName(); java.lang.String str18 = document11.html(); boolean boolean19 = cleaner8.isValid(document11); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element22 = document21.body(); java.lang.String str23 = document21.toString(); org.jsoup.nodes.Document document24 = cleaner8.clean(document21); java.lang.String str25 = document21.nodeName(); java.lang.String str26 = document21.toString(); boolean boolean27 = containsOwnText1.matches((org.jsoup.nodes.Element) document3, (org.jsoup.nodes.Element) document21); java.lang.String str28 = containsOwnText1.toString(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#document" + "'", str17, "#document"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str23, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "#document" + "'", str25, "#document"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str26, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertEquals("'" + str28 + "' != '" + ":containsOwn(<html>\n <head></head>\n <body>\n [#document^=  hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;\n </body>\n</html>" + "'", str28, ":containsOwn(<html>\n <head></head>\n <body>\n [#document^=  hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;\n </body>\n</html>"); }
public void test259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test259"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); java.lang.String str4 = attributes0.get("\n#document"); org.jsoup.nodes.Attributes attributes5 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes6 = attributes5.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator7 = attributes5.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap8 = attributes5.dataset(); attributes0.addAll(attributes5); java.lang.String str10 = attributes0.toString(); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner14 = new org.jsoup.safety.Cleaner(whitelist11); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document18 = document17.clone(); org.jsoup.nodes.Node node20 = document18.removeAttr("#doctype"); org.jsoup.nodes.Document document21 = cleaner14.clean(document18); boolean boolean22 = attributes0.equals((java.lang.Object) document18); java.util.Map<java.lang.String, java.lang.String> strMap23 = attributes0.dataset(); java.util.List<org.jsoup.nodes.Attribute> attributeList24 = attributes0.asList(); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(attributeSpliterator7); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(node20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(strMap23); org.junit.Assert.assertNotNull(attributeList24); }
public void test260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test260"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Attributes attributes7 = whitelist2.getEnforcedAttributes(""); java.lang.String str8 = org.jsoup.Jsoup.clean("[[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]!=.#document]", whitelist2); org.jsoup.safety.Whitelist whitelist9 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes11 = whitelist9.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); boolean boolean17 = org.jsoup.Jsoup.isValid("", whitelist14); java.lang.String[] strArray23 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist24 = whitelist14.addTags(strArray23); org.jsoup.safety.Whitelist whitelist25 = whitelist9.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray23); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray23, ""); org.jsoup.safety.Whitelist whitelist28 = whitelist2.addTags(strArray23); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist35 = whitelist33.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.basic(); boolean boolean39 = org.jsoup.Jsoup.isValid("hi!", whitelist38); java.lang.String[] strArray47 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist48 = whitelist38.addProtocols(".#document", "#doctype=\"\"", strArray47); org.jsoup.safety.Whitelist whitelist49 = whitelist35.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray47); org.jsoup.safety.Whitelist whitelist50 = whitelist31.addAttributes(":containsOwn(hi!:matchesown(null", strArray47); boolean boolean51 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray47); boolean boolean52 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>#document", strArray47); org.jsoup.safety.Whitelist whitelist53 = whitelist2.addTags(strArray47); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray47); boolean boolean55 = org.jsoup.helper.StringUtil.in("#&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n&lt;/html&gt;", strArray47); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[[#document^=  hi! ]!=.#document]" + "'", str8, "[[#document^=  hi! ]!=.#document]"); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); }
public void test261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test261"); org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode(":eq(52)", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Node node5 = textNode2.attr(".#document", "hi!:matchesOwn(null"); org.jsoup.nodes.Node node7 = textNode2.removeAttr(":lt(10)"); org.jsoup.nodes.Attributes attributes8 = textNode2.attributes(); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str12 = org.jsoup.Jsoup.clean("", "#data", whitelist11); org.jsoup.safety.Cleaner cleaner13 = new org.jsoup.safety.Cleaner(whitelist11); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText15 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str23 = document22.val(); java.util.List<org.jsoup.nodes.Node> nodeList25 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document22, "#document"); java.lang.String str26 = document22.baseUri(); org.jsoup.nodes.Element element28 = document22.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str29 = document22.nodeName(); boolean boolean30 = containsOwnText15.matches((org.jsoup.nodes.Element) document18, (org.jsoup.nodes.Element) document22); org.jsoup.select.Elements elements32 = document22.getElementsContainingOwnText("hi!<html> <head></head> <body> hi! </body> </html>"); java.lang.String str34 = document22.attr("[^hi!]"); org.jsoup.nodes.Document document35 = cleaner13.clean(document22); boolean boolean36 = textNode2.equals((java.lang.Object) document35); org.junit.Assert.assertNotNull(node5); org.junit.Assert.assertNotNull(node7); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(nodeList25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!"); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "#document" + "'", str29, "#document"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(elements32); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); }
public void test262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test262"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching(":gt(-1)", pattern1); org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse(".#document", ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element7 = document5.prepend("utf-8utf-8=\"#data\""); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.select.Elements elements12 = document10.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean13 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document5, (org.jsoup.nodes.Element) document10); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document17 = document16.clone(); org.jsoup.nodes.Document.QuirksMode quirksMode18 = document16.quirksMode(); org.jsoup.nodes.Document document19 = document10.quirksMode(quirksMode18); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner23 = new org.jsoup.safety.Cleaner(whitelist20); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray28 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28); org.jsoup.nodes.Element element31 = document26.classNames((java.util.Set<java.lang.String>) strSet29); java.lang.String str32 = document26.nodeName(); java.lang.String str33 = document26.html(); boolean boolean34 = cleaner23.isValid(document26); org.jsoup.nodes.Document document36 = org.jsoup.nodes.Document.createShell("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document.QuirksMode quirksMode37 = document36.quirksMode(); org.jsoup.nodes.Document document38 = document26.quirksMode(quirksMode37); org.jsoup.nodes.Document document39 = document10.quirksMode(quirksMode37); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertTrue("'" + quirksMode18 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode18.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "#document" + "'", str32, "#document"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str33, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertTrue("'" + quirksMode37 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode37.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(document39); }
public void test263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test263"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean18 = cleaner3.isValid(document17); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Element element23 = document21.prependText("#document"); org.jsoup.select.Elements elements25 = document21.getElementsMatchingText(""); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str33 = document32.val(); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document32, "#document"); org.jsoup.nodes.Document.QuirksMode quirksMode36 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document37 = document32.quirksMode(quirksMode36); org.jsoup.nodes.Document document38 = document28.quirksMode(quirksMode36); org.jsoup.nodes.Document document39 = document21.quirksMode(quirksMode36); org.jsoup.nodes.Document document40 = cleaner3.clean(document21); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(elements25); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertTrue("'" + quirksMode36 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode36.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(document40); }
public void test264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test264"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist5); java.lang.String str9 = org.jsoup.Jsoup.clean(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist5); java.lang.String str10 = org.jsoup.Jsoup.clean("", whitelist5); java.lang.String str11 = org.jsoup.Jsoup.clean("#&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n&lt;/html&gt;", "[:matches(null]", whitelist5); org.jsoup.nodes.Attributes attributes13 = whitelist5.getEnforcedAttributes("##<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi! =&quot;&quot;" + "'", str9, "hi! =&quot;&quot;"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;" + "'", str11, "#&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;"); org.junit.Assert.assertNotNull(attributes13); }
public void test265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test265"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basic(); boolean boolean6 = org.jsoup.Jsoup.isValid("hi!", whitelist5); java.lang.String[] strArray14 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist15 = whitelist5.addProtocols(".#document", "#doctype=\"\"", strArray14); org.jsoup.safety.Whitelist whitelist16 = whitelist2.addTags(strArray14); boolean boolean18 = whitelist16.isSafeTag("<html>\n <head>\n <title>#document</title>\n </head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist20 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes22 = whitelist20.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); boolean boolean28 = org.jsoup.Jsoup.isValid("", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addTags(strArray34); org.jsoup.safety.Whitelist whitelist36 = whitelist20.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray34); boolean boolean37 = org.jsoup.helper.StringUtil.in("#data", strArray34); org.jsoup.safety.Whitelist whitelist38 = whitelist16.addTags(strArray34); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(whitelist38); }
public void test266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test266"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings4.prettyPrint(false); java.nio.charset.Charset charset7 = outputSettings4.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings4.indentAmount((int) '4'); java.nio.charset.Charset charset10 = outputSettings4.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.prettyPrint(false); int int14 = outputSettings13.indentAmount(); java.nio.charset.Charset charset15 = outputSettings13.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings4.charset(charset15); java.nio.charset.Charset[] charsetArray17 = new java.nio.charset.Charset[] { charset15 }; java.util.LinkedList<java.nio.charset.Charset> charsetList18 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList18, charsetArray17); java.nio.charset.Charset charset20 = charsetList18.pop(); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basic(); boolean boolean23 = org.jsoup.Jsoup.isValid("hi!", whitelist22); java.lang.String[] strArray31 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist32 = whitelist22.addProtocols(".#document", "#doctype=\"\"", strArray31); org.jsoup.safety.Cleaner cleaner33 = new org.jsoup.safety.Cleaner(whitelist22); boolean boolean34 = charsetList18.contains((java.lang.Object) whitelist22); boolean boolean35 = org.jsoup.Jsoup.isValid(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist22); boolean boolean36 = attributes0.equals((java.lang.Object) whitelist22); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean42 = org.jsoup.Jsoup.isValid("#document", whitelist41); java.lang.String str43 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist41); org.jsoup.safety.Whitelist whitelist46 = org.jsoup.safety.Whitelist.basic(); boolean boolean47 = org.jsoup.Jsoup.isValid("hi!", whitelist46); java.lang.String[] strArray55 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist56 = whitelist46.addProtocols(".#document", "#doctype=\"\"", strArray55); org.jsoup.safety.Whitelist whitelist57 = whitelist41.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray55); org.jsoup.safety.Whitelist whitelist58 = whitelist22.addProtocols("<html>\n <head></head>\n <body>\n hi!:matchesOwn(null\n </body>\n</html>", "#\n#document", strArray55); org.jsoup.safety.Whitelist whitelist62 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes64 = whitelist62.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist67 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist69 = whitelist67.preserveRelativeLinks(false); boolean boolean70 = org.jsoup.Jsoup.isValid("", whitelist67); java.lang.String[] strArray76 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist77 = whitelist67.addTags(strArray76); org.jsoup.safety.Whitelist whitelist78 = whitelist62.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray76); boolean boolean79 = org.jsoup.helper.StringUtil.in("", strArray76); org.jsoup.safety.Whitelist whitelist80 = whitelist22.addProtocols("[#document^= hi! ]", "[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"^=hi! hi! #comment]", strArray76); org.jsoup.safety.Whitelist whitelist84 = whitelist22.addEnforcedAttribute(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\".#document\"", "<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", ":contains(<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertNotNull(charset7); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(outputSettings16); org.junit.Assert.assertNotNull(charsetArray17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(charset20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str43, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertNotNull(strArray55); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertNotNull(attributes64); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true); org.junit.Assert.assertNotNull(strArray76); org.junit.Assert.assertNotNull(whitelist77); org.junit.Assert.assertNotNull(whitelist78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertNotNull(whitelist80); org.junit.Assert.assertNotNull(whitelist84); }
public void test267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test267"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); document7.setBaseUri("[^:containsOwn(hi!]"); org.jsoup.select.Elements elements15 = document7.getElementsByAttributeValue("##<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "#root"); org.jsoup.nodes.Document.OutputSettings outputSettings16 = document7.outputSettings(); java.lang.String str17 = document7.baseUri(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = document7.outputSettings(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(outputSettings16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[^:containsOwn(hi!]" + "'", str17, "[^:containsOwn(hi!]"); org.junit.Assert.assertNotNull(outputSettings18); }
public void test268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test268"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText2 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist3); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray11 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11); org.jsoup.nodes.Element element14 = document9.classNames((java.util.Set<java.lang.String>) strSet12); java.lang.String str15 = document9.nodeName(); java.lang.String str16 = document9.html(); boolean boolean17 = cleaner6.isValid(document9); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element20 = document19.body(); java.lang.String str21 = document19.toString(); org.jsoup.nodes.Document document22 = cleaner6.clean(document19); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Element element28 = document25.addClass(""); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str33 = document32.val(); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document32, "#document"); java.lang.String str36 = document32.baseUri(); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str40 = document39.val(); org.jsoup.nodes.Element element42 = document39.append("#document"); org.jsoup.nodes.Element element43 = document32.appendChild((org.jsoup.nodes.Node) element42); org.jsoup.nodes.Element element44 = document25.prependChild((org.jsoup.nodes.Node) document32); org.jsoup.nodes.Attributes attributes45 = element44.attributes(); java.lang.String str46 = element44.baseUri(); java.lang.String str47 = element44.text(); org.jsoup.nodes.Element element49 = element44.toggleClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean50 = containsOwnText2.matches((org.jsoup.nodes.Element) document22, element44); org.jsoup.nodes.Element element51 = document22.clone(); java.util.List<org.jsoup.nodes.Node> nodeList53 = org.jsoup.parser.Parser.parseFragment(":matches(null", (org.jsoup.nodes.Element) document22, ""); java.lang.String str54 = document22.id(); org.jsoup.nodes.Element element56 = document22.createElement("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">"); org.jsoup.nodes.TextNode textNode59 = new org.jsoup.nodes.TextNode("", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str60 = textNode59.toString(); org.jsoup.nodes.Attributes attributes61 = textNode59.attributes(); boolean boolean63 = textNode59.hasAttr("hi!:matchesOwn(null"); org.jsoup.nodes.TextNode textNode65 = textNode59.text("<html>\n <head></head>\n <body>\n [^:containsOwn(hi!]\n </body>\n</html>"); org.jsoup.nodes.TextNode textNode67 = textNode65.text(":eq(-1)"); java.lang.String str68 = textNode67.text(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node69 = element56.after((org.jsoup.nodes.Node) textNode67); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#document" + "'", str15, "#document"); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str16, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str21, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!"); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(attributes45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#document" + "'", str46, "#document"); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi! hi!#document hi!" + "'", str47, "hi! hi!#document hi!"); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(nodeList53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, ""); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNotNull(attributes61); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(textNode65); org.junit.Assert.assertNotNull(textNode67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + ":eq(-1)" + "'", str68, ":eq(-1)"); }
public void test269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test269"); org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText3 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Node node13 = document11.removeAttr("#doctype"); org.jsoup.nodes.Document document14 = cleaner7.clean(document11); org.jsoup.nodes.Attributes attributes15 = document14.attributes(); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner19 = new org.jsoup.safety.Cleaner(whitelist16); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Node node25 = document23.removeAttr("#doctype"); org.jsoup.nodes.Document document26 = cleaner19.clean(document23); org.jsoup.nodes.Attributes attributes27 = document26.attributes(); boolean boolean28 = containsOwnText3.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document26); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str33 = document32.val(); java.util.List<org.jsoup.nodes.Node> nodeList35 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document32, "#document"); java.lang.String str36 = document32.baseUri(); org.jsoup.nodes.Element element38 = document32.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document.OutputSettings outputSettings39 = document32.outputSettings(); org.jsoup.nodes.Document.QuirksMode quirksMode40 = null; org.jsoup.nodes.Document document41 = document32.quirksMode(quirksMode40); boolean boolean42 = indexEquals1.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document41); java.lang.String str43 = document41.title(); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(node25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(nodeList35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!"); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, ""); }
public void test270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test270"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); java.nio.charset.Charset[] charsetArray4 = new java.nio.charset.Charset[] { charset3 }; java.util.LinkedList<java.nio.charset.Charset> charsetList5 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList5, charsetArray4); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); java.nio.charset.Charset charset10 = outputSettings7.charset(); boolean boolean11 = charsetList5.add(charset10); java.lang.Object obj12 = null; boolean boolean13 = charsetList5.removeLastOccurrence(obj12); java.nio.charset.Charset charset14 = charsetList5.pollFirst(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList15 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.prettyPrint(false); java.nio.charset.Charset charset19 = outputSettings18.charset(); charsetList15.addFirst(charset19); java.util.Iterator<java.nio.charset.Charset> charsetItor21 = charsetList15.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList22 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.prettyPrint(false); java.nio.charset.Charset charset26 = outputSettings25.charset(); charsetList22.addFirst(charset26); boolean boolean28 = charsetList15.offerFirst(charset26); int int29 = charsetList15.size(); java.nio.charset.Charset charset30 = charsetList15.peekLast(); charsetList5.addFirst(charset30); java.nio.charset.Charset charset32 = charsetList5.poll(); java.nio.charset.Charset charset33 = charsetList5.removeFirst(); java.nio.charset.Charset charset34 = charsetList5.pollFirst(); java.nio.charset.Charset charset35 = charsetList5.peek(); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist43 = org.jsoup.safety.Whitelist.basic(); boolean boolean44 = org.jsoup.Jsoup.isValid("hi!", whitelist43); java.lang.String[] strArray52 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist53 = whitelist43.addProtocols(".#document", "#doctype=\"\"", strArray52); org.jsoup.safety.Whitelist whitelist54 = whitelist40.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray52); org.jsoup.safety.Whitelist whitelist55 = whitelist36.addAttributes(":containsOwn(hi!:matchesown(null", strArray52); java.lang.String[] strArray56 = charsetList5.toArray(strArray52); // The following exception was thrown during execution in test generation try { org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray56, "[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: [  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(charsetArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(charset14); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charset19); org.junit.Assert.assertNotNull(charsetItor21); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(charset26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2); org.junit.Assert.assertNotNull(charset30); org.junit.Assert.assertNotNull(charset32); org.junit.Assert.assertNotNull(charset33); org.junit.Assert.assertNull(charset34); org.junit.Assert.assertNull(charset35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(strArray52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(strArray56); }
public void test271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test271"); org.jsoup.select.Evaluator.Class class1 = new org.jsoup.select.Evaluator.Class(""); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText3 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Node node13 = document11.removeAttr("#doctype"); org.jsoup.nodes.Document document14 = cleaner7.clean(document11); org.jsoup.nodes.Attributes attributes15 = document14.attributes(); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner19 = new org.jsoup.safety.Cleaner(whitelist16); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Node node25 = document23.removeAttr("#doctype"); org.jsoup.nodes.Document document26 = cleaner19.clean(document23); org.jsoup.nodes.Attributes attributes27 = document26.attributes(); boolean boolean28 = containsOwnText3.matches((org.jsoup.nodes.Element) document14, (org.jsoup.nodes.Element) document26); org.jsoup.nodes.Document document30 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element32 = document30.createElement("#document"); org.jsoup.nodes.Document document33 = document30.clone(); org.jsoup.select.Elements elements36 = document33.getElementsByAttributeValueMatching("hi!", "\n#document"); boolean boolean37 = document14.equals((java.lang.Object) document33); org.jsoup.nodes.Element element39 = document14.createElement("hi!:matchesOwn(null"); org.jsoup.select.Evaluator.Id id41 = new org.jsoup.select.Evaluator.Id("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document45 = document44.clone(); org.jsoup.nodes.Element element47 = document44.addClass(""); org.jsoup.nodes.Document document50 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray52 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52); org.jsoup.nodes.Element element55 = document50.classNames((java.util.Set<java.lang.String>) strSet53); java.lang.String str56 = document50.nodeName(); org.jsoup.select.Elements elements58 = document50.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document61 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document62 = document61.clone(); org.jsoup.nodes.Element element64 = document61.addClass(""); org.jsoup.nodes.Element element65 = document50.appendChild((org.jsoup.nodes.Node) document61); boolean boolean66 = id41.matches(element47, element65); org.jsoup.nodes.Document document70 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str71 = document70.val(); java.util.List<org.jsoup.nodes.Node> nodeList73 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document70, "#document"); java.lang.String str74 = document70.baseUri(); org.jsoup.nodes.Element element76 = document70.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document79 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray81 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81); org.jsoup.nodes.Element element84 = document79.classNames((java.util.Set<java.lang.String>) strSet82); org.jsoup.nodes.Element element86 = element84.prepend("#document"); org.jsoup.nodes.Node node88 = element84.childNode(0); boolean boolean89 = document70.equals((java.lang.Object) node88); org.jsoup.nodes.Document document91 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode92 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document93 = document91.quirksMode(quirksMode92); boolean boolean94 = id41.matches((org.jsoup.nodes.Element) document70, (org.jsoup.nodes.Element) document93); java.lang.String str95 = document93.outerHtml(); boolean boolean96 = class1.matches(element39, (org.jsoup.nodes.Element) document93); // The following exception was thrown during execution in test generation try { element39.remove(); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(node25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(attributes27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(strArray52); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "#document" + "'", str56, "#document"); org.junit.Assert.assertNotNull(elements58); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, ""); org.junit.Assert.assertNotNull(nodeList73); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!"); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertNotNull(strArray81); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertNotNull(element86); org.junit.Assert.assertNotNull(node88); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false); org.junit.Assert.assertNotNull(document91); org.junit.Assert.assertTrue("'" + quirksMode92 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode92.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document93); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); org.junit.Assert.assertEquals("'" + str95 + "' != '" + "<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>" + "'", str95, "<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true); }
public void test272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test272"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); java.lang.String str4 = attributes0.get("\n#document"); org.jsoup.nodes.Attributes attributes5 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes6 = attributes5.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator7 = attributes5.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap8 = attributes5.dataset(); attributes0.addAll(attributes5); java.lang.String str10 = attributes0.toString(); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner14 = new org.jsoup.safety.Cleaner(whitelist11); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document18 = document17.clone(); org.jsoup.nodes.Node node20 = document18.removeAttr("#doctype"); org.jsoup.nodes.Document document21 = cleaner14.clean(document18); boolean boolean22 = attributes0.equals((java.lang.Object) document18); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator23 = attributes0.spliterator(); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(attributeSpliterator7); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(node20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(attributeSpliterator23); }
public void test273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test273"); org.jsoup.safety.Whitelist whitelist2 = new org.jsoup.safety.Whitelist(); boolean boolean4 = whitelist2.isSafeTag("#root"); java.lang.String str5 = org.jsoup.Jsoup.clean("UTF-8bodyUTF-8", "", whitelist2); org.jsoup.nodes.Attributes attributes6 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes7 = attributes6.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator8 = attributes6.spliterator(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.prettyPrint(false); java.nio.charset.Charset charset13 = outputSettings10.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.indentAmount((int) '4'); java.nio.charset.Charset charset16 = outputSettings10.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.prettyPrint(false); int int20 = outputSettings19.indentAmount(); java.nio.charset.Charset charset21 = outputSettings19.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings10.charset(charset21); java.nio.charset.Charset[] charsetArray23 = new java.nio.charset.Charset[] { charset21 }; java.util.LinkedList<java.nio.charset.Charset> charsetList24 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList24, charsetArray23); java.nio.charset.Charset charset26 = charsetList24.pop(); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.basic(); boolean boolean29 = org.jsoup.Jsoup.isValid("hi!", whitelist28); java.lang.String[] strArray37 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist38 = whitelist28.addProtocols(".#document", "#doctype=\"\"", strArray37); org.jsoup.safety.Cleaner cleaner39 = new org.jsoup.safety.Cleaner(whitelist28); boolean boolean40 = charsetList24.contains((java.lang.Object) whitelist28); boolean boolean41 = org.jsoup.Jsoup.isValid(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist28); boolean boolean42 = attributes6.equals((java.lang.Object) whitelist28); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean48 = org.jsoup.Jsoup.isValid("#document", whitelist47); java.lang.String str49 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist47); org.jsoup.safety.Whitelist whitelist52 = org.jsoup.safety.Whitelist.basic(); boolean boolean53 = org.jsoup.Jsoup.isValid("hi!", whitelist52); java.lang.String[] strArray61 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist62 = whitelist52.addProtocols(".#document", "#doctype=\"\"", strArray61); org.jsoup.safety.Whitelist whitelist63 = whitelist47.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray61); org.jsoup.safety.Whitelist whitelist64 = whitelist28.addProtocols("<html>\n <head></head>\n <body>\n hi!:matchesOwn(null\n </body>\n</html>", "#\n#document", strArray61); org.jsoup.safety.Whitelist whitelist65 = whitelist2.addTags(strArray61); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTF-8bodyUTF-8" + "'", str5, "UTF-8bodyUTF-8"); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertNotNull(attributeSpliterator8); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charset13); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1); org.junit.Assert.assertNotNull(charset21); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charsetArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(charset26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str49, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist65); }
public void test274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test274"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str9 = document8.val(); java.util.List<org.jsoup.nodes.Node> nodeList11 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document8, "#document"); java.lang.String str12 = document8.baseUri(); org.jsoup.nodes.Element element14 = document8.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements15 = document8.parents(); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); org.jsoup.nodes.Document.OutputSettings outputSettings17 = document16.outputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.prettyPrint(false); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(nodeList11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(outputSettings19); }
public void test275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test275"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); org.jsoup.nodes.Attributes attributes39 = whitelist1.getEnforcedAttributes("[#document^=#doctype]"); java.util.Map<java.lang.String, java.lang.String> strMap40 = attributes39.dataset(); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(attributes39); org.junit.Assert.assertNotNull(strMap40); }
public void test276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test276"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str4 = org.jsoup.Jsoup.clean("", "#data", whitelist3); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basic(); boolean boolean7 = org.jsoup.Jsoup.isValid("hi!", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addProtocols(".#document", "#doctype=\"\"", strArray15); org.jsoup.safety.Whitelist whitelist17 = whitelist3.addTags(strArray15); org.jsoup.safety.Whitelist whitelist18 = whitelist0.addTags(strArray15); org.jsoup.safety.Whitelist whitelist22 = whitelist0.addEnforcedAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "[#document^=#doctype]", ".hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); java.lang.String str28 = org.jsoup.Jsoup.clean(".#document", whitelist27); org.jsoup.safety.Whitelist whitelist32 = whitelist27.addEnforcedAttribute("\n<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->", ":matchesown(null=\"#document\"", "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str37 = org.jsoup.Jsoup.clean("", "#data", whitelist36); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.basic(); boolean boolean40 = org.jsoup.Jsoup.isValid("hi!", whitelist39); java.lang.String[] strArray48 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist49 = whitelist39.addProtocols(".#document", "#doctype=\"\"", strArray48); org.jsoup.safety.Whitelist whitelist50 = whitelist36.addTags(strArray48); org.jsoup.safety.Whitelist whitelist51 = whitelist33.addTags(strArray48); org.jsoup.safety.Whitelist whitelist52 = whitelist32.addTags(strArray48); org.jsoup.safety.Whitelist whitelist53 = whitelist0.addAttributes("hi! hi!#document", strArray48); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + ".#document" + "'", str28, ".#document"); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, ""); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist53); }
public void test277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test277"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Attributes attributes5 = whitelist0.getEnforcedAttributes(""); boolean boolean7 = attributes5.equals((java.lang.Object) (byte) -1); int int8 = attributes5.size(); org.jsoup.nodes.Attributes attributes9 = attributes5.clone(); attributes9.put("UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"UTF-8", ":gt(6)"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(attributes9); }
public void test278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test278"); org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str1 = allElements0.toString(); java.lang.String str2 = allElements0.toString(); java.lang.String str3 = allElements0.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Element element11 = document8.addClass(""); org.jsoup.nodes.Document document13 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element15 = document13.createElement("#document"); boolean boolean16 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document13); org.jsoup.nodes.Element element18 = document13.toggleClass("#doctype"); org.jsoup.select.Elements elements20 = element18.getElementsMatchingOwnText("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str24 = org.jsoup.Jsoup.clean("", "#data", whitelist23); org.jsoup.safety.Cleaner cleaner25 = new org.jsoup.safety.Cleaner(whitelist23); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText27 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner31 = new org.jsoup.safety.Cleaner(whitelist28); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document35 = document34.clone(); org.jsoup.nodes.Node node37 = document35.removeAttr("#doctype"); org.jsoup.nodes.Document document38 = cleaner31.clean(document35); org.jsoup.nodes.Attributes attributes39 = document38.attributes(); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document47 = document46.clone(); org.jsoup.nodes.Node node49 = document47.removeAttr("#doctype"); org.jsoup.nodes.Document document50 = cleaner43.clean(document47); org.jsoup.nodes.Attributes attributes51 = document50.attributes(); boolean boolean52 = containsOwnText27.matches((org.jsoup.nodes.Element) document38, (org.jsoup.nodes.Element) document50); boolean boolean53 = cleaner25.isValid(document38); boolean boolean54 = allElements0.matches(element18, (org.jsoup.nodes.Element) document38); org.jsoup.select.Evaluator.ContainsText containsText56 = new org.jsoup.select.Evaluator.ContainsText("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Element element57 = null; org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting60 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document63 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray65 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65); org.jsoup.nodes.Element element68 = document63.classNames((java.util.Set<java.lang.String>) strSet66); java.lang.String str69 = document63.nodeName(); org.jsoup.select.Elements elements71 = document63.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document74 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document75 = document74.clone(); org.jsoup.nodes.Element element77 = document74.addClass(""); org.jsoup.nodes.Element element78 = document63.appendChild((org.jsoup.nodes.Node) document74); org.jsoup.nodes.Document document81 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str82 = document81.val(); org.jsoup.nodes.Element element84 = document81.append("#document"); boolean boolean85 = attributeWithValueStarting60.matches((org.jsoup.nodes.Element) document63, element84); java.util.regex.Pattern pattern87 = null; org.jsoup.select.Elements elements88 = document63.getElementsByAttributeValueMatching("[^hi!]", pattern87); org.jsoup.nodes.Element element90 = document63.prependText("[hi!=:eq(52)]"); boolean boolean91 = containsText56.matches(element57, element90); org.jsoup.nodes.Document document93 = org.jsoup.nodes.Document.createShell("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean94 = allElements0.matches(element57, (org.jsoup.nodes.Element) document93); java.lang.String str95 = allElements0.toString(); java.lang.String str96 = allElements0.toString(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "*" + "'", str1, "*"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "*" + "'", str2, "*"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "*" + "'", str3, "*"); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(node37); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(attributes39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(node49); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(attributes51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertNotNull(strArray65); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertEquals("'" + str69 + "' != '" + "#document" + "'", str69, "#document"); org.junit.Assert.assertNotNull(elements71); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertNotNull(element77); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertNotNull(document81); org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, ""); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertNotNull(elements88); org.junit.Assert.assertNotNull(element90); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false); org.junit.Assert.assertNotNull(document93); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true); org.junit.Assert.assertEquals("'" + str95 + "' != '" + "*" + "'", str95, "*"); org.junit.Assert.assertEquals("'" + str96 + "' != '" + "*" + "'", str96, "*"); }
public void test279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test279"); org.jsoup.select.Evaluator.AttributeWithValue attributeWithValue2 = new org.jsoup.select.Evaluator.AttributeWithValue("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":matchesOwn(null"); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document6 = document5.clone(); org.jsoup.nodes.Element element8 = document5.addClass(""); java.lang.String str9 = document5.toString(); org.jsoup.nodes.Element element11 = document5.text(".#document"); org.jsoup.select.Elements elements13 = document5.getElementsByClass("#document"); org.jsoup.select.Evaluator.Class class15 = new org.jsoup.select.Evaluator.Class(":matchesOwn(null"); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray20 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20); org.jsoup.nodes.Element element23 = document18.classNames((java.util.Set<java.lang.String>) strSet21); org.jsoup.nodes.Element element25 = element23.prepend("#document"); org.jsoup.nodes.Element element27 = element23.toggleClass("#doctype=\"\""); boolean boolean29 = element23.hasClass(":eq(52)"); java.lang.String str31 = element23.attr(":eq(52)"); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("hi!<html> <head></head> <body> hi! </body> </html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); java.lang.String str35 = document34.val(); boolean boolean36 = class15.matches(element23, (org.jsoup.nodes.Element) document34); boolean boolean37 = attributeWithValue2.matches((org.jsoup.nodes.Element) document5, (org.jsoup.nodes.Element) document34); org.jsoup.nodes.Element element38 = null; org.jsoup.select.Evaluator.AttributeStarting attributeStarting40 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray48 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48); org.jsoup.nodes.Element element51 = document46.classNames((java.util.Set<java.lang.String>) strSet49); document46.title("#document"); boolean boolean54 = attributeStarting40.matches((org.jsoup.nodes.Element) document43, (org.jsoup.nodes.Element) document46); org.jsoup.nodes.Element element56 = document46.html(""); java.lang.String str58 = document46.absUrl("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element60 = document46.createElement("#doctype"); org.jsoup.parser.Tag tag61 = element60.tag(); boolean boolean62 = attributeWithValue2.matches(element38, element60); org.jsoup.nodes.Element element63 = null; org.jsoup.safety.Whitelist whitelist64 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist66 = whitelist64.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner67 = new org.jsoup.safety.Cleaner(whitelist64); org.jsoup.nodes.Document document70 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray72 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72); org.jsoup.nodes.Element element75 = document70.classNames((java.util.Set<java.lang.String>) strSet73); java.lang.String str76 = document70.nodeName(); java.lang.String str77 = document70.html(); boolean boolean78 = cleaner67.isValid(document70); org.jsoup.nodes.Document document80 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element81 = document80.body(); java.lang.String str82 = document80.toString(); org.jsoup.nodes.Document document83 = cleaner67.clean(document80); java.lang.String str84 = document80.id(); boolean boolean85 = attributeWithValue2.matches(element63, (org.jsoup.nodes.Element) document80); // The following exception was thrown during execution in test generation try { document80.remove(); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str9, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, ""); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertNotNull(tag61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(strArray72); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true); org.junit.Assert.assertNotNull(element75); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "#document" + "'", str76, "#document"); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str77, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true); org.junit.Assert.assertNotNull(document80); org.junit.Assert.assertNotNull(element81); org.junit.Assert.assertEquals("'" + str82 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str82, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document83); org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, ""); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); }
public void test280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test280"); org.jsoup.select.Evaluator.AttributeWithValue attributeWithValue2 = new org.jsoup.select.Evaluator.AttributeWithValue("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":matchesOwn(null"); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document6 = document5.clone(); org.jsoup.nodes.Element element8 = document5.addClass(""); java.lang.String str9 = document5.toString(); org.jsoup.nodes.Element element11 = document5.text(".#document"); org.jsoup.select.Elements elements13 = document5.getElementsByClass("#document"); org.jsoup.select.Evaluator.Class class15 = new org.jsoup.select.Evaluator.Class(":matchesOwn(null"); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray20 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20); org.jsoup.nodes.Element element23 = document18.classNames((java.util.Set<java.lang.String>) strSet21); org.jsoup.nodes.Element element25 = element23.prepend("#document"); org.jsoup.nodes.Element element27 = element23.toggleClass("#doctype=\"\""); boolean boolean29 = element23.hasClass(":eq(52)"); java.lang.String str31 = element23.attr(":eq(52)"); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("hi!<html> <head></head> <body> hi! </body> </html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); java.lang.String str35 = document34.val(); boolean boolean36 = class15.matches(element23, (org.jsoup.nodes.Element) document34); boolean boolean37 = attributeWithValue2.matches((org.jsoup.nodes.Element) document5, (org.jsoup.nodes.Element) document34); java.lang.String str38 = attributeWithValue2.toString(); org.jsoup.nodes.Document document41 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element42 = document41.head(); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str46 = org.jsoup.Jsoup.clean("", "#data", whitelist45); org.jsoup.safety.Cleaner cleaner47 = new org.jsoup.safety.Cleaner(whitelist45); org.jsoup.nodes.Document document50 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document51 = document50.clone(); org.jsoup.select.Elements elements53 = document51.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements55 = document51.getElementsByAttribute("#document"); org.jsoup.select.Elements elements58 = document51.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document59 = cleaner47.clean(document51); java.lang.String str61 = document59.absUrl("<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>"); org.jsoup.select.Elements elements63 = document59.getElementsByClass("hi!<html> <head></head> <body> hi! </body> </html>"); boolean boolean64 = attributeWithValue2.matches((org.jsoup.nodes.Element) document41, (org.jsoup.nodes.Element) document59); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str9, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>=:matchesown(null]" + "'", str38, "[<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>=:matchesown(null]"); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, ""); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(elements53); org.junit.Assert.assertNotNull(elements55); org.junit.Assert.assertNotNull(elements58); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, ""); org.junit.Assert.assertNotNull(elements63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); }
public void test281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test281"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element24 = element13.val(":contains(<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); int int25 = element13.siblingIndex(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); }
public void test282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test282"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.Matches matches1 = new org.jsoup.select.Evaluator.Matches(pattern0); java.lang.String str2 = matches1.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals4 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray9 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9); org.jsoup.nodes.Element element12 = document7.classNames((java.util.Set<java.lang.String>) strSet10); org.jsoup.nodes.Document document14 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray19 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19); org.jsoup.nodes.Element element22 = document17.classNames((java.util.Set<java.lang.String>) strSet20); org.jsoup.nodes.Element element23 = document14.appendChild((org.jsoup.nodes.Node) element22); boolean boolean24 = indexEquals4.matches(element12, (org.jsoup.nodes.Element) document14); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray29 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29); org.jsoup.nodes.Element element32 = document27.classNames((java.util.Set<java.lang.String>) strSet30); java.lang.String str33 = document27.nodeName(); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray38 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38); org.jsoup.nodes.Element element41 = document36.classNames((java.util.Set<java.lang.String>) strSet39); document36.title("#document"); java.lang.String str44 = document36.ownText(); org.jsoup.nodes.Element element46 = document36.prependElement("#<html> <head></head> <body> hi! </body> </html>"); boolean boolean47 = indexEquals4.matches((org.jsoup.nodes.Element) document27, element46); org.jsoup.safety.Whitelist whitelist48 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist50 = whitelist48.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner51 = new org.jsoup.safety.Cleaner(whitelist48); org.jsoup.nodes.Document document54 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document55 = document54.clone(); org.jsoup.nodes.Node node57 = document55.removeAttr("#doctype"); org.jsoup.nodes.Document document58 = cleaner51.clean(document55); org.jsoup.nodes.Attributes attributes59 = document58.attributes(); org.jsoup.nodes.Element element60 = document58.head(); org.jsoup.nodes.Element element62 = document58.child(0); org.jsoup.nodes.Element element64 = element62.toggleClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\""); java.lang.String str65 = element62.val(); // The following exception was thrown during execution in test generation try { boolean boolean66 = matches1.matches(element46, element62); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":matches(null" + "'", str2, ":matches(null"); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "#document" + "'", str33, "#document"); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, ""); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(node57); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertNotNull(attributes59); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, ""); }
public void test283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test283"); org.jsoup.select.Evaluator.AttributeWithValue attributeWithValue2 = new org.jsoup.select.Evaluator.AttributeWithValue("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":matchesOwn(null"); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document6 = document5.clone(); org.jsoup.nodes.Element element8 = document5.addClass(""); java.lang.String str9 = document5.toString(); org.jsoup.nodes.Element element11 = document5.text(".#document"); org.jsoup.select.Elements elements13 = document5.getElementsByClass("#document"); org.jsoup.select.Evaluator.Class class15 = new org.jsoup.select.Evaluator.Class(":matchesOwn(null"); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray20 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20); org.jsoup.nodes.Element element23 = document18.classNames((java.util.Set<java.lang.String>) strSet21); org.jsoup.nodes.Element element25 = element23.prepend("#document"); org.jsoup.nodes.Element element27 = element23.toggleClass("#doctype=\"\""); boolean boolean29 = element23.hasClass(":eq(52)"); java.lang.String str31 = element23.attr(":eq(52)"); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("hi!<html> <head></head> <body> hi! </body> </html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); java.lang.String str35 = document34.val(); boolean boolean36 = class15.matches(element23, (org.jsoup.nodes.Element) document34); boolean boolean37 = attributeWithValue2.matches((org.jsoup.nodes.Element) document5, (org.jsoup.nodes.Element) document34); java.lang.String str38 = attributeWithValue2.toString(); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText40 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist43 = whitelist41.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner44 = new org.jsoup.safety.Cleaner(whitelist41); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document48 = document47.clone(); org.jsoup.nodes.Node node50 = document48.removeAttr("#doctype"); org.jsoup.nodes.Document document51 = cleaner44.clean(document48); org.jsoup.nodes.Attributes attributes52 = document51.attributes(); org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist55 = whitelist53.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner56 = new org.jsoup.safety.Cleaner(whitelist53); org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document60 = document59.clone(); org.jsoup.nodes.Node node62 = document60.removeAttr("#doctype"); org.jsoup.nodes.Document document63 = cleaner56.clean(document60); org.jsoup.nodes.Attributes attributes64 = document63.attributes(); boolean boolean65 = containsOwnText40.matches((org.jsoup.nodes.Element) document51, (org.jsoup.nodes.Element) document63); org.jsoup.nodes.Document document68 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray70 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70); org.jsoup.nodes.Element element73 = document68.classNames((java.util.Set<java.lang.String>) strSet71); org.jsoup.nodes.Element element75 = element73.prepend("#document"); boolean boolean76 = attributeWithValue2.matches((org.jsoup.nodes.Element) document51, element73); java.lang.String str77 = attributeWithValue2.toString(); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str9, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>=:matchesown(null]" + "'", str38, "[<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>=:matchesown(null]"); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(node50); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(attributes52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(node62); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertNotNull(attributes64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(document68); org.junit.Assert.assertNotNull(strArray70); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertNotNull(element75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>=:matchesown(null]" + "'", str77, "[<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>=:matchesown(null]"); }
public void test284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test284"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str9 = document8.val(); java.util.List<org.jsoup.nodes.Node> nodeList11 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document8, "#document"); java.lang.String str12 = document8.baseUri(); org.jsoup.nodes.Element element14 = document8.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements15 = document8.parents(); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); org.jsoup.nodes.Node node17 = document8.clone(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(nodeList11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(node17); }
public void test285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test285"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements24 = element13.getElementsByClass("#root"); org.jsoup.nodes.Element element26 = element13.text("#data"); org.jsoup.select.Elements elements27 = element13.parents(); org.jsoup.nodes.TextNode textNode30 = org.jsoup.nodes.TextNode.createFromEncoded("[hi! hi!*=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"]", "[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); org.jsoup.nodes.Element element31 = element13.prependChild((org.jsoup.nodes.Node) textNode30); org.jsoup.nodes.Node node32 = element13.parent(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(elements27); org.junit.Assert.assertNotNull(textNode30); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNull(node32); }
public void test286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test286"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist5.addTags(strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); boolean boolean21 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist20); org.jsoup.safety.Whitelist whitelist25 = whitelist20.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner31 = new org.jsoup.safety.Cleaner(whitelist28); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist35 = whitelist33.preserveRelativeLinks(false); boolean boolean36 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist33); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.basic(); boolean boolean39 = org.jsoup.Jsoup.isValid("hi!", whitelist38); java.lang.String[] strArray47 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist48 = whitelist38.addProtocols(".#document", "#doctype=\"\"", strArray47); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray47, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray47); org.jsoup.safety.Whitelist whitelist52 = whitelist33.addTags(strArray47); org.jsoup.safety.Whitelist whitelist53 = whitelist28.addTags(strArray47); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray47); org.jsoup.safety.Whitelist whitelist55 = whitelist20.addProtocols("hi! hi! #comment", "[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]", strArray47); boolean boolean56 = org.jsoup.helper.StringUtil.in("[:matches(null]", strArray47); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); }
public void test287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test287"); org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 10); java.lang.String str2 = indexLessThan1.toString(); java.lang.String str3 = indexLessThan1.toString(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element7 = document6.body(); java.lang.String str8 = element7.ownText(); org.jsoup.nodes.DataNode dataNode11 = org.jsoup.nodes.DataNode.createFromEncoded("", ":eq(52)"); org.jsoup.nodes.DataNode dataNode13 = dataNode11.setWholeData(""); java.lang.String str14 = dataNode13.getWholeData(); element7.replaceWith((org.jsoup.nodes.Node) dataNode13); org.jsoup.parser.Tag tag16 = element7.tag(); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#doctype"); org.jsoup.select.Evaluator.IndexEquals indexEquals20 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray25 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25); org.jsoup.nodes.Element element28 = document23.classNames((java.util.Set<java.lang.String>) strSet26); org.jsoup.nodes.Document document30 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); org.jsoup.nodes.Element element39 = document30.appendChild((org.jsoup.nodes.Node) element38); boolean boolean40 = indexEquals20.matches(element28, (org.jsoup.nodes.Element) document30); org.jsoup.nodes.Document.QuirksMode quirksMode41 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document42 = document30.quirksMode(quirksMode41); org.jsoup.nodes.Document document43 = document18.quirksMode(quirksMode41); java.util.Map<java.lang.String, java.lang.String> strMap44 = document18.dataset(); org.jsoup.nodes.Element element46 = document18.prepend(""); boolean boolean47 = indexLessThan1.matches(element7, element46); java.lang.String str48 = indexLessThan1.toString(); org.jsoup.nodes.Element element49 = null; org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist52 = whitelist50.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner53 = new org.jsoup.safety.Cleaner(whitelist50); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray58 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58); org.jsoup.nodes.Element element61 = document56.classNames((java.util.Set<java.lang.String>) strSet59); java.lang.String str62 = document56.nodeName(); java.lang.String str63 = document56.html(); boolean boolean64 = cleaner53.isValid(document56); boolean boolean65 = indexLessThan1.matches(element49, (org.jsoup.nodes.Element) document56); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element66 = document56.previousElementSibling(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":lt(10)" + "'", str2, ":lt(10)"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":lt(10)" + "'", str3, ":lt(10)"); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(element7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi! hi!" + "'", str8, "hi! hi!"); org.junit.Assert.assertNotNull(dataNode11); org.junit.Assert.assertNotNull(dataNode13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertNotNull(tag16); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + quirksMode41 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode41.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(strMap44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertEquals("'" + str48 + "' != '" + ":lt(10)" + "'", str48, ":lt(10)"); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "#document" + "'", str62, "#document"); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str63, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true); }
public void test288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test288"); org.jsoup.select.Evaluator.Class class1 = new org.jsoup.select.Evaluator.Class("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan3 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (byte) 1); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element6 = document5.body(); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element9 = document8.body(); boolean boolean10 = indexGreaterThan3.matches(element6, (org.jsoup.nodes.Element) document8); org.jsoup.nodes.Element element12 = element6.html("#&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n&lt;/html&gt;"); org.jsoup.select.Elements elements15 = element12.getElementsByAttributeValueEnding(":gt(1)", "#root"); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str19 = org.jsoup.Jsoup.clean("", "#data", whitelist18); org.jsoup.safety.Cleaner cleaner20 = new org.jsoup.safety.Cleaner(whitelist18); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText22 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner26 = new org.jsoup.safety.Cleaner(whitelist23); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document30 = document29.clone(); org.jsoup.nodes.Node node32 = document30.removeAttr("#doctype"); org.jsoup.nodes.Document document33 = cleaner26.clean(document30); org.jsoup.nodes.Attributes attributes34 = document33.attributes(); org.jsoup.safety.Whitelist whitelist35 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist37 = whitelist35.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner38 = new org.jsoup.safety.Cleaner(whitelist35); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document42 = document41.clone(); org.jsoup.nodes.Node node44 = document42.removeAttr("#doctype"); org.jsoup.nodes.Document document45 = cleaner38.clean(document42); org.jsoup.nodes.Attributes attributes46 = document45.attributes(); boolean boolean47 = containsOwnText22.matches((org.jsoup.nodes.Element) document33, (org.jsoup.nodes.Element) document45); boolean boolean48 = cleaner20.isValid(document33); org.jsoup.nodes.Document document51 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document52 = document51.clone(); boolean boolean54 = document52.hasClass("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); org.jsoup.nodes.Element element56 = document52.prependText(""); org.jsoup.nodes.Document document57 = cleaner20.clean(document52); org.jsoup.nodes.Element element59 = document57.prependText("[class=\"\"^=#document]"); boolean boolean60 = class1.matches(element12, element59); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(element6); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(node32); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(attributes34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(node44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(attributes46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); }
public void test289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test289"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist4.addTags(strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist1.addTags(strArray16); boolean boolean20 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist19); org.jsoup.safety.Whitelist whitelist24 = whitelist19.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Attributes attributes26 = whitelist24.getEnforcedAttributes(":lt(7)"); org.jsoup.nodes.Attributes attributes28 = whitelist24.getEnforcedAttributes(""); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(attributes26); org.junit.Assert.assertNotNull(attributes28); }
public void test290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test290"); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList0 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings3.charset(); charsetList0.addFirst(charset4); java.util.Iterator<java.nio.charset.Charset> charsetItor6 = charsetList0.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList7 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); java.nio.charset.Charset charset11 = outputSettings10.charset(); charsetList7.addFirst(charset11); boolean boolean13 = charsetList0.offerFirst(charset11); int int14 = charsetList0.size(); java.nio.charset.Charset charset15 = charsetList0.peekLast(); java.nio.charset.Charset charset16 = charsetList0.pop(); java.nio.charset.Charset charset17 = charsetList0.peekLast(); java.util.Spliterator<java.nio.charset.Charset> charsetSpliterator18 = charsetList0.spliterator(); org.jsoup.safety.Whitelist whitelist20 = new org.jsoup.safety.Whitelist(); boolean boolean21 = org.jsoup.Jsoup.isValid(":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist20); boolean boolean22 = charsetList0.removeFirstOccurrence((java.lang.Object) whitelist20); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList23 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.prettyPrint(false); java.nio.charset.Charset charset27 = outputSettings26.charset(); charsetList23.addFirst(charset27); org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.prettyPrint(false); java.nio.charset.Charset charset32 = outputSettings31.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.prettyPrint(false); int int36 = outputSettings35.indentAmount(); java.nio.charset.Charset charset37 = outputSettings35.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.prettyPrint(false); java.nio.charset.Charset charset41 = outputSettings38.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.prettyPrint(false); java.nio.charset.Charset charset45 = outputSettings44.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings46.prettyPrint(false); java.nio.charset.Charset charset49 = outputSettings46.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings46.indentAmount((int) '4'); java.nio.charset.Charset charset52 = outputSettings46.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.prettyPrint(false); int int56 = outputSettings55.indentAmount(); java.nio.charset.Charset charset57 = outputSettings55.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings46.charset(charset57); java.nio.charset.Charset[] charsetArray59 = new java.nio.charset.Charset[] { charset32, charset37, charset41, charset45, charset57 }; java.util.LinkedList<java.nio.charset.Charset> charsetList60 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList60, charsetArray59); java.util.Iterator<java.nio.charset.Charset> charsetItor62 = charsetList60.iterator(); org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings63.prettyPrint(false); java.nio.charset.Charset charset66 = outputSettings63.charset(); java.nio.charset.Charset[] charsetArray67 = new java.nio.charset.Charset[] { charset66 }; java.util.LinkedList<java.nio.charset.Charset> charsetList68 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList68, charsetArray67); org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings70.prettyPrint(false); java.nio.charset.Charset charset73 = outputSettings70.charset(); boolean boolean74 = charsetList68.add(charset73); boolean boolean75 = charsetList60.offerFirst(charset73); charsetList23.push(charset73); java.nio.charset.Charset charset77 = charsetList23.pollLast(); java.nio.charset.Charset charset79 = charsetList23.remove(0); charsetList0.addLast(charset79); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(charsetItor6); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(charsetSpliterator18); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(charset27); org.junit.Assert.assertNotNull(outputSettings31); org.junit.Assert.assertNotNull(charset32); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1); org.junit.Assert.assertNotNull(charset37); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(charset41); org.junit.Assert.assertNotNull(outputSettings44); org.junit.Assert.assertNotNull(charset45); org.junit.Assert.assertNotNull(outputSettings48); org.junit.Assert.assertNotNull(charset49); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(charset52); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1); org.junit.Assert.assertNotNull(charset57); org.junit.Assert.assertNotNull(outputSettings58); org.junit.Assert.assertNotNull(charsetArray59); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNotNull(charsetItor62); org.junit.Assert.assertNotNull(outputSettings65); org.junit.Assert.assertNotNull(charset66); org.junit.Assert.assertNotNull(charsetArray67); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true); org.junit.Assert.assertNotNull(outputSettings72); org.junit.Assert.assertNotNull(charset73); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true); org.junit.Assert.assertNotNull(charset77); org.junit.Assert.assertNotNull(charset79); }
public void test291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test291"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray16 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16); org.jsoup.nodes.Element element19 = document14.classNames((java.util.Set<java.lang.String>) strSet17); java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22); boolean boolean25 = strSet17.containsAll((java.util.Collection<java.lang.String>) strList23); java.util.ListIterator<java.lang.String> strItor26 = strList23.listIterator(); boolean boolean27 = strList23.isEmpty(); java.util.ListIterator<java.lang.String> strItor28 = strList23.listIterator(); boolean boolean29 = attributes11.equals((java.lang.Object) strItor28); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(strItor26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(strItor28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); }
public void test292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test292"); org.jsoup.safety.Whitelist whitelist4 = new org.jsoup.safety.Whitelist(); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist4); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray11 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11); org.jsoup.nodes.Element element14 = document9.classNames((java.util.Set<java.lang.String>) strSet12); org.jsoup.nodes.Element element16 = element14.prepend("#document"); org.jsoup.nodes.Attribute attribute19 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute19.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str22 = attribute19.getKey(); boolean boolean23 = whitelist4.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element16, attribute19); java.lang.String str24 = org.jsoup.Jsoup.clean("hi!<html> <head></head> <body> hi! </body> </html>=\"\"", "", whitelist4); org.jsoup.safety.Cleaner cleaner25 = new org.jsoup.safety.Cleaner(whitelist4); boolean boolean26 = org.jsoup.Jsoup.isValid(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\".#document\"", whitelist4); org.jsoup.nodes.Attributes attributes28 = whitelist4.getEnforcedAttributes(". class=\" #doctype\""); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str22, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!  hi! =&quot;&quot;" + "'", str24, "hi!  hi! =&quot;&quot;"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(attributes28); }
public void test293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test293"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner10 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Node node16 = document14.removeAttr("#doctype"); org.jsoup.nodes.Document document17 = cleaner10.clean(document14); org.jsoup.nodes.Attributes attributes18 = document17.attributes(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Node node28 = document26.removeAttr("#doctype"); org.jsoup.nodes.Document document29 = cleaner22.clean(document26); org.jsoup.nodes.Attributes attributes30 = document29.attributes(); boolean boolean31 = containsOwnText6.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document29); boolean boolean32 = cleaner4.isValid(document17); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean37 = document35.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document38 = cleaner4.clean(document35); org.jsoup.nodes.Element element39 = document35.head(); org.jsoup.select.Elements elements40 = document35.parents(); // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements43 = document35.getElementsByAttributeValueEnding("", ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(node16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(attributes18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(node28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(elements40); }
public void test294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test294"); org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str1 = allElements0.toString(); java.lang.String str2 = allElements0.toString(); java.lang.String str3 = allElements0.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Element element11 = document8.addClass(""); org.jsoup.nodes.Document document13 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element15 = document13.createElement("#document"); boolean boolean16 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document13); org.jsoup.nodes.Element element18 = document13.toggleClass("#doctype"); org.jsoup.select.Elements elements20 = element18.getElementsMatchingOwnText("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str24 = org.jsoup.Jsoup.clean("", "#data", whitelist23); org.jsoup.safety.Cleaner cleaner25 = new org.jsoup.safety.Cleaner(whitelist23); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText27 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner31 = new org.jsoup.safety.Cleaner(whitelist28); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document35 = document34.clone(); org.jsoup.nodes.Node node37 = document35.removeAttr("#doctype"); org.jsoup.nodes.Document document38 = cleaner31.clean(document35); org.jsoup.nodes.Attributes attributes39 = document38.attributes(); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document47 = document46.clone(); org.jsoup.nodes.Node node49 = document47.removeAttr("#doctype"); org.jsoup.nodes.Document document50 = cleaner43.clean(document47); org.jsoup.nodes.Attributes attributes51 = document50.attributes(); boolean boolean52 = containsOwnText27.matches((org.jsoup.nodes.Element) document38, (org.jsoup.nodes.Element) document50); boolean boolean53 = cleaner25.isValid(document38); boolean boolean54 = allElements0.matches(element18, (org.jsoup.nodes.Element) document38); org.jsoup.select.Elements elements55 = element18.parents(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "*" + "'", str1, "*"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "*" + "'", str2, "*"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "*" + "'", str3, "*"); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(node37); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(attributes39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(node49); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(attributes51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(elements55); }
public void test295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test295"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basic(); boolean boolean6 = org.jsoup.Jsoup.isValid("hi!", whitelist5); java.lang.String[] strArray14 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist15 = whitelist5.addProtocols(".#document", "#doctype=\"\"", strArray14); org.jsoup.select.Evaluator.AttributeStarting attributeStarting18 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray26 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26); org.jsoup.nodes.Element element29 = document24.classNames((java.util.Set<java.lang.String>) strSet27); document24.title("#document"); boolean boolean32 = attributeStarting18.matches((org.jsoup.nodes.Element) document21, (org.jsoup.nodes.Element) document24); java.lang.String str33 = document21.id(); org.jsoup.select.Elements elements35 = document21.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements37 = document21.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute40 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean41 = whitelist5.isSafeAttribute("", (org.jsoup.nodes.Element) document21, attribute40); java.lang.String str42 = org.jsoup.Jsoup.clean(":containsown(hi!:matchesown(null=\"\"", "[#document^=  hi! ]", whitelist5); java.lang.String str43 = org.jsoup.Jsoup.clean("[[:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>$=<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>]*=class=\" #doctype\"]", ":lt(-1)", whitelist5); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(elements35); org.junit.Assert.assertNotNull(elements37); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertEquals("'" + str42 + "' != '" + ":containsown(hi!:matchesown(null=&quot;&quot;" + "'", str42, ":containsown(hi!:matchesown(null=&quot;&quot;"); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[[:contains(  hi! $=&lt;#root class=&quot;&quot;&gt;  hi!  ]*=class=&quot; #doctype&quot;]" + "'", str43, "[[:contains(  hi! $=&lt;#root class=&quot;&quot;&gt;  hi!  ]*=class=&quot; #doctype&quot;]"); }
public void test296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test296"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.indentAmount((int) '4'); java.nio.charset.Charset charset6 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); int int10 = outputSettings9.indentAmount(); java.nio.charset.Charset charset11 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.charset(charset11); java.nio.charset.Charset[] charsetArray13 = new java.nio.charset.Charset[] { charset11 }; java.util.LinkedList<java.nio.charset.Charset> charsetList14 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList14, charsetArray13); java.nio.charset.Charset charset16 = charsetList14.pop(); org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.prettyPrint(false); java.nio.charset.Charset charset20 = outputSettings17.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.indentAmount((int) '4'); java.nio.charset.Charset charset23 = outputSettings17.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.prettyPrint(false); int int27 = outputSettings26.indentAmount(); java.nio.charset.Charset charset28 = outputSettings26.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings17.charset(charset28); java.nio.charset.Charset[] charsetArray30 = new java.nio.charset.Charset[] { charset28 }; java.util.LinkedList<java.nio.charset.Charset> charsetList31 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList31, charsetArray30); java.nio.charset.Charset charset33 = charsetList31.pop(); org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.prettyPrint(false); java.nio.charset.Charset charset37 = outputSettings34.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings34.indentAmount((int) '4'); java.nio.charset.Charset charset40 = outputSettings34.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.prettyPrint(false); int int44 = outputSettings43.indentAmount(); java.nio.charset.Charset charset45 = outputSettings43.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings34.charset(charset45); boolean boolean47 = charsetList31.remove((java.lang.Object) outputSettings46); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList48 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.prettyPrint(false); java.nio.charset.Charset charset52 = outputSettings51.charset(); charsetList48.addFirst(charset52); java.util.Iterator<java.nio.charset.Charset> charsetItor54 = charsetList48.iterator(); org.jsoup.nodes.Document document56 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element58 = document56.createElement("#document"); org.jsoup.nodes.Document document59 = document56.clone(); java.lang.String str60 = document56.val(); org.jsoup.nodes.Node node63 = document56.attr("#doctype", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean64 = charsetList48.removeLastOccurrence((java.lang.Object) "#doctype"); java.nio.charset.Charset charset65 = charsetList48.pollFirst(); org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings46.charset(charset65); charsetList14.addLast(charset65); java.nio.charset.Charset charset68 = charsetList14.element(); org.jsoup.safety.Whitelist whitelist69 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes71 = whitelist69.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist74 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist76 = whitelist74.preserveRelativeLinks(false); boolean boolean77 = org.jsoup.Jsoup.isValid("", whitelist74); java.lang.String[] strArray83 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist84 = whitelist74.addTags(strArray83); org.jsoup.safety.Whitelist whitelist85 = whitelist69.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray83); boolean boolean86 = charsetList14.removeFirstOccurrence((java.lang.Object) "hi!<html> <head></head> <body> hi! </body> </html>"); java.nio.charset.Charset charset87 = charsetList14.poll(); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(charset6); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charsetArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(charset20); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1); org.junit.Assert.assertNotNull(charset28); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(charsetArray30); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(charset33); org.junit.Assert.assertNotNull(outputSettings36); org.junit.Assert.assertNotNull(charset37); org.junit.Assert.assertNotNull(outputSettings39); org.junit.Assert.assertNotNull(charset40); org.junit.Assert.assertNotNull(outputSettings43); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1); org.junit.Assert.assertNotNull(charset45); org.junit.Assert.assertNotNull(outputSettings46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(charset52); org.junit.Assert.assertNotNull(charsetItor54); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNotNull(node63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(charset65); org.junit.Assert.assertNotNull(outputSettings66); org.junit.Assert.assertNotNull(charset68); org.junit.Assert.assertNotNull(attributes71); org.junit.Assert.assertNotNull(whitelist74); org.junit.Assert.assertNotNull(whitelist76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true); org.junit.Assert.assertNotNull(strArray83); org.junit.Assert.assertNotNull(whitelist84); org.junit.Assert.assertNotNull(whitelist85); org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false); org.junit.Assert.assertNotNull(charset87); }
public void test297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test297"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.indentAmount((int) '4'); java.nio.charset.Charset charset6 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); int int10 = outputSettings9.indentAmount(); java.nio.charset.Charset charset11 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.charset(charset11); java.nio.charset.Charset[] charsetArray13 = new java.nio.charset.Charset[] { charset11 }; java.util.LinkedList<java.nio.charset.Charset> charsetList14 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList14, charsetArray13); java.nio.charset.Charset charset16 = charsetList14.pop(); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basic(); boolean boolean19 = org.jsoup.Jsoup.isValid("hi!", whitelist18); java.lang.String[] strArray27 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist28 = whitelist18.addProtocols(".#document", "#doctype=\"\"", strArray27); org.jsoup.safety.Cleaner cleaner29 = new org.jsoup.safety.Cleaner(whitelist18); boolean boolean30 = charsetList14.contains((java.lang.Object) whitelist18); java.nio.charset.Charset charset31 = charsetList14.poll(); org.jsoup.nodes.TextNode textNode34 = new org.jsoup.nodes.TextNode("", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str35 = textNode34.toString(); org.jsoup.nodes.Attributes attributes36 = textNode34.attributes(); java.lang.String str37 = attributes36.html(); boolean boolean38 = charsetList14.remove((java.lang.Object) attributes36); java.nio.charset.Charset charset39 = charsetList14.peekFirst(); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(charset6); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charsetArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNull(charset31); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertNotNull(attributes36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + " text=\"\"" + "'", str37, " text=\"\""); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNull(charset39); }
public void test298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test298"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element23 = element22.empty(); org.jsoup.nodes.Element element25 = element23.appendElement(":matchesOwn(null"); java.util.Map<java.lang.String, java.lang.String> strMap26 = element25.dataset(); org.jsoup.nodes.Element element27 = element25.previousElementSibling(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(strMap26); org.junit.Assert.assertNull(element27); }
public void test299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test299"); org.jsoup.select.Evaluator.ContainsText containsText1 = new org.jsoup.select.Evaluator.ContainsText("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray6 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6); org.jsoup.nodes.Element element9 = document4.classNames((java.util.Set<java.lang.String>) strSet7); java.lang.String str10 = document4.nodeName(); java.lang.String str11 = document4.html(); org.jsoup.nodes.Element element13 = document4.removeClass("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str21 = document20.val(); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document20, "#document"); org.jsoup.nodes.Document.QuirksMode quirksMode24 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document25 = document20.quirksMode(quirksMode24); org.jsoup.nodes.Document document26 = document16.quirksMode(quirksMode24); org.jsoup.nodes.Document document27 = document4.quirksMode(quirksMode24); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText30 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist33 = whitelist31.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner34 = new org.jsoup.safety.Cleaner(whitelist31); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray39 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39); org.jsoup.nodes.Element element42 = document37.classNames((java.util.Set<java.lang.String>) strSet40); java.lang.String str43 = document37.nodeName(); java.lang.String str44 = document37.html(); boolean boolean45 = cleaner34.isValid(document37); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element48 = document47.body(); java.lang.String str49 = document47.toString(); org.jsoup.nodes.Document document50 = cleaner34.clean(document47); org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document54 = document53.clone(); org.jsoup.nodes.Element element56 = document53.addClass(""); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str61 = document60.val(); java.util.List<org.jsoup.nodes.Node> nodeList63 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document60, "#document"); java.lang.String str64 = document60.baseUri(); org.jsoup.nodes.Document document67 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str68 = document67.val(); org.jsoup.nodes.Element element70 = document67.append("#document"); org.jsoup.nodes.Element element71 = document60.appendChild((org.jsoup.nodes.Node) element70); org.jsoup.nodes.Element element72 = document53.prependChild((org.jsoup.nodes.Node) document60); org.jsoup.nodes.Attributes attributes73 = element72.attributes(); java.lang.String str74 = element72.baseUri(); java.lang.String str75 = element72.text(); org.jsoup.nodes.Element element77 = element72.toggleClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean78 = containsOwnText30.matches((org.jsoup.nodes.Element) document50, element72); org.jsoup.nodes.Element element79 = document50.clone(); java.util.List<org.jsoup.nodes.Node> nodeList81 = org.jsoup.parser.Parser.parseFragment(":matches(null", (org.jsoup.nodes.Element) document50, ""); boolean boolean82 = containsText1.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document50); java.lang.String str83 = document27.id(); boolean boolean84 = document27.hasText(); org.jsoup.nodes.Element element86 = document27.text("#doctype"); org.jsoup.nodes.Node node87 = document27.nextSibling(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#document" + "'", str10, "#document"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, ""); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertTrue("'" + quirksMode24 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode24.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "#document" + "'", str43, "#document"); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str44, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str49, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, ""); org.junit.Assert.assertNotNull(nodeList63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!"); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, ""); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertNotNull(attributes73); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "#document" + "'", str74, "#document"); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi! hi!#document hi!" + "'", str75, "hi! hi!#document hi!"); org.junit.Assert.assertNotNull(element77); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(nodeList81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, ""); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true); org.junit.Assert.assertNotNull(element86); org.junit.Assert.assertNull(node87); }
public void test300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test300"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basic(); boolean boolean7 = org.jsoup.Jsoup.isValid("hi!", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addProtocols(".#document", "#doctype=\"\"", strArray15); org.jsoup.safety.Whitelist whitelist17 = whitelist3.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray15); java.lang.String str18 = org.jsoup.Jsoup.clean("UTF-8<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>UTF-8<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>UTF-8<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>UTF-8<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>UTF-8<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>UTF-8<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>UTF-8", whitelist17); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTF-8  UTF-8UTF-8 UTF-8  UTF-8UTF-8 UTF-8  UTF-8UTF-8 UTF-8  UTF-8UTF-8 UTF-8  UTF-8UTF-8 UTF-8  UTF-8UTF-8 UTF-8" + "'", str18, "UTF-8  UTF-8UTF-8 UTF-8  UTF-8UTF-8 UTF-8  UTF-8UTF-8 UTF-8  UTF-8UTF-8 UTF-8  UTF-8UTF-8 UTF-8  UTF-8UTF-8 UTF-8"); }
public void test301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test301"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist4.addTags(strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist1.addTags(strArray16); boolean boolean20 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist19); org.jsoup.safety.Whitelist whitelist24 = whitelist19.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Attributes attributes26 = whitelist24.getEnforcedAttributes(":lt(7)"); org.jsoup.safety.Whitelist whitelist30 = whitelist24.addEnforcedAttribute("hi!<html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> ", "#<html> <head></head> <body> hi! </body> </html>", ":lt(10)"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(attributes26); org.junit.Assert.assertNotNull(whitelist30); }
public void test302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test302"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.select.Elements elements10 = document8.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements12 = document8.getElementsByAttribute("#document"); org.jsoup.select.Elements elements15 = document8.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); java.lang.String str18 = document16.absUrl("<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>"); org.jsoup.select.Elements elements20 = document16.getElementsByClass("hi!<html> <head></head> <body> hi! </body> </html>"); org.jsoup.nodes.Element element21 = document16.body(); java.lang.String str22 = document16.id(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); }
public void test303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test303"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element3 = document2.body(); org.jsoup.nodes.Element element5 = element3.before(":contains([#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); boolean boolean7 = element3.hasClass("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); boolean boolean12 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist9); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.basic(); boolean boolean15 = org.jsoup.Jsoup.isValid("hi!", whitelist14); java.lang.String[] strArray23 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist24 = whitelist14.addProtocols(".#document", "#doctype=\"\"", strArray23); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray23, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray23); org.jsoup.safety.Whitelist whitelist28 = whitelist9.addTags(strArray23); boolean boolean29 = element3.equals((java.lang.Object) whitelist28); java.lang.String str30 = element3.html(); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(element3); org.junit.Assert.assertNotNull(element5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!  hi!" + "'", str30, "hi!  hi!"); }
public void test304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test304"); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList0 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings3.charset(); charsetList0.addFirst(charset4); java.util.Iterator<java.nio.charset.Charset> charsetItor6 = charsetList0.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList7 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); java.nio.charset.Charset charset11 = outputSettings10.charset(); charsetList7.addFirst(charset11); boolean boolean13 = charsetList0.offerFirst(charset11); int int14 = charsetList0.size(); java.nio.charset.Charset charset15 = charsetList0.peekLast(); java.nio.charset.Charset charset16 = charsetList0.pop(); java.nio.charset.Charset charset17 = charsetList0.peekLast(); java.util.Spliterator<java.nio.charset.Charset> charsetSpliterator18 = charsetList0.spliterator(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str22 = org.jsoup.Jsoup.clean("", "#data", whitelist21); org.jsoup.safety.Cleaner cleaner23 = new org.jsoup.safety.Cleaner(whitelist21); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document27 = document26.clone(); org.jsoup.select.Elements elements29 = document27.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements31 = document27.getElementsByAttribute("#document"); org.jsoup.select.Elements elements34 = document27.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document35 = cleaner23.clean(document27); boolean boolean36 = charsetList0.remove((java.lang.Object) document35); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList37 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.prettyPrint(false); java.nio.charset.Charset charset41 = outputSettings40.charset(); charsetList37.addFirst(charset41); java.util.Iterator<java.nio.charset.Charset> charsetItor43 = charsetList37.iterator(); org.jsoup.nodes.Document document45 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element47 = document45.createElement("#document"); org.jsoup.nodes.Document document48 = document45.clone(); java.lang.String str49 = document45.val(); org.jsoup.nodes.Node node52 = document45.attr("#doctype", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean53 = charsetList37.removeLastOccurrence((java.lang.Object) "#doctype"); java.nio.charset.Charset charset54 = charsetList37.peekFirst(); charsetList0.push(charset54); org.jsoup.nodes.Document document57 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray62 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62); org.jsoup.nodes.Element element65 = document60.classNames((java.util.Set<java.lang.String>) strSet63); org.jsoup.nodes.Element element66 = document57.appendChild((org.jsoup.nodes.Node) element65); java.lang.String str68 = document57.absUrl("hi!"); org.jsoup.nodes.Node node69 = document57.nextSibling(); org.jsoup.nodes.Element element71 = document57.text("[#document^=#doctype]"); org.jsoup.parser.Tag tag72 = document57.tag(); boolean boolean73 = charsetList0.removeLastOccurrence((java.lang.Object) tag72); java.util.Iterator<java.nio.charset.Charset> charsetItor74 = charsetList0.iterator(); java.nio.charset.Charset charset75 = charsetList0.removeFirst(); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(charsetItor6); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(charsetSpliterator18); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(outputSettings40); org.junit.Assert.assertNotNull(charset41); org.junit.Assert.assertNotNull(charsetItor43); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); org.junit.Assert.assertNotNull(node52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(charset54); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, ""); org.junit.Assert.assertNull(node69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(tag72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(charsetItor74); org.junit.Assert.assertNotNull(charset75); }
public void test305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test305"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); document11.title("#document"); boolean boolean19 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document11); org.jsoup.nodes.Element element21 = document11.html(""); java.lang.String str22 = element21.html(); java.lang.String str23 = element21.html(); org.jsoup.nodes.Attribute attribute26 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute27 = attribute26.clone(); java.lang.String str28 = attribute27.getKey(); java.lang.String str29 = attribute27.getValue(); org.jsoup.nodes.DocumentType documentType34 = new org.jsoup.nodes.DocumentType("#doctype", "#document", "#doctype", "hi!"); java.lang.String str35 = documentType34.nodeName(); java.lang.String str36 = documentType34.nodeName(); boolean boolean37 = attribute27.equals((java.lang.Object) str36); boolean boolean38 = whitelist1.isSafeAttribute("#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", element21, attribute27); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.nodes.Attributes attributes45 = whitelist40.getEnforcedAttributes(""); java.lang.String str46 = org.jsoup.Jsoup.clean("[[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]!=.#document]", whitelist40); org.jsoup.safety.Whitelist whitelist47 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes49 = whitelist47.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist52 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist54 = whitelist52.preserveRelativeLinks(false); boolean boolean55 = org.jsoup.Jsoup.isValid("", whitelist52); java.lang.String[] strArray61 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist62 = whitelist52.addTags(strArray61); org.jsoup.safety.Whitelist whitelist63 = whitelist47.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray61); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray61, ""); org.jsoup.safety.Whitelist whitelist66 = whitelist40.addTags(strArray61); org.jsoup.safety.Whitelist whitelist69 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist71 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist73 = whitelist71.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist76 = org.jsoup.safety.Whitelist.basic(); boolean boolean77 = org.jsoup.Jsoup.isValid("hi!", whitelist76); java.lang.String[] strArray85 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist86 = whitelist76.addProtocols(".#document", "#doctype=\"\"", strArray85); org.jsoup.safety.Whitelist whitelist87 = whitelist73.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray85); org.jsoup.safety.Whitelist whitelist88 = whitelist69.addAttributes(":containsOwn(hi!:matchesown(null", strArray85); boolean boolean89 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray85); boolean boolean90 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>#document", strArray85); org.jsoup.safety.Whitelist whitelist91 = whitelist40.addTags(strArray85); org.jsoup.safety.Whitelist whitelist92 = whitelist1.addTags(strArray85); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(attribute26); org.junit.Assert.assertNotNull(attribute27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str28, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str29, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "#doctype" + "'", str35, "#doctype"); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "#doctype" + "'", str36, "#doctype"); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(attributes45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[[#document^=  hi! ]!=.#document]" + "'", str46, "[[#document^=  hi! ]!=.#document]"); org.junit.Assert.assertNotNull(attributes49); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertNotNull(whitelist76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true); org.junit.Assert.assertNotNull(strArray85); org.junit.Assert.assertNotNull(whitelist86); org.junit.Assert.assertNotNull(whitelist87); org.junit.Assert.assertNotNull(whitelist88); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false); org.junit.Assert.assertNotNull(whitelist91); org.junit.Assert.assertNotNull(whitelist92); }
public void test306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test306"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); boolean boolean6 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist3); java.lang.String str7 = org.jsoup.Jsoup.clean(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist3); java.lang.String str8 = org.jsoup.Jsoup.clean("", whitelist3); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist3); org.jsoup.safety.Whitelist whitelist11 = whitelist3.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist19 = whitelist17.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basic(); boolean boolean23 = org.jsoup.Jsoup.isValid("hi!", whitelist22); java.lang.String[] strArray31 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist32 = whitelist22.addProtocols(".#document", "#doctype=\"\"", strArray31); org.jsoup.safety.Whitelist whitelist33 = whitelist19.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray31); org.jsoup.safety.Whitelist whitelist34 = whitelist15.addAttributes(":containsOwn(hi!:matchesown(null", strArray31); boolean boolean35 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray31); org.jsoup.safety.Whitelist whitelist36 = whitelist11.addProtocols("hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n ", "#<html> <head></head> <body> hi! </body> </html>", strArray31); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi! =&quot;&quot;" + "'", str7, "hi! =&quot;&quot;"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(whitelist36); }
public void test307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test307"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Attributes attributes5 = whitelist0.getEnforcedAttributes(""); boolean boolean7 = attributes5.equals((java.lang.Object) (byte) -1); int int8 = attributes5.size(); org.jsoup.nodes.Attributes attributes9 = attributes5.clone(); attributes5.put("hi! hi!", ":matches(null"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(attributes9); }
public void test308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test308"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean4 = org.jsoup.Jsoup.isValid("#document", whitelist3); java.lang.String str5 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist3); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray17); boolean boolean20 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray17); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray17, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str5, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test309"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner10 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Node node16 = document14.removeAttr("#doctype"); org.jsoup.nodes.Document document17 = cleaner10.clean(document14); org.jsoup.nodes.Attributes attributes18 = document17.attributes(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Node node28 = document26.removeAttr("#doctype"); org.jsoup.nodes.Document document29 = cleaner22.clean(document26); org.jsoup.nodes.Attributes attributes30 = document29.attributes(); boolean boolean31 = containsOwnText6.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document29); boolean boolean32 = cleaner4.isValid(document17); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document36 = document35.clone(); boolean boolean38 = document36.hasClass("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); org.jsoup.nodes.Element element40 = document36.prependText(""); org.jsoup.nodes.Document document41 = cleaner4.clean(document36); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document45 = document44.clone(); org.jsoup.nodes.Element element47 = document44.addClass(""); java.lang.String str48 = document44.toString(); org.jsoup.nodes.Element element50 = document44.text(".#document"); org.jsoup.select.Elements elements53 = document44.getElementsByAttributeValueMatching("[^hi!]", " <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); org.jsoup.nodes.Node node55 = document44.childNode((int) (byte) 0); org.jsoup.nodes.Document document56 = cleaner4.clean(document44); java.lang.String str57 = document44.nodeName(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node59 = document44.before("hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(node16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(attributes18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(node28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str48, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(elements53); org.junit.Assert.assertNotNull(node55); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "#document" + "'", str57, "#document"); }
public void test310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test310"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basic(); boolean boolean6 = org.jsoup.Jsoup.isValid("hi!", whitelist5); java.lang.String[] strArray14 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist15 = whitelist5.addProtocols(".#document", "#doctype=\"\"", strArray14); org.jsoup.safety.Whitelist whitelist16 = whitelist2.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray14); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist20 = whitelist18.preserveRelativeLinks(true); java.lang.String str21 = org.jsoup.Jsoup.clean(":containsOwn(hi!", "UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"UTF-8", whitelist20); org.jsoup.select.Evaluator.Class class24 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str25 = class24.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals27 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray32 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32); org.jsoup.nodes.Element element35 = document30.classNames((java.util.Set<java.lang.String>) strSet33); org.jsoup.nodes.Document document37 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray42 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42); org.jsoup.nodes.Element element45 = document40.classNames((java.util.Set<java.lang.String>) strSet43); org.jsoup.nodes.Element element46 = document37.appendChild((org.jsoup.nodes.Node) element45); boolean boolean47 = indexEquals27.matches(element35, (org.jsoup.nodes.Element) document37); org.jsoup.nodes.Document.QuirksMode quirksMode48 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document49 = document37.quirksMode(quirksMode48); org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray54 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54); org.jsoup.nodes.Element element57 = document52.classNames((java.util.Set<java.lang.String>) strSet55); document52.title("#document"); boolean boolean60 = class24.matches((org.jsoup.nodes.Element) document49, (org.jsoup.nodes.Element) document52); java.lang.String str61 = document52.nodeName(); java.util.regex.Pattern pattern63 = null; org.jsoup.select.Elements elements64 = document52.getElementsByAttributeValueMatching("#root", pattern63); org.jsoup.nodes.Attribute attribute67 = new org.jsoup.nodes.Attribute("UTF-8UTF-8", "#data"); java.lang.String str68 = attribute67.toString(); boolean boolean69 = whitelist20.isSafeAttribute("", (org.jsoup.nodes.Element) document52, attribute67); org.jsoup.nodes.Document document73 = org.jsoup.parser.Parser.parseBodyFragment("#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Attribute attribute74 = null; // The following exception was thrown during execution in test generation try { boolean boolean75 = whitelist20.isSafeAttribute("[:matches(null!=[#document^=<html> <head></head> <body> hi! </body> </html>]]", (org.jsoup.nodes.Element) document73, attribute74); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + ":containsOwn(hi!" + "'", str21, ":containsOwn(hi!"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + ".#document" + "'", str25, ".#document"); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertTrue("'" + quirksMode48 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode48.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "#document" + "'", str61, "#document"); org.junit.Assert.assertNotNull(elements64); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "utf-8utf-8=\"#data\"" + "'", str68, "utf-8utf-8=\"#data\""); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNotNull(document73); }
public void test311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test311"); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan1 = new org.jsoup.select.Evaluator.IndexGreaterThan(2); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText8 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist9); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); org.jsoup.nodes.Node node18 = document16.removeAttr("#doctype"); org.jsoup.nodes.Document document19 = cleaner12.clean(document16); org.jsoup.nodes.Attributes attributes20 = document19.attributes(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist23 = whitelist21.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner24 = new org.jsoup.safety.Cleaner(whitelist21); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document28 = document27.clone(); org.jsoup.nodes.Node node30 = document28.removeAttr("#doctype"); org.jsoup.nodes.Document document31 = cleaner24.clean(document28); org.jsoup.nodes.Attributes attributes32 = document31.attributes(); boolean boolean33 = containsOwnText8.matches((org.jsoup.nodes.Element) document19, (org.jsoup.nodes.Element) document31); boolean boolean34 = cleaner6.isValid(document19); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean39 = document37.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document40 = cleaner6.clean(document37); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parseBodyFragment("#document"); org.jsoup.nodes.Document document43 = cleaner6.clean(document42); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.basic(); boolean boolean46 = org.jsoup.Jsoup.isValid("hi!", whitelist45); java.lang.String[] strArray54 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist55 = whitelist45.addProtocols(".#document", "#doctype=\"\"", strArray54); org.jsoup.safety.Cleaner cleaner56 = new org.jsoup.safety.Cleaner(whitelist45); org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document60 = document59.clone(); document60.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean63 = document60.isBlock(); org.jsoup.nodes.Document document64 = cleaner56.clean(document60); org.jsoup.select.Elements elements66 = document64.getElementsByAttribute("UTF-8UTF-8"); org.jsoup.select.Elements elements69 = document64.getElementsByAttributeValueNot("hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;", "#[:matches(null]"); boolean boolean70 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document43, (org.jsoup.nodes.Element) document64); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(node18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(node30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(attributes32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(document64); org.junit.Assert.assertNotNull(elements66); org.junit.Assert.assertNotNull(elements69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); }
public void test312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test312"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist5.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist1.addAttributes(":containsOwn(hi!:matchesown(null", strArray17); boolean boolean21 = org.jsoup.Jsoup.isValid(" class=\" #doctype\"", whitelist20); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); }
public void test313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test313"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.indentAmount((int) '4'); java.nio.charset.Charset charset6 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); int int10 = outputSettings9.indentAmount(); java.nio.charset.Charset charset11 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.charset(charset11); java.nio.charset.Charset[] charsetArray13 = new java.nio.charset.Charset[] { charset11 }; java.util.LinkedList<java.nio.charset.Charset> charsetList14 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList14, charsetArray13); java.nio.charset.Charset charset16 = charsetList14.pop(); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basic(); boolean boolean19 = org.jsoup.Jsoup.isValid("hi!", whitelist18); java.lang.String[] strArray27 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist28 = whitelist18.addProtocols(".#document", "#doctype=\"\"", strArray27); org.jsoup.safety.Cleaner cleaner29 = new org.jsoup.safety.Cleaner(whitelist18); boolean boolean30 = charsetList14.contains((java.lang.Object) whitelist18); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList31 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.prettyPrint(false); java.nio.charset.Charset charset35 = outputSettings34.charset(); charsetList31.addFirst(charset35); java.util.Iterator<java.nio.charset.Charset> charsetItor37 = charsetList31.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList38 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.prettyPrint(false); java.nio.charset.Charset charset42 = outputSettings41.charset(); charsetList38.addFirst(charset42); boolean boolean44 = charsetList31.offerFirst(charset42); int int45 = charsetList31.size(); java.nio.charset.Charset charset46 = charsetList31.peekLast(); java.nio.charset.Charset charset47 = null; charsetList31.addFirst(charset47); org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.prettyPrint(false); java.nio.charset.Charset charset52 = outputSettings51.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.prettyPrint(false); int int56 = outputSettings55.indentAmount(); java.nio.charset.Charset charset57 = outputSettings55.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings58.prettyPrint(false); java.nio.charset.Charset charset61 = outputSettings58.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings62.prettyPrint(false); java.nio.charset.Charset charset65 = outputSettings64.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.prettyPrint(false); java.nio.charset.Charset charset69 = outputSettings66.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings66.indentAmount((int) '4'); java.nio.charset.Charset charset72 = outputSettings66.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings73.prettyPrint(false); int int76 = outputSettings75.indentAmount(); java.nio.charset.Charset charset77 = outputSettings75.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings66.charset(charset77); java.nio.charset.Charset[] charsetArray79 = new java.nio.charset.Charset[] { charset52, charset57, charset61, charset65, charset77 }; java.util.LinkedList<java.nio.charset.Charset> charsetList80 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList80, charsetArray79); java.util.Iterator<java.nio.charset.Charset> charsetItor82 = charsetList80.iterator(); org.jsoup.nodes.Document.OutputSettings outputSettings83 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings83.prettyPrint(false); java.nio.charset.Charset charset86 = outputSettings83.charset(); java.nio.charset.Charset[] charsetArray87 = new java.nio.charset.Charset[] { charset86 }; java.util.LinkedList<java.nio.charset.Charset> charsetList88 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList88, charsetArray87); org.jsoup.nodes.Document.OutputSettings outputSettings90 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings92 = outputSettings90.prettyPrint(false); java.nio.charset.Charset charset93 = outputSettings90.charset(); boolean boolean94 = charsetList88.add(charset93); boolean boolean95 = charsetList80.offerFirst(charset93); java.nio.charset.Charset charset96 = charsetList80.getFirst(); java.nio.charset.Charset charset97 = charsetList80.pollFirst(); boolean boolean98 = charsetList31.offer(charset97); charsetList14.addFirst(charset97); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(charset6); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charsetArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(outputSettings34); org.junit.Assert.assertNotNull(charset35); org.junit.Assert.assertNotNull(charsetItor37); org.junit.Assert.assertNotNull(outputSettings41); org.junit.Assert.assertNotNull(charset42); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2); org.junit.Assert.assertNotNull(charset46); org.junit.Assert.assertNotNull(outputSettings51); org.junit.Assert.assertNotNull(charset52); org.junit.Assert.assertNotNull(outputSettings55); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1); org.junit.Assert.assertNotNull(charset57); org.junit.Assert.assertNotNull(outputSettings60); org.junit.Assert.assertNotNull(charset61); org.junit.Assert.assertNotNull(outputSettings64); org.junit.Assert.assertNotNull(charset65); org.junit.Assert.assertNotNull(outputSettings68); org.junit.Assert.assertNotNull(charset69); org.junit.Assert.assertNotNull(outputSettings71); org.junit.Assert.assertNotNull(charset72); org.junit.Assert.assertNotNull(outputSettings75); org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1); org.junit.Assert.assertNotNull(charset77); org.junit.Assert.assertNotNull(outputSettings78); org.junit.Assert.assertNotNull(charsetArray79); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true); org.junit.Assert.assertNotNull(charsetItor82); org.junit.Assert.assertNotNull(outputSettings85); org.junit.Assert.assertNotNull(charset86); org.junit.Assert.assertNotNull(charsetArray87); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true); org.junit.Assert.assertNotNull(outputSettings92); org.junit.Assert.assertNotNull(charset93); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true); org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true); org.junit.Assert.assertNotNull(charset96); org.junit.Assert.assertNotNull(charset97); org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true); }
public void test314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test314"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); int int12 = document10.siblingIndex(); org.jsoup.nodes.Element element14 = document10.prependElement("[^:containsOwn(hi!]"); org.jsoup.nodes.Element element16 = document10.prependElement("\n<!--<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"-->"); java.lang.String str17 = document10.nodeName(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#document" + "'", str17, "#document"); }
public void test315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test315"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.select.Evaluator.Class class5 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str6 = class5.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals8 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) element26); boolean boolean28 = indexEquals8.matches(element16, (org.jsoup.nodes.Element) document18); org.jsoup.nodes.Document.QuirksMode quirksMode29 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document30 = document18.quirksMode(quirksMode29); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); document33.title("#document"); boolean boolean41 = class5.matches((org.jsoup.nodes.Element) document30, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Document document42 = cleaner3.clean(document30); org.jsoup.select.Elements elements43 = document30.children(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".#document" + "'", str6, ".#document"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + quirksMode29 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode29.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(elements43); }
public void test316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test316"); org.jsoup.select.Evaluator.AttributeStarting attributeStarting1 = new org.jsoup.select.Evaluator.AttributeStarting(":containsOwn(hi!"); java.lang.String str2 = attributeStarting1.toString(); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray7 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7); org.jsoup.nodes.Element element10 = document5.classNames((java.util.Set<java.lang.String>) strSet8); java.lang.String str11 = document5.nodeName(); org.jsoup.select.Elements elements13 = document5.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document17 = document16.clone(); org.jsoup.nodes.Element element19 = document16.addClass(""); org.jsoup.nodes.Element element20 = document5.appendChild((org.jsoup.nodes.Node) document16); org.jsoup.nodes.Element element22 = document16.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Element element28 = document25.addClass(""); java.lang.String str29 = document25.toString(); org.jsoup.nodes.Element element31 = document25.text(".#document"); org.jsoup.nodes.Node node32 = element22.after((org.jsoup.nodes.Node) document25); org.jsoup.nodes.Element element34 = element22.html("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); org.jsoup.parser.Tag tag36 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean37 = tag36.canContainBlock(); boolean boolean38 = tag36.formatAsBlock(); boolean boolean39 = tag36.isEmpty(); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist43 = whitelist41.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner44 = new org.jsoup.safety.Cleaner(whitelist41); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document48 = document47.clone(); org.jsoup.nodes.Node node50 = document48.removeAttr("#doctype"); org.jsoup.nodes.Document document51 = cleaner44.clean(document48); org.jsoup.nodes.Attributes attributes52 = document51.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator53 = attributes52.spliterator(); org.jsoup.nodes.Element element54 = new org.jsoup.nodes.Element(tag36, "hi!:matchesOwn(null", attributes52); org.jsoup.nodes.Element element56 = element54.html("[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.jsoup.nodes.Element element58 = element56.toggleClass(""); boolean boolean59 = attributeStarting1.matches(element22, element56); java.lang.String str60 = element56.toString(); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[^:containsOwn(hi!]" + "'", str2, "[^:containsOwn(hi!]"); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#document" + "'", str11, "#document"); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str29, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(node32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(tag36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(node50); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(attributes52); org.junit.Assert.assertNotNull(attributeSpliterator53); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "<hi! class=\"\">\n [ hi! &lt;#root class=&quot;&quot;&gt; hi! !=#doctype=&quot;&quot;]\n</hi!>" + "'", str60, "<hi! class=\"\">\n [ hi! &lt;#root class=&quot;&quot;&gt; hi! !=#doctype=&quot;&quot;]\n</hi!>"); }
public void test317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test317"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Attribute attribute21 = attribute16.clone(); org.jsoup.nodes.Attribute attribute22 = attribute16.clone(); org.jsoup.nodes.Attribute attribute23 = attribute22.clone(); java.lang.String str24 = attribute22.getKey(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(attribute21); org.junit.Assert.assertNotNull(attribute22); org.junit.Assert.assertNotNull(attribute23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str24, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); }
public void test318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test318"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("\n#document", pattern1); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean6 = org.jsoup.Jsoup.isValid("#document", whitelist5); java.lang.String str7 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist5); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basic(); boolean boolean11 = org.jsoup.Jsoup.isValid("hi!", whitelist10); java.lang.String[] strArray19 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist20 = whitelist10.addProtocols(".#document", "#doctype=\"\"", strArray19); org.jsoup.safety.Whitelist whitelist21 = whitelist5.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray19); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode25 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document26 = document24.quirksMode(quirksMode25); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.basic(); boolean boolean29 = org.jsoup.Jsoup.isValid("hi!", whitelist28); java.lang.String[] strArray37 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist38 = whitelist28.addProtocols(".#document", "#doctype=\"\"", strArray37); org.jsoup.select.Evaluator.AttributeStarting attributeStarting41 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray49 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49); org.jsoup.nodes.Element element52 = document47.classNames((java.util.Set<java.lang.String>) strSet50); document47.title("#document"); boolean boolean55 = attributeStarting41.matches((org.jsoup.nodes.Element) document44, (org.jsoup.nodes.Element) document47); java.lang.String str56 = document44.id(); org.jsoup.select.Elements elements58 = document44.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements60 = document44.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute63 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean64 = whitelist28.isSafeAttribute("", (org.jsoup.nodes.Element) document44, attribute63); boolean boolean65 = whitelist21.isSafeAttribute("", (org.jsoup.nodes.Element) document24, attribute63); org.jsoup.parser.Tag tag66 = document24.tag(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting68 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document71 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document72 = document71.clone(); org.jsoup.nodes.Element element74 = document71.addClass(""); org.jsoup.nodes.Document document76 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element78 = document76.createElement("#document"); boolean boolean79 = attributeStarting68.matches((org.jsoup.nodes.Element) document71, (org.jsoup.nodes.Element) document76); document76.setBaseUri(""); boolean boolean82 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document76); java.lang.String str83 = document24.ownText(); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str7, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertTrue("'" + quirksMode25 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode25.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, ""); org.junit.Assert.assertNotNull(elements58); org.junit.Assert.assertNotNull(elements60); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(tag66); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertNotNull(document72); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, ""); }
public void test319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test319"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str7 = org.jsoup.Jsoup.clean("", "#data", whitelist6); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basic(); boolean boolean10 = org.jsoup.Jsoup.isValid("hi!", whitelist9); java.lang.String[] strArray18 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist19 = whitelist9.addProtocols(".#document", "#doctype=\"\"", strArray18); org.jsoup.safety.Whitelist whitelist20 = whitelist6.addTags(strArray18); org.jsoup.safety.Whitelist whitelist21 = whitelist3.addTags(strArray18); boolean boolean22 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist21); org.jsoup.safety.Whitelist whitelist26 = whitelist21.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist28 = whitelist21.preserveRelativeLinks(true); java.lang.String str29 = org.jsoup.Jsoup.clean("<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n hi!&amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; hi! &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;\n &lt;/body&gt;\n&lt;/html&gt;\"", "UTF-8UTF-8", whitelist21); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + ".:eq(52) =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi!&amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; hi! &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &lt;/body&gt; &lt;/html&gt;&quot;" + "'", str29, ".:eq(52) =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi!&amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; hi! &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &lt;/body&gt; &lt;/html&gt;&quot;"); }
public void test320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test320"); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean7 = org.jsoup.Jsoup.isValid("#document", whitelist6); java.lang.String str8 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist6); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.basic(); boolean boolean12 = org.jsoup.Jsoup.isValid("hi!", whitelist11); java.lang.String[] strArray20 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist21 = whitelist11.addProtocols(".#document", "#doctype=\"\"", strArray20); org.jsoup.safety.Whitelist whitelist22 = whitelist6.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray20); boolean boolean23 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray20); boolean boolean24 = org.jsoup.helper.StringUtil.in("&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;", strArray20); boolean boolean25 = org.jsoup.helper.StringUtil.in(":matchesOwn(null", strArray20); boolean boolean26 = org.jsoup.helper.StringUtil.in("[<head></head>$=:containsown(hi!:matchesown(null]", strArray20); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str8, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); }
public void test321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test321"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.select.Evaluator.Class class5 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str6 = class5.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals8 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) element26); boolean boolean28 = indexEquals8.matches(element16, (org.jsoup.nodes.Element) document18); org.jsoup.nodes.Document.QuirksMode quirksMode29 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document30 = document18.quirksMode(quirksMode29); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); document33.title("#document"); boolean boolean41 = class5.matches((org.jsoup.nodes.Element) document30, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Document document42 = cleaner3.clean(document30); java.util.regex.Pattern pattern44 = null; org.jsoup.select.Elements elements45 = document30.getElementsByAttributeValueMatching("[hi! hi!*=[#document^=  hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;]", pattern44); // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements46 = document30.siblingElements(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".#document" + "'", str6, ".#document"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + quirksMode29 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode29.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(elements45); }
public void test322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test322"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.select.Evaluator.Class class5 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str6 = class5.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals8 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) element26); boolean boolean28 = indexEquals8.matches(element16, (org.jsoup.nodes.Element) document18); org.jsoup.nodes.Document.QuirksMode quirksMode29 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document30 = document18.quirksMode(quirksMode29); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); document33.title("#document"); boolean boolean41 = class5.matches((org.jsoup.nodes.Element) document30, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Document document42 = cleaner3.clean(document30); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting45 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray50 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50); org.jsoup.nodes.Element element53 = document48.classNames((java.util.Set<java.lang.String>) strSet51); java.lang.String str54 = document48.nodeName(); org.jsoup.select.Elements elements56 = document48.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document60 = document59.clone(); org.jsoup.nodes.Element element62 = document59.addClass(""); org.jsoup.nodes.Element element63 = document48.appendChild((org.jsoup.nodes.Node) document59); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str67 = document66.val(); org.jsoup.nodes.Element element69 = document66.append("#document"); boolean boolean70 = attributeWithValueStarting45.matches((org.jsoup.nodes.Element) document48, element69); java.lang.String str71 = document48.title(); org.jsoup.nodes.Element element72 = document48.body(); boolean boolean73 = cleaner3.isValid(document48); org.jsoup.nodes.Element element74 = document48.head(); org.jsoup.select.Elements elements76 = element74.getElementsMatchingText(" [  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=\"##  hi!\" =\"#doctype\""); org.jsoup.nodes.Node node78 = element74.wrap(" class=&quot; #doctype&quot;"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".#document" + "'", str6, ".#document"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + quirksMode29 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode29.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "#document" + "'", str54, "#document"); org.junit.Assert.assertNotNull(elements56); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, ""); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, ""); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(elements76); org.junit.Assert.assertNotNull(node78); }
public void test323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test323"); org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) 'a'); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str6 = document5.val(); java.util.List<org.jsoup.nodes.Node> nodeList8 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document5, "#document"); java.lang.String str9 = document5.baseUri(); org.jsoup.nodes.Element element10 = document5.body(); java.lang.String str11 = element10.baseUri(); org.jsoup.nodes.Element element13 = element10.prependElement("hi!<html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> "); org.jsoup.nodes.Document document15 = new org.jsoup.nodes.Document("#doctype"); org.jsoup.nodes.Element element16 = document15.empty(); boolean boolean17 = indexEquals1.matches(element10, (org.jsoup.nodes.Element) document15); java.lang.String str18 = indexEquals1.toString(); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document22 = document21.clone(); boolean boolean24 = document22.hasClass("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); org.jsoup.nodes.Element element26 = document22.prependText(""); org.jsoup.nodes.Document document27 = element26.ownerDocument(); java.lang.String str28 = document27.outerHtml(); org.jsoup.nodes.Element element30 = document27.append("UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"UTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"UTF-8"); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean34 = org.jsoup.Jsoup.isValid("#document", whitelist33); java.lang.String str35 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist33); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.basic(); boolean boolean39 = org.jsoup.Jsoup.isValid("hi!", whitelist38); java.lang.String[] strArray47 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist48 = whitelist38.addProtocols(".#document", "#doctype=\"\"", strArray47); org.jsoup.safety.Whitelist whitelist49 = whitelist33.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray47); org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode53 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document54 = document52.quirksMode(quirksMode53); org.jsoup.safety.Whitelist whitelist56 = org.jsoup.safety.Whitelist.basic(); boolean boolean57 = org.jsoup.Jsoup.isValid("hi!", whitelist56); java.lang.String[] strArray65 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist66 = whitelist56.addProtocols(".#document", "#doctype=\"\"", strArray65); org.jsoup.select.Evaluator.AttributeStarting attributeStarting69 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document72 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document75 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray77 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77); org.jsoup.nodes.Element element80 = document75.classNames((java.util.Set<java.lang.String>) strSet78); document75.title("#document"); boolean boolean83 = attributeStarting69.matches((org.jsoup.nodes.Element) document72, (org.jsoup.nodes.Element) document75); java.lang.String str84 = document72.id(); org.jsoup.select.Elements elements86 = document72.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements88 = document72.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute91 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean92 = whitelist56.isSafeAttribute("", (org.jsoup.nodes.Element) document72, attribute91); boolean boolean93 = whitelist49.isSafeAttribute("", (org.jsoup.nodes.Element) document52, attribute91); org.jsoup.parser.Tag tag94 = document52.tag(); java.lang.String str95 = document52.text(); boolean boolean96 = indexEquals1.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document52); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(nodeList8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!"); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!"); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertEquals("'" + str18 + "' != '" + ":eq(97)" + "'", str18, ":eq(97)"); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str28, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str35, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertTrue("'" + quirksMode53 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode53.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(strArray65); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(document72); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertNotNull(strArray77); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true); org.junit.Assert.assertNotNull(element80); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, ""); org.junit.Assert.assertNotNull(elements86); org.junit.Assert.assertNotNull(elements88); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); org.junit.Assert.assertNotNull(tag94); org.junit.Assert.assertEquals("'" + str95 + "' != '" + "#doctype" + "'", str95, "#doctype"); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false); }
public void test324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test324"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings0.indentAmount((int) '4'); java.nio.charset.Charset charset6 = outputSettings0.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); int int10 = outputSettings9.indentAmount(); java.nio.charset.Charset charset11 = outputSettings9.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.charset(charset11); java.nio.charset.Charset[] charsetArray13 = new java.nio.charset.Charset[] { charset11 }; java.util.LinkedList<java.nio.charset.Charset> charsetList14 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList14, charsetArray13); java.nio.charset.Charset charset16 = charsetList14.pop(); org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.prettyPrint(false); java.nio.charset.Charset charset20 = outputSettings17.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings17.indentAmount((int) '4'); java.nio.charset.Charset charset23 = outputSettings17.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.prettyPrint(false); int int27 = outputSettings26.indentAmount(); java.nio.charset.Charset charset28 = outputSettings26.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings17.charset(charset28); java.nio.charset.Charset[] charsetArray30 = new java.nio.charset.Charset[] { charset28 }; java.util.LinkedList<java.nio.charset.Charset> charsetList31 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList31, charsetArray30); java.nio.charset.Charset charset33 = charsetList31.pop(); boolean boolean34 = charsetList14.add(charset33); java.nio.charset.Charset charset35 = charsetList14.removeFirst(); int int36 = charsetList14.size(); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(false); boolean boolean41 = org.jsoup.Jsoup.isValid("", whitelist38); java.lang.String[] strArray47 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist48 = whitelist38.addTags(strArray47); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray47); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray47); java.lang.String[] strArray51 = charsetList14.toArray(strArray47); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(outputSettings5); org.junit.Assert.assertNotNull(charset6); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings12); org.junit.Assert.assertNotNull(charsetArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(charset20); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1); org.junit.Assert.assertNotNull(charset28); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(charsetArray30); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(charset33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(charset35); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(strArray51); }
public void test325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test325"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); java.nio.charset.Charset[] charsetArray4 = new java.nio.charset.Charset[] { charset3 }; java.util.LinkedList<java.nio.charset.Charset> charsetList5 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList5, charsetArray4); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); java.nio.charset.Charset charset10 = outputSettings7.charset(); boolean boolean11 = charsetList5.add(charset10); java.lang.Object obj12 = null; boolean boolean13 = charsetList5.removeLastOccurrence(obj12); java.nio.charset.Charset charset14 = charsetList5.pollFirst(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList15 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.prettyPrint(false); java.nio.charset.Charset charset19 = outputSettings18.charset(); charsetList15.addFirst(charset19); java.util.Iterator<java.nio.charset.Charset> charsetItor21 = charsetList15.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList22 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.prettyPrint(false); java.nio.charset.Charset charset26 = outputSettings25.charset(); charsetList22.addFirst(charset26); boolean boolean28 = charsetList15.offerFirst(charset26); int int29 = charsetList15.size(); java.nio.charset.Charset charset30 = charsetList15.peekLast(); charsetList5.addFirst(charset30); java.nio.charset.Charset charset32 = charsetList5.poll(); java.nio.charset.Charset charset33 = charsetList5.removeFirst(); java.nio.charset.Charset charset34 = charsetList5.pollFirst(); java.nio.charset.Charset charset35 = charsetList5.peek(); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist40 = whitelist38.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist43 = org.jsoup.safety.Whitelist.basic(); boolean boolean44 = org.jsoup.Jsoup.isValid("hi!", whitelist43); java.lang.String[] strArray52 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist53 = whitelist43.addProtocols(".#document", "#doctype=\"\"", strArray52); org.jsoup.safety.Whitelist whitelist54 = whitelist40.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray52); org.jsoup.safety.Whitelist whitelist55 = whitelist36.addAttributes(":containsOwn(hi!:matchesown(null", strArray52); java.lang.String[] strArray56 = charsetList5.toArray(strArray52); // The following exception was thrown during execution in test generation try { org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray52); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array must not contain any null objects"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(charsetArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(charset14); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charset19); org.junit.Assert.assertNotNull(charsetItor21); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(charset26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2); org.junit.Assert.assertNotNull(charset30); org.junit.Assert.assertNotNull(charset32); org.junit.Assert.assertNotNull(charset33); org.junit.Assert.assertNull(charset34); org.junit.Assert.assertNull(charset35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(strArray52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(strArray56); }
public void test326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test326"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basic(); boolean boolean5 = org.jsoup.Jsoup.isValid("hi!", whitelist4); java.lang.String[] strArray13 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist14 = whitelist4.addProtocols(".#document", "#doctype=\"\"", strArray13); boolean boolean16 = whitelist4.isSafeTag(""); org.jsoup.safety.Whitelist whitelist18 = whitelist4.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist21 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes23 = whitelist21.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(false); boolean boolean29 = org.jsoup.Jsoup.isValid("", whitelist26); java.lang.String[] strArray35 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist36 = whitelist26.addTags(strArray35); org.jsoup.safety.Whitelist whitelist37 = whitelist21.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray35); org.jsoup.safety.Whitelist whitelist38 = whitelist18.addProtocols("#comment", ".:eq(52)", strArray35); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist47 = whitelist45.preserveRelativeLinks(false); boolean boolean48 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist45); org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.basic(); boolean boolean51 = org.jsoup.Jsoup.isValid("hi!", whitelist50); java.lang.String[] strArray59 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist60 = whitelist50.addProtocols(".#document", "#doctype=\"\"", strArray59); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray59, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray59); org.jsoup.safety.Whitelist whitelist64 = whitelist45.addTags(strArray59); org.jsoup.safety.Whitelist whitelist65 = whitelist40.addTags(strArray59); org.jsoup.safety.Whitelist whitelist66 = whitelist18.addAttributes("<html>\n <head></head>\n <body></body>\n</html>", strArray59); java.lang.String str67 = org.jsoup.Jsoup.clean("<#root class=\"\">\n <html>\n <head></head>\n <body>\n  [#document^=#doctype]\n </body>\n </html>\n</#root>", "                          ", whitelist18); java.lang.String str68 = org.jsoup.Jsoup.clean("[hi!=:eq(52)] hi! hi!", whitelist18); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(attributes23); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "&lt;#root class=&quot;&quot;&gt;  [#document^=#doctype]" + "'", str67, "&lt;#root class=&quot;&quot;&gt;  [#document^=#doctype]"); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[hi!=:eq(52)] hi! hi!" + "'", str68, "[hi!=:eq(52)] hi! hi!"); }
public void test327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test327"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); java.lang.String str7 = org.jsoup.Jsoup.clean(".#document", whitelist6); org.jsoup.safety.Whitelist whitelist11 = whitelist6.addEnforcedAttribute("\n<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->", ":matchesown(null=\"#document\"", "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str16 = org.jsoup.Jsoup.clean("", "#data", whitelist15); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basic(); boolean boolean19 = org.jsoup.Jsoup.isValid("hi!", whitelist18); java.lang.String[] strArray27 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist28 = whitelist18.addProtocols(".#document", "#doctype=\"\"", strArray27); org.jsoup.safety.Whitelist whitelist29 = whitelist15.addTags(strArray27); org.jsoup.safety.Whitelist whitelist30 = whitelist12.addTags(strArray27); org.jsoup.safety.Whitelist whitelist31 = whitelist11.addTags(strArray27); org.jsoup.safety.Whitelist whitelist32 = whitelist0.addTags(strArray27); org.jsoup.safety.Whitelist whitelist36 = whitelist32.addEnforcedAttribute("##<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "[ hi! <#root class=\"\"> hi! !=#doctype=\"\"]", "hi! hi! #comment"); org.jsoup.nodes.Attributes attributes38 = whitelist36.getEnforcedAttributes("\n<!--<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">-->"); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + ".#document" + "'", str7, ".#document"); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(attributes38); }
public void test328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test328"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); org.jsoup.nodes.Element element12 = document10.head(); org.jsoup.nodes.Element element14 = document10.child(0); java.lang.String str15 = element14.outerHtml(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n <head></head>\n <body>\n  hi! \n </body>\n</html>" + "'", str15, "<html>\n <head></head>\n <body>\n  hi! \n </body>\n</html>"); }
public void test329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test329"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String str4 = org.jsoup.Jsoup.clean("[:matches(null]", whitelist2); org.jsoup.safety.Whitelist whitelist8 = whitelist2.addEnforcedAttribute("[:matches(null!=[#document^=<html> <head></head> <body> hi! </body> </html>]]", "utf-8utf-8=\"#data\"", ":lt(7)"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist9); org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.prettyPrint(false); java.nio.charset.Charset charset17 = outputSettings14.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings14.indentAmount((int) '4'); java.nio.charset.Charset charset20 = outputSettings14.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(false); int int24 = outputSettings23.indentAmount(); java.nio.charset.Charset charset25 = outputSettings23.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings14.charset(charset25); java.nio.charset.Charset[] charsetArray27 = new java.nio.charset.Charset[] { charset25 }; java.util.LinkedList<java.nio.charset.Charset> charsetList28 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList28, charsetArray27); java.nio.charset.Charset charset30 = charsetList28.pop(); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.basic(); boolean boolean33 = org.jsoup.Jsoup.isValid("hi!", whitelist32); java.lang.String[] strArray41 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist42 = whitelist32.addProtocols(".#document", "#doctype=\"\"", strArray41); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist32); boolean boolean44 = charsetList28.contains((java.lang.Object) whitelist32); org.jsoup.safety.Whitelist whitelist47 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes49 = whitelist47.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist52 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist54 = whitelist52.preserveRelativeLinks(false); boolean boolean55 = org.jsoup.Jsoup.isValid("", whitelist52); java.lang.String[] strArray61 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist62 = whitelist52.addTags(strArray61); org.jsoup.safety.Whitelist whitelist63 = whitelist47.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray61); org.jsoup.safety.Whitelist whitelist64 = whitelist32.addProtocols("#<html> <head></head> <body> hi! </body> </html>", "[[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>]", strArray61); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray61, "[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"^=hi! hi! #comment]"); org.jsoup.safety.Whitelist whitelist67 = whitelist9.addAttributes("<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>", strArray61); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray61, "#root"); org.jsoup.safety.Whitelist whitelist70 = whitelist8.addTags(strArray61); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[:matches(null]" + "'", str4, "[:matches(null]"); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(outputSettings16); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(outputSettings19); org.junit.Assert.assertNotNull(charset20); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1); org.junit.Assert.assertNotNull(charset25); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(charsetArray27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(charset30); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(attributes49); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(strArray61); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertNotNull(whitelist70); }
public void test330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test330"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); java.lang.String str4 = attributes0.get("\n#document"); org.jsoup.nodes.Attributes attributes5 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes6 = attributes5.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator7 = attributes5.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap8 = attributes5.dataset(); attributes0.addAll(attributes5); attributes0.put(":gt(1)", "\n#document"); attributes0.put("                                                  ", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root></#root>"); org.jsoup.nodes.Attributes attributes16 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes17 = attributes16.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator18 = attributes16.spliterator(); org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.prettyPrint(false); java.nio.charset.Charset charset23 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings20.indentAmount((int) '4'); java.nio.charset.Charset charset26 = outputSettings20.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.prettyPrint(false); int int30 = outputSettings29.indentAmount(); java.nio.charset.Charset charset31 = outputSettings29.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings20.charset(charset31); java.nio.charset.Charset[] charsetArray33 = new java.nio.charset.Charset[] { charset31 }; java.util.LinkedList<java.nio.charset.Charset> charsetList34 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList34, charsetArray33); java.nio.charset.Charset charset36 = charsetList34.pop(); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.basic(); boolean boolean39 = org.jsoup.Jsoup.isValid("hi!", whitelist38); java.lang.String[] strArray47 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist48 = whitelist38.addProtocols(".#document", "#doctype=\"\"", strArray47); org.jsoup.safety.Cleaner cleaner49 = new org.jsoup.safety.Cleaner(whitelist38); boolean boolean50 = charsetList34.contains((java.lang.Object) whitelist38); boolean boolean51 = org.jsoup.Jsoup.isValid(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist38); boolean boolean52 = attributes16.equals((java.lang.Object) whitelist38); org.jsoup.safety.Whitelist whitelist57 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean58 = org.jsoup.Jsoup.isValid("#document", whitelist57); java.lang.String str59 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist57); org.jsoup.safety.Whitelist whitelist62 = org.jsoup.safety.Whitelist.basic(); boolean boolean63 = org.jsoup.Jsoup.isValid("hi!", whitelist62); java.lang.String[] strArray71 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist72 = whitelist62.addProtocols(".#document", "#doctype=\"\"", strArray71); org.jsoup.safety.Whitelist whitelist73 = whitelist57.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray71); org.jsoup.safety.Whitelist whitelist74 = whitelist38.addProtocols("<html>\n <head></head>\n <body>\n hi!:matchesOwn(null\n </body>\n</html>", "#\n#document", strArray71); boolean boolean75 = attributes0.equals((java.lang.Object) whitelist74); org.jsoup.nodes.Attributes attributes77 = whitelist74.getEnforcedAttributes(""); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(attributeSpliterator7); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertNotNull(attributes17); org.junit.Assert.assertNotNull(attributeSpliterator18); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(charset26); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1); org.junit.Assert.assertNotNull(charset31); org.junit.Assert.assertNotNull(outputSettings32); org.junit.Assert.assertNotNull(charsetArray33); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(charset36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(strArray47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str59, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true); org.junit.Assert.assertNotNull(strArray71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertNotNull(whitelist74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNotNull(attributes77); }
public void test331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test331"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); boolean boolean6 = org.jsoup.Jsoup.isValid("", whitelist3); boolean boolean7 = org.jsoup.Jsoup.isValid("", whitelist3); org.jsoup.safety.Cleaner cleaner8 = new org.jsoup.safety.Cleaner(whitelist3); boolean boolean9 = org.jsoup.Jsoup.isValid("[class=\"\"^=#document]", whitelist3); boolean boolean11 = whitelist3.isSafeTag("#:gt(1)"); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test332"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("\n#document", pattern1); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean6 = org.jsoup.Jsoup.isValid("#document", whitelist5); java.lang.String str7 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist5); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basic(); boolean boolean11 = org.jsoup.Jsoup.isValid("hi!", whitelist10); java.lang.String[] strArray19 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist20 = whitelist10.addProtocols(".#document", "#doctype=\"\"", strArray19); org.jsoup.safety.Whitelist whitelist21 = whitelist5.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray19); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode25 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document26 = document24.quirksMode(quirksMode25); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.basic(); boolean boolean29 = org.jsoup.Jsoup.isValid("hi!", whitelist28); java.lang.String[] strArray37 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist38 = whitelist28.addProtocols(".#document", "#doctype=\"\"", strArray37); org.jsoup.select.Evaluator.AttributeStarting attributeStarting41 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray49 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49); org.jsoup.nodes.Element element52 = document47.classNames((java.util.Set<java.lang.String>) strSet50); document47.title("#document"); boolean boolean55 = attributeStarting41.matches((org.jsoup.nodes.Element) document44, (org.jsoup.nodes.Element) document47); java.lang.String str56 = document44.id(); org.jsoup.select.Elements elements58 = document44.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements60 = document44.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute63 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean64 = whitelist28.isSafeAttribute("", (org.jsoup.nodes.Element) document44, attribute63); boolean boolean65 = whitelist21.isSafeAttribute("", (org.jsoup.nodes.Element) document24, attribute63); org.jsoup.parser.Tag tag66 = document24.tag(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting68 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document71 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document72 = document71.clone(); org.jsoup.nodes.Element element74 = document71.addClass(""); org.jsoup.nodes.Document document76 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element78 = document76.createElement("#document"); boolean boolean79 = attributeStarting68.matches((org.jsoup.nodes.Element) document71, (org.jsoup.nodes.Element) document76); document76.setBaseUri(""); boolean boolean82 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document76); org.jsoup.nodes.Element element84 = document24.createElement(":containsOwn(                                                  "); org.jsoup.nodes.Node node85 = element84.parent(); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str7, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertTrue("'" + quirksMode25 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode25.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, ""); org.junit.Assert.assertNotNull(elements58); org.junit.Assert.assertNotNull(elements60); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(tag66); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertNotNull(document72); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertNull(node85); }
public void test333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test333"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.formatAsBlock(); boolean boolean4 = tag1.isEmpty(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist6); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document13 = document12.clone(); org.jsoup.nodes.Node node15 = document13.removeAttr("#doctype"); org.jsoup.nodes.Document document16 = cleaner9.clean(document13); org.jsoup.nodes.Attributes attributes17 = document16.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator18 = attributes17.spliterator(); org.jsoup.nodes.Element element19 = new org.jsoup.nodes.Element(tag1, "hi!:matchesOwn(null", attributes17); org.jsoup.nodes.Element element21 = element19.html("[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.jsoup.nodes.Element element23 = element21.toggleClass(""); java.util.regex.Pattern pattern24 = null; // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements25 = element21.getElementsMatchingOwnText(pattern24); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(node15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(attributes17); org.junit.Assert.assertNotNull(attributeSpliterator18); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); }
public void test334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test334"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.formatAsBlock(); boolean boolean4 = tag1.isEmpty(); java.lang.String str5 = tag1.getName(); org.jsoup.nodes.Attributes attributes7 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes8 = attributes7.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator9 = attributes7.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap10 = attributes7.dataset(); org.jsoup.nodes.Element element11 = new org.jsoup.nodes.Element(tag1, "", attributes7); org.jsoup.select.Evaluator.AllElements allElements12 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str13 = allElements12.toString(); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray18 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18); org.jsoup.nodes.Element element21 = document16.classNames((java.util.Set<java.lang.String>) strSet19); org.jsoup.nodes.Element element23 = element21.prepend("#document"); org.jsoup.nodes.Element element25 = element21.toggleClass("#doctype=\"\""); boolean boolean27 = element21.hasClass(":eq(52)"); java.lang.String str29 = element21.attr(":eq(52)"); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.basic(); boolean boolean32 = org.jsoup.Jsoup.isValid("hi!", whitelist31); java.lang.String[] strArray40 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist41 = whitelist31.addProtocols(".#document", "#doctype=\"\"", strArray40); org.jsoup.safety.Cleaner cleaner42 = new org.jsoup.safety.Cleaner(whitelist31); org.jsoup.nodes.Document document45 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document46 = document45.clone(); document46.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean49 = document46.isBlock(); org.jsoup.nodes.Document document50 = cleaner42.clean(document46); boolean boolean51 = allElements12.matches(element21, (org.jsoup.nodes.Element) document46); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element52 = element11.before((org.jsoup.nodes.Node) document46); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!"); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertNotNull(attributeSpliterator9); org.junit.Assert.assertNotNull(strMap10); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "*" + "'", str13, "*"); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(strArray40); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); }
public void test335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test335"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); boolean boolean6 = org.jsoup.Jsoup.isValid("", whitelist3); org.jsoup.nodes.Attributes attributes8 = whitelist3.getEnforcedAttributes(":eq(52)"); boolean boolean9 = org.jsoup.Jsoup.isValid("", whitelist3); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basic(); boolean boolean16 = org.jsoup.Jsoup.isValid("hi!", whitelist15); java.lang.String[] strArray24 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist25 = whitelist15.addProtocols(".#document", "#doctype=\"\"", strArray24); org.jsoup.safety.Whitelist whitelist26 = whitelist12.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray24); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist34 = whitelist32.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.basic(); boolean boolean38 = org.jsoup.Jsoup.isValid("hi!", whitelist37); java.lang.String[] strArray46 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist47 = whitelist37.addProtocols(".#document", "#doctype=\"\"", strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist34.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray46); org.jsoup.safety.Whitelist whitelist49 = whitelist30.addAttributes(":containsOwn(hi!:matchesown(null", strArray46); org.jsoup.safety.Whitelist whitelist50 = whitelist26.addAttributes(" text=\"\"", strArray46); org.jsoup.safety.Whitelist whitelist51 = whitelist3.addProtocols("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray46); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray46); boolean boolean53 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body>\n hi!  hi! \n </body>\n</html>\n<#root>\n <html>\n <head></head>\n <body>\n  [#document^=  hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;\n </body>\n </html>\n</#root>", strArray46); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); }
public void test336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test336"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.select.Elements elements10 = document8.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements12 = document8.getElementsByAttribute("#document"); org.jsoup.select.Elements elements15 = document8.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document20 = document19.clone(); org.jsoup.nodes.Element element22 = document19.addClass(""); java.lang.String str23 = document19.toString(); org.jsoup.nodes.Element element25 = document19.text(".#document"); org.jsoup.nodes.Document.QuirksMode quirksMode26 = document19.quirksMode(); org.jsoup.nodes.Element element28 = document19.appendElement("#doctype=\"\""); org.jsoup.nodes.Document document29 = cleaner4.clean(document19); org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("#doctype=\"\"", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document33 = document32.normalise(); org.jsoup.select.Elements elements35 = document32.getElementsByAttribute("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\":contains(&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); boolean boolean36 = cleaner4.isValid(document32); org.jsoup.helper.Validate.notNull((java.lang.Object) cleaner4, "<html>\n <head></head> \n <body>\n hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str23, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + quirksMode26 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode26.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(elements35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); }
public void test337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test337"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addTags(strArray11); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.basic(); boolean boolean17 = org.jsoup.Jsoup.isValid("hi!", whitelist16); java.lang.String[] strArray25 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist26 = whitelist16.addProtocols(".#document", "#doctype=\"\"", strArray25); org.jsoup.nodes.Attributes attributes28 = whitelist16.getEnforcedAttributes(".#document"); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean33 = org.jsoup.Jsoup.isValid("#document", whitelist32); java.lang.String str34 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist32); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.basic(); boolean boolean38 = org.jsoup.Jsoup.isValid("hi!", whitelist37); java.lang.String[] strArray46 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist47 = whitelist37.addProtocols(".#document", "#doctype=\"\"", strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist32.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray46); boolean boolean49 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray46); org.jsoup.safety.Whitelist whitelist50 = whitelist16.addTags(strArray46); org.jsoup.safety.Whitelist whitelist51 = whitelist12.addProtocols("hi!:matchesown(null=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", "[*]", strArray46); boolean boolean52 = org.jsoup.Jsoup.isValid("hi! =&quot;&quot;", whitelist12); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(attributes28); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str34, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); }
public void test338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test338"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor3 = attributes0.iterator(); java.lang.Object obj4 = null; boolean boolean5 = attributes0.equals(obj4); org.jsoup.safety.Whitelist whitelist8 = new org.jsoup.safety.Whitelist(); boolean boolean10 = whitelist8.isSafeTag("#root"); java.lang.String str11 = org.jsoup.Jsoup.clean("UTF-8bodyUTF-8", "", whitelist8); org.jsoup.nodes.Element element13 = null; org.jsoup.nodes.Attribute attribute16 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute17 = attribute16.clone(); java.lang.String str18 = attribute17.getKey(); java.lang.String str19 = attribute17.getKey(); boolean boolean20 = whitelist8.isSafeAttribute("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"^=hi! hi! #comment]", element13, attribute17); attributes0.put(attribute17); java.lang.String str23 = attribute17.setValue("[^:containsOwn(hi!]"); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertNotNull(attributeItor3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTF-8bodyUTF-8" + "'", str11, "UTF-8bodyUTF-8"); org.junit.Assert.assertNotNull(attribute16); org.junit.Assert.assertNotNull(attribute17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str23, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); }
public void test339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test339"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str9 = document8.val(); java.util.List<org.jsoup.nodes.Node> nodeList11 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document8, "#document"); java.lang.String str12 = document8.baseUri(); org.jsoup.nodes.Element element14 = document8.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements15 = document8.parents(); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse(".:eq(52)"); java.lang.String str19 = document18.html(); org.jsoup.nodes.Element element21 = document18.prependElement("[^hi!]"); boolean boolean22 = cleaner4.isValid(document18); org.jsoup.select.Evaluator.Tag tag24 = new org.jsoup.select.Evaluator.Tag(""); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str29 = document28.val(); java.util.List<org.jsoup.nodes.Node> nodeList31 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document28, "#document"); java.lang.String str32 = document28.baseUri(); org.jsoup.nodes.Element element34 = document28.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document.OutputSettings outputSettings35 = document28.outputSettings(); org.jsoup.nodes.Document.QuirksMode quirksMode36 = null; org.jsoup.nodes.Document document37 = document28.quirksMode(quirksMode36); org.jsoup.select.Evaluator.IndexEquals indexEquals39 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray44 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44); org.jsoup.nodes.Element element47 = document42.classNames((java.util.Set<java.lang.String>) strSet45); org.jsoup.nodes.Document document49 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray54 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54); org.jsoup.nodes.Element element57 = document52.classNames((java.util.Set<java.lang.String>) strSet55); org.jsoup.nodes.Element element58 = document49.appendChild((org.jsoup.nodes.Node) element57); boolean boolean59 = indexEquals39.matches(element47, (org.jsoup.nodes.Element) document49); boolean boolean60 = tag24.matches((org.jsoup.nodes.Element) document37, element47); org.jsoup.nodes.Element element61 = null; org.jsoup.nodes.Document document64 = org.jsoup.Jsoup.parse(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); document64.setBaseUri("#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean67 = tag24.matches(element61, (org.jsoup.nodes.Element) document64); org.jsoup.nodes.Document document68 = cleaner4.clean(document64); java.lang.String str69 = document68.title(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(nodeList11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(nodeList31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!"); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(outputSettings35); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(strArray44); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(document64); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertNotNull(document68); org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, ""); }
public void test340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test340"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str14 = document13.val(); java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document13, "#document"); java.lang.String str17 = document13.baseUri(); org.jsoup.nodes.Element element19 = document13.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str20 = document13.nodeName(); boolean boolean21 = containsOwnText6.matches((org.jsoup.nodes.Element) document9, (org.jsoup.nodes.Element) document13); org.jsoup.select.Elements elements23 = document13.getElementsContainingOwnText("hi!<html> <head></head> <body> hi! </body> </html>"); java.lang.String str25 = document13.attr("[^hi!]"); org.jsoup.nodes.Document document26 = cleaner4.clean(document13); org.jsoup.select.Evaluator.IndexEquals indexEquals28 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray33 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33); org.jsoup.nodes.Element element36 = document31.classNames((java.util.Set<java.lang.String>) strSet34); org.jsoup.nodes.Document document38 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray43 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43); org.jsoup.nodes.Element element46 = document41.classNames((java.util.Set<java.lang.String>) strSet44); org.jsoup.nodes.Element element47 = document38.appendChild((org.jsoup.nodes.Node) element46); boolean boolean48 = indexEquals28.matches(element36, (org.jsoup.nodes.Element) document38); org.jsoup.nodes.Document.QuirksMode quirksMode49 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document50 = document38.quirksMode(quirksMode49); org.jsoup.nodes.Element element52 = document50.createElement("#root"); org.jsoup.nodes.Document document53 = cleaner4.clean(document50); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("hi!<html> <head></head> <body> hi! </body> </html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements59 = document56.getElementsByAttributeValueStarting("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean60 = cleaner4.isValid(document56); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node62 = document56.wrap(""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertNotNull(nodeList16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!"); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(elements23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + quirksMode49 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode49.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(elements59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); }
public void test341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test341"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist14 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray12); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.basic(); boolean boolean26 = org.jsoup.Jsoup.isValid("hi!", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addProtocols(".#document", "#doctype=\"\"", strArray34); org.jsoup.safety.Whitelist whitelist36 = whitelist22.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray34); org.jsoup.safety.Whitelist whitelist37 = whitelist18.addAttributes(":containsOwn(hi!:matchesown(null", strArray34); org.jsoup.safety.Whitelist whitelist38 = whitelist14.addAttributes(" text=\"\"", strArray34); org.jsoup.nodes.Element element40 = null; org.jsoup.nodes.Attribute attribute43 = new org.jsoup.nodes.Attribute("\n<!--<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>-->", ""); attribute43.setKey("<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>"); boolean boolean46 = whitelist38.isSafeAttribute("[<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->$=<html>\n <head>\n <title>#document</title>\n </head>\n <body>\n hi!\n </body>\n</html>]", element40, attribute43); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); }
public void test342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test342"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.formatAsBlock(); boolean boolean4 = tag1.isEmpty(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner9 = new org.jsoup.safety.Cleaner(whitelist6); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document13 = document12.clone(); org.jsoup.nodes.Node node15 = document13.removeAttr("#doctype"); org.jsoup.nodes.Document document16 = cleaner9.clean(document13); org.jsoup.nodes.Attributes attributes17 = document16.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator18 = attributes17.spliterator(); org.jsoup.nodes.Element element19 = new org.jsoup.nodes.Element(tag1, "hi!:matchesOwn(null", attributes17); org.jsoup.nodes.Element element21 = element19.html("[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.jsoup.nodes.Element element23 = element21.toggleClass(""); boolean boolean24 = element23.hasText(); boolean boolean26 = element23.hasAttr("#comment"); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(node15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(attributes17); org.junit.Assert.assertNotNull(attributeSpliterator18); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); }
public void test343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test343"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist1); org.jsoup.safety.Whitelist whitelist4 = whitelist1.preserveRelativeLinks(false); boolean boolean6 = whitelist4.isSafeTag("<hi!></hi!>"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test344"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str4 = org.jsoup.Jsoup.clean("", "#data", whitelist3); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basic(); boolean boolean7 = org.jsoup.Jsoup.isValid("hi!", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addProtocols(".#document", "#doctype=\"\"", strArray15); org.jsoup.safety.Whitelist whitelist17 = whitelist3.addTags(strArray15); org.jsoup.safety.Whitelist whitelist18 = whitelist0.addTags(strArray15); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.basic(); boolean boolean21 = org.jsoup.Jsoup.isValid("hi!", whitelist20); java.lang.String[] strArray29 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist30 = whitelist20.addProtocols(".#document", "#doctype=\"\"", strArray29); org.jsoup.select.Evaluator.AttributeStarting attributeStarting33 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray41 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41); org.jsoup.nodes.Element element44 = document39.classNames((java.util.Set<java.lang.String>) strSet42); document39.title("#document"); boolean boolean47 = attributeStarting33.matches((org.jsoup.nodes.Element) document36, (org.jsoup.nodes.Element) document39); java.lang.String str48 = document36.id(); org.jsoup.select.Elements elements50 = document36.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements52 = document36.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute55 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean56 = whitelist20.isSafeAttribute("", (org.jsoup.nodes.Element) document36, attribute55); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist61 = whitelist59.preserveRelativeLinks(false); boolean boolean62 = org.jsoup.Jsoup.isValid("", whitelist59); java.lang.String[] strArray68 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist69 = whitelist59.addTags(strArray68); org.jsoup.safety.Whitelist whitelist70 = whitelist20.addAttributes("[^hi!]", strArray68); org.jsoup.safety.Whitelist whitelist72 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist75 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str76 = org.jsoup.Jsoup.clean("", "#data", whitelist75); org.jsoup.safety.Whitelist whitelist78 = org.jsoup.safety.Whitelist.basic(); boolean boolean79 = org.jsoup.Jsoup.isValid("hi!", whitelist78); java.lang.String[] strArray87 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist88 = whitelist78.addProtocols(".#document", "#doctype=\"\"", strArray87); org.jsoup.safety.Whitelist whitelist89 = whitelist75.addTags(strArray87); org.jsoup.safety.Whitelist whitelist90 = whitelist72.addTags(strArray87); org.jsoup.safety.Whitelist whitelist91 = whitelist70.addAttributes("[^:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", strArray87); org.jsoup.safety.Whitelist whitelist92 = whitelist0.addTags(strArray87); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, ""); org.junit.Assert.assertNotNull(elements50); org.junit.Assert.assertNotNull(elements52); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist75); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, ""); org.junit.Assert.assertNotNull(whitelist78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true); org.junit.Assert.assertNotNull(strArray87); org.junit.Assert.assertNotNull(whitelist88); org.junit.Assert.assertNotNull(whitelist89); org.junit.Assert.assertNotNull(whitelist90); org.junit.Assert.assertNotNull(whitelist91); org.junit.Assert.assertNotNull(whitelist92); }
public void test345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test345"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Element element9 = document7.prepend("\n#document"); org.jsoup.nodes.Attribute attribute12 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute13 = attribute12.clone(); attribute12.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str16 = attribute12.getValue(); java.lang.String str17 = attribute12.toString(); boolean boolean18 = whitelist1.isSafeAttribute(":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", element9, attribute12); java.lang.String str19 = attribute12.html(); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(attribute12); org.junit.Assert.assertNotNull(attribute13); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str16, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"" + "'", str17, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\""); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\""); }
public void test346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test346"); org.jsoup.safety.Whitelist.AttributeKey attributeKey1 = new org.jsoup.safety.Whitelist.AttributeKey(":matchesown(null=\"#document\""); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); boolean boolean7 = org.jsoup.Jsoup.isValid("", whitelist4); java.lang.String[] strArray13 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist14 = whitelist4.addTags(strArray13); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.basic(); boolean boolean19 = org.jsoup.Jsoup.isValid("hi!", whitelist18); java.lang.String[] strArray27 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist28 = whitelist18.addProtocols(".#document", "#doctype=\"\"", strArray27); org.jsoup.nodes.Attributes attributes30 = whitelist18.getEnforcedAttributes(".#document"); org.jsoup.safety.Whitelist whitelist34 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean35 = org.jsoup.Jsoup.isValid("#document", whitelist34); java.lang.String str36 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist34); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.basic(); boolean boolean40 = org.jsoup.Jsoup.isValid("hi!", whitelist39); java.lang.String[] strArray48 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist49 = whitelist39.addProtocols(".#document", "#doctype=\"\"", strArray48); org.jsoup.safety.Whitelist whitelist50 = whitelist34.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray48); boolean boolean51 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray48); org.jsoup.safety.Whitelist whitelist52 = whitelist18.addTags(strArray48); org.jsoup.safety.Whitelist whitelist53 = whitelist14.addProtocols("hi!:matchesown(null=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", "[*]", strArray48); java.lang.String str54 = org.jsoup.Jsoup.clean("[[:matches(null!=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]]!=utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8]", whitelist53); boolean boolean55 = attributeKey1.equals((java.lang.Object) "[[:matches(null!=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]]!=utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8]"); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str36, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[[:matches(null!=[#document^=  hi! ]]!=utf-8  hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;utf-8  hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;utf-8  hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;utf-8  hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;utf-8  hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;utf-8  hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;utf-8]" + "'", str54, "[[:matches(null!=[#document^=  hi! ]]!=utf-8  hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;utf-8  hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;utf-8  hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;utf-8  hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;utf-8  hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;utf-8  hi! =&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;#root class=&quot;&quot;&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;/#root&gt;&quot;utf-8]"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); }
public void test347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test347"); org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str1 = allElements0.toString(); java.lang.String str2 = allElements0.toString(); java.lang.String str3 = allElements0.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Element element11 = document8.addClass(""); org.jsoup.nodes.Document document13 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element15 = document13.createElement("#document"); boolean boolean16 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document13); org.jsoup.nodes.Element element18 = document13.toggleClass("#doctype"); org.jsoup.select.Elements elements20 = element18.getElementsMatchingOwnText("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str24 = org.jsoup.Jsoup.clean("", "#data", whitelist23); org.jsoup.safety.Cleaner cleaner25 = new org.jsoup.safety.Cleaner(whitelist23); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText27 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner31 = new org.jsoup.safety.Cleaner(whitelist28); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document35 = document34.clone(); org.jsoup.nodes.Node node37 = document35.removeAttr("#doctype"); org.jsoup.nodes.Document document38 = cleaner31.clean(document35); org.jsoup.nodes.Attributes attributes39 = document38.attributes(); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document47 = document46.clone(); org.jsoup.nodes.Node node49 = document47.removeAttr("#doctype"); org.jsoup.nodes.Document document50 = cleaner43.clean(document47); org.jsoup.nodes.Attributes attributes51 = document50.attributes(); boolean boolean52 = containsOwnText27.matches((org.jsoup.nodes.Element) document38, (org.jsoup.nodes.Element) document50); boolean boolean53 = cleaner25.isValid(document38); boolean boolean54 = allElements0.matches(element18, (org.jsoup.nodes.Element) document38); org.jsoup.nodes.Element element56 = document38.prependElement(".#document"); java.lang.String str57 = element56.toString(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "*" + "'", str1, "*"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "*" + "'", str2, "*"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "*" + "'", str3, "*"); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(node37); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(attributes39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(node49); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(attributes51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "<.#document></.#document>" + "'", str57, "<.#document></.#document>"); }
public void test348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test348"); org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str1 = allElements0.toString(); java.lang.String str2 = allElements0.toString(); java.lang.String str3 = allElements0.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Element element11 = document8.addClass(""); org.jsoup.nodes.Document document13 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element15 = document13.createElement("#document"); boolean boolean16 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document13); org.jsoup.nodes.Element element18 = document13.toggleClass("#doctype"); org.jsoup.select.Elements elements20 = element18.getElementsMatchingOwnText("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str24 = org.jsoup.Jsoup.clean("", "#data", whitelist23); org.jsoup.safety.Cleaner cleaner25 = new org.jsoup.safety.Cleaner(whitelist23); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText27 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner31 = new org.jsoup.safety.Cleaner(whitelist28); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document35 = document34.clone(); org.jsoup.nodes.Node node37 = document35.removeAttr("#doctype"); org.jsoup.nodes.Document document38 = cleaner31.clean(document35); org.jsoup.nodes.Attributes attributes39 = document38.attributes(); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document47 = document46.clone(); org.jsoup.nodes.Node node49 = document47.removeAttr("#doctype"); org.jsoup.nodes.Document document50 = cleaner43.clean(document47); org.jsoup.nodes.Attributes attributes51 = document50.attributes(); boolean boolean52 = containsOwnText27.matches((org.jsoup.nodes.Element) document38, (org.jsoup.nodes.Element) document50); boolean boolean53 = cleaner25.isValid(document38); boolean boolean54 = allElements0.matches(element18, (org.jsoup.nodes.Element) document38); org.jsoup.select.Evaluator.ContainsText containsText56 = new org.jsoup.select.Evaluator.ContainsText("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Element element57 = null; org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting60 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document63 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray65 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65); org.jsoup.nodes.Element element68 = document63.classNames((java.util.Set<java.lang.String>) strSet66); java.lang.String str69 = document63.nodeName(); org.jsoup.select.Elements elements71 = document63.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document74 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document75 = document74.clone(); org.jsoup.nodes.Element element77 = document74.addClass(""); org.jsoup.nodes.Element element78 = document63.appendChild((org.jsoup.nodes.Node) document74); org.jsoup.nodes.Document document81 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str82 = document81.val(); org.jsoup.nodes.Element element84 = document81.append("#document"); boolean boolean85 = attributeWithValueStarting60.matches((org.jsoup.nodes.Element) document63, element84); java.util.regex.Pattern pattern87 = null; org.jsoup.select.Elements elements88 = document63.getElementsByAttributeValueMatching("[^hi!]", pattern87); org.jsoup.nodes.Element element90 = document63.prependText("[hi!=:eq(52)]"); boolean boolean91 = containsText56.matches(element57, element90); org.jsoup.nodes.Document document93 = org.jsoup.nodes.Document.createShell("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean94 = allElements0.matches(element57, (org.jsoup.nodes.Element) document93); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node95 = document93.previousSibling(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "*" + "'", str1, "*"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "*" + "'", str2, "*"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "*" + "'", str3, "*"); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(node37); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(attributes39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(node49); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(attributes51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertNotNull(strArray65); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertEquals("'" + str69 + "' != '" + "#document" + "'", str69, "#document"); org.junit.Assert.assertNotNull(elements71); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertNotNull(element77); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertNotNull(document81); org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, ""); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertNotNull(elements88); org.junit.Assert.assertNotNull(element90); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false); org.junit.Assert.assertNotNull(document93); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true); }
public void test349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test349"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); boolean boolean13 = whitelist1.isSafeTag(""); org.jsoup.safety.Whitelist whitelist15 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist18 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes20 = whitelist18.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(false); boolean boolean26 = org.jsoup.Jsoup.isValid("", whitelist23); java.lang.String[] strArray32 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist33 = whitelist23.addTags(strArray32); org.jsoup.safety.Whitelist whitelist34 = whitelist18.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray32); org.jsoup.safety.Whitelist whitelist35 = whitelist15.addProtocols("#comment", ".:eq(52)", strArray32); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist39 = whitelist37.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner40 = new org.jsoup.safety.Cleaner(whitelist37); org.jsoup.safety.Whitelist whitelist42 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist44 = whitelist42.preserveRelativeLinks(false); boolean boolean45 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist42); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.basic(); boolean boolean48 = org.jsoup.Jsoup.isValid("hi!", whitelist47); java.lang.String[] strArray56 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist57 = whitelist47.addProtocols(".#document", "#doctype=\"\"", strArray56); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray56, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray56); org.jsoup.safety.Whitelist whitelist61 = whitelist42.addTags(strArray56); org.jsoup.safety.Whitelist whitelist62 = whitelist37.addTags(strArray56); org.jsoup.safety.Whitelist whitelist63 = whitelist15.addAttributes("<html>\n <head></head>\n <body></body>\n</html>", strArray56); org.jsoup.safety.Whitelist whitelist67 = whitelist63.addEnforcedAttribute("hi!:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "[:matches(null]", "<html>\n <head></head> \n <body>\n hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>"); boolean boolean69 = whitelist63.isSafeTag("[#document, ]"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(strArray56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); }
public void test350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test350"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean5 = org.jsoup.Jsoup.isValid("#document", whitelist4); java.lang.String str6 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist4); java.lang.String str7 = org.jsoup.Jsoup.clean(" ", "", whitelist4); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str6, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); }
public void test351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test351"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element3 = document2.body(); org.jsoup.nodes.Element element5 = element3.before(":contains([#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); boolean boolean7 = element3.hasClass("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); boolean boolean12 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist9); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.basic(); boolean boolean15 = org.jsoup.Jsoup.isValid("hi!", whitelist14); java.lang.String[] strArray23 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist24 = whitelist14.addProtocols(".#document", "#doctype=\"\"", strArray23); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray23, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray23); org.jsoup.safety.Whitelist whitelist28 = whitelist9.addTags(strArray23); boolean boolean29 = element3.equals((java.lang.Object) whitelist28); org.jsoup.safety.Whitelist whitelist31 = whitelist28.preserveRelativeLinks(true); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(element3); org.junit.Assert.assertNotNull(element5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(whitelist31); }
public void test352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test352"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.nodes.Attributes attributes6 = whitelist1.getEnforcedAttributes(""); java.lang.String str7 = org.jsoup.Jsoup.clean("[[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]!=.#document]", whitelist1); org.jsoup.safety.Whitelist whitelist8 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes10 = whitelist8.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist15 = whitelist13.preserveRelativeLinks(false); boolean boolean16 = org.jsoup.Jsoup.isValid("", whitelist13); java.lang.String[] strArray22 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist23 = whitelist13.addTags(strArray22); org.jsoup.safety.Whitelist whitelist24 = whitelist8.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray22); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray22, ""); org.jsoup.safety.Whitelist whitelist27 = whitelist1.addTags(strArray22); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist34 = whitelist32.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.basic(); boolean boolean38 = org.jsoup.Jsoup.isValid("hi!", whitelist37); java.lang.String[] strArray46 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist47 = whitelist37.addProtocols(".#document", "#doctype=\"\"", strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist34.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray46); org.jsoup.safety.Whitelist whitelist49 = whitelist30.addAttributes(":containsOwn(hi!:matchesown(null", strArray46); boolean boolean50 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray46); boolean boolean51 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>#document", strArray46); org.jsoup.safety.Whitelist whitelist52 = whitelist1.addTags(strArray46); org.jsoup.safety.Whitelist whitelist56 = whitelist1.addEnforcedAttribute("##text", "<html>\n <head></head> \n <body>\n hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>", "[text=\"\"$=hi!  public &quot;#data&quot; &quot;#doctype&quot;&gt;]"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[[#document^=  hi! ]!=.#document]" + "'", str7, "[[#document^=  hi! ]!=.#document]"); org.junit.Assert.assertNotNull(attributes10); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist56); }
public void test353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test353"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addTags(strArray11); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.basic(); boolean boolean17 = org.jsoup.Jsoup.isValid("hi!", whitelist16); java.lang.String[] strArray25 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist26 = whitelist16.addProtocols(".#document", "#doctype=\"\"", strArray25); org.jsoup.nodes.Attributes attributes28 = whitelist16.getEnforcedAttributes(".#document"); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean33 = org.jsoup.Jsoup.isValid("#document", whitelist32); java.lang.String str34 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist32); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.basic(); boolean boolean38 = org.jsoup.Jsoup.isValid("hi!", whitelist37); java.lang.String[] strArray46 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist47 = whitelist37.addProtocols(".#document", "#doctype=\"\"", strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist32.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray46); boolean boolean49 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray46); org.jsoup.safety.Whitelist whitelist50 = whitelist16.addTags(strArray46); org.jsoup.safety.Whitelist whitelist51 = whitelist12.addProtocols("hi!:matchesown(null=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", "[*]", strArray46); boolean boolean52 = org.jsoup.helper.StringUtil.in("[^[^:containsOwn(hi!]]", strArray46); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(attributes28); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str34, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); }
public void test354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test354"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); boolean boolean7 = org.jsoup.Jsoup.isValid("", whitelist4); boolean boolean8 = org.jsoup.Jsoup.isValid("", whitelist4); boolean boolean10 = whitelist4.isSafeTag(""); java.lang.String str11 = org.jsoup.Jsoup.clean("[#document, hi!, ]", "hi!:matchesOwn(null", whitelist4); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[#document, hi!, ]" + "'", str11, "[#document, hi!, ]"); }
public void test355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test355"); org.jsoup.nodes.Attribute attribute2 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute3 = attribute2.clone(); attribute2.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); attribute2.setKey("<html>\n <head></head>\n <body>\n  #document\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str13 = org.jsoup.Jsoup.clean("", "#data", whitelist12); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basic(); boolean boolean16 = org.jsoup.Jsoup.isValid("hi!", whitelist15); java.lang.String[] strArray24 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist25 = whitelist15.addProtocols(".#document", "#doctype=\"\"", strArray24); org.jsoup.safety.Whitelist whitelist26 = whitelist12.addTags(strArray24); org.jsoup.safety.Whitelist whitelist27 = whitelist9.addTags(strArray24); boolean boolean28 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist27); org.jsoup.safety.Whitelist whitelist32 = whitelist27.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist35 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist37 = whitelist35.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner38 = new org.jsoup.safety.Cleaner(whitelist35); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); boolean boolean43 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist40); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.basic(); boolean boolean46 = org.jsoup.Jsoup.isValid("hi!", whitelist45); java.lang.String[] strArray54 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist55 = whitelist45.addProtocols(".#document", "#doctype=\"\"", strArray54); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray54, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray54); org.jsoup.safety.Whitelist whitelist59 = whitelist40.addTags(strArray54); org.jsoup.safety.Whitelist whitelist60 = whitelist35.addTags(strArray54); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray54); org.jsoup.safety.Whitelist whitelist62 = whitelist27.addProtocols("hi! hi! #comment", "[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]", strArray54); boolean boolean63 = attribute2.equals((java.lang.Object) strArray54); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray54); org.junit.Assert.assertNotNull(attribute2); org.junit.Assert.assertNotNull(attribute3); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); }
public void test356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test356"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.nodes.Element element10 = document8.prepend("\n#document"); org.jsoup.nodes.Attribute attribute13 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute14 = attribute13.clone(); attribute13.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str17 = attribute13.getValue(); java.lang.String str18 = attribute13.toString(); boolean boolean19 = whitelist2.isSafeAttribute(":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", element10, attribute13); org.jsoup.select.Elements elements21 = element10.getElementsByIndexLessThan((int) (byte) 1); java.lang.String str22 = element10.outerHtml(); java.util.List<org.jsoup.nodes.Node> nodeList24 = org.jsoup.parser.Parser.parseFragment("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"#document\"", element10, "hi! [^:containsOwn(hi!]"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(attribute13); org.junit.Assert.assertNotNull(attribute14); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str17, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"" + "'", str18, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\""); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(elements21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#document\n<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str22, "#document\n<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(nodeList24); }
public void test357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test357"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean3 = org.jsoup.Jsoup.isValid("#document", whitelist2); java.lang.String str4 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist2); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist2.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray16); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode22 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document23 = document21.quirksMode(quirksMode22); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.basic(); boolean boolean26 = org.jsoup.Jsoup.isValid("hi!", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addProtocols(".#document", "#doctype=\"\"", strArray34); org.jsoup.select.Evaluator.AttributeStarting attributeStarting38 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray46 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46); org.jsoup.nodes.Element element49 = document44.classNames((java.util.Set<java.lang.String>) strSet47); document44.title("#document"); boolean boolean52 = attributeStarting38.matches((org.jsoup.nodes.Element) document41, (org.jsoup.nodes.Element) document44); java.lang.String str53 = document41.id(); org.jsoup.select.Elements elements55 = document41.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements57 = document41.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute60 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean61 = whitelist25.isSafeAttribute("", (org.jsoup.nodes.Element) document41, attribute60); boolean boolean62 = whitelist18.isSafeAttribute("", (org.jsoup.nodes.Element) document21, attribute60); org.jsoup.select.Elements elements63 = document21.getAllElements(); java.util.function.UnaryOperator<org.jsoup.nodes.Element> elementUnaryOperator64 = null; // The following exception was thrown during execution in test generation try { elements63.replaceAll(elementUnaryOperator64); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str4, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + quirksMode22 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode22.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, ""); org.junit.Assert.assertNotNull(elements55); org.junit.Assert.assertNotNull(elements57); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(elements63); }
public void test358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test358"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); java.lang.String str3 = org.jsoup.Jsoup.clean(":eq(52)", "hi!:matchesOwn(null", whitelist2); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.nodes.Element element10 = document7.addClass(""); org.jsoup.nodes.Element element12 = document7.prependElement("#doctype"); java.lang.String str13 = element12.nodeName(); org.jsoup.nodes.Attribute attribute16 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute17 = attribute16.clone(); boolean boolean18 = whitelist2.isSafeAttribute("                ", element12, attribute17); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.basic(); boolean boolean23 = org.jsoup.Jsoup.isValid("hi!", whitelist22); java.lang.String[] strArray31 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist32 = whitelist22.addProtocols(".#document", "#doctype=\"\"", strArray31); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray31, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray31); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist36 = whitelist2.addProtocols("", "hi! hi!#document hi!", strArray31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":eq(52)" + "'", str3, ":eq(52)"); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(element10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#doctype" + "'", str13, "#doctype"); org.junit.Assert.assertNotNull(attribute16); org.junit.Assert.assertNotNull(attribute17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(strArray31); org.junit.Assert.assertNotNull(whitelist32); }
public void test359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test359"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document3 = document2.clone(); org.jsoup.nodes.Document.QuirksMode quirksMode4 = document2.quirksMode(); org.jsoup.nodes.Attributes attributes5 = document2.attributes(); org.jsoup.nodes.Attributes attributes6 = attributes5.clone(); java.lang.String str8 = attributes6.get("<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>"); java.util.List<org.jsoup.nodes.Attribute> attributeList9 = attributes6.asList(); org.jsoup.safety.Whitelist whitelist10 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes12 = whitelist10.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList13 = attributes12.asList(); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor14 = attributes12.iterator(); attributes6.addAll(attributes12); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertTrue("'" + quirksMode4 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode4.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertNotNull(attributeList9); org.junit.Assert.assertNotNull(attributes12); org.junit.Assert.assertNotNull(attributeList13); org.junit.Assert.assertNotNull(attributeItor14); }
public void test360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test360"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean3 = org.jsoup.Jsoup.isValid("#document", whitelist2); java.lang.String str4 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist2); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist2.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray16); boolean boolean20 = whitelist2.isSafeTag("##text"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str4, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test361"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document5 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray10 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10); org.jsoup.nodes.Element element13 = document8.classNames((java.util.Set<java.lang.String>) strSet11); org.jsoup.nodes.Element element14 = document5.appendChild((org.jsoup.nodes.Node) element13); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray19 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19); org.jsoup.nodes.Element element22 = document17.classNames((java.util.Set<java.lang.String>) strSet20); org.jsoup.nodes.Element element23 = document5.classNames((java.util.Set<java.lang.String>) strSet20); java.lang.String str24 = document5.className(); org.jsoup.select.Elements elements26 = document5.getElementsByTag(":lt(10)"); boolean boolean28 = document5.hasAttr(".#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean29 = cleaner3.isValid(document5); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(elements26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); }
public void test362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test362"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); java.lang.String str4 = org.jsoup.Jsoup.clean(".#document", whitelist3); org.jsoup.safety.Whitelist whitelist8 = whitelist3.addEnforcedAttribute("\n<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->", ":matchesown(null=\"#document\"", "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str13 = org.jsoup.Jsoup.clean("", "#data", whitelist12); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basic(); boolean boolean16 = org.jsoup.Jsoup.isValid("hi!", whitelist15); java.lang.String[] strArray24 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist25 = whitelist15.addProtocols(".#document", "#doctype=\"\"", strArray24); org.jsoup.safety.Whitelist whitelist26 = whitelist12.addTags(strArray24); org.jsoup.safety.Whitelist whitelist27 = whitelist9.addTags(strArray24); org.jsoup.safety.Whitelist whitelist28 = whitelist8.addTags(strArray24); org.jsoup.nodes.Attributes attributes30 = whitelist8.getEnforcedAttributes("<!DOCTYPE <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\" PUBLIC \"body\" \"<html>\n <head></head>\n <body>\n </body>\n</html>\">"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ".#document" + "'", str4, ".#document"); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(attributes30); }
public void test363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test363"); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList0 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings3.charset(); charsetList0.addFirst(charset4); java.util.Iterator<java.nio.charset.Charset> charsetItor6 = charsetList0.iterator(); java.util.Iterator<java.nio.charset.Charset> charsetItor7 = charsetList0.descendingIterator(); java.util.ListIterator<java.nio.charset.Charset> charsetItor9 = charsetList0.listIterator((int) (short) 0); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner14 = new org.jsoup.safety.Cleaner(whitelist11); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document18 = document17.clone(); org.jsoup.nodes.Node node20 = document18.removeAttr("#doctype"); org.jsoup.nodes.Document document21 = cleaner14.clean(document18); org.jsoup.nodes.Attributes attributes22 = document21.attributes(); org.jsoup.nodes.Element element23 = document21.head(); org.jsoup.nodes.Node node24 = element23.previousSibling(); java.lang.String str25 = element23.className(); java.util.List<org.jsoup.nodes.Node> nodeList27 = org.jsoup.parser.Parser.parseFragment(".:eq(52)", element23, " text=\"\""); org.jsoup.select.Elements elements29 = element23.getElementsByAttribute("                                                  "); int int30 = charsetList0.lastIndexOf((java.lang.Object) element23); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(charsetItor6); org.junit.Assert.assertNotNull(charsetItor7); org.junit.Assert.assertNotNull(charsetItor9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(node20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNull(node24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(nodeList27); org.junit.Assert.assertNotNull(elements29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1)); }
public void test364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test364"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist14 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray12); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist20 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes22 = whitelist20.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); boolean boolean28 = org.jsoup.Jsoup.isValid("", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addTags(strArray34); org.jsoup.safety.Whitelist whitelist36 = whitelist20.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray34); boolean boolean37 = org.jsoup.helper.StringUtil.in("", strArray34); org.jsoup.safety.Whitelist whitelist38 = whitelist16.addProtocols("                          ", ".#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray34); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray34); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(whitelist38); }
public void test365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test365"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList3 = attributes2.asList(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Node node13 = document11.removeAttr("#doctype"); org.jsoup.nodes.Document document14 = cleaner7.clean(document11); org.jsoup.nodes.Attributes attributes15 = document14.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator16 = attributes15.spliterator(); attributes2.addAll(attributes15); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator18 = attributes2.spliterator(); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor19 = attributes2.iterator(); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(attributeList3); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(attributeSpliterator16); org.junit.Assert.assertNotNull(attributeSpliterator18); org.junit.Assert.assertNotNull(attributeItor19); }
public void test366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test366"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str14 = document13.val(); java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document13, "#document"); java.lang.String str17 = document13.baseUri(); org.jsoup.nodes.Element element19 = document13.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str20 = document13.nodeName(); boolean boolean21 = containsOwnText6.matches((org.jsoup.nodes.Element) document9, (org.jsoup.nodes.Element) document13); org.jsoup.select.Elements elements23 = document13.getElementsContainingOwnText("hi!<html> <head></head> <body> hi! </body> </html>"); java.lang.String str25 = document13.attr("[^hi!]"); org.jsoup.nodes.Document document26 = cleaner4.clean(document13); java.lang.String str27 = document26.data(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node29 = document26.after("hi! [^:containsOwn(hi!]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertNotNull(nodeList16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!"); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(elements23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); }
public void test367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test367"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addTags(strArray11); org.jsoup.safety.Whitelist whitelist16 = org.jsoup.safety.Whitelist.basic(); boolean boolean17 = org.jsoup.Jsoup.isValid("hi!", whitelist16); java.lang.String[] strArray25 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist26 = whitelist16.addProtocols(".#document", "#doctype=\"\"", strArray25); org.jsoup.nodes.Attributes attributes28 = whitelist16.getEnforcedAttributes(".#document"); org.jsoup.safety.Whitelist whitelist32 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean33 = org.jsoup.Jsoup.isValid("#document", whitelist32); java.lang.String str34 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist32); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.basic(); boolean boolean38 = org.jsoup.Jsoup.isValid("hi!", whitelist37); java.lang.String[] strArray46 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist47 = whitelist37.addProtocols(".#document", "#doctype=\"\"", strArray46); org.jsoup.safety.Whitelist whitelist48 = whitelist32.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray46); boolean boolean49 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray46); org.jsoup.safety.Whitelist whitelist50 = whitelist16.addTags(strArray46); org.jsoup.safety.Whitelist whitelist51 = whitelist12.addProtocols("hi!:matchesown(null=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", "[*]", strArray46); boolean boolean52 = org.jsoup.helper.StringUtil.in("#\n#document", strArray46); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray46, "[^:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(attributes28); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str34, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); }
public void test368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test368"); org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str1 = allElements0.toString(); java.lang.String str2 = allElements0.toString(); java.lang.String str3 = allElements0.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Element element11 = document8.addClass(""); org.jsoup.nodes.Document document13 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element15 = document13.createElement("#document"); boolean boolean16 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document13); org.jsoup.nodes.Element element18 = document13.toggleClass("#doctype"); org.jsoup.select.Elements elements20 = element18.getElementsMatchingOwnText("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str24 = org.jsoup.Jsoup.clean("", "#data", whitelist23); org.jsoup.safety.Cleaner cleaner25 = new org.jsoup.safety.Cleaner(whitelist23); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText27 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner31 = new org.jsoup.safety.Cleaner(whitelist28); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document35 = document34.clone(); org.jsoup.nodes.Node node37 = document35.removeAttr("#doctype"); org.jsoup.nodes.Document document38 = cleaner31.clean(document35); org.jsoup.nodes.Attributes attributes39 = document38.attributes(); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document47 = document46.clone(); org.jsoup.nodes.Node node49 = document47.removeAttr("#doctype"); org.jsoup.nodes.Document document50 = cleaner43.clean(document47); org.jsoup.nodes.Attributes attributes51 = document50.attributes(); boolean boolean52 = containsOwnText27.matches((org.jsoup.nodes.Element) document38, (org.jsoup.nodes.Element) document50); boolean boolean53 = cleaner25.isValid(document38); boolean boolean54 = allElements0.matches(element18, (org.jsoup.nodes.Element) document38); java.lang.String str55 = allElements0.toString(); java.lang.String str56 = allElements0.toString(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "*" + "'", str1, "*"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "*" + "'", str2, "*"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "*" + "'", str3, "*"); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(node37); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(attributes39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(node49); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(attributes51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "*" + "'", str55, "*"); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "*" + "'", str56, "*"); }
public void test369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test369"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); org.jsoup.nodes.Element element12 = document10.head(); org.jsoup.nodes.Node node13 = element12.previousSibling(); org.jsoup.select.Elements elements16 = element12.getElementsByAttributeValueMatching("", "[hi!<html> <head></head> <body> hi! </body> </html>$=:gt(1)]"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNull(node13); org.junit.Assert.assertNotNull(elements16); }
public void test370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test370"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner10 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Node node16 = document14.removeAttr("#doctype"); org.jsoup.nodes.Document document17 = cleaner10.clean(document14); org.jsoup.nodes.Attributes attributes18 = document17.attributes(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Node node28 = document26.removeAttr("#doctype"); org.jsoup.nodes.Document document29 = cleaner22.clean(document26); org.jsoup.nodes.Attributes attributes30 = document29.attributes(); boolean boolean31 = containsOwnText6.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document29); boolean boolean32 = cleaner4.isValid(document17); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean37 = document35.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document38 = cleaner4.clean(document35); org.jsoup.nodes.Element element39 = document35.head(); java.util.List<org.jsoup.nodes.Node> nodeList40 = element39.childNodes(); org.jsoup.nodes.Element element42 = element39.prependElement(":matches(null"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(node16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(attributes18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(node28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(nodeList40); org.junit.Assert.assertNotNull(element42); }
public void test371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test371"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.select.Evaluator.Class class5 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str6 = class5.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals8 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) element26); boolean boolean28 = indexEquals8.matches(element16, (org.jsoup.nodes.Element) document18); org.jsoup.nodes.Document.QuirksMode quirksMode29 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document30 = document18.quirksMode(quirksMode29); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); document33.title("#document"); boolean boolean41 = class5.matches((org.jsoup.nodes.Element) document30, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Document document42 = cleaner3.clean(document30); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting45 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray50 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50); org.jsoup.nodes.Element element53 = document48.classNames((java.util.Set<java.lang.String>) strSet51); java.lang.String str54 = document48.nodeName(); org.jsoup.select.Elements elements56 = document48.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document60 = document59.clone(); org.jsoup.nodes.Element element62 = document59.addClass(""); org.jsoup.nodes.Element element63 = document48.appendChild((org.jsoup.nodes.Node) document59); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str67 = document66.val(); org.jsoup.nodes.Element element69 = document66.append("#document"); boolean boolean70 = attributeWithValueStarting45.matches((org.jsoup.nodes.Element) document48, element69); java.lang.String str71 = document48.title(); org.jsoup.nodes.Element element72 = document48.body(); boolean boolean73 = cleaner3.isValid(document48); org.jsoup.nodes.Element element74 = document48.head(); org.jsoup.select.Elements elements76 = element74.getElementsByIndexGreaterThan((int) (byte) 10); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".#document" + "'", str6, ".#document"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + quirksMode29 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode29.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "#document" + "'", str54, "#document"); org.junit.Assert.assertNotNull(elements56); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, ""); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, ""); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(elements76); }
public void test372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test372"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.basic(); boolean boolean5 = org.jsoup.Jsoup.isValid("hi!", whitelist4); java.lang.String[] strArray13 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist14 = whitelist4.addProtocols(".#document", "#doctype=\"\"", strArray13); org.jsoup.safety.Whitelist whitelist15 = whitelist1.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray13); org.jsoup.safety.Whitelist whitelist16 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes18 = whitelist16.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist23 = whitelist21.preserveRelativeLinks(false); boolean boolean24 = org.jsoup.Jsoup.isValid("", whitelist21); java.lang.String[] strArray30 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist31 = whitelist21.addTags(strArray30); org.jsoup.safety.Whitelist whitelist32 = whitelist16.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray30); org.jsoup.safety.Whitelist whitelist33 = whitelist1.addTags(strArray30); java.lang.String str34 = org.jsoup.Jsoup.clean("<html>\n <head></head>\n <body>\n hi! hi!\n </body>\n</html>", whitelist33); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(attributes18); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(whitelist32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi! hi!" + "'", str34, "hi! hi!"); }
public void test373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test373"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addProtocols(".#document", "#doctype=\"\"", strArray11); org.jsoup.safety.Cleaner cleaner13 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.safety.Whitelist whitelist15 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist18 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist20 = whitelist18.preserveRelativeLinks(false); boolean boolean21 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist18); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basic(); boolean boolean24 = org.jsoup.Jsoup.isValid("hi!", whitelist23); java.lang.String[] strArray32 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist33 = whitelist23.addProtocols(".#document", "#doctype=\"\"", strArray32); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray32, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray32); org.jsoup.safety.Whitelist whitelist37 = whitelist18.addTags(strArray32); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist43 = whitelist41.preserveRelativeLinks(false); boolean boolean44 = org.jsoup.Jsoup.isValid("", whitelist41); org.jsoup.nodes.Attributes attributes46 = whitelist41.getEnforcedAttributes(":eq(52)"); boolean boolean47 = org.jsoup.Jsoup.isValid("", whitelist41); org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.basic(); boolean boolean54 = org.jsoup.Jsoup.isValid("hi!", whitelist53); java.lang.String[] strArray62 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist63 = whitelist53.addProtocols(".#document", "#doctype=\"\"", strArray62); org.jsoup.safety.Whitelist whitelist64 = whitelist50.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray62); org.jsoup.safety.Whitelist whitelist66 = whitelist64.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist68 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist70 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist72 = whitelist70.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist75 = org.jsoup.safety.Whitelist.basic(); boolean boolean76 = org.jsoup.Jsoup.isValid("hi!", whitelist75); java.lang.String[] strArray84 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist85 = whitelist75.addProtocols(".#document", "#doctype=\"\"", strArray84); org.jsoup.safety.Whitelist whitelist86 = whitelist72.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray84); org.jsoup.safety.Whitelist whitelist87 = whitelist68.addAttributes(":containsOwn(hi!:matchesown(null", strArray84); org.jsoup.safety.Whitelist whitelist88 = whitelist64.addAttributes(" text=\"\"", strArray84); org.jsoup.safety.Whitelist whitelist89 = whitelist41.addProtocols("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray84); org.jsoup.safety.Whitelist whitelist90 = whitelist37.addAttributes("#doctype=\"\"", strArray84); org.jsoup.safety.Whitelist whitelist91 = whitelist15.addAttributes("<html>\n <head></head>\n <body>\n [^:containsOwn(hi!]\n </body>\n</html>", strArray84); boolean boolean92 = org.jsoup.Jsoup.isValid("", whitelist15); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(attributes46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true); org.junit.Assert.assertNotNull(strArray84); org.junit.Assert.assertNotNull(whitelist85); org.junit.Assert.assertNotNull(whitelist86); org.junit.Assert.assertNotNull(whitelist87); org.junit.Assert.assertNotNull(whitelist88); org.junit.Assert.assertNotNull(whitelist89); org.junit.Assert.assertNotNull(whitelist90); org.junit.Assert.assertNotNull(whitelist91); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true); }
public void test374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test374"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basic(); boolean boolean6 = org.jsoup.Jsoup.isValid("hi!", whitelist5); java.lang.String[] strArray14 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist15 = whitelist5.addProtocols(".#document", "#doctype=\"\"", strArray14); org.jsoup.safety.Whitelist whitelist16 = whitelist2.addTags(strArray14); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray14); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist16); }
public void test375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test375"); org.jsoup.safety.Whitelist.TagName tagName1 = new org.jsoup.safety.Whitelist.TagName("hi! class=\"\"<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.select.Evaluator.AttributeStarting attributeStarting16 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray24 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24); org.jsoup.nodes.Element element27 = document22.classNames((java.util.Set<java.lang.String>) strSet25); document22.title("#document"); boolean boolean30 = attributeStarting16.matches((org.jsoup.nodes.Element) document19, (org.jsoup.nodes.Element) document22); java.lang.String str31 = document19.id(); org.jsoup.select.Elements elements33 = document19.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements35 = document19.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute38 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean39 = whitelist3.isSafeAttribute("", (org.jsoup.nodes.Element) document19, attribute38); org.jsoup.safety.Whitelist whitelist42 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist44 = whitelist42.preserveRelativeLinks(false); boolean boolean45 = org.jsoup.Jsoup.isValid("", whitelist42); java.lang.String[] strArray51 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist52 = whitelist42.addTags(strArray51); org.jsoup.safety.Whitelist whitelist53 = whitelist3.addAttributes("[^hi!]", strArray51); org.jsoup.safety.Whitelist whitelist55 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist58 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str59 = org.jsoup.Jsoup.clean("", "#data", whitelist58); org.jsoup.safety.Whitelist whitelist61 = org.jsoup.safety.Whitelist.basic(); boolean boolean62 = org.jsoup.Jsoup.isValid("hi!", whitelist61); java.lang.String[] strArray70 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist71 = whitelist61.addProtocols(".#document", "#doctype=\"\"", strArray70); org.jsoup.safety.Whitelist whitelist72 = whitelist58.addTags(strArray70); org.jsoup.safety.Whitelist whitelist73 = whitelist55.addTags(strArray70); org.jsoup.safety.Whitelist whitelist74 = whitelist53.addAttributes("[^:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", strArray70); boolean boolean75 = tagName1.equals((java.lang.Object) whitelist53); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertNotNull(elements35); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, ""); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertNotNull(strArray70); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertNotNull(whitelist74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); }
public void test376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test376"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addProtocols(".#document", "#doctype=\"\"", strArray11); boolean boolean14 = whitelist2.isSafeTag(""); boolean boolean16 = whitelist2.isSafeTag("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root></#root>"); java.lang.String str17 = org.jsoup.Jsoup.clean("", whitelist2); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean24 = org.jsoup.Jsoup.isValid("#document", whitelist23); java.lang.String str25 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist23); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.basic(); boolean boolean29 = org.jsoup.Jsoup.isValid("hi!", whitelist28); java.lang.String[] strArray37 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist38 = whitelist28.addProtocols(".#document", "#doctype=\"\"", strArray37); org.jsoup.safety.Whitelist whitelist39 = whitelist23.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray37); boolean boolean40 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray37); boolean boolean41 = org.jsoup.helper.StringUtil.in("&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;", strArray37); org.jsoup.safety.Whitelist whitelist42 = whitelist2.addAttributes("[^:containsOwn(hi!]", strArray37); org.jsoup.safety.Whitelist whitelist46 = whitelist2.addEnforcedAttribute("#document\n<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "#<html> <head></head> <body> hi! </body> </html>", "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); org.jsoup.safety.Whitelist whitelist50 = whitelist46.addEnforcedAttribute("#&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;", "<html>\n <head>\n <title>[  hi!  &amp;lt;#root class=&amp;quot;&amp;quot;&amp;gt;  hi!  !=#doctype=&amp;quot;&amp;quot;]</title>\n </head> \n <body>\n  hi! \n </body>\n</html>", ":contains([#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str25, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist50); }
public void test377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test377"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); java.lang.String str4 = attributes0.get("\n#document"); org.jsoup.nodes.Attributes attributes5 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes6 = attributes5.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator7 = attributes5.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap8 = attributes5.dataset(); attributes0.addAll(attributes5); java.lang.String str10 = attributes0.toString(); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner14 = new org.jsoup.safety.Cleaner(whitelist11); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document18 = document17.clone(); org.jsoup.nodes.Node node20 = document18.removeAttr("#doctype"); org.jsoup.nodes.Document document21 = cleaner14.clean(document18); boolean boolean22 = attributes0.equals((java.lang.Object) document18); org.jsoup.nodes.Element element23 = document18.head(); org.jsoup.nodes.Element element25 = document18.prependText("<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>\n<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(attributeSpliterator7); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(node20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); }
public void test378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test378"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.isEmpty(); org.jsoup.safety.Whitelist whitelist5 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes7 = whitelist5.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList8 = attributes7.asList(); org.jsoup.nodes.Element element9 = new org.jsoup.nodes.Element(tag1, "hi! =&quot;&quot;", attributes7); boolean boolean10 = tag1.isData(); java.lang.String str11 = tag1.toString(); org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertNotNull(attributeList8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!"); }
public void test379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test379"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); document11.title("#document"); boolean boolean19 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document11); org.jsoup.nodes.Element element21 = document11.html(""); java.lang.String str22 = element21.html(); java.lang.String str23 = element21.html(); org.jsoup.nodes.Attribute attribute26 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute27 = attribute26.clone(); java.lang.String str28 = attribute27.getKey(); java.lang.String str29 = attribute27.getValue(); org.jsoup.nodes.DocumentType documentType34 = new org.jsoup.nodes.DocumentType("#doctype", "#document", "#doctype", "hi!"); java.lang.String str35 = documentType34.nodeName(); java.lang.String str36 = documentType34.nodeName(); boolean boolean37 = attribute27.equals((java.lang.Object) str36); boolean boolean38 = whitelist1.isSafeAttribute("#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", element21, attribute27); java.lang.String str39 = element21.text(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node41 = element21.before(":lt(0)"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(attribute26); org.junit.Assert.assertNotNull(attribute27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str28, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str29, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "#doctype" + "'", str35, "#doctype"); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "#doctype" + "'", str36, "#doctype"); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, ""); }
public void test380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test380"); org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", ""); boolean boolean4 = textNode2.hasAttr("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.TextNode textNode6 = textNode2.text(":gt(1)"); org.jsoup.nodes.TextNode textNode8 = textNode2.text(" class=\" #doctype\""); org.jsoup.nodes.Attributes attributes9 = textNode8.attributes(); org.jsoup.nodes.Document document11 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element13 = document11.createElement("#document"); org.jsoup.nodes.Document document14 = document11.clone(); java.lang.String str15 = document14.toString(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = document14.outputSettings(); org.jsoup.nodes.Attributes attributes17 = document14.attributes(); java.util.List<org.jsoup.nodes.Attribute> attributeList18 = attributes17.asList(); attributes9.addAll(attributes17); org.jsoup.nodes.Attribute attribute22 = new org.jsoup.nodes.Attribute("#&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n&lt;/html&gt;", "hi! [^:containsOwn(hi!]"); attributes17.put(attribute22); org.jsoup.safety.Whitelist whitelist25 = new org.jsoup.safety.Whitelist(); boolean boolean26 = org.jsoup.Jsoup.isValid("", whitelist25); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray32 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32); org.jsoup.nodes.Element element35 = document30.classNames((java.util.Set<java.lang.String>) strSet33); org.jsoup.nodes.Element element37 = element35.prepend("#document"); org.jsoup.nodes.Attribute attribute40 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute40.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str43 = attribute40.getKey(); boolean boolean44 = whitelist25.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element37, attribute40); org.jsoup.nodes.Attribute attribute45 = attribute40.clone(); java.lang.String str47 = attribute45.setValue(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); java.lang.String str48 = attribute45.getKey(); java.lang.String str49 = attribute45.toString(); attributes17.put(attribute45); org.jsoup.nodes.Attribute attribute51 = attribute45.clone(); java.lang.String str53 = attribute51.setValue("hi! =&quot;&quot;"); java.lang.String str55 = attribute51.setValue("[^#&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n&lt;/html&gt;]"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(textNode6); org.junit.Assert.assertNotNull(textNode8); org.junit.Assert.assertNotNull(attributes9); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertNotNull(outputSettings16); org.junit.Assert.assertNotNull(attributes17); org.junit.Assert.assertNotNull(attributeList18); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str43, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(attribute45); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, ""); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str48, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\" &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;\"" + "'", str49, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\" &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;\""); org.junit.Assert.assertNotNull(attribute51); org.junit.Assert.assertEquals("'" + str53 + "' != '" + " <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"" + "'", str53, " <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi! =&quot;&quot;" + "'", str55, "hi! =&quot;&quot;"); }
public void test381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test381"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String str4 = org.jsoup.Jsoup.clean("[text=\"\"$=hi!  public &quot;#data&quot; &quot;#doctype&quot;&gt;]", whitelist2); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[text=&quot;&quot;$=hi! public &quot;#data&quot; &quot;#doctype&quot;&gt;]" + "'", str4, "[text=&quot;&quot;$=hi! public &quot;#data&quot; &quot;#doctype&quot;&gt;]"); }
public void test382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test382"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.Matches matches1 = new org.jsoup.select.Evaluator.Matches(pattern0); java.lang.String str2 = matches1.toString(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("UTF-8bodyUTF-8"); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray9 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9); org.jsoup.nodes.Element element12 = document7.classNames((java.util.Set<java.lang.String>) strSet10); java.lang.String str13 = document7.nodeName(); org.jsoup.select.Elements elements15 = document7.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document19 = document18.clone(); org.jsoup.nodes.Element element21 = document18.addClass(""); org.jsoup.nodes.Element element22 = document7.appendChild((org.jsoup.nodes.Node) document18); org.jsoup.nodes.Element element24 = document18.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document28 = document27.clone(); org.jsoup.nodes.Element element30 = document27.addClass(""); java.lang.String str31 = document27.toString(); org.jsoup.nodes.Element element33 = document27.text(".#document"); org.jsoup.nodes.Node node34 = element24.after((org.jsoup.nodes.Node) document27); org.jsoup.nodes.Element element36 = element24.prependText("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str40 = org.jsoup.Jsoup.clean("", "#data", whitelist39); org.jsoup.safety.Cleaner cleaner41 = new org.jsoup.safety.Cleaner(whitelist39); org.jsoup.nodes.Document document45 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str46 = document45.val(); java.util.List<org.jsoup.nodes.Node> nodeList48 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document45, "#document"); java.lang.String str49 = document45.baseUri(); org.jsoup.nodes.Element element51 = document45.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements52 = document45.parents(); org.jsoup.nodes.Document document53 = cleaner41.clean(document45); boolean boolean54 = element36.equals((java.lang.Object) cleaner41); org.jsoup.safety.Whitelist whitelist55 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist57 = whitelist55.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner58 = new org.jsoup.safety.Cleaner(whitelist55); org.jsoup.nodes.Document document61 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document62 = document61.clone(); org.jsoup.nodes.Node node64 = document62.removeAttr("#doctype"); org.jsoup.nodes.Document document65 = cleaner58.clean(document62); org.jsoup.nodes.Document document68 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.select.Elements elements70 = document68.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.Map<java.lang.String, java.lang.String> strMap71 = document68.dataset(); org.jsoup.nodes.Document document72 = cleaner58.clean(document68); org.jsoup.nodes.Document document73 = cleaner41.clean(document68); // The following exception was thrown during execution in test generation try { boolean boolean74 = matches1.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document68); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":matches(null" + "'", str2, ":matches(null"); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#document" + "'", str13, "#document"); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str31, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertNotNull(node34); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, ""); org.junit.Assert.assertNotNull(nodeList48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!"); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(elements52); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(node64); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertNotNull(document68); org.junit.Assert.assertNotNull(elements70); org.junit.Assert.assertNotNull(strMap71); org.junit.Assert.assertNotNull(document72); org.junit.Assert.assertNotNull(document73); }
public void test383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test383"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean18 = cleaner3.isValid(document17); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.Set<java.lang.String> strSet22 = document21.classNames(); org.jsoup.select.Elements elements24 = document21.getElementsContainingOwnText("[^[^:containsOwn(hi!]]"); boolean boolean25 = document21.hasText(); org.jsoup.nodes.Element element27 = document21.tagName(":gt(-1)"); org.jsoup.nodes.Document document28 = cleaner3.clean(document21); org.jsoup.nodes.Document.QuirksMode quirksMode29 = document28.quirksMode(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strSet22); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertTrue("'" + quirksMode29 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode29.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); }
public void test384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test384"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); boolean boolean4 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Attributes attributes6 = whitelist1.getEnforcedAttributes(":eq(52)"); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document10 = document9.clone(); org.jsoup.nodes.Document.QuirksMode quirksMode11 = document9.quirksMode(); org.jsoup.nodes.Attributes attributes12 = document9.attributes(); org.jsoup.nodes.Attributes attributes13 = attributes12.clone(); org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("", ""); boolean boolean18 = textNode16.hasAttr("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.TextNode textNode20 = textNode16.text(":gt(1)"); boolean boolean21 = attributes13.equals((java.lang.Object) ":gt(1)"); java.lang.String str22 = attributes13.html(); attributes6.addAll(attributes13); java.lang.String str24 = attributes13.html(); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertTrue("'" + quirksMode11 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode11.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(attributes12); org.junit.Assert.assertNotNull(attributes13); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(textNode20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); }
public void test385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test385"); org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", ""); boolean boolean4 = textNode2.hasAttr("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); java.lang.String str5 = textNode2.toString(); java.lang.String str7 = textNode2.attr("#doctype"); org.jsoup.nodes.Attributes attributes8 = textNode2.attributes(); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str12 = org.jsoup.Jsoup.clean("", "#data", whitelist11); org.jsoup.safety.Cleaner cleaner13 = new org.jsoup.safety.Cleaner(whitelist11); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText15 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str23 = document22.val(); java.util.List<org.jsoup.nodes.Node> nodeList25 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document22, "#document"); java.lang.String str26 = document22.baseUri(); org.jsoup.nodes.Element element28 = document22.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str29 = document22.nodeName(); boolean boolean30 = containsOwnText15.matches((org.jsoup.nodes.Element) document18, (org.jsoup.nodes.Element) document22); org.jsoup.select.Elements elements32 = document22.getElementsContainingOwnText("hi!<html> <head></head> <body> hi! </body> </html>"); java.lang.String str34 = document22.attr("[^hi!]"); org.jsoup.nodes.Document document35 = cleaner13.clean(document22); boolean boolean36 = attributes8.equals((java.lang.Object) document35); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(attributes8); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertNotNull(nodeList25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!"); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "#document" + "'", str29, "#document"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(elements32); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); }
public void test386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test386"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); boolean boolean4 = org.jsoup.Jsoup.isValid("", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addTags(strArray10); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray10); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray10, ""); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); }
public void test387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test387"); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); java.lang.String str5 = org.jsoup.Jsoup.clean(":eq(52)", "hi!:matchesOwn(null", whitelist4); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document10 = document9.clone(); org.jsoup.nodes.Element element12 = document9.addClass(""); org.jsoup.nodes.Element element14 = document9.prependElement("#doctype"); java.lang.String str15 = element14.nodeName(); org.jsoup.nodes.Attribute attribute18 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute19 = attribute18.clone(); boolean boolean20 = whitelist4.isSafeAttribute("                ", element14, attribute19); java.lang.String str21 = org.jsoup.Jsoup.clean("#document:contains(  hi! hi!:contains(  hi!", "[#document^=#doctype]", whitelist4); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":eq(52)" + "'", str5, ":eq(52)"); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#doctype" + "'", str15, "#doctype"); org.junit.Assert.assertNotNull(attribute18); org.junit.Assert.assertNotNull(attribute19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#document:contains( hi! hi!:contains( hi!" + "'", str21, "#document:contains( hi! hi!:contains( hi!"); }
public void test388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test388"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist1); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basic(); boolean boolean7 = org.jsoup.Jsoup.isValid("hi!", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addProtocols(".#document", "#doctype=\"\"", strArray15); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray15, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray15); org.jsoup.safety.Whitelist whitelist20 = whitelist1.addTags(strArray15); org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.prettyPrint(false); java.nio.charset.Charset charset24 = outputSettings21.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings21.indentAmount((int) '4'); java.nio.charset.Charset charset27 = outputSettings21.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.prettyPrint(false); int int31 = outputSettings30.indentAmount(); java.nio.charset.Charset charset32 = outputSettings30.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings21.charset(charset32); java.nio.charset.Charset[] charsetArray34 = new java.nio.charset.Charset[] { charset32 }; java.util.LinkedList<java.nio.charset.Charset> charsetList35 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList35, charsetArray34); java.nio.charset.Charset charset37 = charsetList35.pop(); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.basic(); boolean boolean40 = org.jsoup.Jsoup.isValid("hi!", whitelist39); java.lang.String[] strArray48 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist49 = whitelist39.addProtocols(".#document", "#doctype=\"\"", strArray48); org.jsoup.safety.Cleaner cleaner50 = new org.jsoup.safety.Cleaner(whitelist39); boolean boolean51 = charsetList35.contains((java.lang.Object) whitelist39); org.jsoup.safety.Whitelist whitelist54 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes56 = whitelist54.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist61 = whitelist59.preserveRelativeLinks(false); boolean boolean62 = org.jsoup.Jsoup.isValid("", whitelist59); java.lang.String[] strArray68 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist69 = whitelist59.addTags(strArray68); org.jsoup.safety.Whitelist whitelist70 = whitelist54.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray68); org.jsoup.safety.Whitelist whitelist71 = whitelist39.addProtocols("#<html> <head></head> <body> hi! </body> </html>", "[[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>]", strArray68); org.jsoup.safety.Whitelist whitelist72 = whitelist1.addTags(strArray68); boolean boolean74 = whitelist72.isSafeTag(""); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(outputSettings23); org.junit.Assert.assertNotNull(charset24); org.junit.Assert.assertNotNull(outputSettings26); org.junit.Assert.assertNotNull(charset27); org.junit.Assert.assertNotNull(outputSettings30); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1); org.junit.Assert.assertNotNull(charset32); org.junit.Assert.assertNotNull(outputSettings33); org.junit.Assert.assertNotNull(charsetArray34); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(charset37); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(attributes56); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); }
public void test389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test389"); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings1.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings1.indentAmount((int) '4'); java.nio.charset.Charset charset7 = outputSettings1.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); int int11 = outputSettings10.indentAmount(); java.nio.charset.Charset charset12 = outputSettings10.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings1.charset(charset12); java.nio.charset.Charset[] charsetArray14 = new java.nio.charset.Charset[] { charset12 }; java.util.LinkedList<java.nio.charset.Charset> charsetList15 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList15, charsetArray14); java.nio.charset.Charset charset17 = charsetList15.pop(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.basic(); boolean boolean20 = org.jsoup.Jsoup.isValid("hi!", whitelist19); java.lang.String[] strArray28 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist29 = whitelist19.addProtocols(".#document", "#doctype=\"\"", strArray28); org.jsoup.safety.Cleaner cleaner30 = new org.jsoup.safety.Cleaner(whitelist19); boolean boolean31 = charsetList15.contains((java.lang.Object) whitelist19); boolean boolean32 = org.jsoup.Jsoup.isValid(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist19); org.jsoup.nodes.Attributes attributes34 = whitelist19.getEnforcedAttributes("hi!:matchesown(null=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;"); int int35 = attributes34.size(); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertNotNull(charset7); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertNotNull(charset12); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertNotNull(charsetArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(attributes34); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); }
public void test390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test390"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str9 = org.jsoup.Jsoup.clean("", "#data", whitelist8); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.basic(); boolean boolean12 = org.jsoup.Jsoup.isValid("hi!", whitelist11); java.lang.String[] strArray20 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist21 = whitelist11.addProtocols(".#document", "#doctype=\"\"", strArray20); org.jsoup.safety.Whitelist whitelist22 = whitelist8.addTags(strArray20); org.jsoup.safety.Whitelist whitelist23 = whitelist5.addTags(strArray20); boolean boolean24 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist23); org.jsoup.safety.Whitelist whitelist28 = whitelist23.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist30 = whitelist23.preserveRelativeLinks(true); boolean boolean31 = org.jsoup.Jsoup.isValid("", whitelist23); java.lang.String str32 = org.jsoup.Jsoup.clean(":matchesown(null=\"#document\"", whitelist23); java.lang.String str33 = org.jsoup.Jsoup.clean(":containsown(hi!:matchesown(null=\"\"", "", whitelist23); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertEquals("'" + str32 + "' != '" + ":matchesown(null=&quot;#document&quot;" + "'", str32, ":matchesown(null=&quot;#document&quot;"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + ":containsown(hi!:matchesown(null=&quot;&quot;" + "'", str33, ":containsown(hi!:matchesown(null=&quot;&quot;"); }
public void test391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test391"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basic(); boolean boolean11 = org.jsoup.Jsoup.isValid("hi!", whitelist10); java.lang.String[] strArray19 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist20 = whitelist10.addProtocols(".#document", "#doctype=\"\"", strArray19); org.jsoup.safety.Whitelist whitelist21 = whitelist7.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray19); org.jsoup.safety.Whitelist whitelist22 = whitelist3.addAttributes(":containsOwn(hi!:matchesown(null", strArray19); boolean boolean23 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray19); boolean boolean24 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>#document", strArray19); boolean boolean25 = org.jsoup.helper.StringUtil.in("<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>\n<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", strArray19); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); }
public void test392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test392"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.MatchesOwn matchesOwn1 = new org.jsoup.select.Evaluator.MatchesOwn(pattern0); java.lang.String str2 = matchesOwn1.toString(); java.lang.String str3 = matchesOwn1.toString(); java.lang.String str4 = matchesOwn1.toString(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = whitelist5.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner8 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); java.lang.String str17 = document11.nodeName(); java.lang.String str18 = document11.html(); boolean boolean19 = cleaner8.isValid(document11); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element22 = document21.body(); java.lang.String str23 = document21.toString(); org.jsoup.nodes.Document document24 = cleaner8.clean(document21); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner28 = new org.jsoup.safety.Cleaner(whitelist25); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document32 = document31.clone(); org.jsoup.nodes.Node node34 = document32.removeAttr("#doctype"); org.jsoup.nodes.Document document35 = cleaner28.clean(document32); java.lang.String str36 = document32.outerHtml(); org.jsoup.nodes.Node node38 = document32.removeAttr(":matchesown(null=\"#document\""); boolean boolean39 = cleaner8.isValid(document32); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parseBodyFragment("hi!:matchesOwn(null"); org.jsoup.select.Elements elements43 = document41.getElementsByAttributeStarting("[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]"); org.jsoup.nodes.Document document45 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element47 = document45.createElement("#document"); org.jsoup.nodes.Document document48 = document45.clone(); java.lang.String str49 = document45.nodeName(); boolean boolean50 = document41.equals((java.lang.Object) document45); org.jsoup.nodes.Document document54 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str55 = document54.val(); java.util.List<org.jsoup.nodes.Node> nodeList57 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document54, "#document"); org.jsoup.nodes.Document.QuirksMode quirksMode58 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document59 = document54.quirksMode(quirksMode58); org.jsoup.nodes.Document document60 = document41.quirksMode(quirksMode58); org.jsoup.nodes.Document document61 = cleaner8.clean(document60); org.jsoup.safety.Whitelist whitelist63 = org.jsoup.safety.Whitelist.basic(); boolean boolean64 = org.jsoup.Jsoup.isValid("hi!", whitelist63); org.jsoup.nodes.Document document68 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document69 = document68.clone(); org.jsoup.nodes.Element element71 = document69.prepend("\n#document"); org.jsoup.nodes.Attribute attribute74 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute75 = attribute74.clone(); attribute74.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str78 = attribute74.getValue(); java.lang.String str79 = attribute74.toString(); boolean boolean80 = whitelist63.isSafeAttribute(":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", element71, attribute74); // The following exception was thrown during execution in test generation try { boolean boolean81 = matchesOwn1.matches((org.jsoup.nodes.Element) document61, element71); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":matchesOwn(null" + "'", str2, ":matchesOwn(null"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":matchesOwn(null" + "'", str3, ":matchesOwn(null"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":matchesOwn(null" + "'", str4, ":matchesOwn(null"); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#document" + "'", str17, "#document"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str23, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(node34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str36, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(node38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(elements43); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "#document" + "'", str49, "#document"); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, ""); org.junit.Assert.assertNotNull(nodeList57); org.junit.Assert.assertTrue("'" + quirksMode58 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode58.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertNotNull(document68); org.junit.Assert.assertNotNull(document69); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(attribute74); org.junit.Assert.assertNotNull(attribute75); org.junit.Assert.assertEquals("'" + str78 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str78, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"" + "'", str79, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\""); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false); }
public void test393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test393"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str9 = document8.val(); java.util.List<org.jsoup.nodes.Node> nodeList11 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document8, "#document"); java.lang.String str12 = document8.baseUri(); org.jsoup.nodes.Element element14 = document8.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements15 = document8.parents(); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); org.jsoup.select.Elements elements19 = document16.getElementsByAttributeValueEnding("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", "#[text=\"\"$=hi!  public &quot;#data&quot; &quot;#doctype&quot;&gt;]"); org.jsoup.select.Elements elements20 = document16.children(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(nodeList11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(elements19); org.junit.Assert.assertNotNull(elements20); }
public void test394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test394"); org.jsoup.select.Evaluator.AttributeWithValueEnding attributeWithValueEnding2 = new org.jsoup.select.Evaluator.AttributeWithValueEnding("    ", "<html>\n <head></head> \n <body>\n [^hi!]\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText9 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist12 = whitelist10.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner13 = new org.jsoup.safety.Cleaner(whitelist10); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document17 = document16.clone(); org.jsoup.nodes.Node node19 = document17.removeAttr("#doctype"); org.jsoup.nodes.Document document20 = cleaner13.clean(document17); org.jsoup.nodes.Attributes attributes21 = document20.attributes(); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist24 = whitelist22.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner25 = new org.jsoup.safety.Cleaner(whitelist22); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document29 = document28.clone(); org.jsoup.nodes.Node node31 = document29.removeAttr("#doctype"); org.jsoup.nodes.Document document32 = cleaner25.clean(document29); org.jsoup.nodes.Attributes attributes33 = document32.attributes(); boolean boolean34 = containsOwnText9.matches((org.jsoup.nodes.Element) document20, (org.jsoup.nodes.Element) document32); boolean boolean35 = cleaner7.isValid(document20); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean40 = document38.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document41 = cleaner7.clean(document38); org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("<html> <head></head> <body> hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; </body> </html>", " class=\"\""); org.jsoup.nodes.Document document45 = cleaner7.clean(document44); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan47 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (byte) 1); java.lang.String str48 = indexGreaterThan47.toString(); org.jsoup.nodes.Document document50 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray55 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55); org.jsoup.nodes.Element element58 = document53.classNames((java.util.Set<java.lang.String>) strSet56); org.jsoup.nodes.Element element59 = document50.appendChild((org.jsoup.nodes.Node) element58); org.jsoup.nodes.Document.QuirksMode quirksMode60 = document50.quirksMode(); org.jsoup.nodes.Document document63 = org.jsoup.Jsoup.parse("", "hi!"); java.lang.String str64 = document63.data(); boolean boolean65 = indexGreaterThan47.matches((org.jsoup.nodes.Element) document50, (org.jsoup.nodes.Element) document63); org.jsoup.nodes.Document document66 = document50.normalise(); boolean boolean67 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document44, (org.jsoup.nodes.Element) document66); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(node19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(attributes21); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(node31); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(attributes33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertEquals("'" + str48 + "' != '" + ":gt(1)" + "'", str48, ":gt(1)"); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(strArray55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(element59); org.junit.Assert.assertTrue("'" + quirksMode60 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode60.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, ""); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); }
public void test395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test395"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("[#document^=  hi! ]", whitelist4); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); boolean boolean12 = org.jsoup.Jsoup.isValid("", whitelist9); java.lang.String[] strArray18 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist19 = whitelist9.addTags(strArray18); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basic(); boolean boolean24 = org.jsoup.Jsoup.isValid("hi!", whitelist23); java.lang.String[] strArray32 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist33 = whitelist23.addProtocols(".#document", "#doctype=\"\"", strArray32); org.jsoup.nodes.Attributes attributes35 = whitelist23.getEnforcedAttributes(".#document"); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean40 = org.jsoup.Jsoup.isValid("#document", whitelist39); java.lang.String str41 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist39); org.jsoup.safety.Whitelist whitelist44 = org.jsoup.safety.Whitelist.basic(); boolean boolean45 = org.jsoup.Jsoup.isValid("hi!", whitelist44); java.lang.String[] strArray53 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist54 = whitelist44.addProtocols(".#document", "#doctype=\"\"", strArray53); org.jsoup.safety.Whitelist whitelist55 = whitelist39.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray53); boolean boolean56 = org.jsoup.helper.StringUtil.in(" class=\" #doctype\"", strArray53); org.jsoup.safety.Whitelist whitelist57 = whitelist23.addTags(strArray53); org.jsoup.safety.Whitelist whitelist58 = whitelist19.addProtocols("hi!:matchesown(null=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", "[*]", strArray53); boolean boolean59 = org.jsoup.helper.StringUtil.in("#\n#document", strArray53); org.jsoup.safety.Whitelist whitelist60 = whitelist4.addAttributes("    ", strArray53); boolean boolean61 = org.jsoup.helper.StringUtil.in("<html> <head></head> <body></body> </html>:containsOwn(hi!", strArray53); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(attributes35); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str41, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); }
public void test396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test396"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); boolean boolean13 = whitelist1.isSafeTag(""); org.jsoup.safety.Whitelist whitelist15 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist18 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes20 = whitelist18.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(false); boolean boolean26 = org.jsoup.Jsoup.isValid("", whitelist23); java.lang.String[] strArray32 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist33 = whitelist23.addTags(strArray32); org.jsoup.safety.Whitelist whitelist34 = whitelist18.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray32); org.jsoup.safety.Whitelist whitelist35 = whitelist15.addProtocols("#comment", ".:eq(52)", strArray32); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist39 = whitelist37.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner40 = new org.jsoup.safety.Cleaner(whitelist37); org.jsoup.safety.Whitelist whitelist42 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist44 = whitelist42.preserveRelativeLinks(false); boolean boolean45 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist42); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.basic(); boolean boolean48 = org.jsoup.Jsoup.isValid("hi!", whitelist47); java.lang.String[] strArray56 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist57 = whitelist47.addProtocols(".#document", "#doctype=\"\"", strArray56); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray56, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray56); org.jsoup.safety.Whitelist whitelist61 = whitelist42.addTags(strArray56); org.jsoup.safety.Whitelist whitelist62 = whitelist37.addTags(strArray56); org.jsoup.safety.Whitelist whitelist63 = whitelist15.addAttributes("<html>\n <head></head>\n <body></body>\n</html>", strArray56); org.jsoup.safety.Whitelist whitelist67 = whitelist63.addEnforcedAttribute("hi!:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "[:matches(null]", "<html>\n <head></head> \n <body>\n hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>"); // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist71 = whitelist63.addEnforcedAttribute("UTF-8<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>UTF-8<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>UTF-8<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>UTF-8<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>UTF-8<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>UTF-8<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>UTF-8", "", "<html>\n <head></head>\n <body>\n hi!  hi! \n </body>\n</html>\n<#root>\n <html>\n <head></head>\n <body>\n  [#document^=  hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;\n </body>\n </html>\n</#root>"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(strArray56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist67); }
public void test397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test397"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Node node11 = document9.removeAttr("#doctype"); org.jsoup.nodes.Document document12 = cleaner5.clean(document9); org.jsoup.nodes.Attributes attributes13 = document12.attributes(); org.jsoup.safety.Whitelist whitelist14 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner17 = new org.jsoup.safety.Cleaner(whitelist14); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document21 = document20.clone(); org.jsoup.nodes.Node node23 = document21.removeAttr("#doctype"); org.jsoup.nodes.Document document24 = cleaner17.clean(document21); org.jsoup.nodes.Attributes attributes25 = document24.attributes(); boolean boolean26 = containsOwnText1.matches((org.jsoup.nodes.Element) document12, (org.jsoup.nodes.Element) document24); org.jsoup.nodes.Document document28 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element30 = document28.createElement("#document"); org.jsoup.nodes.Document document31 = document28.clone(); org.jsoup.select.Elements elements34 = document31.getElementsByAttributeValueMatching("hi!", "\n#document"); boolean boolean35 = document12.equals((java.lang.Object) document31); org.jsoup.nodes.Element element37 = document12.createElement("hi!:matchesOwn(null"); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node39 = document12.after("<html>\n <head></head>\n <body>\n [#document^=  hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;\n </body>\n</html>"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(node11); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(attributes13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(node23); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(attributes25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(element37); }
public void test398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test398"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.relaxed(); org.jsoup.safety.Whitelist whitelist3 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes5 = whitelist3.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist10 = whitelist8.preserveRelativeLinks(false); boolean boolean11 = org.jsoup.Jsoup.isValid("", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addTags(strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist3.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist0.addProtocols(":matchesOwn(null", ":matches(null", strArray17); org.jsoup.safety.Cleaner cleaner21 = new org.jsoup.safety.Cleaner(whitelist20); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document25 = document24.clone(); document25.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document28 = cleaner21.clean(document25); org.jsoup.select.Elements elements30 = document28.getElementsByIndexLessThan(6); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(elements30); }
public void test399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test399"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str9 = document8.val(); java.util.List<org.jsoup.nodes.Node> nodeList11 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document8, "#document"); java.lang.String str12 = document8.baseUri(); org.jsoup.nodes.Element element14 = document8.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str15 = document8.nodeName(); boolean boolean16 = containsOwnText1.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document8); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document20 = document19.clone(); org.jsoup.nodes.Element element22 = document19.addClass(""); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str27 = document26.val(); java.util.List<org.jsoup.nodes.Node> nodeList29 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document26, "#document"); java.lang.String str30 = document26.baseUri(); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str34 = document33.val(); org.jsoup.nodes.Element element36 = document33.append("#document"); org.jsoup.nodes.Element element37 = document26.appendChild((org.jsoup.nodes.Node) element36); org.jsoup.nodes.Element element38 = document19.prependChild((org.jsoup.nodes.Node) document26); org.jsoup.nodes.Document document40 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element42 = document40.createElement("#document"); org.jsoup.nodes.Document document43 = document40.clone(); java.lang.String str44 = document43.toString(); org.jsoup.nodes.Element element45 = document26.prependChild((org.jsoup.nodes.Node) document43); org.jsoup.safety.Whitelist whitelist46 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist48 = whitelist46.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner49 = new org.jsoup.safety.Cleaner(whitelist46); org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document53 = document52.clone(); org.jsoup.nodes.Node node55 = document53.removeAttr("#doctype"); org.jsoup.nodes.Document document56 = cleaner49.clean(document53); org.jsoup.nodes.Attributes attributes57 = document56.attributes(); org.jsoup.nodes.Element element58 = document56.head(); org.jsoup.nodes.Node node60 = element58.after("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str61 = element58.className(); boolean boolean62 = containsOwnText1.matches(element45, element58); org.jsoup.select.Elements elements65 = element58.getElementsByAttributeValueMatching(":matchesOwn(null", "[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(nodeList11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#document" + "'", str15, "#document"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(nodeList29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!"); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, ""); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist48); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(node55); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(attributes57); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(node60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, ""); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(elements65); }
public void test400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test400"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!"); boolean boolean2 = tag1.canContainBlock(); boolean boolean3 = tag1.isEmpty(); org.jsoup.safety.Whitelist whitelist5 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes7 = whitelist5.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList8 = attributes7.asList(); org.jsoup.nodes.Element element9 = new org.jsoup.nodes.Element(tag1, "hi! =&quot;&quot;", attributes7); org.jsoup.nodes.Document document10 = element9.ownerDocument(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node11 = document10.previousSibling(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(tag1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(attributes7); org.junit.Assert.assertNotNull(attributeList8); org.junit.Assert.assertNull(document10); }
public void test401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test401"); org.jsoup.safety.Whitelist whitelist3 = new org.jsoup.safety.Whitelist(); boolean boolean4 = org.jsoup.Jsoup.isValid("", whitelist3); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray10 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10); org.jsoup.nodes.Element element13 = document8.classNames((java.util.Set<java.lang.String>) strSet11); org.jsoup.nodes.Element element15 = element13.prepend("#document"); org.jsoup.nodes.Attribute attribute18 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute18.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str21 = attribute18.getKey(); boolean boolean22 = whitelist3.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element15, attribute18); java.lang.String str23 = org.jsoup.Jsoup.clean("hi!<html> <head></head> <body> hi! </body> </html>=\"\"", "", whitelist3); org.jsoup.safety.Cleaner cleaner24 = new org.jsoup.safety.Cleaner(whitelist3); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str29 = document28.val(); java.util.List<org.jsoup.nodes.Node> nodeList31 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document28, "#document"); java.lang.String str32 = document28.baseUri(); org.jsoup.nodes.Element element34 = document28.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements35 = document28.parents(); org.jsoup.helper.Validate.notNull((java.lang.Object) document28); boolean boolean37 = cleaner24.isValid(document28); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str21, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!  hi! =&quot;&quot;" + "'", str23, "hi!  hi! =&quot;&quot;"); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(nodeList31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!"); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(elements35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); }
public void test402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test402"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist6); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.basic(); boolean boolean12 = org.jsoup.Jsoup.isValid("hi!", whitelist11); java.lang.String[] strArray20 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist21 = whitelist11.addProtocols(".#document", "#doctype=\"\"", strArray20); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray20, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray20); org.jsoup.safety.Whitelist whitelist25 = whitelist6.addTags(strArray20); org.jsoup.safety.Whitelist whitelist26 = whitelist1.addTags(strArray20); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray20); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray20, "hi!  hi! =&quot;&quot;"); boolean boolean30 = org.jsoup.helper.StringUtil.in("text=\"\"hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;hi!&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;hi!<html> <head></head> <body> hi! </body> </html>=\"\"", strArray20); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); }
public void test403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test403"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); document16.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean19 = document16.isBlock(); org.jsoup.nodes.Document document20 = cleaner12.clean(document16); java.lang.String str21 = document20.outerHtml(); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "<html>\n <head></head>\n <body>\n  hi! \n </body>\n</html>" + "'", str21, "<html>\n <head></head>\n <body>\n  hi! \n </body>\n</html>"); }
public void test404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test404"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean4 = org.jsoup.Jsoup.isValid("#document", whitelist3); java.lang.String str5 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist3); java.lang.String str6 = org.jsoup.Jsoup.clean(":containsOwn(hi!", whitelist3); org.jsoup.nodes.Attributes attributes8 = whitelist3.getEnforcedAttributes("#document=\"\""); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str5, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ":containsOwn(hi!" + "'", str6, ":containsOwn(hi!"); org.junit.Assert.assertNotNull(attributes8); }
public void test405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test405"); org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str1 = allElements0.toString(); java.lang.String str2 = allElements0.toString(); java.lang.String str3 = allElements0.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting5 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Element element11 = document8.addClass(""); org.jsoup.nodes.Document document13 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element15 = document13.createElement("#document"); boolean boolean16 = attributeStarting5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document13); org.jsoup.nodes.Element element18 = document13.toggleClass("#doctype"); org.jsoup.select.Elements elements20 = element18.getElementsMatchingOwnText("[hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>!=.:eq(52)]"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str24 = org.jsoup.Jsoup.clean("", "#data", whitelist23); org.jsoup.safety.Cleaner cleaner25 = new org.jsoup.safety.Cleaner(whitelist23); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText27 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist30 = whitelist28.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner31 = new org.jsoup.safety.Cleaner(whitelist28); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document35 = document34.clone(); org.jsoup.nodes.Node node37 = document35.removeAttr("#doctype"); org.jsoup.nodes.Document document38 = cleaner31.clean(document35); org.jsoup.nodes.Attributes attributes39 = document38.attributes(); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document47 = document46.clone(); org.jsoup.nodes.Node node49 = document47.removeAttr("#doctype"); org.jsoup.nodes.Document document50 = cleaner43.clean(document47); org.jsoup.nodes.Attributes attributes51 = document50.attributes(); boolean boolean52 = containsOwnText27.matches((org.jsoup.nodes.Element) document38, (org.jsoup.nodes.Element) document50); boolean boolean53 = cleaner25.isValid(document38); boolean boolean54 = allElements0.matches(element18, (org.jsoup.nodes.Element) document38); org.jsoup.safety.Whitelist whitelist55 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist57 = whitelist55.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner58 = new org.jsoup.safety.Cleaner(whitelist55); org.jsoup.nodes.Document document61 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document62 = document61.clone(); org.jsoup.nodes.Node node64 = document62.removeAttr("#doctype"); org.jsoup.nodes.Document document65 = cleaner58.clean(document62); org.jsoup.nodes.Attributes attributes66 = document65.attributes(); org.jsoup.nodes.Element element67 = document65.head(); org.jsoup.nodes.Document document69 = org.jsoup.Jsoup.parse(".:eq(52)"); java.lang.String str70 = document69.html(); org.jsoup.nodes.Element element72 = document69.prependElement("[^hi!]"); boolean boolean73 = allElements0.matches((org.jsoup.nodes.Element) document65, (org.jsoup.nodes.Element) document69); java.lang.String str74 = allElements0.toString(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "*" + "'", str1, "*"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "*" + "'", str2, "*"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "*" + "'", str3, "*"); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(elements20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(node37); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(attributes39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(node49); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(attributes51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(node64); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertNotNull(attributes66); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertNotNull(document69); org.junit.Assert.assertEquals("'" + str70 + "' != '" + "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>" + "'", str70, "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "*" + "'", str74, "*"); }
public void test406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test406"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addProtocols(".#document", "#doctype=\"\"", strArray11); boolean boolean14 = whitelist2.isSafeTag(""); org.jsoup.safety.Whitelist whitelist16 = whitelist2.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist19 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes21 = whitelist19.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); boolean boolean27 = org.jsoup.Jsoup.isValid("", whitelist24); java.lang.String[] strArray33 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist34 = whitelist24.addTags(strArray33); org.jsoup.safety.Whitelist whitelist35 = whitelist19.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray33); org.jsoup.safety.Whitelist whitelist36 = whitelist16.addProtocols("#comment", ".:eq(52)", strArray33); java.lang.String str37 = org.jsoup.Jsoup.clean("", whitelist36); org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse(".:eq(52)"); java.lang.String str41 = document40.html(); org.jsoup.nodes.Element element43 = document40.prependElement("[^hi!]"); java.lang.String str44 = document40.val(); org.jsoup.nodes.Attribute attribute47 = org.jsoup.nodes.Attribute.createFromEncoded("[:matches(null!=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]]", ""); boolean boolean48 = whitelist36.isSafeAttribute("UTF-8#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>UTF-8", (org.jsoup.nodes.Element) document40, attribute47); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(attributes21); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, ""); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>" + "'", str41, "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, ""); org.junit.Assert.assertNotNull(attribute47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); }
public void test407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test407"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); java.nio.charset.Charset[] charsetArray4 = new java.nio.charset.Charset[] { charset3 }; java.util.LinkedList<java.nio.charset.Charset> charsetList5 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList5, charsetArray4); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); java.nio.charset.Charset charset10 = outputSettings7.charset(); boolean boolean11 = charsetList5.add(charset10); java.lang.Object obj12 = null; boolean boolean13 = charsetList5.removeLastOccurrence(obj12); java.nio.charset.Charset charset14 = charsetList5.pollFirst(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList15 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.prettyPrint(false); java.nio.charset.Charset charset19 = outputSettings18.charset(); charsetList15.addFirst(charset19); java.util.Iterator<java.nio.charset.Charset> charsetItor21 = charsetList15.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList22 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.prettyPrint(false); java.nio.charset.Charset charset26 = outputSettings25.charset(); charsetList22.addFirst(charset26); boolean boolean28 = charsetList15.offerFirst(charset26); int int29 = charsetList15.size(); java.nio.charset.Charset charset30 = charsetList15.peekLast(); charsetList5.addFirst(charset30); java.nio.charset.Charset charset32 = charsetList5.poll(); org.jsoup.safety.Whitelist whitelist34 = new org.jsoup.safety.Whitelist(); boolean boolean35 = org.jsoup.Jsoup.isValid("", whitelist34); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray41 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41); org.jsoup.nodes.Element element44 = document39.classNames((java.util.Set<java.lang.String>) strSet42); org.jsoup.nodes.Element element46 = element44.prepend("#document"); org.jsoup.nodes.Attribute attribute49 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute49.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str52 = attribute49.getKey(); boolean boolean53 = whitelist34.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element46, attribute49); boolean boolean54 = charsetList5.remove((java.lang.Object) boolean53); java.lang.Object obj55 = null; int int56 = charsetList5.indexOf(obj55); org.jsoup.select.Evaluator.IndexEquals indexEquals58 = new org.jsoup.select.Evaluator.IndexEquals(1); boolean boolean59 = charsetList5.removeFirstOccurrence((java.lang.Object) 1); // The following exception was thrown during execution in test generation try { java.util.ListIterator<java.nio.charset.Charset> charsetItor61 = charsetList5.listIterator((int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 1"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(charsetArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(charset14); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charset19); org.junit.Assert.assertNotNull(charsetItor21); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(charset26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2); org.junit.Assert.assertNotNull(charset30); org.junit.Assert.assertNotNull(charset32); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str52, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1)); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); }
public void test408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test408"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); org.jsoup.select.Elements elements13 = document10.getElementsContainingOwnText(""); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertNotNull(elements13); }
public void test409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test409"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.nodes.Attributes attributes14 = whitelist1.getEnforcedAttributes(".#document"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(attributes14); }
public void test410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test410"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor3 = attributes0.iterator(); java.lang.Object obj4 = null; boolean boolean5 = attributes0.equals(obj4); org.jsoup.safety.Whitelist whitelist8 = new org.jsoup.safety.Whitelist(); boolean boolean10 = whitelist8.isSafeTag("#root"); java.lang.String str11 = org.jsoup.Jsoup.clean("UTF-8bodyUTF-8", "", whitelist8); org.jsoup.nodes.Element element13 = null; org.jsoup.nodes.Attribute attribute16 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute17 = attribute16.clone(); java.lang.String str18 = attribute17.getKey(); java.lang.String str19 = attribute17.getKey(); boolean boolean20 = whitelist8.isSafeAttribute("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"^=hi! hi! #comment]", element13, attribute17); attributes0.put(attribute17); java.lang.String str22 = attribute17.html(); java.lang.String str23 = attribute17.getValue(); java.lang.String str24 = attribute17.getKey(); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertNotNull(attributeItor3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTF-8bodyUTF-8" + "'", str11, "UTF-8bodyUTF-8"); org.junit.Assert.assertNotNull(attribute16); org.junit.Assert.assertNotNull(attribute17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"" + "'", str22, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\""); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str23, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str24, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); }
public void test411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test411"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.Matches matches1 = new org.jsoup.select.Evaluator.Matches(pattern0); java.lang.String str2 = matches1.toString(); java.lang.String str3 = matches1.toString(); java.lang.String str4 = matches1.toString(); java.lang.String str5 = matches1.toString(); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document9 = document8.clone(); org.jsoup.nodes.Element element11 = document8.addClass(""); java.lang.String str12 = document8.toString(); org.jsoup.nodes.Element element14 = document8.tagName("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.jsoup.nodes.Document document15 = document8.clone(); java.lang.String str16 = document15.outerHtml(); org.jsoup.select.Evaluator.ContainsText containsText18 = new org.jsoup.select.Evaluator.ContainsText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = containsText18.toString(); org.jsoup.nodes.Element element20 = null; org.jsoup.nodes.Document document22 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element24 = document22.createElement("#document"); org.jsoup.nodes.Document document25 = document22.clone(); java.lang.String str26 = document25.nodeName(); org.jsoup.nodes.Element element28 = document25.tagName("#doctype"); boolean boolean29 = containsText18.matches(element20, element28); org.jsoup.nodes.Element element30 = null; org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); java.lang.String str39 = document33.nodeName(); org.jsoup.select.Elements elements41 = document33.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document45 = document44.clone(); org.jsoup.nodes.Element element47 = document44.addClass(""); org.jsoup.nodes.Element element48 = document33.appendChild((org.jsoup.nodes.Node) document44); java.lang.String str49 = document44.val(); org.jsoup.nodes.Element element51 = document44.text(""); java.util.List<org.jsoup.nodes.Node> nodeList52 = element51.childNodes(); boolean boolean53 = containsText18.matches(element30, element51); org.jsoup.safety.Whitelist whitelist54 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist56 = whitelist54.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner57 = new org.jsoup.safety.Cleaner(whitelist54); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray62 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62); org.jsoup.nodes.Element element65 = document60.classNames((java.util.Set<java.lang.String>) strSet63); java.lang.String str66 = document60.nodeName(); java.lang.String str67 = document60.html(); boolean boolean68 = cleaner57.isValid(document60); org.jsoup.nodes.Document document71 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean72 = cleaner57.isValid(document71); org.jsoup.nodes.Element element73 = document71.clone(); org.jsoup.nodes.Document document75 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element76 = document75.body(); java.lang.String str77 = document75.outerHtml(); boolean boolean78 = containsText18.matches((org.jsoup.nodes.Element) document71, (org.jsoup.nodes.Element) document75); // The following exception was thrown during execution in test generation try { boolean boolean79 = matches1.matches((org.jsoup.nodes.Element) document15, (org.jsoup.nodes.Element) document71); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":matches(null" + "'", str2, ":matches(null"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":matches(null" + "'", str3, ":matches(null"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":matches(null" + "'", str4, ":matches(null"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":matches(null" + "'", str5, ":matches(null"); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str12, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str16, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#document" + "'", str26, "#document"); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "#document" + "'", str39, "#document"); org.junit.Assert.assertNotNull(elements41); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document45); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(nodeList52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "#document" + "'", str66, "#document"); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str67, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str77, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); }
public void test412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test412"); org.jsoup.select.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.select.Evaluator.AttributeWithValueContaining("[:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>$=<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>]", " class=\" #doctype\""); java.lang.String str3 = attributeWithValueContaining2.toString(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Node node13 = document11.removeAttr("#doctype"); org.jsoup.nodes.Document document14 = cleaner7.clean(document11); org.jsoup.nodes.Attributes attributes15 = document14.attributes(); org.jsoup.nodes.Element element16 = document14.head(); org.jsoup.nodes.Node node17 = element16.previousSibling(); org.jsoup.select.Elements elements18 = element16.getAllElements(); org.jsoup.nodes.Element element19 = null; // The following exception was thrown during execution in test generation try { boolean boolean20 = attributeWithValueContaining2.matches(element16, element19); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[[:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>$=<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>]*=class=\" #doctype\"]" + "'", str3, "[[:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>$=<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>]*=class=\" #doctype\"]"); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNull(node17); org.junit.Assert.assertNotNull(elements18); }
public void test413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test413"); org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str3 = textNode2.toString(); org.jsoup.nodes.Attributes attributes4 = textNode2.attributes(); java.util.Map<java.lang.String, java.lang.String> strMap5 = attributes4.dataset(); java.util.Map<java.lang.String, java.lang.String> strMap6 = attributes4.dataset(); java.lang.String str8 = attributes4.get(":matchesOwn(null"); java.lang.String str10 = attributes4.get(":containsOwn(                                                  "); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator11 = attributes4.spliterator(); org.jsoup.safety.Whitelist whitelist13 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist15 = whitelist13.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner16 = new org.jsoup.safety.Cleaner(whitelist13); java.lang.String str17 = org.jsoup.Jsoup.clean("hi!", whitelist13); boolean boolean18 = attributes4.equals((java.lang.Object) "hi!"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(attributes4); org.junit.Assert.assertNotNull(strMap5); org.junit.Assert.assertNotNull(strMap6); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(attributeSpliterator11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test414"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basic(); boolean boolean10 = org.jsoup.Jsoup.isValid("hi!", whitelist9); java.lang.String[] strArray18 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist19 = whitelist9.addProtocols(".#document", "#doctype=\"\"", strArray18); org.jsoup.safety.Whitelist whitelist20 = whitelist6.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray18); org.jsoup.safety.Whitelist whitelist21 = whitelist2.addAttributes(":containsOwn(hi!:matchesown(null", strArray18); boolean boolean22 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray18); boolean boolean23 = org.jsoup.helper.StringUtil.in("[hi!<html> <head></head> <body> hi! </body> </html>=\"\"=<!--<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"-->]", strArray18); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); }
public void test415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test415"); org.jsoup.select.Evaluator.Attribute attribute1 = new org.jsoup.select.Evaluator.Attribute(":containsOwn(                                                  "); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray6 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6); org.jsoup.nodes.Element element9 = document4.classNames((java.util.Set<java.lang.String>) strSet7); java.lang.String str10 = document4.nodeName(); org.jsoup.select.Elements elements12 = document4.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); org.jsoup.nodes.Element element18 = document15.addClass(""); org.jsoup.nodes.Element element19 = document4.appendChild((org.jsoup.nodes.Node) document15); org.jsoup.nodes.Element element21 = document15.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document25 = document24.clone(); org.jsoup.nodes.Element element27 = document24.addClass(""); java.lang.String str28 = document24.toString(); org.jsoup.nodes.Element element30 = document24.text(".#document"); org.jsoup.nodes.Node node31 = element21.after((org.jsoup.nodes.Node) document24); org.jsoup.nodes.Element element32 = element21.empty(); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document36 = document35.clone(); org.jsoup.nodes.Element element38 = document35.addClass(""); org.jsoup.nodes.Document document42 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str43 = document42.val(); java.util.List<org.jsoup.nodes.Node> nodeList45 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document42, "#document"); java.lang.String str46 = document42.baseUri(); org.jsoup.nodes.Document document49 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str50 = document49.val(); org.jsoup.nodes.Element element52 = document49.append("#document"); org.jsoup.nodes.Element element53 = document42.appendChild((org.jsoup.nodes.Node) element52); org.jsoup.nodes.Element element54 = document35.prependChild((org.jsoup.nodes.Node) document42); org.jsoup.nodes.Attributes attributes55 = element54.attributes(); boolean boolean56 = element21.equals((java.lang.Object) element54); org.jsoup.nodes.Element element58 = element21.toggleClass("#&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;"); org.jsoup.safety.Whitelist whitelist60 = org.jsoup.safety.Whitelist.basic(); boolean boolean61 = org.jsoup.Jsoup.isValid("hi!", whitelist60); java.lang.String[] strArray69 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist70 = whitelist60.addProtocols(".#document", "#doctype=\"\"", strArray69); org.jsoup.safety.Cleaner cleaner71 = new org.jsoup.safety.Cleaner(whitelist60); org.jsoup.nodes.Document document74 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document75 = document74.clone(); document75.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean78 = document75.isBlock(); org.jsoup.nodes.Document document79 = cleaner71.clean(document75); org.jsoup.select.Elements elements81 = document79.getElementsByAttribute("UTF-8UTF-8"); org.jsoup.nodes.Document document82 = document79.clone(); boolean boolean83 = attribute1.matches(element21, (org.jsoup.nodes.Element) document82); org.jsoup.nodes.Element element85 = document82.text("<html> <head></head> <body> hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; </body> </html>"); org.jsoup.select.Elements elements88 = document82.getElementsByAttributeValueNot("[:containsown(hi!:matchesown(null=&quot;&quot;*=:lt(10)]", ":containsown(hi!:matchesown(null=&quot;&quot;"); org.jsoup.nodes.Element element90 = document82.prepend(":eq(0)"); org.jsoup.nodes.Document document91 = document82.normalise(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#document" + "'", str10, "#document"); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str28, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertNotNull(node31); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, ""); org.junit.Assert.assertNotNull(nodeList45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!"); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, ""); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(attributes55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNotNull(strArray69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertNotNull(elements81); org.junit.Assert.assertNotNull(document82); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertNotNull(element85); org.junit.Assert.assertNotNull(elements88); org.junit.Assert.assertNotNull(element90); org.junit.Assert.assertNotNull(document91); }
public void test416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test416"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("[:matches(null]", pattern1); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.select.Elements elements13 = document11.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements15 = document11.getElementsByAttribute("#document"); org.jsoup.select.Elements elements18 = document11.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document19 = cleaner7.clean(document11); org.jsoup.select.Evaluator.IndexLessThan indexLessThan21 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 10); java.lang.String str22 = indexLessThan21.toString(); org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("#document", "#data"); org.jsoup.select.Elements elements27 = document25.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document31 = document30.clone(); org.jsoup.nodes.Element element33 = document30.addClass(""); java.lang.String str34 = document30.toString(); org.jsoup.nodes.Element element36 = document30.tagName("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); boolean boolean37 = indexLessThan21.matches((org.jsoup.nodes.Element) document25, element36); java.lang.String str38 = element36.text(); boolean boolean39 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document19, element36); org.jsoup.nodes.Element element40 = document19.head(); java.lang.String str41 = element40.toString(); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(elements18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + ":lt(10)" + "'", str22, ":lt(10)"); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(elements27); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str34, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "<head></head>" + "'", str41, "<head></head>"); }
public void test417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test417"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parseBodyFragment("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document5 = document4.clone(); org.jsoup.nodes.Attribute attribute8 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute8.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str11 = attribute8.getKey(); attribute8.setKey("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean14 = whitelist0.isSafeAttribute(":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", (org.jsoup.nodes.Element) document5, attribute8); org.jsoup.nodes.Element element15 = document5.empty(); boolean boolean16 = element15.hasText(); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(element15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test418"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList3 = attributes2.asList(); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting6 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray11 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11); org.jsoup.nodes.Element element14 = document9.classNames((java.util.Set<java.lang.String>) strSet12); java.lang.String str15 = document9.nodeName(); org.jsoup.select.Elements elements17 = document9.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document21 = document20.clone(); org.jsoup.nodes.Element element23 = document20.addClass(""); org.jsoup.nodes.Element element24 = document9.appendChild((org.jsoup.nodes.Node) document20); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str28 = document27.val(); org.jsoup.nodes.Element element30 = document27.append("#document"); boolean boolean31 = attributeWithValueStarting6.matches((org.jsoup.nodes.Element) document9, element30); java.util.regex.Pattern pattern33 = null; org.jsoup.select.Elements elements34 = document9.getElementsByAttributeValueMatching("[^hi!]", pattern33); org.jsoup.select.Elements elements36 = document9.getElementsMatchingOwnText("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Element element38 = document9.tagName("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); boolean boolean39 = attributes2.equals((java.lang.Object) element38); // The following exception was thrown during execution in test generation try { org.jsoup.select.Elements elements42 = element38.getElementsByAttributeValueMatching("<html>\n <head></head>\n <body>\n #  hi! \n </body>\n</html>", "\n<!--:containsOwn(-->"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Pattern syntax error: ?<!--:containsOwn(-->"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(attributeList3); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#document" + "'", str15, "#document"); org.junit.Assert.assertNotNull(elements17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, ""); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertNotNull(elements36); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); }
public void test419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test419"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList3 = attributes2.asList(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Node node13 = document11.removeAttr("#doctype"); org.jsoup.nodes.Document document14 = cleaner7.clean(document11); org.jsoup.nodes.Attributes attributes15 = document14.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator16 = attributes15.spliterator(); attributes2.addAll(attributes15); java.lang.String str19 = attributes15.get("#&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;"); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(attributeList3); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(attributeSpliterator16); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); }
public void test420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test420"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.select.Elements elements15 = document13.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.Map<java.lang.String, java.lang.String> strMap16 = document13.dataset(); org.jsoup.nodes.Document document17 = cleaner3.clean(document13); int int18 = document17.siblingIndex(); org.jsoup.nodes.Element element19 = document17.empty(); org.jsoup.nodes.Element element21 = element19.tagName("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); java.lang.String str22 = element19.toString(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(strMap16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); }
public void test421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test421"); org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode(":matchesOwn(null", "hi! =&quot;&quot;"); boolean boolean4 = textNode2.hasAttr(":eq(-1)"); org.jsoup.nodes.Attributes attributes5 = textNode2.attributes(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.prettyPrint(false); java.nio.charset.Charset charset9 = outputSettings6.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings6.indentAmount((int) '4'); java.nio.charset.Charset charset12 = outputSettings6.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.prettyPrint(false); int int16 = outputSettings15.indentAmount(); java.nio.charset.Charset charset17 = outputSettings15.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings6.charset(charset17); java.nio.charset.Charset[] charsetArray19 = new java.nio.charset.Charset[] { charset17 }; java.util.LinkedList<java.nio.charset.Charset> charsetList20 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList20, charsetArray19); java.nio.charset.Charset charset22 = charsetList20.pop(); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.basic(); boolean boolean25 = org.jsoup.Jsoup.isValid("hi!", whitelist24); java.lang.String[] strArray33 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist34 = whitelist24.addProtocols(".#document", "#doctype=\"\"", strArray33); org.jsoup.safety.Cleaner cleaner35 = new org.jsoup.safety.Cleaner(whitelist24); boolean boolean36 = charsetList20.contains((java.lang.Object) whitelist24); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan39 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (byte) 1); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element42 = document41.body(); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element45 = document44.body(); boolean boolean46 = indexGreaterThan39.matches(element42, (org.jsoup.nodes.Element) document44); org.jsoup.nodes.Attribute attribute49 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute49.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str52 = attribute49.getKey(); java.lang.String str53 = attribute49.html(); boolean boolean54 = whitelist24.isSafeAttribute("#doctype=\"\"", element42, attribute49); attributes5.put(attribute49); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(attributes5); org.junit.Assert.assertNotNull(outputSettings8); org.junit.Assert.assertNotNull(charset9); org.junit.Assert.assertNotNull(outputSettings11); org.junit.Assert.assertNotNull(charset12); org.junit.Assert.assertNotNull(outputSettings15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charsetArray19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(charset22); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str52, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"" + "'", str53, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); }
public void test422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test422"); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan1 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (byte) 1); java.lang.String str2 = indexGreaterThan1.toString(); org.jsoup.nodes.Document document4 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray9 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9); org.jsoup.nodes.Element element12 = document7.classNames((java.util.Set<java.lang.String>) strSet10); org.jsoup.nodes.Element element13 = document4.appendChild((org.jsoup.nodes.Node) element12); org.jsoup.nodes.Document.QuirksMode quirksMode14 = document4.quirksMode(); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("", "hi!"); java.lang.String str18 = document17.data(); boolean boolean19 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document4, (org.jsoup.nodes.Element) document17); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str26 = document25.val(); java.util.List<org.jsoup.nodes.Node> nodeList28 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document25, "#document"); java.lang.String str29 = document25.baseUri(); org.jsoup.nodes.Element element30 = document25.body(); java.lang.String str31 = element30.baseUri(); boolean boolean32 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document21, element30); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray37 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37); org.jsoup.nodes.Element element40 = document35.classNames((java.util.Set<java.lang.String>) strSet38); java.lang.String str41 = document35.nodeName(); org.jsoup.select.Elements elements43 = document35.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document47 = document46.clone(); org.jsoup.nodes.Element element49 = document46.addClass(""); org.jsoup.nodes.Element element50 = document35.appendChild((org.jsoup.nodes.Node) document46); org.jsoup.nodes.Element element52 = document46.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document56 = document55.clone(); org.jsoup.nodes.Element element58 = document55.addClass(""); java.lang.String str59 = document55.toString(); org.jsoup.nodes.Element element61 = document55.text(".#document"); org.jsoup.nodes.Node node62 = element52.after((org.jsoup.nodes.Node) document55); org.jsoup.nodes.Element element64 = element52.prependText("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist67 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str68 = org.jsoup.Jsoup.clean("", "#data", whitelist67); org.jsoup.safety.Cleaner cleaner69 = new org.jsoup.safety.Cleaner(whitelist67); org.jsoup.nodes.Document document73 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str74 = document73.val(); java.util.List<org.jsoup.nodes.Node> nodeList76 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document73, "#document"); java.lang.String str77 = document73.baseUri(); org.jsoup.nodes.Element element79 = document73.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements80 = document73.parents(); org.jsoup.nodes.Document document81 = cleaner69.clean(document73); boolean boolean82 = element64.equals((java.lang.Object) cleaner69); org.jsoup.nodes.Element element83 = element64.clone(); org.jsoup.nodes.Element element84 = document21.prependChild((org.jsoup.nodes.Node) element83); org.jsoup.nodes.Element element85 = document21.empty(); boolean boolean87 = element85.hasAttr("hi!UTF-8bodyUTF-8hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>UTF-8bodyUTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>UTF-8bodyUTF-8hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>UTF-8bodyUTF-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":gt(1)" + "'", str2, ":gt(1)"); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertTrue("'" + quirksMode14 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode14.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, ""); org.junit.Assert.assertNotNull(nodeList28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!"); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!"); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "#document" + "'", str41, "#document"); org.junit.Assert.assertNotNull(elements43); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str59, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(node62); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, ""); org.junit.Assert.assertNotNull(document73); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, ""); org.junit.Assert.assertNotNull(nodeList76); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!"); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(elements80); org.junit.Assert.assertNotNull(document81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(element83); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertNotNull(element85); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); }
public void test423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test423"); org.jsoup.select.Evaluator.AllElements allElements0 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str1 = allElements0.toString(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray6 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6); org.jsoup.nodes.Element element9 = document4.classNames((java.util.Set<java.lang.String>) strSet7); org.jsoup.nodes.Element element11 = element9.prepend("#document"); org.jsoup.nodes.Element element13 = element9.toggleClass("#doctype=\"\""); boolean boolean15 = element9.hasClass(":eq(52)"); java.lang.String str17 = element9.attr(":eq(52)"); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.basic(); boolean boolean20 = org.jsoup.Jsoup.isValid("hi!", whitelist19); java.lang.String[] strArray28 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist29 = whitelist19.addProtocols(".#document", "#doctype=\"\"", strArray28); org.jsoup.safety.Cleaner cleaner30 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document34 = document33.clone(); document34.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean37 = document34.isBlock(); org.jsoup.nodes.Document document38 = cleaner30.clean(document34); boolean boolean39 = allElements0.matches(element9, (org.jsoup.nodes.Element) document34); java.lang.String str40 = allElements0.toString(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "*" + "'", str1, "*"); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "*" + "'", str40, "*"); }
public void test424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test424"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean18 = cleaner3.isValid(document17); org.jsoup.nodes.Element element19 = document17.clone(); org.jsoup.nodes.Element element21 = document17.append(":containsOwn(<html> <head></head> <body> [#document^= hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot; </body> </html>"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); }
public void test425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test425"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element23 = element22.empty(); org.jsoup.nodes.Element element25 = element23.appendElement(":matchesOwn(null"); org.jsoup.select.Elements elements27 = element25.getElementsMatchingOwnText("#.#document"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(elements27); }
public void test426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test426"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); boolean boolean6 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist3); java.lang.String str7 = org.jsoup.Jsoup.clean(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist3); java.lang.String str8 = org.jsoup.Jsoup.clean("", whitelist3); org.jsoup.select.Evaluator.Id id11 = new org.jsoup.select.Evaluator.Id("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document15 = document14.clone(); org.jsoup.nodes.Element element17 = document14.addClass(""); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); java.lang.String str26 = document20.nodeName(); org.jsoup.select.Elements elements28 = document20.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document32 = document31.clone(); org.jsoup.nodes.Element element34 = document31.addClass(""); org.jsoup.nodes.Element element35 = document20.appendChild((org.jsoup.nodes.Node) document31); boolean boolean36 = id11.matches(element17, element35); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document40 = document39.clone(); org.jsoup.nodes.Element element42 = document39.addClass(""); java.lang.String str43 = document39.toString(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting45 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document51 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray53 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53); org.jsoup.nodes.Element element56 = document51.classNames((java.util.Set<java.lang.String>) strSet54); document51.title("#document"); boolean boolean59 = attributeStarting45.matches((org.jsoup.nodes.Element) document48, (org.jsoup.nodes.Element) document51); java.lang.String str60 = document48.id(); org.jsoup.select.Elements elements62 = document48.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements64 = document48.getElementsByIndexGreaterThan((int) (short) 10); boolean boolean65 = id11.matches((org.jsoup.nodes.Element) document39, (org.jsoup.nodes.Element) document48); java.lang.String str66 = document39.data(); java.lang.String str67 = document39.html(); org.jsoup.safety.Whitelist whitelist69 = new org.jsoup.safety.Whitelist(); boolean boolean70 = org.jsoup.Jsoup.isValid("", whitelist69); org.jsoup.nodes.Document document74 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray76 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76); org.jsoup.nodes.Element element79 = document74.classNames((java.util.Set<java.lang.String>) strSet77); org.jsoup.nodes.Element element81 = element79.prepend("#document"); org.jsoup.nodes.Attribute attribute84 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute84.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str87 = attribute84.getKey(); boolean boolean88 = whitelist69.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element81, attribute84); org.jsoup.nodes.Attribute attribute89 = attribute84.clone(); java.lang.String str91 = attribute89.setValue(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); java.lang.String str92 = attribute89.getKey(); java.lang.String str93 = attribute89.toString(); boolean boolean94 = whitelist3.isSafeAttribute("<html>\n <head>\n <title>#document</title>\n </head>\n <body>\n hi!\n </body>\n</html>", (org.jsoup.nodes.Element) document39, attribute89); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi! =&quot;&quot;" + "'", str7, "hi! =&quot;&quot;"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#document" + "'", str26, "#document"); org.junit.Assert.assertNotNull(elements28); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(element34); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str43, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(strArray53); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNotNull(elements62); org.junit.Assert.assertNotNull(elements64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, ""); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str67, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true); org.junit.Assert.assertNotNull(document74); org.junit.Assert.assertNotNull(strArray76); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(element81); org.junit.Assert.assertEquals("'" + str87 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str87, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertNotNull(attribute89); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, ""); org.junit.Assert.assertEquals("'" + str92 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str92, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str93 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\" &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;\"" + "'", str93, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\" &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;\""); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); }
public void test427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test427"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist6 = whitelist0.addEnforcedAttribute("<head></head>\n<body>\n #document:contains(  hi! hi!:contains(  hi! \n</body>", "[[:matches(null!=[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]]!=utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"utf-8]", " "); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist6); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(whitelist6); }
public void test428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test428"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); java.lang.String str4 = attributes0.get("\n#document"); org.jsoup.nodes.Attributes attributes5 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes6 = attributes5.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator7 = attributes5.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap8 = attributes5.dataset(); attributes0.addAll(attributes5); java.lang.String str10 = attributes0.toString(); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner14 = new org.jsoup.safety.Cleaner(whitelist11); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document18 = document17.clone(); org.jsoup.nodes.Node node20 = document18.removeAttr("#doctype"); org.jsoup.nodes.Document document21 = cleaner14.clean(document18); boolean boolean22 = attributes0.equals((java.lang.Object) document18); java.util.Map<java.lang.String, java.lang.String> strMap23 = attributes0.dataset(); org.jsoup.nodes.Attributes attributes24 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes25 = attributes24.clone(); org.jsoup.nodes.Attributes attributes26 = attributes25.clone(); boolean boolean28 = attributes26.hasKey("[#document^=#doctype]"); attributes26.remove("\n<!--<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"-->"); attributes26.remove("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\":contains(&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); attributes0.addAll(attributes26); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor34 = attributes0.iterator(); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(attributeSpliterator7); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(node20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(strMap23); org.junit.Assert.assertNotNull(attributes25); org.junit.Assert.assertNotNull(attributes26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(attributeItor34); }
public void test429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test429"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document3 = document2.clone(); org.jsoup.nodes.Element element5 = document2.addClass(""); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str10 = document9.val(); java.util.List<org.jsoup.nodes.Node> nodeList12 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document9, "#document"); java.lang.String str13 = document9.baseUri(); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str17 = document16.val(); org.jsoup.nodes.Element element19 = document16.append("#document"); org.jsoup.nodes.Element element20 = document9.appendChild((org.jsoup.nodes.Node) element19); org.jsoup.nodes.Element element21 = document2.prependChild((org.jsoup.nodes.Node) document9); org.jsoup.nodes.Attributes attributes22 = element21.attributes(); java.lang.String str23 = attributes22.html(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator24 = attributes22.spliterator(); org.jsoup.nodes.Attributes attributes25 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes26 = attributes25.clone(); java.lang.String str27 = attributes26.toString(); attributes22.addAll(attributes26); org.jsoup.safety.Whitelist whitelist29 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes31 = whitelist29.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList32 = attributes31.asList(); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist35 = whitelist33.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner36 = new org.jsoup.safety.Cleaner(whitelist33); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document40 = document39.clone(); org.jsoup.nodes.Node node42 = document40.removeAttr("#doctype"); org.jsoup.nodes.Document document43 = cleaner36.clean(document40); org.jsoup.nodes.Attributes attributes44 = document43.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator45 = attributes44.spliterator(); attributes31.addAll(attributes44); java.util.Map<java.lang.String, java.lang.String> strMap47 = attributes44.dataset(); attributes22.addAll(attributes44); attributes22.remove("hi!  hi! =&quot;&quot;"); java.lang.Class<?> wildcardClass51 = attributes22.getClass(); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(element5); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(nodeList12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!"); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + " class=\"\"" + "'", str23, " class=\"\""); org.junit.Assert.assertNotNull(attributeSpliterator24); org.junit.Assert.assertNotNull(attributes26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(attributes31); org.junit.Assert.assertNotNull(attributeList32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(node42); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(attributes44); org.junit.Assert.assertNotNull(attributeSpliterator45); org.junit.Assert.assertNotNull(strMap47); org.junit.Assert.assertNotNull(wildcardClass51); }
public void test430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test430"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addProtocols(".#document", "#doctype=\"\"", strArray11); org.jsoup.select.Evaluator.AttributeStarting attributeStarting15 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); document21.title("#document"); boolean boolean29 = attributeStarting15.matches((org.jsoup.nodes.Element) document18, (org.jsoup.nodes.Element) document21); java.lang.String str30 = document18.id(); org.jsoup.select.Elements elements32 = document18.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements34 = document18.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute37 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean38 = whitelist2.isSafeAttribute("", (org.jsoup.nodes.Element) document18, attribute37); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist43 = whitelist41.preserveRelativeLinks(false); boolean boolean44 = org.jsoup.Jsoup.isValid("", whitelist41); java.lang.String[] strArray50 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist51 = whitelist41.addTags(strArray50); org.jsoup.safety.Whitelist whitelist52 = whitelist2.addAttributes("[^hi!]", strArray50); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray50); boolean boolean54 = org.jsoup.helper.StringUtil.in("[hi!=:eq(52)]", strArray50); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, ""); org.junit.Assert.assertNotNull(elements32); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); }
public void test431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test431"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element24 = element13.val(":contains(<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); java.lang.String str25 = element24.id(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); }
public void test432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test432"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); org.jsoup.nodes.Element element12 = document10.head(); org.jsoup.nodes.Node node13 = element12.previousSibling(); org.jsoup.select.Elements elements14 = element12.getAllElements(); java.lang.String str15 = element12.val(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNull(node13); org.junit.Assert.assertNotNull(elements14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); }
public void test433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test433"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str7 = org.jsoup.Jsoup.clean("", "#data", whitelist6); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basic(); boolean boolean10 = org.jsoup.Jsoup.isValid("hi!", whitelist9); java.lang.String[] strArray18 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist19 = whitelist9.addProtocols(".#document", "#doctype=\"\"", strArray18); org.jsoup.safety.Whitelist whitelist20 = whitelist6.addTags(strArray18); org.jsoup.safety.Whitelist whitelist21 = whitelist3.addTags(strArray18); boolean boolean22 = org.jsoup.Jsoup.isValid("#doctype", whitelist3); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist28 = whitelist26.preserveRelativeLinks(false); boolean boolean29 = org.jsoup.Jsoup.isValid("", whitelist26); java.lang.String[] strArray35 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist36 = whitelist26.addTags(strArray35); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray35); org.jsoup.safety.Whitelist whitelist38 = whitelist3.addProtocols("hi! hi! #comment", "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\":contains(&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", strArray35); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner43 = new org.jsoup.safety.Cleaner(whitelist40); org.jsoup.safety.Whitelist whitelist45 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist47 = whitelist45.preserveRelativeLinks(false); boolean boolean48 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist45); org.jsoup.safety.Whitelist whitelist50 = org.jsoup.safety.Whitelist.basic(); boolean boolean51 = org.jsoup.Jsoup.isValid("hi!", whitelist50); java.lang.String[] strArray59 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist60 = whitelist50.addProtocols(".#document", "#doctype=\"\"", strArray59); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray59, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray59); org.jsoup.safety.Whitelist whitelist64 = whitelist45.addTags(strArray59); org.jsoup.safety.Whitelist whitelist65 = whitelist40.addTags(strArray59); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray59); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray59, "hi!  hi! =&quot;&quot;"); org.jsoup.safety.Whitelist whitelist69 = whitelist3.addAttributes("#<html> <head></head> <body> hi! </body> </html>", strArray59); org.jsoup.safety.Whitelist whitelist73 = whitelist3.addEnforcedAttribute(":lt(52)", "hi!:matchesown(null=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;", "[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); java.lang.String str74 = org.jsoup.Jsoup.clean("", "<html>\n <head>\n <title>[  hi!  &amp;lt;#root class=&amp;quot;&amp;quot;&amp;gt;  hi!  !=#doctype=&amp;quot;&amp;quot;]</title>\n </head> \n <body>\n  hi! \n </body>\n</html>", whitelist73); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); org.junit.Assert.assertNotNull(strArray59); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist65); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, ""); }
public void test434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test434"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist1); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.basic(); boolean boolean7 = org.jsoup.Jsoup.isValid("hi!", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addProtocols(".#document", "#doctype=\"\"", strArray15); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray15, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray15); org.jsoup.safety.Whitelist whitelist20 = whitelist1.addTags(strArray15); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); boolean boolean27 = org.jsoup.Jsoup.isValid("", whitelist24); org.jsoup.nodes.Attributes attributes29 = whitelist24.getEnforcedAttributes(":eq(52)"); boolean boolean30 = org.jsoup.Jsoup.isValid("", whitelist24); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.basic(); boolean boolean37 = org.jsoup.Jsoup.isValid("hi!", whitelist36); java.lang.String[] strArray45 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist46 = whitelist36.addProtocols(".#document", "#doctype=\"\"", strArray45); org.jsoup.safety.Whitelist whitelist47 = whitelist33.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray45); org.jsoup.safety.Whitelist whitelist49 = whitelist47.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist51 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist55 = whitelist53.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist58 = org.jsoup.safety.Whitelist.basic(); boolean boolean59 = org.jsoup.Jsoup.isValid("hi!", whitelist58); java.lang.String[] strArray67 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist68 = whitelist58.addProtocols(".#document", "#doctype=\"\"", strArray67); org.jsoup.safety.Whitelist whitelist69 = whitelist55.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray67); org.jsoup.safety.Whitelist whitelist70 = whitelist51.addAttributes(":containsOwn(hi!:matchesown(null", strArray67); org.jsoup.safety.Whitelist whitelist71 = whitelist47.addAttributes(" text=\"\"", strArray67); org.jsoup.safety.Whitelist whitelist72 = whitelist24.addProtocols("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray67); org.jsoup.safety.Whitelist whitelist73 = whitelist20.addAttributes("#doctype=\"\"", strArray67); java.lang.String[] strArray74 = null; // The following exception was thrown during execution in test generation try { org.jsoup.safety.Whitelist whitelist75 = whitelist73.addTags(strArray74); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(attributes29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true); org.junit.Assert.assertNotNull(strArray67); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist73); }
public void test435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test435"); org.jsoup.nodes.Attribute attribute2 = new org.jsoup.nodes.Attribute("#doctype", ""); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = whitelist3.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist3); boolean boolean7 = attribute2.equals((java.lang.Object) cleaner6); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode10 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document11 = document9.quirksMode(quirksMode10); org.jsoup.nodes.Element element13 = document11.toggleClass("hi! class=\"\"<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document14 = cleaner6.clean(document11); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertTrue("'" + quirksMode10 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode10.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(document14); }
public void test436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test436"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("[:matches(null]", pattern1); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.select.Elements elements13 = document11.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements15 = document11.getElementsByAttribute("#document"); org.jsoup.select.Elements elements18 = document11.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document19 = cleaner7.clean(document11); org.jsoup.select.Evaluator.IndexLessThan indexLessThan21 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 10); java.lang.String str22 = indexLessThan21.toString(); org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("#document", "#data"); org.jsoup.select.Elements elements27 = document25.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document31 = document30.clone(); org.jsoup.nodes.Element element33 = document30.addClass(""); java.lang.String str34 = document30.toString(); org.jsoup.nodes.Element element36 = document30.tagName("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); boolean boolean37 = indexLessThan21.matches((org.jsoup.nodes.Element) document25, element36); java.lang.String str38 = element36.text(); boolean boolean39 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document19, element36); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element41 = document19.wrap("hi!  hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(elements18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + ":lt(10)" + "'", str22, ":lt(10)"); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(elements27); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str34, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); }
public void test437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test437"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList3 = attributes2.asList(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist6 = whitelist4.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.nodes.Node node13 = document11.removeAttr("#doctype"); org.jsoup.nodes.Document document14 = cleaner7.clean(document11); org.jsoup.nodes.Attributes attributes15 = document14.attributes(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator16 = attributes15.spliterator(); attributes2.addAll(attributes15); attributes15.remove("[^hi!]"); org.jsoup.nodes.Attributes attributes20 = attributes15.clone(); java.lang.String str22 = attributes15.get(" class=\"\""); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(attributeList3); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(node13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(attributes15); org.junit.Assert.assertNotNull(attributeSpliterator16); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); }
public void test438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test438"); org.jsoup.safety.Whitelist whitelist2 = new org.jsoup.safety.Whitelist(); boolean boolean4 = whitelist2.isSafeTag("#root"); java.lang.String str5 = org.jsoup.Jsoup.clean("UTF-8bodyUTF-8", "", whitelist2); boolean boolean7 = whitelist2.isSafeTag("#[:matches(null]"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTF-8bodyUTF-8" + "'", str5, "UTF-8bodyUTF-8"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test439"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.select.Elements elements15 = document13.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.Map<java.lang.String, java.lang.String> strMap16 = document13.dataset(); org.jsoup.nodes.Document document17 = cleaner3.clean(document13); int int18 = document17.siblingIndex(); org.jsoup.nodes.Element element19 = document17.empty(); org.jsoup.nodes.Element element21 = element19.tagName("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element23 = element21.before("<html>\n <head></head>\n <body>\n [#document^=  hi! ]=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;\n </body>\n</html>"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(strMap16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(element21); }
public void test440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test440"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner10 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document14 = document13.clone(); org.jsoup.nodes.Node node16 = document14.removeAttr("#doctype"); org.jsoup.nodes.Document document17 = cleaner10.clean(document14); org.jsoup.nodes.Attributes attributes18 = document17.attributes(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist21 = whitelist19.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner22 = new org.jsoup.safety.Cleaner(whitelist19); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document26 = document25.clone(); org.jsoup.nodes.Node node28 = document26.removeAttr("#doctype"); org.jsoup.nodes.Document document29 = cleaner22.clean(document26); org.jsoup.nodes.Attributes attributes30 = document29.attributes(); boolean boolean31 = containsOwnText6.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document29); boolean boolean32 = cleaner4.isValid(document17); org.jsoup.nodes.Document document35 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean37 = document35.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document38 = cleaner4.clean(document35); boolean boolean40 = document38.hasClass("[hi!, <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); org.jsoup.select.Elements elements42 = document38.getElementsByAttribute("body"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertNotNull(node16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(attributes18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(node28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(attributes30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(elements42); }
public void test441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test441"); org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) (byte) 1); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText8 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist11 = whitelist9.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist9); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document16 = document15.clone(); org.jsoup.nodes.Node node18 = document16.removeAttr("#doctype"); org.jsoup.nodes.Document document19 = cleaner12.clean(document16); org.jsoup.nodes.Attributes attributes20 = document19.attributes(); org.jsoup.safety.Whitelist whitelist21 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist23 = whitelist21.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner24 = new org.jsoup.safety.Cleaner(whitelist21); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document28 = document27.clone(); org.jsoup.nodes.Node node30 = document28.removeAttr("#doctype"); org.jsoup.nodes.Document document31 = cleaner24.clean(document28); org.jsoup.nodes.Attributes attributes32 = document31.attributes(); boolean boolean33 = containsOwnText8.matches((org.jsoup.nodes.Element) document19, (org.jsoup.nodes.Element) document31); boolean boolean34 = cleaner6.isValid(document19); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); boolean boolean39 = document37.hasClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document40 = cleaner6.clean(document37); org.jsoup.select.Evaluator.Id id42 = new org.jsoup.select.Evaluator.Id("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Evaluator.AttributeWithValueStarting attributeWithValueStarting45 = new org.jsoup.select.Evaluator.AttributeWithValueStarting("\n#document", "#doctype"); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray50 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50); org.jsoup.nodes.Element element53 = document48.classNames((java.util.Set<java.lang.String>) strSet51); java.lang.String str54 = document48.nodeName(); org.jsoup.select.Elements elements56 = document48.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document60 = document59.clone(); org.jsoup.nodes.Element element62 = document59.addClass(""); org.jsoup.nodes.Element element63 = document48.appendChild((org.jsoup.nodes.Node) document59); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str67 = document66.val(); org.jsoup.nodes.Element element69 = document66.append("#document"); boolean boolean70 = attributeWithValueStarting45.matches((org.jsoup.nodes.Element) document48, element69); org.jsoup.nodes.Document.QuirksMode quirksMode71 = document48.quirksMode(); java.lang.String str72 = document48.toString(); org.jsoup.nodes.Document document75 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray77 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77); org.jsoup.nodes.Element element80 = document75.classNames((java.util.Set<java.lang.String>) strSet78); java.lang.String str81 = document75.nodeName(); org.jsoup.nodes.Element element82 = document48.prependChild((org.jsoup.nodes.Node) document75); org.jsoup.select.Elements elements84 = document48.getElementsByIndexLessThan((int) (byte) 0); org.jsoup.nodes.Document document86 = new org.jsoup.nodes.Document("#doctype"); org.jsoup.nodes.Element element87 = document86.empty(); org.jsoup.nodes.Element element89 = document86.appendElement("#doctype"); org.jsoup.nodes.Element element91 = element89.before(":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean92 = id42.matches((org.jsoup.nodes.Element) document48, element91); boolean boolean93 = indexEquals1.matches((org.jsoup.nodes.Element) document40, element91); java.lang.String str94 = indexEquals1.toString(); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(node18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(node30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(attributes32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "#document" + "'", str54, "#document"); org.junit.Assert.assertNotNull(elements56); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(element62); org.junit.Assert.assertNotNull(element63); org.junit.Assert.assertNotNull(document66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, ""); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + quirksMode71 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode71.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str72, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertNotNull(strArray77); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true); org.junit.Assert.assertNotNull(element80); org.junit.Assert.assertEquals("'" + str81 + "' != '" + "#document" + "'", str81, "#document"); org.junit.Assert.assertNotNull(element82); org.junit.Assert.assertNotNull(elements84); org.junit.Assert.assertNotNull(element87); org.junit.Assert.assertNotNull(element89); org.junit.Assert.assertNotNull(element91); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); org.junit.Assert.assertEquals("'" + str94 + "' != '" + ":eq(1)" + "'", str94, ":eq(1)"); }
public void test442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test442"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); org.jsoup.safety.Whitelist whitelist40 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist42 = whitelist40.preserveRelativeLinks(false); boolean boolean43 = org.jsoup.Jsoup.isValid("", whitelist40); java.lang.String[] strArray49 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist50 = whitelist40.addTags(strArray49); org.jsoup.safety.Whitelist whitelist51 = whitelist1.addAttributes("[^hi!]", strArray49); org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist56 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str57 = org.jsoup.Jsoup.clean("", "#data", whitelist56); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.basic(); boolean boolean60 = org.jsoup.Jsoup.isValid("hi!", whitelist59); java.lang.String[] strArray68 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist69 = whitelist59.addProtocols(".#document", "#doctype=\"\"", strArray68); org.jsoup.safety.Whitelist whitelist70 = whitelist56.addTags(strArray68); org.jsoup.safety.Whitelist whitelist71 = whitelist53.addTags(strArray68); org.jsoup.safety.Whitelist whitelist72 = whitelist51.addAttributes("[^:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", strArray68); org.jsoup.safety.Cleaner cleaner73 = new org.jsoup.safety.Cleaner(whitelist72); org.jsoup.nodes.Document document75 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document78 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray80 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80); org.jsoup.nodes.Element element83 = document78.classNames((java.util.Set<java.lang.String>) strSet81); org.jsoup.nodes.Element element84 = document75.appendChild((org.jsoup.nodes.Node) element83); org.jsoup.nodes.Document document87 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray89 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet90 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet90, strArray89); org.jsoup.nodes.Element element92 = document87.classNames((java.util.Set<java.lang.String>) strSet90); org.jsoup.nodes.Element element93 = document75.classNames((java.util.Set<java.lang.String>) strSet90); java.lang.String str94 = document75.className(); org.jsoup.select.Elements elements96 = document75.getElementsByTag(":lt(10)"); org.jsoup.nodes.Document document97 = cleaner73.clean(document75); org.jsoup.nodes.Element element99 = document97.prepend("[hi!:matchesown(null!=class=\" #doctype\"]"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, ""); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNotNull(strArray68); org.junit.Assert.assertNotNull(whitelist69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(document78); org.junit.Assert.assertNotNull(strArray80); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true); org.junit.Assert.assertNotNull(element83); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertNotNull(document87); org.junit.Assert.assertNotNull(strArray89); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true); org.junit.Assert.assertNotNull(element92); org.junit.Assert.assertNotNull(element93); org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, ""); org.junit.Assert.assertNotNull(elements96); org.junit.Assert.assertNotNull(document97); org.junit.Assert.assertNotNull(element99); }
public void test443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test443"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.nodes.Node node10 = document8.removeAttr("#doctype"); org.jsoup.nodes.Document document11 = cleaner4.clean(document8); org.jsoup.nodes.Attributes attributes12 = document11.attributes(); org.jsoup.nodes.Element element13 = document11.head(); org.jsoup.nodes.Node node14 = element13.previousSibling(); java.lang.String str15 = element13.className(); java.util.List<org.jsoup.nodes.Node> nodeList17 = org.jsoup.parser.Parser.parseFragment(".:eq(52)", element13, " text=\"\""); org.jsoup.select.Elements elements19 = element13.getElementsByAttribute("                                                  "); org.jsoup.select.Elements elements22 = element13.getElementsByAttributeValueNot("[^[#document^=#doctype]]", ":lt(-1)"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(node10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(attributes12); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNull(node14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertNotNull(nodeList17); org.junit.Assert.assertNotNull(elements19); org.junit.Assert.assertNotNull(elements22); }
public void test444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test444"); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings1.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings1.indentAmount((int) '4'); java.nio.charset.Charset charset7 = outputSettings1.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); int int11 = outputSettings10.indentAmount(); java.nio.charset.Charset charset12 = outputSettings10.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings1.charset(charset12); java.nio.charset.Charset[] charsetArray14 = new java.nio.charset.Charset[] { charset12 }; java.util.LinkedList<java.nio.charset.Charset> charsetList15 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList15, charsetArray14); java.nio.charset.Charset charset17 = charsetList15.pop(); org.jsoup.safety.Whitelist whitelist19 = org.jsoup.safety.Whitelist.basic(); boolean boolean20 = org.jsoup.Jsoup.isValid("hi!", whitelist19); java.lang.String[] strArray28 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist29 = whitelist19.addProtocols(".#document", "#doctype=\"\"", strArray28); org.jsoup.safety.Cleaner cleaner30 = new org.jsoup.safety.Cleaner(whitelist19); boolean boolean31 = charsetList15.contains((java.lang.Object) whitelist19); org.jsoup.safety.Whitelist whitelist34 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes36 = whitelist34.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist41 = whitelist39.preserveRelativeLinks(false); boolean boolean42 = org.jsoup.Jsoup.isValid("", whitelist39); java.lang.String[] strArray48 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist49 = whitelist39.addTags(strArray48); org.jsoup.safety.Whitelist whitelist50 = whitelist34.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray48); org.jsoup.safety.Whitelist whitelist51 = whitelist19.addProtocols("#<html> <head></head> <body> hi! </body> </html>", "[[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>]", strArray48); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray48); boolean boolean53 = org.jsoup.helper.StringUtil.in(".#&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n&lt;/html&gt;", strArray48); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(outputSettings6); org.junit.Assert.assertNotNull(charset7); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertNotNull(charset12); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertNotNull(charsetArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(charset17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(attributes36); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); }
public void test445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test445"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); org.jsoup.nodes.Element element12 = document10.head(); org.jsoup.nodes.Element element14 = document10.child(0); org.jsoup.nodes.Element element16 = element14.toggleClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\""); java.lang.String str17 = element14.val(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList18 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.prettyPrint(false); java.nio.charset.Charset charset22 = outputSettings21.charset(); charsetList18.addFirst(charset22); java.nio.charset.Charset charset24 = charsetList18.getFirst(); java.lang.Object[] objArray25 = charsetList18.toArray(); boolean boolean26 = element14.equals((java.lang.Object) objArray25); org.jsoup.helper.Validate.noNullElements(objArray25); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertNotNull(outputSettings21); org.junit.Assert.assertNotNull(charset22); org.junit.Assert.assertNotNull(charset24); org.junit.Assert.assertNotNull(objArray25); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[UTF-8]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[UTF-8]"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); }
public void test446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test446"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.MatchesOwn matchesOwn1 = new org.jsoup.select.Evaluator.MatchesOwn(pattern0); java.lang.String str2 = matchesOwn1.toString(); java.lang.String str3 = matchesOwn1.toString(); java.lang.String str4 = matchesOwn1.toString(); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str8 = document7.val(); org.jsoup.select.Elements elements10 = document7.getElementsContainingText("#doctype"); java.lang.String str11 = document7.data(); org.jsoup.nodes.Element element12 = document7.body(); boolean boolean14 = element12.hasAttr("<html>\n <head></head>\n <body>\n #  hi! \n </body>\n</html>"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText16 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str24 = document23.val(); java.util.List<org.jsoup.nodes.Node> nodeList26 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document23, "#document"); java.lang.String str27 = document23.baseUri(); org.jsoup.nodes.Element element29 = document23.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str30 = document23.nodeName(); boolean boolean31 = containsOwnText16.matches((org.jsoup.nodes.Element) document19, (org.jsoup.nodes.Element) document23); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document35 = document34.clone(); org.jsoup.nodes.Element element37 = document34.addClass(""); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str42 = document41.val(); java.util.List<org.jsoup.nodes.Node> nodeList44 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document41, "#document"); java.lang.String str45 = document41.baseUri(); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str49 = document48.val(); org.jsoup.nodes.Element element51 = document48.append("#document"); org.jsoup.nodes.Element element52 = document41.appendChild((org.jsoup.nodes.Node) element51); org.jsoup.nodes.Element element53 = document34.prependChild((org.jsoup.nodes.Node) document41); org.jsoup.nodes.Document document55 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element57 = document55.createElement("#document"); org.jsoup.nodes.Document document58 = document55.clone(); java.lang.String str59 = document58.toString(); org.jsoup.nodes.Element element60 = document41.prependChild((org.jsoup.nodes.Node) document58); org.jsoup.safety.Whitelist whitelist61 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist63 = whitelist61.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner64 = new org.jsoup.safety.Cleaner(whitelist61); org.jsoup.nodes.Document document67 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document68 = document67.clone(); org.jsoup.nodes.Node node70 = document68.removeAttr("#doctype"); org.jsoup.nodes.Document document71 = cleaner64.clean(document68); org.jsoup.nodes.Attributes attributes72 = document71.attributes(); org.jsoup.nodes.Element element73 = document71.head(); org.jsoup.nodes.Node node75 = element73.after("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str76 = element73.className(); boolean boolean77 = containsOwnText16.matches(element60, element73); // The following exception was thrown during execution in test generation try { boolean boolean78 = matchesOwn1.matches(element12, element73); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":matchesOwn(null" + "'", str2, ":matchesOwn(null"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":matchesOwn(null" + "'", str3, ":matchesOwn(null"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":matchesOwn(null" + "'", str4, ":matchesOwn(null"); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(nodeList26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!"); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "#document" + "'", str30, "#document"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, ""); org.junit.Assert.assertNotNull(nodeList44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!"); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertNotNull(document58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, ""); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertNotNull(document68); org.junit.Assert.assertNotNull(node70); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertNotNull(attributes72); org.junit.Assert.assertNotNull(element73); org.junit.Assert.assertNotNull(node75); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, ""); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); }
public void test447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test447"); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList0 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings3.charset(); charsetList0.addFirst(charset4); java.util.Iterator<java.nio.charset.Charset> charsetItor6 = charsetList0.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList7 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); java.nio.charset.Charset charset11 = outputSettings10.charset(); charsetList7.addFirst(charset11); boolean boolean13 = charsetList0.offerFirst(charset11); int int14 = charsetList0.size(); java.nio.charset.Charset charset15 = charsetList0.peekLast(); java.nio.charset.Charset charset16 = null; charsetList0.addFirst(charset16); java.util.Iterator<java.nio.charset.Charset> charsetItor18 = charsetList0.descendingIterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList19 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.prettyPrint(false); java.nio.charset.Charset charset23 = outputSettings22.charset(); charsetList19.addFirst(charset23); java.util.Iterator<java.nio.charset.Charset> charsetItor25 = charsetList19.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList26 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.prettyPrint(false); java.nio.charset.Charset charset30 = outputSettings29.charset(); charsetList26.addFirst(charset30); boolean boolean32 = charsetList19.offerFirst(charset30); boolean boolean33 = charsetList0.offer(charset30); java.nio.charset.Charset charset34 = charsetList0.element(); org.jsoup.safety.Whitelist whitelist36 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes38 = whitelist36.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist43 = whitelist41.preserveRelativeLinks(false); boolean boolean44 = org.jsoup.Jsoup.isValid("", whitelist41); java.lang.String[] strArray50 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist51 = whitelist41.addTags(strArray50); org.jsoup.safety.Whitelist whitelist52 = whitelist36.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray50); boolean boolean53 = org.jsoup.helper.StringUtil.in("#data", strArray50); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray50, "hi!:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean56 = charsetList0.removeLastOccurrence((java.lang.Object) "hi!:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.Iterator<java.nio.charset.Charset> charsetItor57 = charsetList0.descendingIterator(); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(charsetItor6); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(charsetItor18); org.junit.Assert.assertNotNull(outputSettings22); org.junit.Assert.assertNotNull(charset23); org.junit.Assert.assertNotNull(charsetItor25); org.junit.Assert.assertNotNull(outputSettings29); org.junit.Assert.assertNotNull(charset30); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertNull(charset34); org.junit.Assert.assertNotNull(attributes38); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(charsetItor57); }
public void test448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test448"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.safety.Cleaner cleaner12 = new org.jsoup.safety.Cleaner(whitelist1); org.jsoup.safety.Whitelist whitelist14 = whitelist1.preserveRelativeLinks(false); org.jsoup.helper.Validate.notNull((java.lang.Object) whitelist1); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist14); }
public void test449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test449"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element17 = document16.body(); java.lang.String str18 = document16.toString(); org.jsoup.nodes.Document document19 = cleaner3.clean(document16); java.util.regex.Pattern pattern21 = null; org.jsoup.select.Elements elements22 = document16.getElementsByAttributeValueMatching(":matchesown(null=\"#document\"", pattern21); org.jsoup.select.Elements elements24 = document16.getElementsContainingText("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\":contains(&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str18, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(elements22); org.junit.Assert.assertNotNull(elements24); }
public void test450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test450"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str7 = org.jsoup.Jsoup.clean("", "#data", whitelist6); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.basic(); boolean boolean10 = org.jsoup.Jsoup.isValid("hi!", whitelist9); java.lang.String[] strArray18 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist19 = whitelist9.addProtocols(".#document", "#doctype=\"\"", strArray18); org.jsoup.safety.Whitelist whitelist20 = whitelist6.addTags(strArray18); org.jsoup.safety.Whitelist whitelist21 = whitelist3.addTags(strArray18); boolean boolean22 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist21); org.jsoup.safety.Whitelist whitelist26 = whitelist21.addEnforcedAttribute("[^hi!]", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>", "#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist28 = whitelist21.preserveRelativeLinks(true); boolean boolean29 = org.jsoup.Jsoup.isValid("", whitelist21); java.lang.String str30 = org.jsoup.Jsoup.clean(":matchesown(null=\"#document\"", whitelist21); org.jsoup.safety.Whitelist whitelist33 = org.jsoup.safety.Whitelist.basic(); boolean boolean34 = org.jsoup.Jsoup.isValid("hi!", whitelist33); java.lang.String[] strArray42 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist43 = whitelist33.addProtocols(".#document", "#doctype=\"\"", strArray42); org.jsoup.select.Evaluator.AttributeStarting attributeStarting46 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document49 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray54 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54); org.jsoup.nodes.Element element57 = document52.classNames((java.util.Set<java.lang.String>) strSet55); document52.title("#document"); boolean boolean60 = attributeStarting46.matches((org.jsoup.nodes.Element) document49, (org.jsoup.nodes.Element) document52); java.lang.String str61 = document49.id(); org.jsoup.select.Elements elements63 = document49.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements65 = document49.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute68 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean69 = whitelist33.isSafeAttribute("", (org.jsoup.nodes.Element) document49, attribute68); org.jsoup.safety.Whitelist whitelist72 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist74 = whitelist72.preserveRelativeLinks(false); boolean boolean75 = org.jsoup.Jsoup.isValid("", whitelist72); java.lang.String[] strArray81 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist82 = whitelist72.addTags(strArray81); org.jsoup.safety.Whitelist whitelist83 = whitelist33.addAttributes("[^hi!]", strArray81); boolean boolean84 = org.jsoup.helper.StringUtil.in("[hi!  public &quot;#data&quot; &quot;#doctype&quot;&gt;^=hi!<html> <head></head> <body> hi! </body> </html>]", strArray81); org.jsoup.safety.Whitelist whitelist85 = whitelist21.addTags(strArray81); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertEquals("'" + str30 + "' != '" + ":matchesown(null=&quot;#document&quot;" + "'", str30, ":matchesown(null=&quot;#document&quot;"); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(document49); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(strArray54); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, ""); org.junit.Assert.assertNotNull(elements63); org.junit.Assert.assertNotNull(elements65); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertNotNull(whitelist74); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true); org.junit.Assert.assertNotNull(strArray81); org.junit.Assert.assertNotNull(whitelist82); org.junit.Assert.assertNotNull(whitelist83); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertNotNull(whitelist85); }
public void test451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test451"); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str4 = document3.val(); java.util.List<org.jsoup.nodes.Node> nodeList6 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document3, "#document"); java.lang.String str7 = document3.baseUri(); org.jsoup.nodes.Element element9 = document3.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray14 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14); org.jsoup.nodes.Element element17 = document12.classNames((java.util.Set<java.lang.String>) strSet15); org.jsoup.nodes.Element element19 = element17.prepend("#document"); org.jsoup.nodes.Node node21 = element17.childNode(0); boolean boolean22 = document3.equals((java.lang.Object) node21); node21.setBaseUri("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray29 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29); org.jsoup.nodes.Element element32 = document27.classNames((java.util.Set<java.lang.String>) strSet30); java.lang.String str33 = document27.nodeName(); org.jsoup.select.Elements elements35 = document27.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document39 = document38.clone(); org.jsoup.nodes.Element element41 = document38.addClass(""); org.jsoup.nodes.Element element42 = document27.appendChild((org.jsoup.nodes.Node) document38); org.jsoup.nodes.Element element44 = document38.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document48 = document47.clone(); org.jsoup.nodes.Element element50 = document47.addClass(""); java.lang.String str51 = document47.toString(); org.jsoup.nodes.Element element53 = document47.text(".#document"); org.jsoup.nodes.Node node54 = element44.after((org.jsoup.nodes.Node) document47); org.jsoup.nodes.Element element56 = element44.prependText("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist59 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str60 = org.jsoup.Jsoup.clean("", "#data", whitelist59); org.jsoup.safety.Cleaner cleaner61 = new org.jsoup.safety.Cleaner(whitelist59); org.jsoup.nodes.Document document65 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str66 = document65.val(); java.util.List<org.jsoup.nodes.Node> nodeList68 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document65, "#document"); java.lang.String str69 = document65.baseUri(); org.jsoup.nodes.Element element71 = document65.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements72 = document65.parents(); org.jsoup.nodes.Document document73 = cleaner61.clean(document65); boolean boolean74 = element56.equals((java.lang.Object) cleaner61); org.jsoup.nodes.Element element75 = element56.clone(); org.jsoup.nodes.Node node77 = element56.removeAttr("[^[^:containsOwn(hi!]]"); org.jsoup.nodes.Element element79 = element56.before("[hi!, <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); node21.replaceWith((org.jsoup.nodes.Node) element56); org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(nodeList6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!"); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertNotNull(node21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(strArray29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "#document" + "'", str33, "#document"); org.junit.Assert.assertNotNull(elements35); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str51, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(node54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, ""); org.junit.Assert.assertNotNull(document65); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, ""); org.junit.Assert.assertNotNull(nodeList68); org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!"); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(elements72); org.junit.Assert.assertNotNull(document73); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertNotNull(element75); org.junit.Assert.assertNotNull(node77); org.junit.Assert.assertNotNull(element79); }
public void test452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test452"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); boolean boolean5 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist2); java.lang.String str6 = org.jsoup.Jsoup.clean(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", whitelist2); org.jsoup.safety.Whitelist whitelist8 = whitelist2.preserveRelativeLinks(false); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi! =&quot;&quot;" + "'", str6, "hi! =&quot;&quot;"); org.junit.Assert.assertNotNull(whitelist8); }
public void test453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test453"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist1); boolean boolean4 = whitelist1.isSafeTag(":gt(100)"); org.jsoup.safety.Whitelist whitelist6 = whitelist1.preserveRelativeLinks(false); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(whitelist6); }
public void test454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test454"); org.jsoup.nodes.Attributes attributes0 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes1 = attributes0.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator2 = attributes0.spliterator(); java.lang.String str4 = attributes0.get("\n#document"); org.jsoup.nodes.Attributes attributes5 = new org.jsoup.nodes.Attributes(); org.jsoup.nodes.Attributes attributes6 = attributes5.clone(); java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator7 = attributes5.spliterator(); java.util.Map<java.lang.String, java.lang.String> strMap8 = attributes5.dataset(); attributes0.addAll(attributes5); java.lang.String str10 = attributes0.toString(); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner14 = new org.jsoup.safety.Cleaner(whitelist11); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document18 = document17.clone(); org.jsoup.nodes.Node node20 = document18.removeAttr("#doctype"); org.jsoup.nodes.Document document21 = cleaner14.clean(document18); boolean boolean22 = attributes0.equals((java.lang.Object) document18); java.util.Map<java.lang.String, java.lang.String> strMap23 = attributes0.dataset(); attributes0.put("<:matchesown(null></:matchesown(null>", " text=\"\" #doctype=\"\"=\"#doctype=&quot;&quot;\""); org.junit.Assert.assertNotNull(attributes1); org.junit.Assert.assertNotNull(attributeSpliterator2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(attributes6); org.junit.Assert.assertNotNull(attributeSpliterator7); org.junit.Assert.assertNotNull(strMap8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(node20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(strMap23); }
public void test455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test455"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("                                                  "); java.lang.String str2 = containsOwnText1.toString(); org.jsoup.nodes.Document document4 = new org.jsoup.nodes.Document(" class=\" #doctype\""); org.jsoup.nodes.Document document5 = document4.clone(); java.lang.String str6 = document5.ownText(); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi! hi!#document hi!", "#doctype"); boolean boolean10 = containsOwnText1.matches((org.jsoup.nodes.Element) document5, (org.jsoup.nodes.Element) document9); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parseBodyFragment("[^:containsOwn(hi!]", "hi!<html> <head></head> <body> hi! </body> </html>=\"\""); org.jsoup.select.Evaluator.AttributeStarting attributeStarting15 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); document21.title("#document"); boolean boolean29 = attributeStarting15.matches((org.jsoup.nodes.Element) document18, (org.jsoup.nodes.Element) document21); org.jsoup.nodes.Document document31 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray36 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36); org.jsoup.nodes.Element element39 = document34.classNames((java.util.Set<java.lang.String>) strSet37); org.jsoup.nodes.Element element40 = document31.appendChild((org.jsoup.nodes.Node) element39); org.jsoup.nodes.Element element41 = element39.empty(); org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parseBodyFragment("#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); java.lang.String str45 = document44.nodeName(); boolean boolean46 = attributeStarting15.matches(element41, (org.jsoup.nodes.Element) document44); org.jsoup.nodes.Element element47 = document44.clone(); boolean boolean48 = document13.equals((java.lang.Object) document44); org.jsoup.nodes.Document.OutputSettings outputSettings49 = document13.outputSettings(); java.lang.String str50 = document13.outerHtml(); org.jsoup.safety.Whitelist whitelist55 = new org.jsoup.safety.Whitelist(); boolean boolean56 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist55); java.lang.String str57 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist55); org.jsoup.nodes.Document document60 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document63 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray65 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65); org.jsoup.nodes.Element element68 = document63.classNames((java.util.Set<java.lang.String>) strSet66); org.jsoup.nodes.Element element69 = document60.appendChild((org.jsoup.nodes.Node) element68); java.lang.String str71 = document60.absUrl("hi!"); org.jsoup.nodes.Attribute attribute74 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean75 = whitelist55.isSafeAttribute("", (org.jsoup.nodes.Element) document60, attribute74); org.jsoup.nodes.Document document78 = org.jsoup.parser.Parser.parse("", "hi!"); boolean boolean79 = attribute74.equals((java.lang.Object) document78); java.util.List<org.jsoup.nodes.Node> nodeList81 = org.jsoup.parser.Parser.parseFragment("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]", (org.jsoup.nodes.Element) document78, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean82 = containsOwnText1.matches((org.jsoup.nodes.Element) document13, (org.jsoup.nodes.Element) document78); java.lang.String str83 = containsOwnText1.toString(); org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":containsOwn(                                                  " + "'", str2, ":containsOwn(                                                  "); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(strArray36); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "#document" + "'", str45, "#document"); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(outputSettings49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<html>\n <head></head>\n <body>\n [^:containsOwn(hi!]\n </body>\n</html>" + "'", str50, "<html>\n <head></head>\n <body>\n [^:containsOwn(hi!]\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!:matchesOwn(null" + "'", str57, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertNotNull(strArray65); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); org.junit.Assert.assertNotNull(element68); org.junit.Assert.assertNotNull(element69); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, ""); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNotNull(document78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertNotNull(nodeList81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertEquals("'" + str83 + "' != '" + ":containsOwn(                                                  " + "'", str83, ":containsOwn(                                                  "); }
public void test456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test456"); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList0 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings1 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings1.prettyPrint(false); java.nio.charset.Charset charset4 = outputSettings3.charset(); charsetList0.addFirst(charset4); java.util.Iterator<java.nio.charset.Charset> charsetItor6 = charsetList0.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList7 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); java.nio.charset.Charset charset11 = outputSettings10.charset(); charsetList7.addFirst(charset11); boolean boolean13 = charsetList0.offerFirst(charset11); int int14 = charsetList0.size(); java.nio.charset.Charset charset15 = charsetList0.peekLast(); java.nio.charset.Charset charset16 = charsetList0.getLast(); org.jsoup.safety.Whitelist whitelist17 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist19 = whitelist17.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner20 = new org.jsoup.safety.Cleaner(whitelist17); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document24 = document23.clone(); org.jsoup.nodes.Node node26 = document24.removeAttr("#doctype"); org.jsoup.nodes.Document document27 = cleaner20.clean(document24); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.select.Elements elements32 = document30.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.Map<java.lang.String, java.lang.String> strMap33 = document30.dataset(); org.jsoup.nodes.Document document34 = cleaner20.clean(document30); int int35 = document34.siblingIndex(); org.jsoup.select.Elements elements37 = document34.getElementsByTag("                          "); int int38 = charsetList0.lastIndexOf((java.lang.Object) "                          "); org.junit.Assert.assertNotNull(outputSettings3); org.junit.Assert.assertNotNull(charset4); org.junit.Assert.assertNotNull(charsetItor6); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2); org.junit.Assert.assertNotNull(charset15); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(node26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(elements32); org.junit.Assert.assertNotNull(strMap33); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertNotNull(elements37); org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1)); }
public void test457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test457"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); java.lang.String str21 = attribute16.toString(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"" + "'", str21, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); }
public void test458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test458"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.prettyPrint(false); java.nio.charset.Charset charset8 = outputSettings5.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings5.indentAmount((int) '4'); java.nio.charset.Charset charset11 = outputSettings5.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.prettyPrint(false); int int15 = outputSettings14.indentAmount(); java.nio.charset.Charset charset16 = outputSettings14.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings5.charset(charset16); java.nio.charset.Charset[] charsetArray18 = new java.nio.charset.Charset[] { charset16 }; java.util.LinkedList<java.nio.charset.Charset> charsetList19 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList19, charsetArray18); java.nio.charset.Charset charset21 = charsetList19.pop(); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.basic(); boolean boolean24 = org.jsoup.Jsoup.isValid("hi!", whitelist23); java.lang.String[] strArray32 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist33 = whitelist23.addProtocols(".#document", "#doctype=\"\"", strArray32); org.jsoup.safety.Cleaner cleaner34 = new org.jsoup.safety.Cleaner(whitelist23); boolean boolean35 = charsetList19.contains((java.lang.Object) whitelist23); org.jsoup.safety.Whitelist whitelist38 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes40 = whitelist38.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist43 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist45 = whitelist43.preserveRelativeLinks(false); boolean boolean46 = org.jsoup.Jsoup.isValid("", whitelist43); java.lang.String[] strArray52 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist53 = whitelist43.addTags(strArray52); org.jsoup.safety.Whitelist whitelist54 = whitelist38.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray52); org.jsoup.safety.Whitelist whitelist55 = whitelist23.addProtocols("#<html> <head></head> <body> hi! </body> </html>", "[[  hi!  &lt;#root class=&quot;&quot;&gt;  hi!  !=#doctype=&quot;&quot;]=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>]", strArray52); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray52, "[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"^=hi! hi! #comment]"); org.jsoup.safety.Whitelist whitelist58 = whitelist0.addAttributes("<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>", strArray52); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray52, "#root"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray52, ""); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(outputSettings7); org.junit.Assert.assertNotNull(charset8); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertNotNull(charset16); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertNotNull(charsetArray18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(charset21); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(attributes40); org.junit.Assert.assertNotNull(whitelist43); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertNotNull(strArray52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist54); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist58); }
public void test459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test459"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basic(); boolean boolean3 = org.jsoup.Jsoup.isValid("hi!", whitelist2); java.lang.String[] strArray11 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist12 = whitelist2.addProtocols(".#document", "#doctype=\"\"", strArray11); boolean boolean13 = org.jsoup.Jsoup.isValid("hi!<html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root>hi!<html> <head></head> <body> hi! </body> </html><html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root><html> <head></head> <body> hi! </body> </html><html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root>hi!<html> <head></head> <body> hi! </body> </html><html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root><html> <head></head> <body> hi! </body> </html>", whitelist2); org.jsoup.select.Evaluator.AttributeStarting attributeStarting16 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray24 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24); org.jsoup.nodes.Element element27 = document22.classNames((java.util.Set<java.lang.String>) strSet25); document22.title("#document"); boolean boolean30 = attributeStarting16.matches((org.jsoup.nodes.Element) document19, (org.jsoup.nodes.Element) document22); org.jsoup.nodes.Element element32 = document22.html(""); java.lang.String str33 = element32.html(); org.jsoup.nodes.Element element35 = element32.prependText(""); org.jsoup.parser.Tag tag36 = element35.tag(); org.jsoup.safety.Whitelist whitelist40 = new org.jsoup.safety.Whitelist(); boolean boolean41 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist40); java.lang.String str42 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist40); org.jsoup.nodes.Document document45 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document48 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray50 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50); org.jsoup.nodes.Element element53 = document48.classNames((java.util.Set<java.lang.String>) strSet51); org.jsoup.nodes.Element element54 = document45.appendChild((org.jsoup.nodes.Node) element53); java.lang.String str56 = document45.absUrl("hi!"); org.jsoup.nodes.Attribute attribute59 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean60 = whitelist40.isSafeAttribute("", (org.jsoup.nodes.Element) document45, attribute59); org.jsoup.nodes.Document document63 = org.jsoup.parser.Parser.parse("", "hi!"); boolean boolean64 = attribute59.equals((java.lang.Object) document63); java.lang.String str65 = attribute59.html(); boolean boolean66 = whitelist2.isSafeAttribute("hi!<html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> ", element35, attribute59); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, ""); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(tag36); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!:matchesOwn(null" + "'", str42, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document48); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, ""); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(document63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertEquals("'" + str65 + "' != '" + ":matchesown(null=\"#document\"" + "'", str65, ":matchesown(null=\"#document\""); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test460"); org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("hi!<html> <head></head> <body> hi! </body> </html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements5 = document2.getElementsByAttributeValueStarting("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Element element6 = document2.body(); org.jsoup.nodes.Node node7 = element6.parent(); org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.prettyPrint(false); java.nio.charset.Charset charset11 = outputSettings8.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings8.indentAmount((int) '4'); java.nio.charset.Charset charset14 = outputSettings8.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.prettyPrint(false); int int18 = outputSettings17.indentAmount(); java.nio.charset.Charset charset19 = outputSettings17.charset(); org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings8.charset(charset19); java.nio.charset.Charset[] charsetArray21 = new java.nio.charset.Charset[] { charset19 }; java.util.LinkedList<java.nio.charset.Charset> charsetList22 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList22, charsetArray21); java.nio.charset.Charset charset24 = charsetList22.pop(); org.jsoup.safety.Whitelist whitelist26 = org.jsoup.safety.Whitelist.basic(); boolean boolean27 = org.jsoup.Jsoup.isValid("hi!", whitelist26); java.lang.String[] strArray35 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist36 = whitelist26.addProtocols(".#document", "#doctype=\"\"", strArray35); org.jsoup.safety.Cleaner cleaner37 = new org.jsoup.safety.Cleaner(whitelist26); boolean boolean38 = charsetList22.contains((java.lang.Object) whitelist26); org.jsoup.nodes.Attributes attributes40 = whitelist26.getEnforcedAttributes("<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); boolean boolean41 = element6.equals((java.lang.Object) whitelist26); org.jsoup.select.Elements elements44 = element6.getElementsByAttributeValueNot("#documenthi!", " class=&quot; #doctype&quot;"); org.junit.Assert.assertNotNull(document2); org.junit.Assert.assertNotNull(elements5); org.junit.Assert.assertNotNull(element6); org.junit.Assert.assertNotNull(node7); org.junit.Assert.assertNotNull(outputSettings10); org.junit.Assert.assertNotNull(charset11); org.junit.Assert.assertNotNull(outputSettings13); org.junit.Assert.assertNotNull(charset14); org.junit.Assert.assertNotNull(outputSettings17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); org.junit.Assert.assertNotNull(charset19); org.junit.Assert.assertNotNull(outputSettings20); org.junit.Assert.assertNotNull(charsetArray21); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(charset24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(attributes40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(elements44); }
public void test461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test461"); org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals((int) (short) 0); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse(".:eq(52)"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist9 = whitelist7.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner10 = new org.jsoup.safety.Cleaner(whitelist7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray15 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15); org.jsoup.nodes.Element element18 = document13.classNames((java.util.Set<java.lang.String>) strSet16); java.lang.String str19 = document13.nodeName(); java.lang.String str20 = document13.html(); boolean boolean21 = cleaner10.isValid(document13); org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element24 = document23.body(); java.lang.String str25 = document23.toString(); org.jsoup.nodes.Document document26 = cleaner10.clean(document23); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document30 = document29.clone(); org.jsoup.nodes.Element element32 = document29.addClass(""); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str37 = document36.val(); java.util.List<org.jsoup.nodes.Node> nodeList39 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document36, "#document"); java.lang.String str40 = document36.baseUri(); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str44 = document43.val(); org.jsoup.nodes.Element element46 = document43.append("#document"); org.jsoup.nodes.Element element47 = document36.appendChild((org.jsoup.nodes.Node) element46); org.jsoup.nodes.Element element48 = document29.prependChild((org.jsoup.nodes.Node) document36); org.jsoup.nodes.Attributes attributes49 = element48.attributes(); java.lang.String str50 = element48.baseUri(); java.lang.String str51 = element48.text(); org.jsoup.nodes.Element element53 = element48.toggleClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean54 = containsOwnText6.matches((org.jsoup.nodes.Element) document26, element48); org.jsoup.nodes.Element element55 = document26.clone(); java.util.List<org.jsoup.nodes.Node> nodeList57 = org.jsoup.parser.Parser.parseFragment(":matches(null", (org.jsoup.nodes.Element) document26, ""); java.lang.String str58 = document26.id(); org.jsoup.nodes.Element element60 = document26.createElement("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">"); boolean boolean61 = indexEquals1.matches((org.jsoup.nodes.Element) document3, (org.jsoup.nodes.Element) document26); org.jsoup.nodes.TextNode textNode64 = org.jsoup.nodes.TextNode.createFromEncoded("hi! hi!", "#data"); org.jsoup.nodes.Attributes attributes65 = textNode64.attributes(); java.lang.String str67 = textNode64.absUrl("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\" &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;\""); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element68 = document3.before((org.jsoup.nodes.Node) textNode64); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document3); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "#document" + "'", str19, "#document"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str20, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str25, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, ""); org.junit.Assert.assertNotNull(nodeList39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!"); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, ""); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(attributes49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "#document" + "'", str50, "#document"); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi! hi!#document hi!" + "'", str51, "hi! hi!#document hi!"); org.junit.Assert.assertNotNull(element53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertNotNull(nodeList57); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, ""); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNotNull(textNode64); org.junit.Assert.assertNotNull(attributes65); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, ""); }
public void test462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test462"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.select.Elements elements15 = document13.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.Map<java.lang.String, java.lang.String> strMap16 = document13.dataset(); org.jsoup.nodes.Document document17 = cleaner3.clean(document13); org.jsoup.select.Elements elements19 = document17.getElementsContainingText("[hi!=:eq(52)] hi! hi!"); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(strMap16); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(elements19); }
public void test463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test463"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str5 = org.jsoup.Jsoup.clean("", "#data", whitelist4); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist4.addTags(strArray16); org.jsoup.safety.Whitelist whitelist19 = whitelist1.addTags(strArray16); boolean boolean20 = org.jsoup.Jsoup.isValid("#doctype", whitelist1); boolean boolean22 = whitelist1.isSafeTag("[<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>=:matchesown(null]"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test464"); org.jsoup.select.Evaluator.AttributeWithValue attributeWithValue2 = new org.jsoup.select.Evaluator.AttributeWithValue("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":matchesOwn(null"); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document6 = document5.clone(); org.jsoup.nodes.Element element8 = document5.addClass(""); java.lang.String str9 = document5.toString(); org.jsoup.nodes.Element element11 = document5.text(".#document"); org.jsoup.select.Elements elements13 = document5.getElementsByClass("#document"); org.jsoup.select.Evaluator.Class class15 = new org.jsoup.select.Evaluator.Class(":matchesOwn(null"); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray20 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20); org.jsoup.nodes.Element element23 = document18.classNames((java.util.Set<java.lang.String>) strSet21); org.jsoup.nodes.Element element25 = element23.prepend("#document"); org.jsoup.nodes.Element element27 = element23.toggleClass("#doctype=\"\""); boolean boolean29 = element23.hasClass(":eq(52)"); java.lang.String str31 = element23.attr(":eq(52)"); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("hi!<html> <head></head> <body> hi! </body> </html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); java.lang.String str35 = document34.val(); boolean boolean36 = class15.matches(element23, (org.jsoup.nodes.Element) document34); boolean boolean37 = attributeWithValue2.matches((org.jsoup.nodes.Element) document5, (org.jsoup.nodes.Element) document34); org.jsoup.nodes.Element element38 = null; org.jsoup.select.Evaluator.AttributeStarting attributeStarting40 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document46 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray48 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48); org.jsoup.nodes.Element element51 = document46.classNames((java.util.Set<java.lang.String>) strSet49); document46.title("#document"); boolean boolean54 = attributeStarting40.matches((org.jsoup.nodes.Element) document43, (org.jsoup.nodes.Element) document46); org.jsoup.nodes.Element element56 = document46.html(""); java.lang.String str58 = document46.absUrl("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element60 = document46.createElement("#doctype"); org.jsoup.parser.Tag tag61 = element60.tag(); boolean boolean62 = attributeWithValue2.matches(element38, element60); org.jsoup.nodes.Element element63 = null; org.jsoup.safety.Whitelist whitelist64 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist66 = whitelist64.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner67 = new org.jsoup.safety.Cleaner(whitelist64); org.jsoup.nodes.Document document70 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray72 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72); org.jsoup.nodes.Element element75 = document70.classNames((java.util.Set<java.lang.String>) strSet73); java.lang.String str76 = document70.nodeName(); java.lang.String str77 = document70.html(); boolean boolean78 = cleaner67.isValid(document70); org.jsoup.nodes.Document document80 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element81 = document80.body(); java.lang.String str82 = document80.toString(); org.jsoup.nodes.Document document83 = cleaner67.clean(document80); java.lang.String str84 = document80.id(); boolean boolean85 = attributeWithValue2.matches(element63, (org.jsoup.nodes.Element) document80); org.jsoup.nodes.Document.OutputSettings outputSettings86 = document80.outputSettings(); java.nio.charset.Charset charset87 = outputSettings86.charset(); org.junit.Assert.assertNotNull(document5); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(element8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str9, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(document43); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertNotNull(strArray48); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertNotNull(element51); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, ""); org.junit.Assert.assertNotNull(element60); org.junit.Assert.assertNotNull(tag61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist66); org.junit.Assert.assertNotNull(document70); org.junit.Assert.assertNotNull(strArray72); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true); org.junit.Assert.assertNotNull(element75); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "#document" + "'", str76, "#document"); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str77, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true); org.junit.Assert.assertNotNull(document80); org.junit.Assert.assertNotNull(element81); org.junit.Assert.assertEquals("'" + str82 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str82, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document83); org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, ""); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertNotNull(outputSettings86); org.junit.Assert.assertNotNull(charset87); }
public void test465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test465"); org.jsoup.select.Evaluator.Class class1 = new org.jsoup.select.Evaluator.Class("#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText4 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str12 = document11.val(); java.util.List<org.jsoup.nodes.Node> nodeList14 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document11, "#document"); java.lang.String str15 = document11.baseUri(); org.jsoup.nodes.Element element17 = document11.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str18 = document11.nodeName(); boolean boolean19 = containsOwnText4.matches((org.jsoup.nodes.Element) document7, (org.jsoup.nodes.Element) document11); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document23 = document22.clone(); org.jsoup.nodes.Element element25 = document22.addClass(""); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str30 = document29.val(); java.util.List<org.jsoup.nodes.Node> nodeList32 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document29, "#document"); java.lang.String str33 = document29.baseUri(); org.jsoup.nodes.Document document36 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str37 = document36.val(); org.jsoup.nodes.Element element39 = document36.append("#document"); org.jsoup.nodes.Element element40 = document29.appendChild((org.jsoup.nodes.Node) element39); org.jsoup.nodes.Element element41 = document22.prependChild((org.jsoup.nodes.Node) document29); org.jsoup.nodes.Document document43 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element45 = document43.createElement("#document"); org.jsoup.nodes.Document document46 = document43.clone(); java.lang.String str47 = document46.toString(); org.jsoup.nodes.Element element48 = document29.prependChild((org.jsoup.nodes.Node) document46); org.jsoup.safety.Whitelist whitelist49 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist51 = whitelist49.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner52 = new org.jsoup.safety.Cleaner(whitelist49); org.jsoup.nodes.Document document55 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document56 = document55.clone(); org.jsoup.nodes.Node node58 = document56.removeAttr("#doctype"); org.jsoup.nodes.Document document59 = cleaner52.clean(document56); org.jsoup.nodes.Attributes attributes60 = document59.attributes(); org.jsoup.nodes.Element element61 = document59.head(); org.jsoup.nodes.Node node63 = element61.after("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str64 = element61.className(); boolean boolean65 = containsOwnText4.matches(element48, element61); element61.setBaseUri(" #document"); java.util.List<org.jsoup.nodes.Node> nodeList69 = org.jsoup.parser.Parser.parseFragment("<#root class=\"\">\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n</#root>", element61, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>#document"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText71 = new org.jsoup.select.Evaluator.ContainsOwnText("                                                  "); java.lang.String str72 = containsOwnText71.toString(); org.jsoup.nodes.Document document74 = new org.jsoup.nodes.Document(" class=\" #doctype\""); org.jsoup.nodes.Document document75 = document74.clone(); java.lang.String str76 = document75.ownText(); org.jsoup.nodes.Document document79 = org.jsoup.Jsoup.parse("hi! hi!#document hi!", "#doctype"); boolean boolean80 = containsOwnText71.matches((org.jsoup.nodes.Element) document75, (org.jsoup.nodes.Element) document79); boolean boolean81 = class1.matches(element61, (org.jsoup.nodes.Element) document75); org.jsoup.select.Elements elements84 = document75.getElementsByAttributeValueMatching("<body></body>body\n<html>\n <head></head> \n <body>\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\" &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;\""); java.lang.String str85 = document75.text(); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertNotNull(nodeList14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "#document" + "'", str18, "#document"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, ""); org.junit.Assert.assertNotNull(nodeList32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!"); org.junit.Assert.assertNotNull(document36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, ""); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element40); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertNotNull(document46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, ""); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(document55); org.junit.Assert.assertNotNull(document56); org.junit.Assert.assertNotNull(node58); org.junit.Assert.assertNotNull(document59); org.junit.Assert.assertNotNull(attributes60); org.junit.Assert.assertNotNull(element61); org.junit.Assert.assertNotNull(node63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, ""); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(nodeList69); org.junit.Assert.assertEquals("'" + str72 + "' != '" + ":containsOwn(                                                  " + "'", str72, ":containsOwn(                                                  "); org.junit.Assert.assertNotNull(document75); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, ""); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false); org.junit.Assert.assertNotNull(elements84); org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, ""); }
public void test466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test466"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); java.lang.String str13 = document6.html(); boolean boolean14 = cleaner3.isValid(document6); org.jsoup.nodes.Document document15 = document6.normalise(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str13, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(document15); }
public void test467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test467"); org.jsoup.nodes.DataNode dataNode2 = new org.jsoup.nodes.DataNode("\n#document", "\n#document"); org.jsoup.nodes.Attributes attributes3 = dataNode2.attributes(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist4.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray16); org.jsoup.safety.Whitelist whitelist20 = whitelist18.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist22 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist29 = org.jsoup.safety.Whitelist.basic(); boolean boolean30 = org.jsoup.Jsoup.isValid("hi!", whitelist29); java.lang.String[] strArray38 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist39 = whitelist29.addProtocols(".#document", "#doctype=\"\"", strArray38); org.jsoup.safety.Whitelist whitelist40 = whitelist26.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray38); org.jsoup.safety.Whitelist whitelist41 = whitelist22.addAttributes(":containsOwn(hi!:matchesown(null", strArray38); org.jsoup.safety.Whitelist whitelist42 = whitelist18.addAttributes(" text=\"\"", strArray38); boolean boolean43 = dataNode2.equals((java.lang.Object) whitelist18); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node44 = dataNode2.unwrap(); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(attributes3); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(strArray38); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); }
public void test468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test468"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document8 = document7.clone(); org.jsoup.select.Elements elements10 = document8.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements12 = document8.getElementsByAttribute("#document"); org.jsoup.select.Elements elements15 = document8.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document16 = cleaner4.clean(document8); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document20 = document19.clone(); org.jsoup.nodes.Element element22 = document19.addClass(""); java.lang.String str23 = document19.toString(); org.jsoup.nodes.Element element25 = document19.text(".#document"); org.jsoup.nodes.Document.QuirksMode quirksMode26 = document19.quirksMode(); org.jsoup.nodes.Element element28 = document19.appendElement("#doctype=\"\""); org.jsoup.nodes.Document document29 = cleaner4.clean(document19); org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("#doctype=\"\"", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document33 = document32.normalise(); org.jsoup.select.Elements elements35 = document32.getElementsByAttribute("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\":contains(&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\""); boolean boolean36 = cleaner4.isValid(document32); document32.title("&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(elements10); org.junit.Assert.assertNotNull(elements12); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str23, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + quirksMode26 + "' != '" + org.jsoup.nodes.Document.QuirksMode.noQuirks + "'", quirksMode26.equals(org.jsoup.nodes.Document.QuirksMode.noQuirks)); org.junit.Assert.assertNotNull(element28); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document32); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(elements35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); }
public void test469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test469"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); java.nio.charset.Charset[] charsetArray4 = new java.nio.charset.Charset[] { charset3 }; java.util.LinkedList<java.nio.charset.Charset> charsetList5 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList5, charsetArray4); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); java.nio.charset.Charset charset10 = outputSettings7.charset(); boolean boolean11 = charsetList5.add(charset10); java.lang.Object obj12 = null; boolean boolean13 = charsetList5.removeLastOccurrence(obj12); org.jsoup.safety.Whitelist whitelist15 = new org.jsoup.safety.Whitelist(); boolean boolean16 = org.jsoup.Jsoup.isValid("", whitelist15); org.jsoup.select.Evaluator.AttributeStarting attributeStarting19 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray27 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27); org.jsoup.nodes.Element element30 = document25.classNames((java.util.Set<java.lang.String>) strSet28); document25.title("#document"); boolean boolean33 = attributeStarting19.matches((org.jsoup.nodes.Element) document22, (org.jsoup.nodes.Element) document25); org.jsoup.nodes.Element element35 = document25.html(""); java.lang.String str36 = element35.html(); java.lang.String str37 = element35.html(); org.jsoup.nodes.Attribute attribute40 = org.jsoup.nodes.Attribute.createFromEncoded("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.jsoup.nodes.Attribute attribute41 = attribute40.clone(); java.lang.String str42 = attribute41.getKey(); java.lang.String str43 = attribute41.getValue(); org.jsoup.nodes.DocumentType documentType48 = new org.jsoup.nodes.DocumentType("#doctype", "#document", "#doctype", "hi!"); java.lang.String str49 = documentType48.nodeName(); java.lang.String str50 = documentType48.nodeName(); boolean boolean51 = attribute41.equals((java.lang.Object) str50); boolean boolean52 = whitelist15.isSafeAttribute("#document:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>hi!:contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", element35, attribute41); org.jsoup.select.Elements elements53 = element35.children(); boolean boolean54 = charsetList5.removeLastOccurrence((java.lang.Object) elements53); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(charsetArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(element30); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, ""); org.junit.Assert.assertNotNull(attribute40); org.junit.Assert.assertNotNull(attribute41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str42, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>" + "'", str43, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>"); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "#doctype" + "'", str49, "#doctype"); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "#doctype" + "'", str50, "#doctype"); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(elements53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); }
public void test470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test470"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist14 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray12); org.jsoup.safety.Whitelist whitelist16 = whitelist14.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist20 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes22 = whitelist20.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); boolean boolean28 = org.jsoup.Jsoup.isValid("", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addTags(strArray34); org.jsoup.safety.Whitelist whitelist36 = whitelist20.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray34); boolean boolean37 = org.jsoup.helper.StringUtil.in("", strArray34); org.jsoup.safety.Whitelist whitelist38 = whitelist16.addProtocols("                          ", ".#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray34); org.jsoup.safety.Whitelist whitelist42 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist44 = whitelist42.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.basic(); boolean boolean48 = org.jsoup.Jsoup.isValid("hi!", whitelist47); java.lang.String[] strArray56 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist57 = whitelist47.addProtocols(".#document", "#doctype=\"\"", strArray56); org.jsoup.safety.Whitelist whitelist58 = whitelist44.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray56); boolean boolean59 = org.jsoup.helper.StringUtil.in("hi!<html> <head></head> <body> hi! </body> </html>", strArray56); org.jsoup.safety.Whitelist whitelist60 = whitelist16.addProtocols("<html>\n <head></head> \n <body>\n hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>", "<html> <head></head> <body> hi! </body> </html>", strArray56); org.jsoup.nodes.Attributes attributes62 = whitelist60.getEnforcedAttributes("<html> <head></head> <body> hi! </body> </html>"); java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor63 = attributes62.iterator(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(strArray56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertNotNull(attributes62); org.junit.Assert.assertNotNull(attributeItor63); }
public void test471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test471"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basic(); boolean boolean6 = org.jsoup.Jsoup.isValid("hi!", whitelist5); java.lang.String[] strArray14 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist15 = whitelist5.addProtocols(".#document", "#doctype=\"\"", strArray14); org.jsoup.safety.Whitelist whitelist16 = whitelist2.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray14); org.jsoup.safety.Whitelist whitelist18 = whitelist16.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist20 = whitelist18.preserveRelativeLinks(true); java.lang.String str21 = org.jsoup.Jsoup.clean("#document", "hi!<html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root>hi!<html> <head></head> <body> hi! </body> </html><html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root><html> <head></head> <body> hi! </body> </html><html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root>hi!<html> <head></head> <body> hi! </body> </html><html> <head></head> <body> hi! </body> </html> <#root class=\"\"> <html> <head></head> <body> hi! </body> </html> </#root><html> <head></head> <body> hi! </body> </html>", whitelist18); org.jsoup.safety.Whitelist whitelist24 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist26 = whitelist24.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner27 = new org.jsoup.safety.Cleaner(whitelist24); org.jsoup.nodes.Attributes attributes29 = whitelist24.getEnforcedAttributes(""); java.lang.String str30 = org.jsoup.Jsoup.clean("[[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]!=.#document]", whitelist24); org.jsoup.safety.Whitelist whitelist31 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes33 = whitelist31.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist36 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist38 = whitelist36.preserveRelativeLinks(false); boolean boolean39 = org.jsoup.Jsoup.isValid("", whitelist36); java.lang.String[] strArray45 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist46 = whitelist36.addTags(strArray45); org.jsoup.safety.Whitelist whitelist47 = whitelist31.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray45); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray45, ""); org.jsoup.safety.Whitelist whitelist50 = whitelist24.addTags(strArray45); org.jsoup.safety.Whitelist whitelist53 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist55 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist57 = whitelist55.preserveRelativeLinks(false); org.jsoup.safety.Whitelist whitelist60 = org.jsoup.safety.Whitelist.basic(); boolean boolean61 = org.jsoup.Jsoup.isValid("hi!", whitelist60); java.lang.String[] strArray69 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist70 = whitelist60.addProtocols(".#document", "#doctype=\"\"", strArray69); org.jsoup.safety.Whitelist whitelist71 = whitelist57.addAttributes("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", strArray69); org.jsoup.safety.Whitelist whitelist72 = whitelist53.addAttributes(":containsOwn(hi!:matchesown(null", strArray69); boolean boolean73 = org.jsoup.helper.StringUtil.in(":containsOwn(hi!:matchesown(null", strArray69); boolean boolean74 = org.jsoup.helper.StringUtil.in("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>#document", strArray69); org.jsoup.safety.Whitelist whitelist75 = whitelist24.addTags(strArray69); org.jsoup.safety.Whitelist whitelist76 = whitelist18.addAttributes(" class=\" #doctype\"", strArray69); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#document" + "'", str21, "#document"); org.junit.Assert.assertNotNull(whitelist24); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(attributes29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[[#document^=  hi! ]!=.#document]" + "'", str30, "[[#document^=  hi! ]!=.#document]"); org.junit.Assert.assertNotNull(attributes33); org.junit.Assert.assertNotNull(whitelist36); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(strArray45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertNotNull(whitelist50); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertNotNull(whitelist55); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNotNull(strArray69); org.junit.Assert.assertNotNull(whitelist70); org.junit.Assert.assertNotNull(whitelist71); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertNotNull(whitelist75); org.junit.Assert.assertNotNull(whitelist76); }
public void test472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test472"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText(":containsOwn(                                                  "); org.jsoup.select.Evaluator.AllElements allElements2 = new org.jsoup.select.Evaluator.AllElements(); java.lang.String str3 = allElements2.toString(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!<html> <head></head> <body> hi! </body> </html>", "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray11 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11); org.jsoup.nodes.Element element14 = document9.classNames((java.util.Set<java.lang.String>) strSet12); java.lang.String str15 = document9.nodeName(); org.jsoup.select.Elements elements17 = document9.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document21 = document20.clone(); org.jsoup.nodes.Element element23 = document20.addClass(""); org.jsoup.nodes.Element element24 = document9.appendChild((org.jsoup.nodes.Node) document20); org.jsoup.nodes.Element element26 = document20.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document30 = document29.clone(); org.jsoup.nodes.Element element32 = document29.addClass(""); java.lang.String str33 = document29.toString(); org.jsoup.nodes.Element element35 = document29.text(".#document"); org.jsoup.nodes.Node node36 = element26.after((org.jsoup.nodes.Node) document29); boolean boolean37 = allElements2.matches((org.jsoup.nodes.Element) document6, element26); org.jsoup.nodes.Document document38 = document6.ownerDocument(); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray43 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43); org.jsoup.nodes.Element element46 = document41.classNames((java.util.Set<java.lang.String>) strSet44); java.lang.String str47 = document41.nodeName(); org.jsoup.select.Elements elements49 = document41.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document52 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document53 = document52.clone(); org.jsoup.nodes.Element element55 = document52.addClass(""); org.jsoup.nodes.Element element56 = document41.appendChild((org.jsoup.nodes.Node) document52); org.jsoup.nodes.Element element58 = document52.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document61 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document62 = document61.clone(); org.jsoup.nodes.Element element64 = document61.addClass(""); java.lang.String str65 = document61.toString(); org.jsoup.nodes.Element element67 = document61.text(".#document"); org.jsoup.nodes.Node node68 = element58.after((org.jsoup.nodes.Node) document61); org.jsoup.nodes.Element element70 = element58.prependText("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist73 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str74 = org.jsoup.Jsoup.clean("", "#data", whitelist73); org.jsoup.safety.Cleaner cleaner75 = new org.jsoup.safety.Cleaner(whitelist73); org.jsoup.nodes.Document document79 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str80 = document79.val(); java.util.List<org.jsoup.nodes.Node> nodeList82 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document79, "#document"); java.lang.String str83 = document79.baseUri(); org.jsoup.nodes.Element element85 = document79.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements86 = document79.parents(); org.jsoup.nodes.Document document87 = cleaner75.clean(document79); boolean boolean88 = element70.equals((java.lang.Object) cleaner75); boolean boolean89 = containsOwnText1.matches((org.jsoup.nodes.Element) document6, element70); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "*" + "'", str3, "*"); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#document" + "'", str15, "#document"); org.junit.Assert.assertNotNull(elements17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str33, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(node36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "#document" + "'", str47, "#document"); org.junit.Assert.assertNotNull(elements49); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(element58); org.junit.Assert.assertNotNull(document61); org.junit.Assert.assertNotNull(document62); org.junit.Assert.assertNotNull(element64); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str65, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element67); org.junit.Assert.assertNotNull(node68); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(whitelist73); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, ""); org.junit.Assert.assertNotNull(document79); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, ""); org.junit.Assert.assertNotNull(nodeList82); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!"); org.junit.Assert.assertNotNull(element85); org.junit.Assert.assertNotNull(elements86); org.junit.Assert.assertNotNull(document87); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false); }
public void test473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test473"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str3 = org.jsoup.Jsoup.clean("", "#data", whitelist2); org.jsoup.safety.Cleaner cleaner4 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText6 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str14 = document13.val(); java.util.List<org.jsoup.nodes.Node> nodeList16 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document13, "#document"); java.lang.String str17 = document13.baseUri(); org.jsoup.nodes.Element element19 = document13.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str20 = document13.nodeName(); boolean boolean21 = containsOwnText6.matches((org.jsoup.nodes.Element) document9, (org.jsoup.nodes.Element) document13); org.jsoup.select.Elements elements23 = document13.getElementsContainingOwnText("hi!<html> <head></head> <body> hi! </body> </html>"); java.lang.String str25 = document13.attr("[^hi!]"); org.jsoup.nodes.Document document26 = cleaner4.clean(document13); org.jsoup.select.Evaluator.IndexEquals indexEquals28 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray33 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33); org.jsoup.nodes.Element element36 = document31.classNames((java.util.Set<java.lang.String>) strSet34); org.jsoup.nodes.Document document38 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray43 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43); org.jsoup.nodes.Element element46 = document41.classNames((java.util.Set<java.lang.String>) strSet44); org.jsoup.nodes.Element element47 = document38.appendChild((org.jsoup.nodes.Node) element46); boolean boolean48 = indexEquals28.matches(element36, (org.jsoup.nodes.Element) document38); org.jsoup.nodes.Document.QuirksMode quirksMode49 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document50 = document38.quirksMode(quirksMode49); org.jsoup.nodes.Element element52 = document50.createElement("#root"); org.jsoup.nodes.Document document53 = cleaner4.clean(document50); org.jsoup.nodes.Document document54 = null; // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Document document55 = cleaner4.clean(document54); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(document13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertNotNull(nodeList16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!"); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#document" + "'", str20, "#document"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(elements23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + quirksMode49 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode49.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertNotNull(document53); }
public void test474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test474"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements24 = element13.getElementsByClass("#root"); org.jsoup.nodes.Element element26 = element13.text("#data"); org.jsoup.nodes.Node node29 = element26.attr("hi!:gt(1)hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:gt(1)<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:gt(1)hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:gt(1)<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!:matchesOwn(null"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(elements24); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(node29); }
public void test475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test475"); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan1 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (short) -1); org.jsoup.select.Evaluator.Class class3 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str4 = class3.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals6 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray11 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11); org.jsoup.nodes.Element element14 = document9.classNames((java.util.Set<java.lang.String>) strSet12); org.jsoup.nodes.Document document16 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray21 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21); org.jsoup.nodes.Element element24 = document19.classNames((java.util.Set<java.lang.String>) strSet22); org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) element24); boolean boolean26 = indexEquals6.matches(element14, (org.jsoup.nodes.Element) document16); org.jsoup.nodes.Document.QuirksMode quirksMode27 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document28 = document16.quirksMode(quirksMode27); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray33 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33); org.jsoup.nodes.Element element36 = document31.classNames((java.util.Set<java.lang.String>) strSet34); document31.title("#document"); boolean boolean39 = class3.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document31); org.jsoup.safety.Whitelist whitelist41 = org.jsoup.safety.Whitelist.basic(); boolean boolean42 = org.jsoup.Jsoup.isValid("hi!", whitelist41); java.lang.String[] strArray50 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist51 = whitelist41.addProtocols(".#document", "#doctype=\"\"", strArray50); org.jsoup.select.Evaluator.AttributeStarting attributeStarting54 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document57 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray62 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62); org.jsoup.nodes.Element element65 = document60.classNames((java.util.Set<java.lang.String>) strSet63); document60.title("#document"); boolean boolean68 = attributeStarting54.matches((org.jsoup.nodes.Element) document57, (org.jsoup.nodes.Element) document60); java.lang.String str69 = document57.id(); org.jsoup.select.Elements elements71 = document57.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements73 = document57.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute76 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean77 = whitelist41.isSafeAttribute("", (org.jsoup.nodes.Element) document57, attribute76); org.jsoup.nodes.Document document81 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str82 = document81.val(); java.util.List<org.jsoup.nodes.Node> nodeList84 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document81, "#document"); org.jsoup.nodes.Document.QuirksMode quirksMode85 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document86 = document81.quirksMode(quirksMode85); boolean boolean87 = class3.matches((org.jsoup.nodes.Element) document57, (org.jsoup.nodes.Element) document81); java.lang.String str88 = document57.ownText(); org.jsoup.nodes.Element element89 = null; // The following exception was thrown during execution in test generation try { boolean boolean90 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document57, element89); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str4 + "' != '" + ".#document" + "'", str4, ".#document"); org.junit.Assert.assertNotNull(document9); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(element24); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + quirksMode27 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode27.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document28); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(strArray33); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertNotNull(strArray50); org.junit.Assert.assertNotNull(whitelist51); org.junit.Assert.assertNotNull(document57); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertNotNull(strArray62); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertNotNull(element65); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, ""); org.junit.Assert.assertNotNull(elements71); org.junit.Assert.assertNotNull(elements73); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertNotNull(document81); org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, ""); org.junit.Assert.assertNotNull(nodeList84); org.junit.Assert.assertTrue("'" + quirksMode85 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode85.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document86); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, ""); }
public void test476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test476"); org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", ""); boolean boolean4 = textNode2.hasAttr("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.TextNode textNode6 = textNode2.text(":gt(1)"); org.jsoup.nodes.TextNode textNode8 = textNode2.text(" class=\" #doctype\""); org.jsoup.nodes.Attributes attributes9 = textNode8.attributes(); org.jsoup.nodes.Document document11 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element13 = document11.createElement("#document"); org.jsoup.nodes.Document document14 = document11.clone(); java.lang.String str15 = document14.toString(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = document14.outputSettings(); org.jsoup.nodes.Attributes attributes17 = document14.attributes(); java.util.List<org.jsoup.nodes.Attribute> attributeList18 = attributes17.asList(); attributes9.addAll(attributes17); org.jsoup.nodes.Attribute attribute22 = new org.jsoup.nodes.Attribute("#&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n&lt;/html&gt;", "hi! [^:containsOwn(hi!]"); attributes17.put(attribute22); org.jsoup.safety.Whitelist whitelist25 = new org.jsoup.safety.Whitelist(); boolean boolean26 = org.jsoup.Jsoup.isValid("", whitelist25); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray32 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32); org.jsoup.nodes.Element element35 = document30.classNames((java.util.Set<java.lang.String>) strSet33); org.jsoup.nodes.Element element37 = element35.prepend("#document"); org.jsoup.nodes.Attribute attribute40 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute40.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str43 = attribute40.getKey(); boolean boolean44 = whitelist25.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element37, attribute40); org.jsoup.nodes.Attribute attribute45 = attribute40.clone(); java.lang.String str47 = attribute45.setValue(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\""); java.lang.String str48 = attribute45.getKey(); java.lang.String str49 = attribute45.toString(); attributes17.put(attribute45); java.lang.String str51 = attribute45.toString(); attribute45.setKey(".:matchesown(null=\"#document\""); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(textNode6); org.junit.Assert.assertNotNull(textNode8); org.junit.Assert.assertNotNull(attributes9); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(document14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertNotNull(outputSettings16); org.junit.Assert.assertNotNull(attributes17); org.junit.Assert.assertNotNull(attributeList18); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str43, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(attribute45); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, ""); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str48, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\" &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;\"" + "'", str49, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\" &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;\""); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\" &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;\"" + "'", str51, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\" &lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;=&quot;&quot;\""); }
public void test477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test477"); org.jsoup.safety.Whitelist whitelist0 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes2 = whitelist0.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.util.List<org.jsoup.nodes.Attribute> attributeList3 = attributes2.asList(); java.lang.String str5 = attributes2.get("<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>"); org.jsoup.nodes.Attributes attributes6 = attributes2.clone(); org.junit.Assert.assertNotNull(attributes2); org.junit.Assert.assertNotNull(attributeList3); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(attributes6); }
public void test478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test478"); org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.prettyPrint(false); java.nio.charset.Charset charset3 = outputSettings0.charset(); java.nio.charset.Charset[] charsetArray4 = new java.nio.charset.Charset[] { charset3 }; java.util.LinkedList<java.nio.charset.Charset> charsetList5 = new java.util.LinkedList<java.nio.charset.Charset>(); boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.charset.Charset>) charsetList5, charsetArray4); org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.prettyPrint(false); java.nio.charset.Charset charset10 = outputSettings7.charset(); boolean boolean11 = charsetList5.add(charset10); java.lang.Object obj12 = null; boolean boolean13 = charsetList5.removeLastOccurrence(obj12); java.nio.charset.Charset charset14 = charsetList5.pollFirst(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList15 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.prettyPrint(false); java.nio.charset.Charset charset19 = outputSettings18.charset(); charsetList15.addFirst(charset19); java.util.Iterator<java.nio.charset.Charset> charsetItor21 = charsetList15.iterator(); org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset> charsetList22 = new org.jsoup.helper.DescendableLinkedList<java.nio.charset.Charset>(); org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.prettyPrint(false); java.nio.charset.Charset charset26 = outputSettings25.charset(); charsetList22.addFirst(charset26); boolean boolean28 = charsetList15.offerFirst(charset26); int int29 = charsetList15.size(); java.nio.charset.Charset charset30 = charsetList15.peekLast(); charsetList5.addFirst(charset30); java.nio.charset.Charset charset32 = charsetList5.poll(); org.jsoup.safety.Whitelist whitelist34 = new org.jsoup.safety.Whitelist(); boolean boolean35 = org.jsoup.Jsoup.isValid("", whitelist34); org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray41 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41); org.jsoup.nodes.Element element44 = document39.classNames((java.util.Set<java.lang.String>) strSet42); org.jsoup.nodes.Element element46 = element44.prepend("#document"); org.jsoup.nodes.Attribute attribute49 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute49.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str52 = attribute49.getKey(); boolean boolean53 = whitelist34.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element46, attribute49); boolean boolean54 = charsetList5.remove((java.lang.Object) boolean53); int int55 = charsetList5.size(); java.util.Spliterator<java.nio.charset.Charset> charsetSpliterator56 = charsetList5.spliterator(); org.junit.Assert.assertNotNull(outputSettings2); org.junit.Assert.assertNotNull(charset3); org.junit.Assert.assertNotNull(charsetArray4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(outputSettings9); org.junit.Assert.assertNotNull(charset10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(charset14); org.junit.Assert.assertNotNull(outputSettings18); org.junit.Assert.assertNotNull(charset19); org.junit.Assert.assertNotNull(charsetItor21); org.junit.Assert.assertNotNull(outputSettings25); org.junit.Assert.assertNotNull(charset26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2); org.junit.Assert.assertNotNull(charset30); org.junit.Assert.assertNotNull(charset32); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(document39); org.junit.Assert.assertNotNull(strArray41); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true); org.junit.Assert.assertNotNull(element44); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str52, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1); org.junit.Assert.assertNotNull(charsetSpliterator56); }
public void test479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test479"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); org.jsoup.select.Evaluator.AttributeStarting attributeStarting14 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); document20.title("#document"); boolean boolean28 = attributeStarting14.matches((org.jsoup.nodes.Element) document17, (org.jsoup.nodes.Element) document20); java.lang.String str29 = document17.id(); org.jsoup.select.Elements elements31 = document17.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements33 = document17.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute36 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean37 = whitelist1.isSafeAttribute("", (org.jsoup.nodes.Element) document17, attribute36); org.jsoup.nodes.Element element39 = document17.removeClass("\n<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->"); org.jsoup.nodes.Element element41 = document17.prependText("[#document^= hi! ]"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(elements31); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(element39); org.junit.Assert.assertNotNull(element41); }
public void test480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test480"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document7 = document6.clone(); org.jsoup.nodes.Node node9 = document7.removeAttr("#doctype"); org.jsoup.nodes.Document document10 = cleaner3.clean(document7); org.jsoup.nodes.Attributes attributes11 = document10.attributes(); int int12 = document10.siblingIndex(); org.jsoup.nodes.Element element14 = document10.prependElement("[^:containsOwn(hi!]"); org.jsoup.nodes.Element element16 = document10.prependElement("\n<!--<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\n&lt;#root class=&quot;&quot;&gt;\n &lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n &lt;/html&gt;\n&lt;/#root&gt;\"-->"); java.lang.String str17 = element16.val(); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(document7); org.junit.Assert.assertNotNull(node9); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(attributes11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); }
public void test481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test481"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean3 = org.jsoup.Jsoup.isValid("#document", whitelist2); java.lang.String str4 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist2); org.jsoup.safety.Whitelist whitelist7 = org.jsoup.safety.Whitelist.basic(); boolean boolean8 = org.jsoup.Jsoup.isValid("hi!", whitelist7); java.lang.String[] strArray16 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist17 = whitelist7.addProtocols(".#document", "#doctype=\"\"", strArray16); org.jsoup.safety.Whitelist whitelist18 = whitelist2.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray16); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode22 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document23 = document21.quirksMode(quirksMode22); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.basic(); boolean boolean26 = org.jsoup.Jsoup.isValid("hi!", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addProtocols(".#document", "#doctype=\"\"", strArray34); org.jsoup.select.Evaluator.AttributeStarting attributeStarting38 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray46 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46); org.jsoup.nodes.Element element49 = document44.classNames((java.util.Set<java.lang.String>) strSet47); document44.title("#document"); boolean boolean52 = attributeStarting38.matches((org.jsoup.nodes.Element) document41, (org.jsoup.nodes.Element) document44); java.lang.String str53 = document41.id(); org.jsoup.select.Elements elements55 = document41.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements57 = document41.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute60 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean61 = whitelist25.isSafeAttribute("", (org.jsoup.nodes.Element) document41, attribute60); boolean boolean62 = whitelist18.isSafeAttribute("", (org.jsoup.nodes.Element) document21, attribute60); org.jsoup.parser.Tag tag63 = document21.tag(); java.lang.String str64 = document21.text(); java.lang.String str65 = document21.toString(); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str4, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertTrue("'" + quirksMode22 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode22.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(element49); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, ""); org.junit.Assert.assertNotNull(elements55); org.junit.Assert.assertNotNull(elements57); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(tag63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "#doctype" + "'", str64, "#doctype"); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>" + "'", str65, "<html>\n <head></head>\n <body>\n #doctype\n </body>\n</html>"); }
public void test482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test482"); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.select.Evaluator.AttributeStarting attributeStarting16 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray24 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24); org.jsoup.nodes.Element element27 = document22.classNames((java.util.Set<java.lang.String>) strSet25); document22.title("#document"); boolean boolean30 = attributeStarting16.matches((org.jsoup.nodes.Element) document19, (org.jsoup.nodes.Element) document22); java.lang.String str31 = document19.id(); org.jsoup.select.Elements elements33 = document19.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements35 = document19.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute38 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean39 = whitelist3.isSafeAttribute("", (org.jsoup.nodes.Element) document19, attribute38); org.jsoup.safety.Whitelist whitelist42 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist44 = whitelist42.preserveRelativeLinks(false); boolean boolean45 = org.jsoup.Jsoup.isValid("", whitelist42); java.lang.String[] strArray51 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist52 = whitelist42.addTags(strArray51); org.jsoup.safety.Whitelist whitelist53 = whitelist3.addAttributes("[^hi!]", strArray51); java.lang.String str54 = org.jsoup.Jsoup.clean("<#root class=\"\" hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\">\n <html>\n <head></head>\n <body>\n </body>\n </html>\n</#root>:eq(52)", "##text", whitelist3); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertNotNull(document22); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertNotNull(elements33); org.junit.Assert.assertNotNull(elements35); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(strArray51); org.junit.Assert.assertNotNull(whitelist52); org.junit.Assert.assertNotNull(whitelist53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "&lt;#root class=&quot;&quot; hi!  hi! =&quot;&quot;&gt;   :eq(52)" + "'", str54, "&lt;#root class=&quot;&quot; hi!  hi! =&quot;&quot;&gt;   :eq(52)"); }
public void test483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test483"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("\n#document", pattern1); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.basicWithImages(); boolean boolean6 = org.jsoup.Jsoup.isValid("#document", whitelist5); java.lang.String str7 = org.jsoup.Jsoup.clean("<!DOCTYPE <html>\n <head></head> \n <body>\n  hi! \n </body>\n</html> PUBLIC \"#data\" \"#doctype\">", whitelist5); org.jsoup.safety.Whitelist whitelist10 = org.jsoup.safety.Whitelist.basic(); boolean boolean11 = org.jsoup.Jsoup.isValid("hi!", whitelist10); java.lang.String[] strArray19 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist20 = whitelist10.addProtocols(".#document", "#doctype=\"\"", strArray19); org.jsoup.safety.Whitelist whitelist21 = whitelist5.addAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray19); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode25 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document26 = document24.quirksMode(quirksMode25); org.jsoup.safety.Whitelist whitelist28 = org.jsoup.safety.Whitelist.basic(); boolean boolean29 = org.jsoup.Jsoup.isValid("hi!", whitelist28); java.lang.String[] strArray37 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist38 = whitelist28.addProtocols(".#document", "#doctype=\"\"", strArray37); org.jsoup.select.Evaluator.AttributeStarting attributeStarting41 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("hi!", "hi!"); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray49 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49); org.jsoup.nodes.Element element52 = document47.classNames((java.util.Set<java.lang.String>) strSet50); document47.title("#document"); boolean boolean55 = attributeStarting41.matches((org.jsoup.nodes.Element) document44, (org.jsoup.nodes.Element) document47); java.lang.String str56 = document44.id(); org.jsoup.select.Elements elements58 = document44.getElementsContainingText("#doctype"); org.jsoup.select.Elements elements60 = document44.getElementsByIndexGreaterThan((int) (short) 10); org.jsoup.nodes.Attribute attribute63 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean64 = whitelist28.isSafeAttribute("", (org.jsoup.nodes.Element) document44, attribute63); boolean boolean65 = whitelist21.isSafeAttribute("", (org.jsoup.nodes.Element) document24, attribute63); org.jsoup.parser.Tag tag66 = document24.tag(); org.jsoup.select.Evaluator.AttributeStarting attributeStarting68 = new org.jsoup.select.Evaluator.AttributeStarting("hi!"); org.jsoup.nodes.Document document71 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document72 = document71.clone(); org.jsoup.nodes.Element element74 = document71.addClass(""); org.jsoup.nodes.Document document76 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Element element78 = document76.createElement("#document"); boolean boolean79 = attributeStarting68.matches((org.jsoup.nodes.Element) document71, (org.jsoup.nodes.Element) document76); document76.setBaseUri(""); boolean boolean82 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document76); org.jsoup.nodes.Element element84 = document24.createElement(":containsOwn(                                                  "); org.jsoup.select.Elements elements85 = element84.parents(); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;" + "'", str7, "hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); org.junit.Assert.assertNotNull(whitelist10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertTrue("'" + quirksMode25 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode25.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(strArray37); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(strArray49); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); org.junit.Assert.assertNotNull(element52); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, ""); org.junit.Assert.assertNotNull(elements58); org.junit.Assert.assertNotNull(elements60); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(tag66); org.junit.Assert.assertNotNull(document71); org.junit.Assert.assertNotNull(document72); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(element78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(element84); org.junit.Assert.assertNotNull(elements85); }
public void test484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test484"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes3 = whitelist1.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist6 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist8 = whitelist6.preserveRelativeLinks(false); boolean boolean9 = org.jsoup.Jsoup.isValid("", whitelist6); java.lang.String[] strArray15 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist16 = whitelist6.addTags(strArray15); org.jsoup.safety.Whitelist whitelist17 = whitelist1.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray15); org.jsoup.safety.Whitelist whitelist20 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist22 = whitelist20.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner23 = new org.jsoup.safety.Cleaner(whitelist20); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); boolean boolean28 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist25); org.jsoup.safety.Whitelist whitelist30 = org.jsoup.safety.Whitelist.basic(); boolean boolean31 = org.jsoup.Jsoup.isValid("hi!", whitelist30); java.lang.String[] strArray39 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist40 = whitelist30.addProtocols(".#document", "#doctype=\"\"", strArray39); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray39, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray39); org.jsoup.safety.Whitelist whitelist44 = whitelist25.addTags(strArray39); org.jsoup.safety.Whitelist whitelist45 = whitelist20.addTags(strArray39); org.jsoup.safety.Whitelist whitelist46 = whitelist1.addProtocols("#data", "hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", strArray39); java.lang.String str47 = org.jsoup.Jsoup.clean("\n<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->", whitelist46); org.jsoup.safety.Whitelist whitelist49 = whitelist46.preserveRelativeLinks(false); org.junit.Assert.assertNotNull(attributes3); org.junit.Assert.assertNotNull(whitelist6); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(whitelist16); org.junit.Assert.assertNotNull(whitelist17); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertNotNull(whitelist22); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(whitelist30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertNotNull(whitelist40); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist45); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, ""); org.junit.Assert.assertNotNull(whitelist49); }
public void test485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test485"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist2 = whitelist0.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner3 = new org.jsoup.safety.Cleaner(whitelist0); org.jsoup.select.Evaluator.Class class5 = new org.jsoup.select.Evaluator.Class("#document"); java.lang.String str6 = class5.toString(); org.jsoup.select.Evaluator.IndexEquals indexEquals8 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray13 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = document11.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Document document18 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray23 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23); org.jsoup.nodes.Element element26 = document21.classNames((java.util.Set<java.lang.String>) strSet24); org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) element26); boolean boolean28 = indexEquals8.matches(element16, (org.jsoup.nodes.Element) document18); org.jsoup.nodes.Document.QuirksMode quirksMode29 = org.jsoup.nodes.Document.QuirksMode.quirks; org.jsoup.nodes.Document document30 = document18.quirksMode(quirksMode29); org.jsoup.nodes.Document document33 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray35 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35); org.jsoup.nodes.Element element38 = document33.classNames((java.util.Set<java.lang.String>) strSet36); document33.title("#document"); boolean boolean41 = class5.matches((org.jsoup.nodes.Element) document30, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Document document42 = cleaner3.clean(document30); java.lang.String str43 = document42.title(); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str48 = document47.val(); java.util.List<org.jsoup.nodes.Node> nodeList50 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document47, "#document"); org.jsoup.nodes.Document.QuirksMode quirksMode51 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document52 = document47.quirksMode(quirksMode51); org.jsoup.nodes.Node node53 = document47.nextSibling(); org.jsoup.nodes.Element element55 = document47.createElement("[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]"); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Element element56 = document42.after((org.jsoup.nodes.Node) element55); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".#document" + "'", str6, ".#document"); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(element16); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(element26); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + quirksMode29 + "' != '" + org.jsoup.nodes.Document.QuirksMode.quirks + "'", quirksMode29.equals(org.jsoup.nodes.Document.QuirksMode.quirks)); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(strArray35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(element38); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(document42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, ""); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, ""); org.junit.Assert.assertNotNull(nodeList50); org.junit.Assert.assertTrue("'" + quirksMode51 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode51.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNull(node53); org.junit.Assert.assertNotNull(element55); }
public void test486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test486"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); boolean boolean4 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); boolean boolean20 = whitelist8.isSafeTag(""); boolean boolean22 = whitelist8.isSafeTag("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root></#root>"); java.lang.String[] strArray26 = new java.lang.String[] { "<hi!></hi!>" }; org.jsoup.safety.Whitelist whitelist27 = whitelist8.addProtocols("<#doctype></#doctype>\n<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "[#document, hi!, ]", strArray26); boolean boolean28 = org.jsoup.helper.StringUtil.in("[^[#document^=#doctype]]", strArray26); org.jsoup.safety.Whitelist whitelist29 = whitelist1.addAttributes(":contains([#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", strArray26); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(strArray26); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(whitelist29); }
public void test487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test487"); java.util.regex.Pattern pattern1 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching2 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("[:matches(null]", pattern1); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Cleaner cleaner7 = new org.jsoup.safety.Cleaner(whitelist5); org.jsoup.nodes.Document document10 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document11 = document10.clone(); org.jsoup.select.Elements elements13 = document11.getElementsByClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.select.Elements elements15 = document11.getElementsByAttribute("#document"); org.jsoup.select.Elements elements18 = document11.getElementsByAttributeValueNot("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", ":gt(1)"); org.jsoup.nodes.Document document19 = cleaner7.clean(document11); org.jsoup.select.Evaluator.IndexLessThan indexLessThan21 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 10); java.lang.String str22 = indexLessThan21.toString(); org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("#document", "#data"); org.jsoup.select.Elements elements27 = document25.getElementsMatchingOwnText(""); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document31 = document30.clone(); org.jsoup.nodes.Element element33 = document30.addClass(""); java.lang.String str34 = document30.toString(); org.jsoup.nodes.Element element36 = document30.tagName("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;"); boolean boolean37 = indexLessThan21.matches((org.jsoup.nodes.Element) document25, element36); java.lang.String str38 = element36.text(); boolean boolean39 = attributeWithValueMatching2.matches((org.jsoup.nodes.Element) document19, element36); org.jsoup.nodes.TextNode textNode42 = org.jsoup.nodes.TextNode.createFromEncoded("#<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "hi! =&quot;&quot;"); java.lang.String str43 = textNode42.text(); java.lang.String str44 = textNode42.nodeName(); org.jsoup.nodes.Node node46 = textNode42.removeAttr("<html>\n <head></head>\n <body>\n hi! hi!\n </body>\n</html>"); org.jsoup.nodes.Document document47 = textNode42.ownerDocument(); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node48 = element36.before((org.jsoup.nodes.Node) textNode42); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(document10); org.junit.Assert.assertNotNull(document11); org.junit.Assert.assertNotNull(elements13); org.junit.Assert.assertNotNull(elements15); org.junit.Assert.assertNotNull(elements18); org.junit.Assert.assertNotNull(document19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + ":lt(10)" + "'", str22, ":lt(10)"); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(elements27); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertNotNull(element33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str34, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(textNode42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "#<html> <head></head> <body> hi! </body> </html>" + "'", str43, "#<html> <head></head> <body> hi! </body> </html>"); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "#text" + "'", str44, "#text"); org.junit.Assert.assertNotNull(node46); org.junit.Assert.assertNull(document47); }
public void test488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test488"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist2); java.lang.String str6 = org.jsoup.Jsoup.clean("hi!", whitelist2); boolean boolean7 = org.jsoup.Jsoup.isValid("<html>\n <head></head>\n <body>\n UTF-8UTF-8\n </body>\n</html>", whitelist2); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); }
public void test489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test489"); org.jsoup.select.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.select.Evaluator.IndexLessThan((int) (short) 1); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray6 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6); org.jsoup.nodes.Element element9 = document4.classNames((java.util.Set<java.lang.String>) strSet7); org.jsoup.nodes.Element element12 = element9.attr("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", ""); org.jsoup.nodes.Element element14 = element12.text(""); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray19 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19); org.jsoup.nodes.Element element22 = document17.classNames((java.util.Set<java.lang.String>) strSet20); java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" }; java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>(); boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25); boolean boolean28 = strSet20.containsAll((java.util.Collection<java.lang.String>) strList26); java.lang.String str30 = org.jsoup.helper.StringUtil.join((java.util.Collection) strSet20, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element31 = element14.classNames((java.util.Set<java.lang.String>) strSet20); org.jsoup.nodes.Node node34 = element14.attr("##<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>", "<html>\n <head></head>\n <body>\n [^:containsOwn(hi!]\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist36 = new org.jsoup.safety.Whitelist(); boolean boolean37 = org.jsoup.Jsoup.isValid("", whitelist36); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray43 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43); org.jsoup.nodes.Element element46 = document41.classNames((java.util.Set<java.lang.String>) strSet44); org.jsoup.nodes.Element element48 = element46.prepend("#document"); org.jsoup.nodes.Attribute attribute51 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute51.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str54 = attribute51.getKey(); boolean boolean55 = whitelist36.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element48, attribute51); org.jsoup.nodes.Element element57 = element48.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements59 = element48.getElementsByClass("#root"); org.jsoup.helper.Validate.notNull((java.lang.Object) element48); boolean boolean61 = indexLessThan1.matches(element14, element48); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node62 = element48.unwrap(); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertNotNull(element12); org.junit.Assert.assertNotNull(element14); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(strArray25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, ""); org.junit.Assert.assertNotNull(element31); org.junit.Assert.assertNotNull(node34); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(document41); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(element46); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str54, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(element57); org.junit.Assert.assertNotNull(elements59); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); }
public void test490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test490"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = whitelist1.preserveRelativeLinks(false); java.lang.String str4 = org.jsoup.Jsoup.clean(".#document", whitelist3); org.jsoup.safety.Whitelist whitelist8 = whitelist3.addEnforcedAttribute("\n<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->", ":matchesown(null=\"#document\"", "<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist9 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist12 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str13 = org.jsoup.Jsoup.clean("", "#data", whitelist12); org.jsoup.safety.Whitelist whitelist15 = org.jsoup.safety.Whitelist.basic(); boolean boolean16 = org.jsoup.Jsoup.isValid("hi!", whitelist15); java.lang.String[] strArray24 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist25 = whitelist15.addProtocols(".#document", "#doctype=\"\"", strArray24); org.jsoup.safety.Whitelist whitelist26 = whitelist12.addTags(strArray24); org.jsoup.safety.Whitelist whitelist27 = whitelist9.addTags(strArray24); org.jsoup.safety.Whitelist whitelist28 = whitelist8.addTags(strArray24); org.jsoup.select.Evaluator.Id id31 = new org.jsoup.select.Evaluator.Id("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document34 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document35 = document34.clone(); org.jsoup.nodes.Element element37 = document34.addClass(""); org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray42 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42); org.jsoup.nodes.Element element45 = document40.classNames((java.util.Set<java.lang.String>) strSet43); java.lang.String str46 = document40.nodeName(); org.jsoup.select.Elements elements48 = document40.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document51 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document52 = document51.clone(); org.jsoup.nodes.Element element54 = document51.addClass(""); org.jsoup.nodes.Element element55 = document40.appendChild((org.jsoup.nodes.Node) document51); boolean boolean56 = id31.matches(element37, element55); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str61 = document60.val(); java.util.List<org.jsoup.nodes.Node> nodeList63 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document60, "#document"); java.lang.String str64 = document60.baseUri(); org.jsoup.nodes.Element element66 = document60.tagName("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document69 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray71 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71); org.jsoup.nodes.Element element74 = document69.classNames((java.util.Set<java.lang.String>) strSet72); org.jsoup.nodes.Element element76 = element74.prepend("#document"); org.jsoup.nodes.Node node78 = element74.childNode(0); boolean boolean79 = document60.equals((java.lang.Object) node78); org.jsoup.nodes.Document document81 = org.jsoup.Jsoup.parse("#doctype"); org.jsoup.nodes.Document.QuirksMode quirksMode82 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document83 = document81.quirksMode(quirksMode82); boolean boolean84 = id31.matches((org.jsoup.nodes.Element) document60, (org.jsoup.nodes.Element) document83); org.jsoup.select.Elements elements87 = document60.getElementsByAttributeValueMatching("<html>\n <head></head>\n <body>\n .:eq(52)\n </body>\n</html>", "<html>\n <head></head> \n <body>\n hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>"); org.jsoup.nodes.Element element88 = document60.body(); org.jsoup.nodes.Attribute attribute89 = null; // The following exception was thrown during execution in test generation try { boolean boolean90 = whitelist28.isSafeAttribute(".:matchesOwn(null", element88, attribute89); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + ".#document" + "'", str4, ".#document"); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertNotNull(whitelist9); org.junit.Assert.assertNotNull(whitelist12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist26); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertNotNull(whitelist28); org.junit.Assert.assertNotNull(document34); org.junit.Assert.assertNotNull(document35); org.junit.Assert.assertNotNull(element37); org.junit.Assert.assertNotNull(document40); org.junit.Assert.assertNotNull(strArray42); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(element45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#document" + "'", str46, "#document"); org.junit.Assert.assertNotNull(elements48); org.junit.Assert.assertNotNull(document51); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(element55); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, ""); org.junit.Assert.assertNotNull(nodeList63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!"); org.junit.Assert.assertNotNull(element66); org.junit.Assert.assertNotNull(document69); org.junit.Assert.assertNotNull(strArray71); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); org.junit.Assert.assertNotNull(element74); org.junit.Assert.assertNotNull(element76); org.junit.Assert.assertNotNull(node78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertNotNull(document81); org.junit.Assert.assertTrue("'" + quirksMode82 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode82.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document83); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertNotNull(elements87); org.junit.Assert.assertNotNull(element88); }
public void test491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test491"); org.jsoup.safety.Whitelist whitelist1 = org.jsoup.safety.Whitelist.basic(); boolean boolean2 = org.jsoup.Jsoup.isValid("hi!", whitelist1); java.lang.String[] strArray10 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist11 = whitelist1.addProtocols(".#document", "#doctype=\"\"", strArray10); boolean boolean13 = whitelist1.isSafeTag(""); org.jsoup.safety.Whitelist whitelist15 = whitelist1.preserveRelativeLinks(true); org.jsoup.safety.Whitelist whitelist18 = new org.jsoup.safety.Whitelist(); org.jsoup.nodes.Attributes attributes20 = whitelist18.getEnforcedAttributes("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(false); boolean boolean26 = org.jsoup.Jsoup.isValid("", whitelist23); java.lang.String[] strArray32 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist33 = whitelist23.addTags(strArray32); org.jsoup.safety.Whitelist whitelist34 = whitelist18.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray32); org.jsoup.safety.Whitelist whitelist35 = whitelist15.addProtocols("#comment", ".:eq(52)", strArray32); org.jsoup.safety.Whitelist whitelist37 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist39 = whitelist37.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner40 = new org.jsoup.safety.Cleaner(whitelist37); org.jsoup.safety.Whitelist whitelist42 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist44 = whitelist42.preserveRelativeLinks(false); boolean boolean45 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist42); org.jsoup.safety.Whitelist whitelist47 = org.jsoup.safety.Whitelist.basic(); boolean boolean48 = org.jsoup.Jsoup.isValid("hi!", whitelist47); java.lang.String[] strArray56 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist57 = whitelist47.addProtocols(".#document", "#doctype=\"\"", strArray56); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray56, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray56); org.jsoup.safety.Whitelist whitelist61 = whitelist42.addTags(strArray56); org.jsoup.safety.Whitelist whitelist62 = whitelist37.addTags(strArray56); org.jsoup.safety.Whitelist whitelist63 = whitelist15.addAttributes("<html>\n <head></head>\n <body></body>\n</html>", strArray56); org.jsoup.safety.Whitelist whitelist67 = whitelist63.addEnforcedAttribute("hi!:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(nullhi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>:containsOwn(hi!:matchesown(null<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "[:matches(null]", "<html>\n <head></head> \n <body>\n hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>"); boolean boolean69 = whitelist63.isSafeTag(".:eq(52)=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt; \n &lt;body&gt;\n  hi! \n &lt;/body&gt;\n&lt;/html&gt;\""); org.jsoup.safety.Whitelist whitelist73 = whitelist63.addEnforcedAttribute("[hi!, hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>, <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>, hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>, <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]", "[<!--hi!<html> <head></head> <body> hi! </body> </html>=\"\"-->$=<html>\n <head>\n <title>#document</title>\n </head>\n <body>\n hi!\n </body>\n</html>]", ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertNotNull(whitelist1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(whitelist15); org.junit.Assert.assertNotNull(attributes20); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(whitelist34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist42); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(whitelist47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(strArray56); org.junit.Assert.assertNotNull(whitelist57); org.junit.Assert.assertNotNull(whitelist61); org.junit.Assert.assertNotNull(whitelist62); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist67); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNotNull(whitelist73); }
public void test492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test492"); org.jsoup.safety.Whitelist whitelist4 = new org.jsoup.safety.Whitelist(); boolean boolean5 = org.jsoup.Jsoup.isValid("[#document^=#doctype]", whitelist4); java.lang.String str6 = org.jsoup.Jsoup.clean("hi!:matchesOwn(null", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", whitelist4); org.jsoup.nodes.Document document9 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray14 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14); org.jsoup.nodes.Element element17 = document12.classNames((java.util.Set<java.lang.String>) strSet15); org.jsoup.nodes.Element element18 = document9.appendChild((org.jsoup.nodes.Node) element17); java.lang.String str20 = document9.absUrl("hi!"); org.jsoup.nodes.Attribute attribute23 = new org.jsoup.nodes.Attribute(":matchesOwn(null", "#document"); boolean boolean24 = whitelist4.isSafeAttribute("", (org.jsoup.nodes.Element) document9, attribute23); org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("", "hi!"); boolean boolean28 = attribute23.equals((java.lang.Object) document27); java.util.List<org.jsoup.nodes.Node> nodeList30 = org.jsoup.parser.Parser.parseFragment("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]", (org.jsoup.nodes.Element) document27, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element32 = document27.appendElement("[[#document^= hi! ]!=.#document]"); org.jsoup.select.Elements elements34 = element32.getElementsByClass("<html>\n <head></head>\n <body>\n hi!:matchesOwn(null\n </body>\n</html>"); java.lang.String str35 = element32.className(); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!:matchesOwn(null" + "'", str6, "hi!:matchesOwn(null"); org.junit.Assert.assertNotNull(document12); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(element17); org.junit.Assert.assertNotNull(element18); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(nodeList30); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(elements34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); }
public void test493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test493"); org.jsoup.nodes.Document document1 = new org.jsoup.nodes.Document(""); org.jsoup.nodes.Element element3 = document1.toggleClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); boolean boolean5 = element3.hasAttr("#data"); boolean boolean6 = element3.isBlock(); org.jsoup.nodes.Node node8 = element3.removeAttr("#doctype"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText10 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!:matchesOwn(null"); org.jsoup.safety.Whitelist whitelist11 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist13 = whitelist11.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner14 = new org.jsoup.safety.Cleaner(whitelist11); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document18 = document17.clone(); org.jsoup.nodes.Node node20 = document18.removeAttr("#doctype"); org.jsoup.nodes.Document document21 = cleaner14.clean(document18); org.jsoup.nodes.Attributes attributes22 = document21.attributes(); org.jsoup.safety.Whitelist whitelist23 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist25 = whitelist23.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner26 = new org.jsoup.safety.Cleaner(whitelist23); org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document30 = document29.clone(); org.jsoup.nodes.Node node32 = document30.removeAttr("#doctype"); org.jsoup.nodes.Document document33 = cleaner26.clean(document30); org.jsoup.nodes.Attributes attributes34 = document33.attributes(); boolean boolean35 = containsOwnText10.matches((org.jsoup.nodes.Element) document21, (org.jsoup.nodes.Element) document33); org.jsoup.nodes.Element element37 = document21.val(" text=\"\""); // The following exception was thrown during execution in test generation try { org.jsoup.nodes.Node node38 = element3.after((org.jsoup.nodes.Node) document21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(element3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(node8); org.junit.Assert.assertNotNull(whitelist11); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(node20); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(attributes22); org.junit.Assert.assertNotNull(whitelist23); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(document29); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(node32); org.junit.Assert.assertNotNull(document33); org.junit.Assert.assertNotNull(attributes34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(element37); }
public void test494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test494"); java.util.regex.Pattern pattern0 = null; org.jsoup.select.Evaluator.Matches matches1 = new org.jsoup.select.Evaluator.Matches(pattern0); java.lang.String str2 = matches1.toString(); java.lang.String str3 = matches1.toString(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); java.lang.String str12 = document6.nodeName(); org.jsoup.select.Elements elements14 = document6.getElementsByIndexLessThan((int) (short) 10); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document18 = document17.clone(); org.jsoup.nodes.Element element20 = document17.addClass(""); org.jsoup.nodes.Element element21 = document6.appendChild((org.jsoup.nodes.Node) document17); org.jsoup.nodes.Element element23 = document17.removeClass("#doctype=\"\""); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document27 = document26.clone(); org.jsoup.nodes.Element element29 = document26.addClass(""); java.lang.String str30 = document26.toString(); org.jsoup.nodes.Element element32 = document26.text(".#document"); org.jsoup.nodes.Node node33 = element23.after((org.jsoup.nodes.Node) document26); org.jsoup.nodes.Element element35 = element23.prependText("hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>hi!<html>\n <head></head>\n <body>\n hi!\n </body>\n</html><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.safety.Whitelist whitelist38 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str39 = org.jsoup.Jsoup.clean("", "#data", whitelist38); org.jsoup.safety.Cleaner cleaner40 = new org.jsoup.safety.Cleaner(whitelist38); org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str45 = document44.val(); java.util.List<org.jsoup.nodes.Node> nodeList47 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document44, "#document"); java.lang.String str48 = document44.baseUri(); org.jsoup.nodes.Element element50 = document44.addClass("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.select.Elements elements51 = document44.parents(); org.jsoup.nodes.Document document52 = cleaner40.clean(document44); boolean boolean53 = element35.equals((java.lang.Object) cleaner40); org.jsoup.nodes.Element element54 = element35.clone(); org.jsoup.nodes.Node node56 = element35.removeAttr("[^[^:containsOwn(hi!]]"); java.lang.String str57 = element35.nodeName(); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parseBodyFragment("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", ""); // The following exception was thrown during execution in test generation try { boolean boolean61 = matches1.matches(element35, (org.jsoup.nodes.Element) document60); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + str2 + "' != '" + ":matches(null" + "'", str2, ":matches(null"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":matches(null" + "'", str3, ":matches(null"); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document"); org.junit.Assert.assertNotNull(elements14); org.junit.Assert.assertNotNull(document17); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(element20); org.junit.Assert.assertNotNull(element21); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(element29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>" + "'", str30, "<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.junit.Assert.assertNotNull(element32); org.junit.Assert.assertNotNull(node33); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(whitelist38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, ""); org.junit.Assert.assertNotNull(document44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, ""); org.junit.Assert.assertNotNull(nodeList47); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!"); org.junit.Assert.assertNotNull(element50); org.junit.Assert.assertNotNull(elements51); org.junit.Assert.assertNotNull(document52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(element54); org.junit.Assert.assertNotNull(node56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "#document" + "'", str57, "#document"); org.junit.Assert.assertNotNull(document60); }
public void test495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test495"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element23 = element22.empty(); org.jsoup.nodes.Node node24 = element22.parent(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNull(node24); }
public void test496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test496"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist4 = whitelist2.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner5 = new org.jsoup.safety.Cleaner(whitelist2); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray10 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10); org.jsoup.nodes.Element element13 = document8.classNames((java.util.Set<java.lang.String>) strSet11); java.lang.String str14 = document8.nodeName(); java.lang.String str15 = document8.html(); boolean boolean16 = cleaner5.isValid(document8); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element19 = document18.body(); java.lang.String str20 = document18.toString(); org.jsoup.nodes.Document document21 = cleaner5.clean(document18); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document25 = document24.clone(); org.jsoup.nodes.Element element27 = document24.addClass(""); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str32 = document31.val(); java.util.List<org.jsoup.nodes.Node> nodeList34 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document31, "#document"); java.lang.String str35 = document31.baseUri(); org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str39 = document38.val(); org.jsoup.nodes.Element element41 = document38.append("#document"); org.jsoup.nodes.Element element42 = document31.appendChild((org.jsoup.nodes.Node) element41); org.jsoup.nodes.Element element43 = document24.prependChild((org.jsoup.nodes.Node) document31); org.jsoup.nodes.Attributes attributes44 = element43.attributes(); java.lang.String str45 = element43.baseUri(); java.lang.String str46 = element43.text(); org.jsoup.nodes.Element element48 = element43.toggleClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean49 = containsOwnText1.matches((org.jsoup.nodes.Element) document21, element43); org.jsoup.select.Elements elements52 = element43.getElementsByAttributeValueNot("hi!:matchesown(null=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;", ".#document"); java.lang.String str54 = org.jsoup.helper.StringUtil.join((java.util.Collection) elements52, "\n<!--#doctype=\"\"-->"); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist4); org.junit.Assert.assertNotNull(document8); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#document" + "'", str14, "#document"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str15, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(document18); org.junit.Assert.assertNotNull(element19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str20, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document21); org.junit.Assert.assertNotNull(document24); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(element27); org.junit.Assert.assertNotNull(document31); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, ""); org.junit.Assert.assertNotNull(nodeList34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!"); org.junit.Assert.assertNotNull(document38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, ""); org.junit.Assert.assertNotNull(element41); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertNotNull(element43); org.junit.Assert.assertNotNull(attributes44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "#document" + "'", str45, "#document"); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi! hi!#document hi!" + "'", str46, "hi! hi!#document hi!"); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(elements52); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<#root>\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n <#root>\n <html>\n  <head></head>\n  <body>\n  hi!\n  </body>\n </html>#document\n </#root>\n</#root>\n<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>\n<!--#doctype=\"\"--><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root>\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>#document\n</#root>\n<!--#doctype=\"\"--><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<!--#doctype=\"\"--><head></head>\n<!--#doctype=\"\"--><body>\n hi!\n</body>\n<!--#doctype=\"\"--><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>#document\n<!--#doctype=\"\"--><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<!--#doctype=\"\"--><head></head>\n<!--#doctype=\"\"--><body>\n hi!\n</body>\n<!--#doctype=\"\"--><html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>\n<!--#doctype=\"\"--><head></head>\n<!--#doctype=\"\"--><body>\n hi! \n</body>" + "'", str54, "<#root>\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>\n <#root>\n <html>\n  <head></head>\n  <body>\n  hi!\n  </body>\n </html>#document\n </#root>\n</#root>\n<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>\n<!--#doctype=\"\"--><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root>\n <html>\n <head></head>\n <body>\n  hi!\n </body>\n </html>#document\n</#root>\n<!--#doctype=\"\"--><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<!--#doctype=\"\"--><head></head>\n<!--#doctype=\"\"--><body>\n hi!\n</body>\n<!--#doctype=\"\"--><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>#document\n<!--#doctype=\"\"--><html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<!--#doctype=\"\"--><head></head>\n<!--#doctype=\"\"--><body>\n hi!\n</body>\n<!--#doctype=\"\"--><html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>\n<!--#doctype=\"\"--><head></head>\n<!--#doctype=\"\"--><body>\n hi! \n</body>"); }
public void test497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test497"); org.jsoup.safety.Whitelist whitelist2 = org.jsoup.safety.Whitelist.simpleText(); org.jsoup.safety.Whitelist whitelist5 = org.jsoup.safety.Whitelist.simpleText(); java.lang.String str6 = org.jsoup.Jsoup.clean("", "#data", whitelist5); org.jsoup.safety.Whitelist whitelist8 = org.jsoup.safety.Whitelist.basic(); boolean boolean9 = org.jsoup.Jsoup.isValid("hi!", whitelist8); java.lang.String[] strArray17 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist18 = whitelist8.addProtocols(".#document", "#doctype=\"\"", strArray17); org.jsoup.safety.Whitelist whitelist19 = whitelist5.addTags(strArray17); org.jsoup.safety.Whitelist whitelist20 = whitelist2.addTags(strArray17); boolean boolean21 = org.jsoup.Jsoup.isValid("#doctype", whitelist2); org.jsoup.safety.Whitelist whitelist25 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist27 = whitelist25.preserveRelativeLinks(false); boolean boolean28 = org.jsoup.Jsoup.isValid("", whitelist25); java.lang.String[] strArray34 = new java.lang.String[] { "#data", "#data", "[^hi!]", "#data", "#data" }; org.jsoup.safety.Whitelist whitelist35 = whitelist25.addTags(strArray34); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray34); org.jsoup.safety.Whitelist whitelist37 = whitelist2.addProtocols("hi! hi! #comment", "[#document^=<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>]=\":contains(&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n hi!\n &lt;/body&gt;\n&lt;/html&gt;\"", strArray34); org.jsoup.safety.Whitelist whitelist39 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist41 = whitelist39.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner42 = new org.jsoup.safety.Cleaner(whitelist39); org.jsoup.safety.Whitelist whitelist44 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist46 = whitelist44.preserveRelativeLinks(false); boolean boolean47 = org.jsoup.Jsoup.isValid("hi!  PUBLIC &quot;#data&quot; &quot;#doctype&quot;&gt;", whitelist44); org.jsoup.safety.Whitelist whitelist49 = org.jsoup.safety.Whitelist.basic(); boolean boolean50 = org.jsoup.Jsoup.isValid("hi!", whitelist49); java.lang.String[] strArray58 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist59 = whitelist49.addProtocols(".#document", "#doctype=\"\"", strArray58); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray58, ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray58); org.jsoup.safety.Whitelist whitelist63 = whitelist44.addTags(strArray58); org.jsoup.safety.Whitelist whitelist64 = whitelist39.addTags(strArray58); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray58); org.jsoup.helper.Validate.noNullElements((java.lang.Object[]) strArray58, "hi!  hi! =&quot;&quot;"); org.jsoup.safety.Whitelist whitelist68 = whitelist2.addAttributes("#<html> <head></head> <body> hi! </body> </html>", strArray58); org.jsoup.safety.Whitelist whitelist72 = whitelist2.addEnforcedAttribute(":lt(52)", "hi!:matchesown(null=&quot;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;&quot;", "[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); java.lang.String str73 = org.jsoup.Jsoup.clean("[hi!<html> <head></head> <body> hi! </body> </html>$=:gt(1)]", whitelist72); org.junit.Assert.assertNotNull(whitelist2); org.junit.Assert.assertNotNull(whitelist5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(whitelist8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); org.junit.Assert.assertNotNull(strArray17); org.junit.Assert.assertNotNull(whitelist18); org.junit.Assert.assertNotNull(whitelist19); org.junit.Assert.assertNotNull(whitelist20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(whitelist25); org.junit.Assert.assertNotNull(whitelist27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(strArray34); org.junit.Assert.assertNotNull(whitelist35); org.junit.Assert.assertNotNull(whitelist37); org.junit.Assert.assertNotNull(whitelist39); org.junit.Assert.assertNotNull(whitelist41); org.junit.Assert.assertNotNull(whitelist44); org.junit.Assert.assertNotNull(whitelist46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertNotNull(whitelist49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertNotNull(strArray58); org.junit.Assert.assertNotNull(whitelist59); org.junit.Assert.assertNotNull(whitelist63); org.junit.Assert.assertNotNull(whitelist64); org.junit.Assert.assertNotNull(whitelist68); org.junit.Assert.assertNotNull(whitelist72); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[hi!  hi! $=:gt(1)]" + "'", str73, "[hi!  hi! $=:gt(1)]"); }
public void test498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test498"); org.jsoup.safety.Whitelist whitelist0 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist3 = org.jsoup.safety.Whitelist.basic(); boolean boolean4 = org.jsoup.Jsoup.isValid("hi!", whitelist3); java.lang.String[] strArray12 = new java.lang.String[] { ":matchesOwn(null", "hi!", "hi!", "#doctype=\"\"", ":matchesOwn(null" }; org.jsoup.safety.Whitelist whitelist13 = whitelist3.addProtocols(".#document", "#doctype=\"\"", strArray12); org.jsoup.safety.Whitelist whitelist14 = whitelist0.addAttributes("hi!<html> <head></head> <body> hi! </body> </html>", strArray12); org.jsoup.select.Evaluator.IndexEquals indexEquals17 = new org.jsoup.select.Evaluator.IndexEquals((int) '4'); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray22 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22); org.jsoup.nodes.Element element25 = document20.classNames((java.util.Set<java.lang.String>) strSet23); org.jsoup.nodes.Document document27 = new org.jsoup.nodes.Document("#document"); org.jsoup.nodes.Document document30 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray32 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32); org.jsoup.nodes.Element element35 = document30.classNames((java.util.Set<java.lang.String>) strSet33); org.jsoup.nodes.Element element36 = document27.appendChild((org.jsoup.nodes.Node) element35); boolean boolean37 = indexEquals17.matches(element25, (org.jsoup.nodes.Element) document27); org.jsoup.nodes.Attribute attribute40 = org.jsoup.nodes.Attribute.createFromEncoded(":eq(-1)", "[hi!<html> <head></head> <body> hi! </body> </html>$=:gt(1)]"); boolean boolean41 = whitelist0.isSafeAttribute("hi!&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;", element25, attribute40); org.junit.Assert.assertNotNull(whitelist0); org.junit.Assert.assertNotNull(whitelist3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(whitelist13); org.junit.Assert.assertNotNull(whitelist14); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertNotNull(document30); org.junit.Assert.assertNotNull(strArray32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertNotNull(element35); org.junit.Assert.assertNotNull(element36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(attribute40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); }
public void test499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test499"); org.jsoup.safety.Whitelist whitelist1 = new org.jsoup.safety.Whitelist(); boolean boolean2 = org.jsoup.Jsoup.isValid("", whitelist1); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray8 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8); org.jsoup.nodes.Element element11 = document6.classNames((java.util.Set<java.lang.String>) strSet9); org.jsoup.nodes.Element element13 = element11.prepend("#document"); org.jsoup.nodes.Attribute attribute16 = new org.jsoup.nodes.Attribute("#doctype", ""); attribute16.setKey("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str19 = attribute16.getKey(); boolean boolean20 = whitelist1.isSafeAttribute("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", element13, attribute16); org.jsoup.nodes.Element element22 = element13.appendText("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Element element23 = element22.empty(); org.jsoup.nodes.Element element25 = element23.appendElement(":matchesOwn(null"); java.lang.String str26 = element23.outerHtml(); int int27 = element23.siblingIndex(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(document6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(element11); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str19, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(element22); org.junit.Assert.assertNotNull(element23); org.junit.Assert.assertNotNull(element25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<:matchesown(null></:matchesown(null>" + "'", str26, "<:matchesown(null></:matchesown(null>"); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); }
public void test500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test500"); org.jsoup.select.Evaluator.ContainsText containsText1 = new org.jsoup.select.Evaluator.ContainsText("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray6 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6); org.jsoup.nodes.Element element9 = document4.classNames((java.util.Set<java.lang.String>) strSet7); java.lang.String str10 = document4.nodeName(); java.lang.String str11 = document4.html(); org.jsoup.nodes.Element element13 = document4.removeClass("[<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n<#root class=\"\">\n <html>\n <head></head> \n <body>\n  hi! \n </body>\n </html>\n</#root>!=#doctype=\"\"]"); org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parse(" <html>\n <head></head>\n <body>\n hi!\n </body>\n</html>=\"\"", ":contains(<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.jsoup.nodes.Document document20 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str21 = document20.val(); java.util.List<org.jsoup.nodes.Node> nodeList23 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document20, "#document"); org.jsoup.nodes.Document.QuirksMode quirksMode24 = org.jsoup.nodes.Document.QuirksMode.limitedQuirks; org.jsoup.nodes.Document document25 = document20.quirksMode(quirksMode24); org.jsoup.nodes.Document document26 = document16.quirksMode(quirksMode24); org.jsoup.nodes.Document document27 = document4.quirksMode(quirksMode24); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText30 = new org.jsoup.select.Evaluator.ContainsOwnText("hi!"); org.jsoup.safety.Whitelist whitelist31 = org.jsoup.safety.Whitelist.none(); org.jsoup.safety.Whitelist whitelist33 = whitelist31.preserveRelativeLinks(false); org.jsoup.safety.Cleaner cleaner34 = new org.jsoup.safety.Cleaner(whitelist31); org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String[] strArray39 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39); org.jsoup.nodes.Element element42 = document37.classNames((java.util.Set<java.lang.String>) strSet40); java.lang.String str43 = document37.nodeName(); java.lang.String str44 = document37.html(); boolean boolean45 = cleaner34.isValid(document37); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse(""); org.jsoup.nodes.Element element48 = document47.body(); java.lang.String str49 = document47.toString(); org.jsoup.nodes.Document document50 = cleaner34.clean(document47); org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "#document"); org.jsoup.nodes.Document document54 = document53.clone(); org.jsoup.nodes.Element element56 = document53.addClass(""); org.jsoup.nodes.Document document60 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str61 = document60.val(); java.util.List<org.jsoup.nodes.Node> nodeList63 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document60, "#document"); java.lang.String str64 = document60.baseUri(); org.jsoup.nodes.Document document67 = org.jsoup.Jsoup.parse("hi!", "hi!"); java.lang.String str68 = document67.val(); org.jsoup.nodes.Element element70 = document67.append("#document"); org.jsoup.nodes.Element element71 = document60.appendChild((org.jsoup.nodes.Node) element70); org.jsoup.nodes.Element element72 = document53.prependChild((org.jsoup.nodes.Node) document60); org.jsoup.nodes.Attributes attributes73 = element72.attributes(); java.lang.String str74 = element72.baseUri(); java.lang.String str75 = element72.text(); org.jsoup.nodes.Element element77 = element72.toggleClass("<html>\n <head></head> \n <body>\n  hi! \n </body>\n</html>"); boolean boolean78 = containsOwnText30.matches((org.jsoup.nodes.Element) document50, element72); org.jsoup.nodes.Element element79 = document50.clone(); java.util.List<org.jsoup.nodes.Node> nodeList81 = org.jsoup.parser.Parser.parseFragment(":matches(null", (org.jsoup.nodes.Element) document50, ""); boolean boolean82 = containsText1.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document50); java.lang.String str83 = document27.id(); boolean boolean84 = document27.hasText(); org.jsoup.nodes.Element element86 = document27.text("#doctype"); org.jsoup.nodes.Element element88 = element86.prependText("hi!  &lt;#root&gt;"); org.junit.Assert.assertNotNull(document4); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(element9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#document" + "'", str10, "#document"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str11, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertNotNull(element13); org.junit.Assert.assertNotNull(document16); org.junit.Assert.assertNotNull(document20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, ""); org.junit.Assert.assertNotNull(nodeList23); org.junit.Assert.assertTrue("'" + quirksMode24 + "' != '" + org.jsoup.nodes.Document.QuirksMode.limitedQuirks + "'", quirksMode24.equals(org.jsoup.nodes.Document.QuirksMode.limitedQuirks)); org.junit.Assert.assertNotNull(document25); org.junit.Assert.assertNotNull(document26); org.junit.Assert.assertNotNull(document27); org.junit.Assert.assertNotNull(whitelist31); org.junit.Assert.assertNotNull(whitelist33); org.junit.Assert.assertNotNull(document37); org.junit.Assert.assertNotNull(strArray39); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(element42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "#document" + "'", str43, "#document"); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>" + "'", str44, "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true); org.junit.Assert.assertNotNull(document47); org.junit.Assert.assertNotNull(element48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<html>\n <head></head>\n <body></body>\n</html>" + "'", str49, "<html>\n <head></head>\n <body></body>\n</html>"); org.junit.Assert.assertNotNull(document50); org.junit.Assert.assertNotNull(document53); org.junit.Assert.assertNotNull(document54); org.junit.Assert.assertNotNull(element56); org.junit.Assert.assertNotNull(document60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, ""); org.junit.Assert.assertNotNull(nodeList63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!"); org.junit.Assert.assertNotNull(document67); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, ""); org.junit.Assert.assertNotNull(element70); org.junit.Assert.assertNotNull(element71); org.junit.Assert.assertNotNull(element72); org.junit.Assert.assertNotNull(attributes73); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "#document" + "'", str74, "#document"); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi! hi!#document hi!" + "'", str75, "hi! hi!#document hi!"); org.junit.Assert.assertNotNull(element77); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertNotNull(element79); org.junit.Assert.assertNotNull(nodeList81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, ""); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true); org.junit.Assert.assertNotNull(element86); org.junit.Assert.assertNotNull(element88); }
