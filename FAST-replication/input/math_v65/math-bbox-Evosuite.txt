public void test00() throws Throwable { LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(); double double0 = levenbergMarquardtOptimizer0.getRMS(); assertEquals(1000, levenbergMarquardtOptimizer0.getMaxIterations()); assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations()); assertEquals(Double.NaN, double0, 0.01); assertEquals(0.0, levenbergMarquardtOptimizer0.getChiSquare(), 0.01); }
public void test01() throws Throwable { GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false); int int0 = gaussNewtonOptimizer0.getMaxEvaluations(); assertEquals(Integer.MAX_VALUE, int0); assertEquals(100, gaussNewtonOptimizer0.getMaxIterations()); }
public void test02() throws Throwable { LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(); int int0 = levenbergMarquardtOptimizer0.getIterations(); assertEquals(1000, levenbergMarquardtOptimizer0.getMaxIterations()); assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations()); assertEquals(0, int0); }
public void test03() throws Throwable { LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(); int int0 = levenbergMarquardtOptimizer0.getMaxIterations(); assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations()); assertEquals(1000, int0); }
public void test04() throws Throwable { LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(); int int0 = levenbergMarquardtOptimizer0.getEvaluations(); assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations()); assertEquals(1000, levenbergMarquardtOptimizer0.getMaxIterations()); assertEquals(0, int0); }
public void test05() throws Throwable { LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(); int int0 = levenbergMarquardtOptimizer0.getJacobianEvaluations(); assertEquals(0, int0); assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations()); assertEquals(1000, levenbergMarquardtOptimizer0.getMaxIterations()); }
public void test06() throws Throwable { LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(); levenbergMarquardtOptimizer0.getConvergenceChecker(); assertEquals(Integer.MAX_VALUE, levenbergMarquardtOptimizer0.getMaxEvaluations()); assertEquals(1000, levenbergMarquardtOptimizer0.getMaxIterations()); }
public void test07() throws Throwable { GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false); gaussNewtonOptimizer0.setMaxIterations((-3260)); try { gaussNewtonOptimizer0.doOptimize(); fail("Expecting exception: Exception"); } catch(Exception e) { // // maximal number of iterations (-3,260) exceeded // verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e); } }
public void test08() throws Throwable { GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false); double[][] doubleArray0 = new double[1][5]; MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer()); doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class)); double[] doubleArray1 = new double[7]; DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer()); doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian(); doReturn(doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class)); try { gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1); fail("Expecting exception: Exception"); } catch(Exception e) { // // dimensions mismatch 1 != 7 // verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e); } }
public void test09() throws Throwable { GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false); double[][] doubleArray0 = new double[1][3]; MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer()); doReturn(doubleArray0).when(multivariateMatrixFunction0).value(any(double[].class)); double[] doubleArray1 = new double[1]; DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer()); doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian(); doReturn(doubleArray1).when(differentiableMultivariateVectorialFunction0).value(any(double[].class)); try { gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1); fail("Expecting exception: Exception"); } catch(Exception e) { // // unable to solve: singular problem // verifyException("org.apache.commons.math.optimization.general.GaussNewtonOptimizer", e); } }
public void test10() throws Throwable { LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(); levenbergMarquardtOptimizer0.setMaxEvaluations((-917)); // Undeclared exception! try { levenbergMarquardtOptimizer0.doOptimize(); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.math.FunctionEvaluationException", e); } }
public void test11() throws Throwable { GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(false); MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer()); double[] doubleArray0 = new double[1]; DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer()); doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian(); doReturn((double[]) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class)); double[] doubleArray1 = new double[0]; // Undeclared exception! try { gaussNewtonOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray1, doubleArray1, doubleArray1); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e); } }
public void test12() throws Throwable { LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(); levenbergMarquardtOptimizer0.rows = 100; // Undeclared exception! try { levenbergMarquardtOptimizer0.guessParametersErrors(); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e); } }
public void test13() throws Throwable { LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(); try { levenbergMarquardtOptimizer0.guessParametersErrors(); fail("Expecting exception: Exception"); } catch(Exception e) { // // no degrees of freedom (0 measurements, 0 parameters) // verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e); } }
public void test14() throws Throwable { LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(); double[] doubleArray0 = new double[0]; double[] doubleArray1 = new double[9]; try { levenbergMarquardtOptimizer0.optimize((DifferentiableMultivariateVectorialFunction) null, doubleArray0, doubleArray1, doubleArray1); fail("Expecting exception: Exception"); } catch(Exception e) { // // dimensions mismatch 0 != 9 // verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e); } }
