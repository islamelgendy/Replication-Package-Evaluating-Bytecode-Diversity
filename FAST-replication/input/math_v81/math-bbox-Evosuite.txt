public void test00() throws Throwable { double[] doubleArray0 = new double[1]; Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1090.045613197); double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues(); assertFalse(doubleArray1.equals((Object)doubleArray0)); }
public void test01() throws Throwable { double[] doubleArray0 = new double[1]; Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1090.045613197); try { eigenDecompositionImpl0.getImagEigenvalue(2074707065); fail("Expecting exception: ArrayIndexOutOfBoundsException"); } catch(ArrayIndexOutOfBoundsException e) { // // 2074707065 // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test02() throws Throwable { double[] doubleArray0 = new double[1]; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1495100.343013787); try { eigenDecompositionImpl0.getRealEigenvalue(2143); fail("Expecting exception: ArrayIndexOutOfBoundsException"); } catch(ArrayIndexOutOfBoundsException e) { // // 2143 // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test03() throws Throwable { double[] doubleArray0 = new double[1]; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NaN); double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues(); assertEquals(1, doubleArray1.length); }
public void test04() throws Throwable { double[] doubleArray0 = new double[3]; doubleArray0[0] = 500.192292427972; doubleArray0[1] = 0.9999999999999998; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 500.192292427972); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1); EigenDecompositionImpl eigenDecompositionImpl0 = null; try { eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 500.192292427972); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // eigen decomposition of assymetric matrices not supported yet // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test05() throws Throwable { double[] doubleArray0 = new double[1]; Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-3350.8421464557214)); eigenDecompositionImpl0.getV(); RealMatrix realMatrix0 = eigenDecompositionImpl0.getV(); assertNotNull(realMatrix0); assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0)); }
public void test06() throws Throwable { double[] doubleArray0 = new double[1]; Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-3350.8421464557214)); RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT(); assertNotNull(realMatrix0); RealMatrix realMatrix1 = eigenDecompositionImpl0.getV(); assertTrue(realMatrix1.equals((Object)realMatrix0)); }
public void test07() throws Throwable { double[] doubleArray0 = new double[1]; Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-3350.8421464557214)); eigenDecompositionImpl0.getD(); RealMatrix realMatrix0 = eigenDecompositionImpl0.getD(); assertEquals(1, realMatrix0.getColumnDimension()); }
public void test08() throws Throwable { double[] doubleArray0 = new double[1]; Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-3350.8421464557214)); eigenDecompositionImpl0.getVT(); RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT(); assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0)); }
public void test09() throws Throwable { double[] doubleArray0 = new double[2]; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NaN); eigenDecompositionImpl0.getV(); eigenDecompositionImpl0.getVT(); assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test10() throws Throwable { double[] doubleArray0 = new double[1]; Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-3350.8421464557214)); eigenDecompositionImpl0.getVT(); try { eigenDecompositionImpl0.getEigenvector(9); fail("Expecting exception: ArrayIndexOutOfBoundsException"); } catch(ArrayIndexOutOfBoundsException e) { // // 9 // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test11() throws Throwable { OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(5, 5); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 5); try { eigenDecompositionImpl0.getEigenvector(5); fail("Expecting exception: ArrayIndexOutOfBoundsException"); } catch(ArrayIndexOutOfBoundsException e) { // // 5 // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test12() throws Throwable { double[] doubleArray0 = new double[5]; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 874.4937167134); double double0 = eigenDecompositionImpl0.getDeterminant(); assertEquals(0.0, double0, 0.01); }
public void test13() throws Throwable { double[] doubleArray0 = new double[5]; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12); eigenDecompositionImpl0.getV(); eigenDecompositionImpl0.getSolver(); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test14() throws Throwable { double[] doubleArray0 = new double[20]; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12); eigenDecompositionImpl0.getSolver(); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test15() throws Throwable { double[] doubleArray0 = new double[6]; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); openMapRealVector0.mapAcosToSelf(); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test16() throws Throwable { double[] doubleArray0 = new double[3]; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = null; try { eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, Double.NaN); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // cannot solve degree 3 equation // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test17() throws Throwable { double[] doubleArray0 = new double[3]; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapInvToSelf(); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12); assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test18() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[1] = (-4564.6); doubleArray0[2] = 500.192292427972; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, Double.POSITIVE_INFINITY); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test19() throws Throwable { double[] doubleArray0 = new double[10]; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAcosToSelf(); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test20() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[1] = 0.333; doubleArray0[2] = 500.3796041087657; doubleArray0[3] = 0.333; doubleArray0[6] = (-4564.852543981662); doubleArray0[7] = 500.3796041087657; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-4564.852543981662)); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test21() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[0] = 500.192292427972; doubleArray0[1] = (-4564.6); doubleArray0[2] = 500.192292427972; doubleArray0[3] = 0.333; doubleArray0[4] = 500.192292427972; doubleArray0[5] = 500.192292427972; doubleArray0[6] = (-4564.6); doubleArray0[7] = 500.192292427972; doubleArray0[8] = 500.192292427972; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); openMapRealVector0.mapInvToSelf(); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-4564.6)); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test22() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[2] = 500.3796041087657; doubleArray0[6] = (-4564.852543981662); doubleArray0[7] = (-4564.852543981662); OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = null; try { eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-4564.852543981662)); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test23() throws Throwable { double[] doubleArray0 = new double[8]; doubleArray0[3] = 500.192292427972; doubleArray0[1] = 500.192292427972; doubleArray0[2] = (-2429.103671008035); doubleArray0[4] = 500.192292427972; doubleArray0[5] = (-2429.103671008035); doubleArray0[6] = (-2429.103671008035); doubleArray0[7] = 500.192292427972; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NEGATIVE_INFINITY); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test24() throws Throwable { double[] doubleArray0 = new double[10]; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAcosToSelf(); OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapInvToSelf(); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector2); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test25() throws Throwable { double[] doubleArray0 = new double[5]; doubleArray0[0] = 0.333; doubleArray0[1] = 500.192292427972; doubleArray0[2] = (-4030.314272269569); doubleArray0[3] = 500.192292427972; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-4030.314272269569)); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test26() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[0] = 500.192292427972; doubleArray0[1] = (-4564.6); doubleArray0[2] = 500.192292427972; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, Double.POSITIVE_INFINITY); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test27() throws Throwable { double[] doubleArray0 = new double[10]; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapInvToSelf(); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = null; try { eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { // // // verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e); } }
public void test28() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[1] = 0.333; doubleArray0[2] = 500.3796041087657; doubleArray0[3] = 0.333; doubleArray0[4] = 500.3796041087657; doubleArray0[6] = (-4564.852543981662); doubleArray0[7] = 500.3796041087657; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-4564.852543981662)); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test29() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[1] = 0.333; doubleArray0[3] = (-4564.852543981662); doubleArray0[4] = 500.3796041087657; doubleArray0[6] = (-4564.852543981662); doubleArray0[7] = 500.3796041087657; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-4564.852543981662)); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test30() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[0] = 500.192292427972; doubleArray0[2] = (-0.5439101624818368); doubleArray0[3] = (-2375.949478660966); doubleArray0[4] = (-2375.949478660966); doubleArray0[5] = 500.192292427972; doubleArray0[6] = (-0.5439101624818368); doubleArray0[7] = 0.333; doubleArray0[8] = 0.333; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12); assertEquals((-5.041920642469308E-96), eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test31() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[1] = 0.333; doubleArray0[3] = 0.333; doubleArray0[4] = 500.3796041088; doubleArray0[6] = (-4564.852543981662); OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-1625.55)); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test32() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[0] = 500.192292427972; doubleArray0[1] = (-4564.6); doubleArray0[2] = 500.192292427972; doubleArray0[3] = 0.333; doubleArray0[4] = 500.192292427972; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test33() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[1] = 0.333; doubleArray0[3] = 0.333; doubleArray0[4] = 500.3796041087657; doubleArray0[8] = 500.3796041087657; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapCbrtToSelf(); openMapRealVector1.mapExpToSelf(); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test34() throws Throwable { double[] doubleArray0 = new double[7]; doubleArray0[0] = (-4554.238218529531); doubleArray0[1] = (-2429.103671008035); doubleArray0[2] = 500.192292427972; doubleArray0[3] = (-4554.238218529531); doubleArray0[4] = 500.192292427972; doubleArray0[5] = (-4554.238218529531); doubleArray0[6] = (-1138.043677438); OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-2429.103671008035)); assertEquals(1.5860378850338067E-49, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test35() throws Throwable { double[] doubleArray0 = new double[5]; doubleArray0[0] = 0.333; doubleArray0[1] = (-4554.238218529531); doubleArray0[2] = 500.192292427972; doubleArray0[3] = 0.333; doubleArray0[4] = 500.192292427972; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 3.946433775211339E-9); assertEquals(1.4567679885985228E-47, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test36() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[1] = 523.5187183453528; doubleArray0[3] = 0.333; doubleArray0[4] = 523.5187183453528; doubleArray0[6] = (-4564.852543981662); doubleArray0[7] = 523.5187183453528; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-4564.852543981662)); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test37() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[1] = 500.3796041087657; doubleArray0[3] = (-1.4975663204529266); doubleArray0[4] = 500.3796041087657; doubleArray0[6] = (-4564.852543981662); doubleArray0[7] = 500.3796041087657; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-4564.852543981662)); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test38() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[1] = 0.333; doubleArray0[3] = (-4564.852543981662); doubleArray0[6] = (-4564.852543981662); doubleArray0[7] = 503.840720452005; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-4564.852543981662)); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test39() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[1] = 0.333; doubleArray0[3] = 0.333; doubleArray0[4] = 503.840720452005; doubleArray0[6] = (-4564.852543981662); OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-4564.852543981662)); assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test40() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[1] = 0.333; doubleArray0[3] = 0.333; doubleArray0[6] = (-4564.852543981662); doubleArray0[7] = 503.840720452005; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-4564.852543981662)); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test41() throws Throwable { double[] doubleArray0 = new double[1]; doubleArray0[0] = 0.333; Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.333); eigenDecompositionImpl0.getV(); assertEquals(0.333, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test42() throws Throwable { double[] doubleArray0 = new double[20]; doubleArray0[2] = 0.9999999999999998; doubleArray0[3] = 0.9999999999999998; OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0); RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0); EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12); eigenDecompositionImpl0.getV(); assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01); }
public void test43() throws Throwable { double[] doubleArray0 = new double[5]; double[] doubleArray1 = new double[6]; EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, 0.0); RealMatrix realMatrix0 = eigenDecompositionImpl0.getV(); assertEquals(6, realMatrix0.getColumnDimension()); }
