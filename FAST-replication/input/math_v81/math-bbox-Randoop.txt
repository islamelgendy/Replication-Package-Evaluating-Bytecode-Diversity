public void test01() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test01"); double[] doubleArray1 = new double[] { 'a' }; double[] doubleArray3 = new double[] { 'a' }; double[][] doubleArray4 = new double[][] { doubleArray1, doubleArray3 }; org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray4); int int6 = realMatrix5.getRowDimension(); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl8 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 10); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.NonSquareMatrixException; message: a 2x1 matrix was provided instead of a square matrix"); } catch (org.apache.commons.math.linear.NonSquareMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[97.0]"); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0]"); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertNotNull(realMatrix5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2); }
public void test02() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test02"); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix2 = new org.apache.commons.math.linear.Array2DRowRealMatrix((int) '#', (int) (short) 1); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix5 = new org.apache.commons.math.linear.Array2DRowRealMatrix((int) '#', (int) (short) 1); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = array2DRowRealMatrix2.add(array2DRowRealMatrix5); org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(); org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAsin(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(); org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAsin(); org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector7.ebeDivide(realVector10); boolean boolean12 = array2DRowRealMatrix5.equals((java.lang.Object) realVector10); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl((org.apache.commons.math.linear.RealMatrix) array2DRowRealMatrix5, (double) (-1L)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.NonSquareMatrixException; message: a 35x1 matrix was provided instead of a square matrix"); } catch (org.apache.commons.math.linear.NonSquareMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(array2DRowRealMatrix6); org.junit.Assert.assertNotNull(realVector8); org.junit.Assert.assertNotNull(realVector10); org.junit.Assert.assertNotNull(realVector11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test03() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test03"); org.apache.commons.math.linear.ArrayRealVector arrayRealVector0 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray1 = arrayRealVector0.getData(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray3 = arrayRealVector2.getData(); org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector0.projection((org.apache.commons.math.linear.RealVector) arrayRealVector2); org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(); org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAcosToSelf(); org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapExp(); double double8 = arrayRealVector0.dotProduct(realVector7); double[] doubleArray9 = arrayRealVector0.getData(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray11 = arrayRealVector10.getData(); double double12 = arrayRealVector0.getLInfDistance(doubleArray11); org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray14 = arrayRealVector13.getData(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray16 = arrayRealVector15.getData(); org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector13.projection((org.apache.commons.math.linear.RealVector) arrayRealVector15); org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(); org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAcosToSelf(); org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExp(); double double21 = arrayRealVector13.dotProduct(realVector20); double[] doubleArray22 = arrayRealVector13.getData(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray24 = arrayRealVector23.getData(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray26 = arrayRealVector25.getData(); org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.projection((org.apache.commons.math.linear.RealVector) arrayRealVector25); org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(); org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAcosToSelf(); org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExp(); double double31 = arrayRealVector23.dotProduct(realVector30); org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.mapLog10(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray34 = arrayRealVector33.getData(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray36 = arrayRealVector35.getData(); org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.projection((org.apache.commons.math.linear.RealVector) arrayRealVector35); org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(); org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAcosToSelf(); org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExp(); double double41 = arrayRealVector33.dotProduct(realVector40); org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector23.ebeMultiply(realVector40); org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector13.ebeDivide(arrayRealVector23); double[] doubleArray44 = arrayRealVector13.data; // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl46 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray44, 0.0d); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]"); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]"); org.junit.Assert.assertNotNull(realVector4); org.junit.Assert.assertNotNull(realVector6); org.junit.Assert.assertNotNull(realVector7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]"); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]"); org.junit.Assert.assertNotNull(realVector17); org.junit.Assert.assertNotNull(realVector19); org.junit.Assert.assertNotNull(realVector20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]"); org.junit.Assert.assertNotNull(realVector27); org.junit.Assert.assertNotNull(realVector29); org.junit.Assert.assertNotNull(realVector30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(realVector32); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]"); org.junit.Assert.assertNotNull(realVector37); org.junit.Assert.assertNotNull(realVector39); org.junit.Assert.assertNotNull(realVector40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(realVector42); org.junit.Assert.assertNotNull(arrayRealVector43); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]"); }
public void test04() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test04"); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix2 = new org.apache.commons.math.linear.Array2DRowRealMatrix((int) '#', (int) (short) 1); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix5 = new org.apache.commons.math.linear.Array2DRowRealMatrix((int) '#', (int) (short) 1); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = array2DRowRealMatrix2.add(array2DRowRealMatrix5); org.apache.commons.math.linear.RealMatrix realMatrix7 = array2DRowRealMatrix2.transpose(); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl((org.apache.commons.math.linear.RealMatrix) array2DRowRealMatrix2, 10.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.NonSquareMatrixException; message: a 35x1 matrix was provided instead of a square matrix"); } catch (org.apache.commons.math.linear.NonSquareMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(array2DRowRealMatrix6); org.junit.Assert.assertNotNull(realMatrix7); }
public void test05() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test05"); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(1, (int) '#'); org.apache.commons.math.linear.RealVector realVector4 = array2DRowRealMatrix2.getColumnVector(2); org.apache.commons.math.linear.RealMatrix realMatrix6 = array2DRowRealMatrix2.getColumnMatrix(10); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl8 = new org.apache.commons.math.linear.EigenDecompositionImpl((org.apache.commons.math.linear.RealMatrix) array2DRowRealMatrix2, 100.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: no entry at indices (1, 0) in a 1x35 matrix"); } catch (org.apache.commons.math.linear.MatrixIndexException e) { // Expected exception. } org.junit.Assert.assertNotNull(realVector4); org.junit.Assert.assertNotNull(realMatrix6); }
public void test06() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test06"); double[] doubleArray1 = new double[] { 'a' }; double[] doubleArray3 = new double[] { 'a' }; double[][] doubleArray4 = new double[][] { doubleArray1, doubleArray3 }; org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray4); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.NonSquareMatrixException; message: a 2x1 matrix was provided instead of a square matrix"); } catch (org.apache.commons.math.linear.NonSquareMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[97.0]"); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0]"); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertNotNull(realMatrix5); }
public void test07() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test07"); org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector(0); org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray3 = arrayRealVector2.getData(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray5 = arrayRealVector4.getData(); org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.projection((org.apache.commons.math.linear.RealVector) arrayRealVector4); org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(); org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAcosToSelf(); org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExp(); double double10 = arrayRealVector2.dotProduct(realVector9); org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapFloorToSelf(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray13 = arrayRealVector12.getData(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray15 = arrayRealVector14.getData(); org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.projection((org.apache.commons.math.linear.RealVector) arrayRealVector14); org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(); org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAcosToSelf(); org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExp(); double double20 = arrayRealVector12.dotProduct(realVector19); double[] doubleArray21 = arrayRealVector12.getData(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray23 = arrayRealVector22.getData(); double double24 = arrayRealVector12.getLInfDistance(doubleArray23); org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector12.mapSinhToSelf(); double double26 = arrayRealVector12.getNorm(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(); org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAcosToSelf(); org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapExp(); org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector27.mapCoshToSelf(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray32 = arrayRealVector31.getData(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray34 = arrayRealVector33.getData(); org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector31.projection((org.apache.commons.math.linear.RealVector) arrayRealVector33); org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = arrayRealVector27.append(arrayRealVector31); org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(); org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAcosToSelf(); org.apache.commons.math.linear.RealVector realVector39 = realVector38.mapCbrtToSelf(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray41 = arrayRealVector40.getData(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray43 = arrayRealVector42.getData(); org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector40.projection((org.apache.commons.math.linear.RealVector) arrayRealVector42); org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(); org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAcosToSelf(); org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapExp(); double double48 = arrayRealVector40.dotProduct(realVector47); double[] doubleArray49 = arrayRealVector40.getData(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray51 = arrayRealVector50.getData(); double double52 = arrayRealVector40.getLInfDistance(doubleArray51); org.apache.commons.math.linear.RealVector realVector53 = realVector38.append(doubleArray51); org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36, doubleArray51); org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector12.ebeDivide(doubleArray51); org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector2.add(doubleArray51); org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector1.ebeDivide(doubleArray51); org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(); org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAcosToSelf(); org.apache.commons.math.linear.RealVector realVector60 = realVector59.mapCbrtToSelf(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray62 = arrayRealVector61.getData(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray64 = arrayRealVector63.getData(); org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector61.projection((org.apache.commons.math.linear.RealVector) arrayRealVector63); org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(); org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAcosToSelf(); org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector66.mapExp(); double double69 = arrayRealVector61.dotProduct(realVector68); double[] doubleArray70 = arrayRealVector61.getData(); org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(); double[] doubleArray72 = arrayRealVector71.getData(); double double73 = arrayRealVector61.getLInfDistance(doubleArray72); org.apache.commons.math.linear.RealVector realVector74 = realVector59.append(doubleArray72); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl76 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray51, doubleArray72, (double) (short) 100); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(realVector6); org.junit.Assert.assertNotNull(realVector8); org.junit.Assert.assertNotNull(realVector9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(realVector11); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertNotNull(realVector16); org.junit.Assert.assertNotNull(realVector18); org.junit.Assert.assertNotNull(realVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]"); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(realVector25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertNotNull(realVector28); org.junit.Assert.assertNotNull(realVector29); org.junit.Assert.assertNotNull(realVector30); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]"); org.junit.Assert.assertNotNull(realVector35); org.junit.Assert.assertNotNull(arrayRealVector36); org.junit.Assert.assertNotNull(realVector38); org.junit.Assert.assertNotNull(realVector39); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]"); org.junit.Assert.assertNotNull(realVector44); org.junit.Assert.assertNotNull(realVector46); org.junit.Assert.assertNotNull(realVector47); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]"); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertNotNull(realVector53); org.junit.Assert.assertNotNull(realVector55); org.junit.Assert.assertNotNull(realVector56); org.junit.Assert.assertNotNull(realVector57); org.junit.Assert.assertNotNull(realVector59); org.junit.Assert.assertNotNull(realVector60); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]"); org.junit.Assert.assertNotNull(realVector65); org.junit.Assert.assertNotNull(realVector67); org.junit.Assert.assertNotNull(realVector68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(doubleArray70); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]"); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d); org.junit.Assert.assertNotNull(realVector74); }
public void test08() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test08"); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix2 = new org.apache.commons.math.linear.Array2DRowRealMatrix((int) '#', (int) (short) 1); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix5 = new org.apache.commons.math.linear.Array2DRowRealMatrix((int) '#', (int) (short) 1); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = array2DRowRealMatrix2.add(array2DRowRealMatrix5); int int7 = array2DRowRealMatrix2.getColumnDimension(); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix10 = new org.apache.commons.math.linear.Array2DRowRealMatrix((int) '#', (int) (short) 1); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix13 = new org.apache.commons.math.linear.Array2DRowRealMatrix((int) '#', (int) (short) 1); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix14 = array2DRowRealMatrix10.add(array2DRowRealMatrix13); int int15 = array2DRowRealMatrix10.getColumnDimension(); org.apache.commons.math.linear.RealMatrix realMatrix16 = array2DRowRealMatrix10.copy(); org.apache.commons.math.linear.RealVector realVector18 = array2DRowRealMatrix10.getRowVector(0); org.apache.commons.math.linear.RealMatrix realMatrix19 = array2DRowRealMatrix2.add((org.apache.commons.math.linear.RealMatrix) array2DRowRealMatrix10); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, 100.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.NonSquareMatrixException; message: a 35x1 matrix was provided instead of a square matrix"); } catch (org.apache.commons.math.linear.NonSquareMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(array2DRowRealMatrix6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertNotNull(array2DRowRealMatrix14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertNotNull(realMatrix16); org.junit.Assert.assertNotNull(realVector18); org.junit.Assert.assertNotNull(realMatrix19); }
public void test09() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test09"); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix2 = new org.apache.commons.math.linear.Array2DRowRealMatrix((int) '#', (int) (short) 1); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix5 = new org.apache.commons.math.linear.Array2DRowRealMatrix((int) '#', (int) (short) 1); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = array2DRowRealMatrix2.add(array2DRowRealMatrix5); int int7 = array2DRowRealMatrix5.getRowDimension(); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl((org.apache.commons.math.linear.RealMatrix) array2DRowRealMatrix5, 0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.NonSquareMatrixException; message: a 35x1 matrix was provided instead of a square matrix"); } catch (org.apache.commons.math.linear.NonSquareMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(array2DRowRealMatrix6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35); }
public void test10() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test10"); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix2 = new org.apache.commons.math.linear.Array2DRowRealMatrix((int) '#', (int) (short) 1); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix5 = new org.apache.commons.math.linear.Array2DRowRealMatrix((int) '#', (int) (short) 1); org.apache.commons.math.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = array2DRowRealMatrix2.add(array2DRowRealMatrix5); org.apache.commons.math.linear.RealMatrix realMatrix7 = array2DRowRealMatrix2.transpose(); org.apache.commons.math.linear.RealMatrix realMatrix8 = array2DRowRealMatrix2.copy(); org.apache.commons.math.linear.RealMatrix realMatrix9 = array2DRowRealMatrix2.transpose(); // The following exception was thrown during execution in test generation try { org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl((org.apache.commons.math.linear.RealMatrix) array2DRowRealMatrix2, (double) (short) 0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.NonSquareMatrixException; message: a 35x1 matrix was provided instead of a square matrix"); } catch (org.apache.commons.math.linear.NonSquareMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(array2DRowRealMatrix6); org.junit.Assert.assertNotNull(realMatrix7); org.junit.Assert.assertNotNull(realMatrix8); org.junit.Assert.assertNotNull(realMatrix9); }
