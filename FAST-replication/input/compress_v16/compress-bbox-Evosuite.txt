public void test00() throws Throwable { ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); try { archiveStreamFactory0.createArchiveInputStream("zip", (InputStream) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e); } }
public void test01() throws Throwable { byte[] byteArray0 = new byte[172]; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0); ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("zip", (InputStream) byteArrayInputStream0); assertEquals(0L, archiveInputStream0.getBytesRead()); }
public void test02() throws Throwable { byte[] byteArray0 = new byte[0]; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0); ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); try { archiveStreamFactory0.createArchiveInputStream((String) null, (InputStream) byteArrayInputStream0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e); } }
public void test03() throws Throwable { ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); byte[] byteArray0 = new byte[12]; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0); ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("ar", (InputStream) byteArrayInputStream0); assertEquals(0, archiveInputStream0.getCount()); }
public void test04() throws Throwable { byte[] byteArray0 = new byte[85]; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0); ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("cpio", (InputStream) byteArrayInputStream0); assertEquals(0L, archiveInputStream0.getBytesRead()); }
public void test05() throws Throwable { byte[] byteArray0 = new byte[250]; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0); ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("tar", (InputStream) byteArrayInputStream0); assertEquals(0, archiveInputStream0.available()); }
public void test06() throws Throwable { byte[] byteArray0 = new byte[1]; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0); ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("jar", (InputStream) byteArrayInputStream0); assertEquals(0, archiveInputStream0.getCount()); }
public void test07() throws Throwable { ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); PipedInputStream pipedInputStream0 = new PipedInputStream(); try { archiveStreamFactory0.createArchiveInputStream("dump", (InputStream) pipedInputStream0); fail("Expecting exception: Exception"); } catch(Exception e) { verifyException("org.apache.commons.compress.archivers.dump.DumpArchiveInputStream", e); } }
public void test08() throws Throwable { ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); PipedInputStream pipedInputStream0 = new PipedInputStream(); try { archiveStreamFactory0.createArchiveInputStream("", (InputStream) pipedInputStream0); fail("Expecting exception: Exception"); } catch(Exception e) { verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e); } }
public void test09() throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream(); ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); try { archiveStreamFactory0.createArchiveOutputStream("ump", pipedOutputStream0); fail("Expecting exception: Exception"); } catch(Exception e) { verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e); } }
public void test10() throws Throwable { ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); PipedOutputStream pipedOutputStream0 = new PipedOutputStream(); try { archiveStreamFactory0.createArchiveOutputStream((String) null, pipedOutputStream0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e); } }
public void test11() throws Throwable { ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); try { archiveStreamFactory0.createArchiveOutputStream("dump", (OutputStream) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e); } }
public void test12() throws Throwable { ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null); ArchiveOutputStream archiveOutputStream0 = archiveStreamFactory0.createArchiveOutputStream("ar", dataOutputStream0); assertEquals(0L, archiveOutputStream0.getBytesWritten()); }
public void test13() throws Throwable { ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("zip"); ZipArchiveOutputStream zipArchiveOutputStream0 = (ZipArchiveOutputStream)archiveStreamFactory0.createArchiveOutputStream("zip", mockFileOutputStream0); assertEquals(8, ZipArchiveOutputStream.DEFLATED); }
public void test14() throws Throwable { PipedOutputStream pipedOutputStream0 = new PipedOutputStream(); ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); TarArchiveOutputStream tarArchiveOutputStream0 = (TarArchiveOutputStream)archiveStreamFactory0.createArchiveOutputStream("tar", pipedOutputStream0); assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX); }
public void test15() throws Throwable { ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); PipedOutputStream pipedOutputStream0 = new PipedOutputStream(); JarArchiveOutputStream jarArchiveOutputStream0 = (JarArchiveOutputStream)archiveStreamFactory0.createArchiveOutputStream("jar", pipedOutputStream0); assertFalse(jarArchiveOutputStream0.isSeekable()); }
public void test16() throws Throwable { ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); PipedOutputStream pipedOutputStream0 = new PipedOutputStream(); ArchiveOutputStream archiveOutputStream0 = archiveStreamFactory0.createArchiveOutputStream("cpio", pipedOutputStream0); assertEquals(0, archiveOutputStream0.getCount()); }
public void test17() throws Throwable { byte[] byteArray0 = new byte[85]; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0); ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); try { archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0); fail("Expecting exception: Exception"); } catch(Exception e) { verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e); } }
public void test18() throws Throwable { ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); try { archiveStreamFactory0.createArchiveInputStream((InputStream) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e); } }
public void test19() throws Throwable { ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); PipedInputStream pipedInputStream0 = new PipedInputStream(); try { archiveStreamFactory0.createArchiveInputStream((InputStream) pipedInputStream0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e); } }
public void test20() throws Throwable { byte[] byteArray0 = new byte[523]; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0); ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory(); try { archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0); fail("Expecting exception: Exception"); } catch(Exception e) { verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e); } }
