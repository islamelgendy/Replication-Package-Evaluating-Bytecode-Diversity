public void test001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test001"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream1 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream2 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream1); long long3 = jarArchiveInputStream2.getBytesRead(); long long4 = jarArchiveInputStream2.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream2); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream5, "00", true, false); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream10 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) arArchiveInputStream5); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); }
public void test002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test002"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream7); int int9 = cpioArchiveInputStream8.available(); int int10 = cpioArchiveInputStream8.getCount(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream11 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset -1.", (java.io.InputStream) cpioArchiveInputStream8); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset -1. not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test003"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); byte[] byteArray9 = null; try { tarArchiveOutputStream4.write(byteArray9); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test004"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); arArchiveInputStream6.count((long) 49152); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream9 = archiveStreamFactory0.createArchiveInputStream("00", (java.io.InputStream) arArchiveInputStream6); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: 00 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); }
public void test005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test005"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); byte[] byteArray14 = new byte[] { (byte) 120, (byte) 53, (byte) 83 }; boolean boolean17 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("", byteArray14, (int) (byte) 100, 0); try { tarArchiveOutputStream4.write(byteArray14, 0, (int) ' '); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '32' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(byteArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[120, 53, 83]"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); }
public void test006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test006"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); try { tarArchiveOutputStream4.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test007"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream1 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream2 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream1); long long3 = jarArchiveInputStream2.getBytesRead(); long long4 = jarArchiveInputStream2.getBytesRead(); org.apache.commons.compress.archivers.zip.ZipLong zipLong6 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray7 = zipLong6.getBytes(); int int10 = jarArchiveInputStream2.read(byteArray7, 0, 96); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream11 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) jarArchiveInputStream2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertNotNull(byteArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); }
public void test008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test008"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream16 = archiveStreamFactory0.createArchiveInputStream("always", (java.io.InputStream) arArchiveInputStream14); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: always not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); }
public void test009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test009"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); try { archiveOutputStream8.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test010"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.File file9 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry11 = tarArchiveOutputStream4.createArchiveEntry(file9, "UTF8"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test011"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream9 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream9); long long11 = jarArchiveInputStream10.getBytesRead(); long long12 = jarArchiveInputStream10.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream13 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream10); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream15 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream14); int int16 = cpioArchiveInputStream15.read(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream17 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) cpioArchiveInputStream15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); }
public void test012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test012"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); try { org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream11 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) archiveOutputStream8, (int) (byte) 76, "-    0 jar"); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: -    0 jar"); } catch (java.nio.charset.IllegalCharsetNameException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test013"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); try { tarArchiveOutputStream10.close(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '10240' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test014"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream1 = null; try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream2 = archiveStreamFactory0.createArchiveInputStream(inputStream1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Stream must not be null."); } catch (java.lang.IllegalArgumentException e) { } }
public void test015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test015"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); try { tarArchiveOutputStream4.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test016"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream9 = null; try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream10 = archiveStreamFactory0.createArchiveInputStream(inputStream9); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Stream must not be null."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test017"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); tarArchiveOutputStream12.count(0L); long long15 = tarArchiveOutputStream12.getBytesWritten(); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream16 = archiveStreamFactory0.createArchiveOutputStream("-    3 jar", (java.io.OutputStream) tarArchiveOutputStream12); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: -    3 jar not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); }
public void test018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test018"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream3 = archiveStreamFactory0.createArchiveOutputStream("ZipLong value: 0", outputStream2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: OutputStream must not be null."); } catch (java.lang.IllegalArgumentException e) { } }
public void test019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test019"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream18 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream15, (int) (byte) 53, (int) (short) -1); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream18, 40960, "jar"); java.io.InputStream inputStream22 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream23 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream22); long long24 = jarArchiveInputStream23.getBytesRead(); long long25 = jarArchiveInputStream23.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream26 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream23); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream27 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream23); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream28 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream27); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream32 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream28, "070702", false, false); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry35 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry35.setDevMinor((int) ' '); boolean boolean38 = cpioArchiveInputStream28.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry35); boolean boolean39 = tarArchiveInputStream18.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry35); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream40 = archiveStreamFactory0.createArchiveInputStream("\000\000\000\000", (java.io.InputStream) tarArchiveInputStream18); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); }
public void test020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test020"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream9 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream9); long long11 = jarArchiveInputStream10.getBytesRead(); long long12 = jarArchiveInputStream10.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream13 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream10); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream15 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream14); int int16 = cpioArchiveInputStream15.available(); int int17 = cpioArchiveInputStream15.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry19 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); tarArchiveEntry19.setMode((int) (short) 10); java.util.Date date22 = tarArchiveEntry19.getLastModifiedDate(); tarArchiveEntry19.setMode((int) (byte) 120); java.util.Date date25 = tarArchiveEntry19.getModTime(); tarArchiveEntry19.setNames("hi!", "UTF8"); boolean boolean29 = tarArchiveEntry19.isFIFO(); boolean boolean30 = cpioArchiveInputStream15.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry19); cpioArchiveInputStream15.close(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream32 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) cpioArchiveInputStream15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(date22); org.junit.Assert.assertNotNull(date25); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); }
public void test021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test021"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); java.io.InputStream inputStream11 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream11); long long13 = jarArchiveInputStream12.getBytesRead(); long long14 = jarArchiveInputStream12.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream12); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream15, "00", true, false); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry21 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int22 = tarArchiveEntry21.getDevMinor(); tarArchiveEntry21.setIds((int) (short) 3, 0); int int26 = tarArchiveEntry21.getDevMajor(); boolean boolean27 = tarArchiveEntry21.isFile(); java.io.InputStream inputStream28 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream29 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream28); long long30 = jarArchiveInputStream29.getBytesRead(); long long31 = jarArchiveInputStream29.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream32 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream29); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream33 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream29); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream34 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream33); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream34, "070702", false, false); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry41 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry41.setDevMinor((int) ' '); boolean boolean44 = cpioArchiveInputStream34.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry41); boolean boolean45 = tarArchiveEntry21.equals((java.lang.Object) tarArchiveEntry41); boolean boolean46 = tarArchiveEntry41.isExtended(); tarArchiveEntry41.setIds(32, 29127); boolean boolean50 = tarArchiveEntry41.isExtended(); boolean boolean51 = zipArchiveInputStream19.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry41); try { tarArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry41); org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar"); } catch (java.io.UnsupportedEncodingException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true); org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); }
public void test022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test022"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream7 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream6); arArchiveInputStream7.close(); arArchiveInputStream7.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream11 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream7, 64); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream12 = archiveStreamFactory0.createArchiveInputStream("\000\000\000\000", (java.io.InputStream) arArchiveInputStream7); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); }
public void test023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test023"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); java.io.File file10 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry12 = cpioArchiveOutputStream9.createArchiveEntry(file10, "070701"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test024"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true); byte[] byteArray16 = new byte[] { (byte) 120, (byte) 53, (byte) 83 }; boolean boolean19 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("", byteArray16, (int) (byte) 100, 0); boolean boolean21 = org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byteArray16, (int) (byte) 0); java.lang.String str22 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byteArray16); try { tarArchiveOutputStream4.write(byteArray16, 29127, (int) (short) 2); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '2' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[120, 53, 83]"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "x5S" + "'", str22, "x5S"); }
public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry10 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int11 = tarArchiveEntry10.getDevMinor(); tarArchiveEntry10.setIds((int) (short) 3, 0); long long15 = tarArchiveEntry10.getSize(); try { tarArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry10); org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar"); } catch (java.io.UnsupportedEncodingException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); }
public void test026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test026"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream1 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream2 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream1); long long3 = jarArchiveInputStream2.getBytesRead(); long long4 = jarArchiveInputStream2.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream2); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream2); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream9 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream6, (int) (byte) 53, (int) (short) -1); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream9, 40960, "jar"); int int13 = tarArchiveInputStream12.available(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream14 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); }
public void test027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test027"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream9 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream9); long long11 = jarArchiveInputStream10.getBytesRead(); long long12 = jarArchiveInputStream10.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream13 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream10); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream15 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream14); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream15, "070702", false, false); long long21 = cpioArchiveInputStream15.skip(162L); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream23 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream15, 40960); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream24 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) cpioArchiveInputStream15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L); }
public void test028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test028"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); java.io.InputStream inputStream19 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream20 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream19); long long21 = jarArchiveInputStream20.getBytesRead(); long long22 = jarArchiveInputStream20.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream23 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream20); jarArchiveInputStream20.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry25 = jarArchiveInputStream20.getNextEntry(); jarArchiveInputStream20.mark(96); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream28 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) jarArchiveInputStream20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L); org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L); org.junit.Assert.assertNull(archiveEntry25); }
public void test029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test029"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream3 = archiveStreamFactory0.createArchiveInputStream("data descriptor", inputStream2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: InputStream must not be null."); } catch (java.lang.IllegalArgumentException e) { } }
public void test030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test030"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream15); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16, "070702", false, false); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry23.setDevMinor((int) ' '); boolean boolean26 = cpioArchiveInputStream16.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry23); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16, 0, "dump"); int int30 = tarArchiveInputStream29.available(); byte[] byteArray35 = new byte[] { (byte) 120, (byte) 53, (byte) 83 }; boolean boolean38 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("", byteArray35, (int) (byte) 100, 0); boolean boolean40 = org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byteArray35, (int) (byte) 0); int int43 = tarArchiveInputStream29.read(byteArray35, (int) (short) 2, 12); try { tarArchiveOutputStream4.write(byteArray35, 3, (int) (short) 1); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '1' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertNotNull(byteArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[120, 53, 83]"); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1)); }
public void test031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test031"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); java.io.InputStream inputStream20 = null; org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream20); org.apache.commons.compress.archivers.zip.ZipLong zipLong23 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray24 = zipLong23.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong26 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray27 = zipLong26.getBytes(); boolean boolean29 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray24, byteArray27, true); int int32 = tarArchiveInputStream21.read(byteArray24, 0, 32); tarArchiveInputStream21.mark((int) '#'); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream35 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream21); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream36 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.dump.DumpArchiveException: 00", (java.io.InputStream) tarArchiveInputStream21); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.dump.DumpArchiveException: 00 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertNotNull(byteArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1)); }
public void test032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test032"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream2); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy6 = null; zipArchiveOutputStream5.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy6); boolean boolean8 = zipArchiveOutputStream5.isSeekable(); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream9 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.ArchiveException: \000", (java.io.OutputStream) zipArchiveOutputStream5); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException: ? not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test033"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); try { cpioArchiveOutputStream9.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Trying to close non-existent entry"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test034"); java.io.OutputStream outputStream0 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream2 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream0); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy4 = null; zipArchiveOutputStream3.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy4); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory6 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream8 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream8, "jar"); tarArchiveOutputStream10.count(0L); long long13 = tarArchiveOutputStream10.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream14 = archiveStreamFactory6.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream10); int int15 = tarArchiveOutputStream10.getCount(); int int16 = tarArchiveOutputStream10.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong18 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray19 = zipLong18.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong21 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray22 = zipLong21.getBytes(); boolean boolean24 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray19, byteArray22, true); boolean boolean25 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray19); tarArchiveOutputStream10.write(byteArray19, (int) (short) 4, (int) (byte) -1); try { zipArchiveOutputStream3.write(byteArray19, 8, 12); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(byteArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); }
public void test035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test035"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); tarArchiveOutputStream4.setLongFileMode((int) '4'); try { org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream13 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, (int) (byte) 55, "org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 103."); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 103."); } catch (java.nio.charset.IllegalCharsetNameException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test036"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18, (int) (byte) 83, 263); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream23 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream22); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream24 = archiveStreamFactory0.createArchiveInputStream("", (java.io.InputStream) tarArchiveInputStream22); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); }
public void test037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test037"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); try { tarArchiveOutputStream4.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); }
public void test038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test038"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); try { tarArchiveOutputStream4.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test039"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); java.io.InputStream inputStream23 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream23); long long25 = jarArchiveInputStream24.getBytesRead(); long long26 = jarArchiveInputStream24.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream27 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream24); arArchiveInputStream27.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream27); org.apache.commons.compress.archivers.zip.ZipLong zipLong31 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray32 = zipLong31.getBytes(); long long33 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray32); int int36 = tarArchiveInputStream29.read(byteArray32, 0, (int) (short) 0); boolean boolean38 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray32, (int) (short) -1); org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding42 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("UTF8"); boolean boolean44 = zipEncoding42.canEncode("00"); java.lang.String str45 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray32, 8, 0, zipEncoding42); java.nio.ByteBuffer byteBuffer47 = zipEncoding42.encode("\001\ufffdX"); try { org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry48 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray13, zipEncoding42); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 99"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertNotNull(byteArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L); org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1)); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(zipEncoding42); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, ""); org.junit.Assert.assertNotNull(byteBuffer47); }
public void test040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test040"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream16 = null; org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream17 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream16); int int18 = cpioArchiveInputStream17.available(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream19 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) cpioArchiveInputStream17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); }
public void test041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test041"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.OutputStream outputStream27 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream27); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy31 = null; zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy31); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream33 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream30); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode34 = null; zipArchiveOutputStream30.setUseZip64(zip64Mode34); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream36 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.ArchiveException: ustar\000", (java.io.OutputStream) zipArchiveOutputStream30); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException: ustar? not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); }
public void test042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test042"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); try { cpioArchiveOutputStream9.close(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '6' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test043"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); arArchiveInputStream14.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream16 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream14); org.apache.commons.compress.archivers.zip.ZipLong zipLong18 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray19 = zipLong18.getBytes(); long long20 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray19); int int23 = tarArchiveInputStream16.read(byteArray19, 0, (int) (short) 0); boolean boolean25 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray19, (int) (short) -1); org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding29 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("UTF8"); boolean boolean31 = zipEncoding29.canEncode("00"); java.lang.String str32 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray19, 8, 0, zipEncoding29); boolean boolean34 = zipEncoding29.canEncode("dump"); java.io.InputStream inputStream35 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream36 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream35); long long37 = jarArchiveInputStream36.getBytesRead(); long long38 = jarArchiveInputStream36.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream39 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream36); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream43 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream39, "00", true, false); int int44 = arArchiveInputStream39.getCount(); java.io.InputStream inputStream45 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45); long long47 = jarArchiveInputStream46.getBytesRead(); long long48 = jarArchiveInputStream46.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); arArchiveInputStream49.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream51 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream49); org.apache.commons.compress.archivers.zip.ZipLong zipLong53 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray54 = zipLong53.getBytes(); long long55 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray54); int int58 = tarArchiveInputStream51.read(byteArray54, 0, (int) (short) 0); boolean boolean59 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray54); long long60 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray54); long long61 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray54); int int64 = arArchiveInputStream39.read(byteArray54, 8, 16877); java.lang.String str65 = zipEncoding29.decode(byteArray54); org.apache.commons.compress.archivers.zip.ZipLong zipLong67 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray54, 0); try { cpioArchiveOutputStream9.write(byteArray54, (int) (byte) 100, 10); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null"); } catch (java.lang.IndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(byteArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1)); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(zipEncoding29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, ""); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L); org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L); org.junit.Assert.assertNotNull(byteArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L); org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1)); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true); org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L); org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L); org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1)); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\000\000\000\000" + "'", str65, "\000\000\000\000"); }
public void test044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test044"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); try { arArchiveOutputStream10.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test045"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry25 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry25.setDevMinor((int) ' '); tarArchiveEntry25.setGroupName("\000\000"); long long30 = tarArchiveEntry25.getSize(); java.util.Date date31 = tarArchiveEntry25.getLastModifiedDate(); long long32 = tarArchiveEntry25.getSize(); try { tarArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry25); org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar"); } catch (java.io.UnsupportedEncodingException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L); org.junit.Assert.assertNotNull(date31); org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L); }
public void test046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test046"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); int int11 = tarArchiveOutputStream10.getRecordSize(); try { tarArchiveOutputStream10.flush(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 512 + "'", int11 == 512); }
public void test047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test047"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); try { tarArchiveOutputStream4.finish(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test048"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); try { org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray13); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 99"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); }
public void test049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test049"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true); try { tarArchiveOutputStream4.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); }
public void test050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test050"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); java.io.InputStream inputStream25 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream26 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream25); long long27 = jarArchiveInputStream26.getBytesRead(); long long28 = jarArchiveInputStream26.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream29 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream26); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream30 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream26); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream31 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream30); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream35 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream31, "070702", false, false); int int36 = zipArchiveInputStream35.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream39 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream35, (int) (short) 12, "always"); tarArchiveInputStream39.reset(); byte[] byteArray42 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes((long) 1000); byte[] byteArray49 = new byte[] { (byte) 120, (byte) 53, (byte) 83 }; boolean boolean52 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("", byteArray49, (int) (byte) 100, 0); boolean boolean54 = org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byteArray49, (int) (byte) 0); long long55 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray49); long long56 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray49); boolean boolean60 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray42, (int) (short) 100, 8192, byteArray49, (int) '4', 0, false); boolean boolean62 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray49, (int) (short) 3); int int65 = tarArchiveInputStream39.read(byteArray49, 1, 2); byte[] byteArray67 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes((long) (short) 4); boolean boolean69 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray49, byteArray67, true); try { boolean boolean72 = org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byteArray13, 504, (int) (byte) 49, byteArray67, (int) (short) 2, (int) (short) 0); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 504"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(byteArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-24, 3, 0, 0]"); org.junit.Assert.assertNotNull(byteArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[120, 53, 83]"); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + long55 + "' != '" + 256L + "'", long55 == 256L); org.junit.Assert.assertTrue("'" + long56 + "' != '" + 256L + "'", long56 == 256L); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1)); org.junit.Assert.assertNotNull(byteArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[4, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); }
public void test051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test051"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); tarArchiveOutputStream4.setLongFileMode((int) '4'); long long11 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int14 = tarArchiveEntry13.getDevMinor(); tarArchiveEntry13.setUserId(0); tarArchiveEntry13.setUserName("cpio"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry21 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry21.setName(""); java.lang.String str24 = tarArchiveEntry21.getName(); boolean boolean25 = tarArchiveEntry13.isDescendent(tarArchiveEntry21); try { tarArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry21); org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar"); } catch (java.io.UnsupportedEncodingException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); }
public void test052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test052"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.InputStream inputStream26 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream27 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream26); long long28 = jarArchiveInputStream27.getBytesRead(); long long29 = jarArchiveInputStream27.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream30 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream27); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream27); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream31); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream36 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream32, "070702", false, false); long long38 = cpioArchiveInputStream32.skip(162L); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream32, 40960); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream41 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream40); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L); }
public void test053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test053"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); java.io.InputStream inputStream19 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream20 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream19); long long21 = jarArchiveInputStream20.getBytesRead(); long long22 = jarArchiveInputStream20.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream23 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream20); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream24 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream20); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream25 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream24); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream29 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream25, "070702", false, false); int int30 = zipArchiveInputStream29.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream33 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream29, (int) (short) 12, "always"); tarArchiveInputStream33.reset(); byte[] byteArray36 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes((long) 1000); byte[] byteArray43 = new byte[] { (byte) 120, (byte) 53, (byte) 83 }; boolean boolean46 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("", byteArray43, (int) (byte) 100, 0); boolean boolean48 = org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byteArray43, (int) (byte) 0); long long49 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray43); long long50 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray43); boolean boolean54 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray36, (int) (short) 100, 8192, byteArray43, (int) '4', 0, false); boolean boolean56 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray43, (int) (short) 3); int int59 = tarArchiveInputStream33.read(byteArray43, 1, 2); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream60 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L); org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertNotNull(byteArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-24, 3, 0, 0]"); org.junit.Assert.assertNotNull(byteArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[120, 53, 83]"); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + long49 + "' != '" + 256L + "'", long49 == 256L); org.junit.Assert.assertTrue("'" + long50 + "' != '" + 256L + "'", long50 == 256L); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1)); }
public void test054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test054"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory10 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream12 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream12, "jar"); tarArchiveOutputStream14.count(0L); long long17 = tarArchiveOutputStream14.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream18 = archiveStreamFactory10.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream14); long long19 = tarArchiveOutputStream14.getBytesWritten(); tarArchiveOutputStream14.setBigNumberMode(256); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("compression method", (java.io.OutputStream) tarArchiveOutputStream14); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: compression method not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream18); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); }
public void test055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test055"); java.io.OutputStream outputStream0 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream2 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream0); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy4 = null; zipArchiveOutputStream3.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy4); zipArchiveOutputStream3.setUseLanguageEncodingFlag(true); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream8 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream3); arArchiveOutputStream8.finish(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory12 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream14 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream16 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream14, "jar"); tarArchiveOutputStream16.count(0L); long long19 = tarArchiveOutputStream16.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream20 = archiveStreamFactory12.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream16); boolean boolean21 = tarArchiveEntry11.equals((java.lang.Object) "ar"); long long22 = tarArchiveEntry11.getSize(); tarArchiveEntry11.setDevMajor((int) (short) 10); try { arArchiveOutputStream8.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry11); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L); }
public void test056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test056"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); zipArchiveOutputStream13.setLevel(0); zipArchiveOutputStream13.setComment("org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 103."); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream23 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream24 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.ArchiveException: data descriptor", (java.io.OutputStream) jarArchiveOutputStream23); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException: data descriptor not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test057"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream19 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) archiveInputStream18); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); }
public void test058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test058"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.InputStream inputStream26 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream27 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream26); long long28 = jarArchiveInputStream27.getBytesRead(); long long29 = jarArchiveInputStream27.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream30 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream27); arArchiveInputStream30.close(); arArchiveInputStream30.pushedBackBytes((-1L)); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream34 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream30); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream35 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream30); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream36 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream35); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream40 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream35, "always", false, false); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream41 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream35); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream42 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) zipArchiveInputStream35); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); }
public void test059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test059"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true); java.io.File file12 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = tarArchiveOutputStream4.createArchiveEntry(file12, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test060"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); try { arArchiveOutputStream10.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test061"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory1 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream3 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream3, "jar"); tarArchiveOutputStream5.count(0L); long long8 = tarArchiveOutputStream5.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream9 = archiveStreamFactory1.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream5); int int10 = tarArchiveOutputStream5.getCount(); int int11 = tarArchiveOutputStream5.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong13 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray14 = zipLong13.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong16 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray17 = zipLong16.getBytes(); boolean boolean19 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray14, byteArray17, true); boolean boolean20 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray14); tarArchiveOutputStream5.write(byteArray14, (int) (short) 4, (int) (byte) -1); try { int int26 = org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes((long) (byte) 51, byteArray14, (int) (byte) 10, (int) (byte) 0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 51=63 will not fit in octal number buffer of length -2"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(byteArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); }
public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); java.io.OutputStream outputStream20 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream20, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream23 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream20); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy24 = null; zipArchiveOutputStream23.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy24); int int26 = zipArchiveOutputStream23.getCount(); java.lang.String str27 = zipArchiveOutputStream23.getEncoding(); zipArchiveOutputStream23.count(0); zipArchiveOutputStream23.setLevel((int) (byte) 1); java.io.OutputStream outputStream32 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream34 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream32, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream35 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream32); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy36 = null; zipArchiveOutputStream35.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy36); int int38 = zipArchiveOutputStream35.getCount(); zipArchiveOutputStream35.setEncoding("cpio"); zipArchiveOutputStream35.flush(); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy42 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS; java.lang.String str43 = unicodeExtraFieldPolicy42.toString(); zipArchiveOutputStream35.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy42); zipArchiveOutputStream23.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy42); zipArchiveOutputStream23.setFallbackToUTF8(true); boolean boolean48 = zipArchiveOutputStream23.isSeekable(); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream49 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.ArchiveException: data descriptor", (java.io.OutputStream) zipArchiveOutputStream23); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException: data descriptor not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTF8" + "'", str27, "UTF8"); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "always" + "'", str43, "always"); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); }
public void test063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test063"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); try { org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream10, "././@LongLink"); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ././@LongLink"); } catch (java.nio.charset.IllegalCharsetNameException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test064"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); java.io.OutputStream outputStream20 = null; try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream21 = archiveStreamFactory0.createArchiveOutputStream("PK\003\004", outputStream20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: OutputStream must not be null."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); }
public void test065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test065"); java.io.InputStream inputStream0 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream1 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream0); long long2 = jarArchiveInputStream1.getBytesRead(); long long3 = jarArchiveInputStream1.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream4 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream1); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream1); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = tarArchiveInputStream5.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry7 = tarArchiveInputStream5.getNextEntry(); tarArchiveInputStream5.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream12 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream5, "tar", true); org.apache.commons.compress.archivers.zip.ZipLong zipLong14 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray15 = zipLong14.getBytes(); long long16 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray15); boolean boolean18 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray15, (int) (short) 8); int int21 = tarArchiveInputStream5.read(byteArray15, 64, 8); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry22 = tarArchiveInputStream5.getNextTarEntry(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry24 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory25 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream27 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar"); tarArchiveOutputStream29.count(0L); long long32 = tarArchiveOutputStream29.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream33 = archiveStreamFactory25.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream29); boolean boolean34 = tarArchiveEntry24.equals((java.lang.Object) "ar"); long long35 = tarArchiveEntry24.getSize(); tarArchiveEntry24.setDevMajor((int) (short) 10); long long38 = tarArchiveEntry24.getRealSize(); tarArchiveEntry24.setSize((long) 2048); boolean boolean41 = tarArchiveInputStream5.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry24); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); org.junit.Assert.assertNull(archiveEntry6); org.junit.Assert.assertNull(archiveEntry7); org.junit.Assert.assertNotNull(byteArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertNull(tarArchiveEntry22); org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); }
public void test066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test066"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14); try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry17 = cpioArchiveInputStream16.getNextEntry(); org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null"); } catch (java.io.EOFException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); }
public void test067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test067"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.zip.ZipLong zipLong27 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray28 = zipLong27.getBytes(); long long29 = zipLong27.getValue(); java.io.InputStream inputStream30 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream31 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream30); long long32 = jarArchiveInputStream31.getBytesRead(); long long33 = jarArchiveInputStream31.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream34 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream31); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream35 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream31); boolean boolean36 = zipLong27.equals((java.lang.Object) jarArchiveInputStream31); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream37 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) jarArchiveInputStream31); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertNotNull(byteArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L); org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); }
public void test068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test068"); java.io.OutputStream outputStream0 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream2 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream0); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy4 = null; zipArchiveOutputStream3.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy4); boolean boolean6 = zipArchiveOutputStream3.isSeekable(); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode7 = null; zipArchiveOutputStream3.setUseZip64(zip64Mode7); zipArchiveOutputStream3.flush(); zipArchiveOutputStream3.setMethod(0); zipArchiveOutputStream3.setComment("org.apache.commons.compress.archivers.ArchiveException: \000"); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream3, 155); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry17 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int18 = tarArchiveEntry17.getDevMinor(); tarArchiveEntry17.setIds((int) (short) 3, 0); long long22 = tarArchiveEntry17.getSize(); tarArchiveEntry17.setSize((long) 8192); java.lang.String str25 = tarArchiveEntry17.getName(); boolean boolean26 = tarArchiveEntry17.isCheckSumOK(); boolean boolean27 = tarArchiveEntry17.isCharacterDevice(); boolean boolean28 = zipArchiveOutputStream3.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry17); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream3, 40960, (int) (short) 100); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream3); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry34 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory35 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream37 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream39 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream37, "jar"); tarArchiveOutputStream39.count(0L); long long42 = tarArchiveOutputStream39.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream43 = archiveStreamFactory35.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream39); boolean boolean44 = tarArchiveEntry34.equals((java.lang.Object) "ar"); long long45 = tarArchiveEntry34.getSize(); try { cpioArchiveOutputStream32.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry34); org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"); } catch (java.lang.ClassCastException e) { } org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "jar" + "'", str25, "jar"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L); }
public void test069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test069"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.OutputStream outputStream27 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream27); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy31 = null; zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy31); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream33 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream30); jarArchiveOutputStream33.count((int) (byte) 55); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream36 = archiveStreamFactory0.createArchiveOutputStream("\000\ufffd\000\000", (java.io.OutputStream) jarArchiveOutputStream33); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); }
public void test070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test070"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry26 = jarArchiveInputStream18.getNextEntry(); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertNull(archiveEntry26); }
public void test071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test071"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); java.io.OutputStream outputStream20 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream20, "jar"); int int23 = tarArchiveOutputStream22.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream24 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream22); tarArchiveOutputStream24.setAddPaxHeadersForNonAsciiNames(true); int int27 = tarArchiveOutputStream24.getCount(); tarArchiveOutputStream24.count(256); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream30 = archiveStreamFactory0.createArchiveOutputStream("ZipLong value: 8", (java.io.OutputStream) tarArchiveOutputStream24); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 8 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); }
public void test072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test072"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream2); org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray6 = zipLong5.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong8 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray9 = zipLong8.getBytes(); boolean boolean11 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray6, byteArray9, true); int int14 = tarArchiveInputStream3.read(byteArray6, 0, 32); tarArchiveInputStream3.mark((int) '#'); tarArchiveInputStream3.reset(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.ArchiveException: data descriptor", (java.io.InputStream) tarArchiveInputStream3); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException: data descriptor not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); }
public void test073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test073"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); try { tarArchiveOutputStream10.close(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '10240' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test074"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); java.io.File file10 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry12 = cpioArchiveOutputStream9.createArchiveEntry(file10, "\001\ufffdX"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test075"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.zip.ZipLong zipLong8 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray9 = zipLong8.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong11 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray12 = zipLong11.getBytes(); boolean boolean14 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray9, byteArray12, true); boolean boolean15 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray9); int int18 = jarArchiveInputStream3.read(byteArray9, (int) (byte) 10, 3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3, (int) (byte) 51, "x5S"); tarArchiveInputStream21.close(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream23 = archiveStreamFactory0.createArchiveInputStream("ZipLong value: 32", (java.io.InputStream) tarArchiveInputStream21); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 32 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNotNull(byteArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); }
public void test076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test076"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true); java.io.OutputStream outputStream25 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream27 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream25, "jar"); tarArchiveOutputStream27.count(0L); long long30 = tarArchiveOutputStream27.getBytesWritten(); tarArchiveOutputStream27.setAddPaxHeadersForNonAsciiNames(false); int int33 = tarArchiveOutputStream27.getRecordSize(); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream34 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream27); org.apache.commons.compress.archivers.zip.ZipLong zipLong36 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray37 = zipLong36.getBytes(); tarArchiveOutputStream27.write(byteArray37, (-1), 0); boolean boolean42 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray37, (int) 'a'); java.lang.String str43 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byteArray37); long long44 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray37); try { tarArchiveOutputStream4.write(byteArray37, (int) (byte) 51, (int) (byte) 100); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '100' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 512 + "'", int33 == 512); org.junit.Assert.assertNotNull(byteArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000\000\000\000" + "'", str43, "\000\000\000\000"); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); }
public void test077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test077"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode17 = null; zipArchiveOutputStream13.setUseZip64(zip64Mode17); int int19 = zipArchiveOutputStream13.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13, (int) ' '); zipArchiveOutputStream13.setUseLanguageEncodingFlag(true); boolean boolean24 = zipArchiveOutputStream13.isSeekable(); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream25 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.dump.DumpArchiveException: 00", (java.io.OutputStream) zipArchiveOutputStream13); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.dump.DumpArchiveException: 00 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); }
public void test078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test078"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream19 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) archiveInputStream18); long long21 = cpioArchiveInputStream19.skip(167851318L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L); }
public void test079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test079"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); tarArchiveOutputStream4.setLongFileMode((int) '4'); try { tarArchiveOutputStream4.write(36864); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '1' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test080"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.OutputStream outputStream17 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream19 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream17, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream17); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream17); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream23 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream17, 1000); tarArchiveOutputStream23.count(512); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry27 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int28 = tarArchiveEntry27.getDevMinor(); tarArchiveEntry27.setIds((int) (short) 3, 0); java.lang.String str32 = tarArchiveEntry27.getGroupName(); tarArchiveEntry27.setDevMinor(0); java.util.Date date35 = tarArchiveEntry27.getLastModifiedDate(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry38 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry38.setName(""); boolean boolean41 = tarArchiveEntry27.equals(tarArchiveEntry38); boolean boolean42 = tarArchiveEntry38.isDirectory(); java.lang.String str43 = tarArchiveEntry38.getName(); boolean boolean44 = tarArchiveOutputStream23.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry38); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream45 = archiveStreamFactory0.createArchiveOutputStream("ZipLong value: 167851318", (java.io.OutputStream) tarArchiveOutputStream23); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 167851318 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, ""); org.junit.Assert.assertNotNull(date35); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, ""); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); }
public void test081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test081"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); java.io.File file11 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry13 = tarArchiveOutputStream4.createArchiveEntry(file11, "ustar "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test082"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); int int16 = zipArchiveOutputStream13.getCount(); zipArchiveOutputStream13.count((long) (byte) 54); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13, 36864, (int) (short) 1, "cpio"); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream23 = archiveStreamFactory0.createArchiveOutputStream("-    3 jar", (java.io.OutputStream) zipArchiveOutputStream13); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: -    3 jar not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); }
public void test083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test083"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); try { jarArchiveOutputStream11.setLevel(155); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid compression level: 155"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test084"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); java.io.OutputStream outputStream13 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream13, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream13); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy17 = null; zipArchiveOutputStream16.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy17); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream19 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream16); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream19); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry22 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("encryption"); boolean boolean23 = tarArchiveEntry22.isLink(); java.io.File file24 = tarArchiveEntry22.getFile(); tarArchiveOutputStream19.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry22); try { jarArchiveOutputStream11.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry22); org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry"); } catch (java.lang.ClassCastException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNull(file24); }
public void test085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test085"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(4); java.io.File file13 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry15 = arArchiveOutputStream10.createArchiveEntry(file13, "x5S"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test086"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream11 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); byte[] byteArray12 = null; try { arArchiveOutputStream11.write(byteArray12, 8, (int) (byte) 120); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '120' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test087"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true); long long11 = tarArchiveOutputStream4.getBytesWritten(); tarArchiveOutputStream4.setLongFileMode(2048); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test088"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); tarArchiveEntry1.setDevMajor((int) (short) 10); long long15 = tarArchiveEntry1.getRealSize(); tarArchiveEntry1.setSize((long) 2048); long long18 = tarArchiveEntry1.getRealSize(); byte[] byteArray23 = new byte[] { (byte) 120, (byte) 53, (byte) 83 }; boolean boolean26 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("", byteArray23, (int) (byte) 100, 0); long long27 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray23); byte[] byteArray32 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean33 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray32); org.apache.commons.compress.archivers.zip.ZipLong zipLong34 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray32); byte[] byteArray35 = zipLong34.getBytes(); java.io.InputStream inputStream36 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream37 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream36); long long38 = jarArchiveInputStream37.getBytesRead(); long long39 = jarArchiveInputStream37.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream40 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream37); arArchiveInputStream40.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream42 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream40); org.apache.commons.compress.archivers.zip.ZipLong zipLong44 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray45 = zipLong44.getBytes(); long long46 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray45); int int49 = tarArchiveInputStream42.read(byteArray45, 0, (int) (short) 0); boolean boolean50 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray45); long long51 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray45); long long52 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray45); boolean boolean54 = org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byteArray45, (int) (byte) 100); boolean boolean55 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray35, byteArray45); boolean boolean56 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray23, byteArray35); org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding58 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("jar"); try { tarArchiveEntry1.writeEntryHeader(byteArray23, zipEncoding58, true); org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar"); } catch (java.io.UnsupportedEncodingException e) { } org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNotNull(byteArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[120, 53, 83]"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 256L + "'", long27 == 256L); org.junit.Assert.assertNotNull(byteArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(byteArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); org.junit.Assert.assertNotNull(byteArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L); org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1)); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L); org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(zipEncoding58); }
public void test089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test089"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(83); arArchiveOutputStream10.setLongFileMode(6); java.io.File file15 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry17 = arArchiveOutputStream10.createArchiveEntry(file15, "org.apache.commons.compress.archivers.zip.Zip64RequiredException: -  8192 jar"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test090"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); zipArchiveOutputStream9.setMethod(4); try { zipArchiveOutputStream9.finish(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '4' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test091"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); try { jarArchiveOutputStream11.setLevel(12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid compression level: 12"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test092"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory26 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream28 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream30 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream28, "jar"); tarArchiveOutputStream30.count(0L); long long33 = tarArchiveOutputStream30.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream34 = archiveStreamFactory26.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream30); java.io.InputStream inputStream36 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream37 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream36); long long38 = jarArchiveInputStream37.getBytesRead(); long long39 = jarArchiveInputStream37.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream40 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream37); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream41 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream40); arArchiveInputStream41.close(); arArchiveInputStream41.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream44 = archiveStreamFactory26.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream41); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream45 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) archiveInputStream44); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream46 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) cpioArchiveInputStream45); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream34); org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); org.junit.Assert.assertNotNull(archiveInputStream44); }
public void test093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test093"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); tarArchiveEntry1.setDevMajor((int) (short) 10); long long15 = tarArchiveEntry1.getRealSize(); int int16 = tarArchiveEntry1.getMode(); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 33188 + "'", int16 == 33188); }
public void test094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test094"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.InputStream inputStream27 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream28 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream27); long long29 = jarArchiveInputStream28.getBytesRead(); long long30 = jarArchiveInputStream28.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream31 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream28); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream32 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream28); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream35 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream32, (int) (byte) 53, (int) (short) -1); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream38 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream35, 40960, "jar"); int int39 = tarArchiveInputStream38.available(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry40 = tarArchiveInputStream38.getNextEntry(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry43 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); boolean boolean44 = tarArchiveEntry43.isGNUSparse(); java.lang.String str45 = tarArchiveEntry43.getLinkName(); tarArchiveEntry43.setNames("0\000", "jar"); java.lang.String str49 = tarArchiveEntry43.getName(); boolean boolean50 = tarArchiveInputStream38.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry43); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream52 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream38, 0); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream53 = archiveStreamFactory0.createArchiveInputStream("", (java.io.InputStream) tarArchiveInputStream52); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNull(archiveEntry40); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, ""); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); }
public void test095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test095"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.InputStream inputStream27 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream28 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream27); long long29 = jarArchiveInputStream28.getBytesRead(); long long30 = jarArchiveInputStream28.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream31 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream28); boolean boolean32 = arArchiveInputStream31.markSupported(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream34 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream31, 255); arArchiveInputStream31.close(); arArchiveInputStream31.close(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream37 = archiveStreamFactory0.createArchiveInputStream("x5S", (java.io.InputStream) arArchiveInputStream31); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: x5S not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); }
public void test096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test096"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); boolean boolean13 = tarArchiveEntry1.isFile(); tarArchiveEntry1.setGroupId(6); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); }
public void test097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test097"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream3 = archiveStreamFactory0.createArchiveInputStream("ustar\000", inputStream2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: InputStream must not be null."); } catch (java.lang.IllegalArgumentException e) { } }
public void test098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test098"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.OutputStream outputStream27 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream27); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy31 = null; zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy31); int int33 = zipArchiveOutputStream30.getCount(); java.lang.String str34 = zipArchiveOutputStream30.getEncoding(); zipArchiveOutputStream30.count((int) 'a'); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry38 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int39 = tarArchiveEntry38.getDevMinor(); tarArchiveEntry38.setUserId(0); java.io.File file42 = tarArchiveEntry38.getFile(); tarArchiveEntry38.setLinkName("org.apache.commons.compress.archivers.ArchiveException: \000"); boolean boolean45 = zipArchiveOutputStream30.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry38); zipArchiveOutputStream30.setUseLanguageEncodingFlag(true); java.lang.String str48 = zipArchiveOutputStream30.getEncoding(); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream49 = archiveStreamFactory0.createArchiveOutputStream("ZipLong value: 134695760", (java.io.OutputStream) zipArchiveOutputStream30); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 134695760 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTF8" + "'", str34, "UTF8"); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNull(file42); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTF8" + "'", str48, "UTF8"); }
public void test099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test099"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); java.io.InputStream inputStream20 = null; try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream21 = archiveStreamFactory0.createArchiveInputStream("not encodeable", inputStream20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: InputStream must not be null."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); }
public void test100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test100"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); long long10 = archiveOutputStream8.getBytesWritten(); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); }
public void test101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test101"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true); long long11 = tarArchiveOutputStream4.getBytesWritten(); try { tarArchiveOutputStream4.finish(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); }
public void test102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test102"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int19 = tarArchiveEntry18.getDevMinor(); tarArchiveEntry18.setIds((int) (short) 3, 0); boolean boolean23 = tarArchiveEntry18.isGNULongNameEntry(); tarArchiveEntry18.setGroupId(155); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry27 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int28 = tarArchiveEntry27.getDevMinor(); tarArchiveEntry27.setIds((int) (short) 3, 0); java.lang.String str32 = tarArchiveEntry27.getName(); boolean boolean33 = tarArchiveEntry18.equals(tarArchiveEntry27); java.io.OutputStream outputStream34 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream36 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream34, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream37 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream34); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy38 = null; zipArchiveOutputStream37.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy38); zipArchiveOutputStream37.setUseLanguageEncodingFlag(true); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode42 = null; zipArchiveOutputStream37.setUseZip64(zip64Mode42); boolean boolean44 = tarArchiveEntry18.equals((java.lang.Object) zipArchiveOutputStream37); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream45 = archiveStreamFactory0.createArchiveOutputStream("ZipLong value: 32", (java.io.OutputStream) zipArchiveOutputStream37); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 32 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "jar" + "'", str32, "jar"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); }
public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.OutputStream outputStream27 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream27); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy31 = null; zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy31); int int33 = zipArchiveOutputStream30.getCount(); java.lang.String str34 = zipArchiveOutputStream30.getEncoding(); zipArchiveOutputStream30.count(0); zipArchiveOutputStream30.setLevel((int) (byte) 1); java.io.OutputStream outputStream39 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream41 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream39, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream42 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream39); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy43 = null; zipArchiveOutputStream42.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy43); int int45 = zipArchiveOutputStream42.getCount(); zipArchiveOutputStream42.setEncoding("cpio"); zipArchiveOutputStream42.flush(); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy49 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS; java.lang.String str50 = unicodeExtraFieldPolicy49.toString(); zipArchiveOutputStream42.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy49); zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy49); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream53 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.zip.Zip64RequiredException: -  8192 jar", (java.io.OutputStream) zipArchiveOutputStream30); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.zip.Zip64RequiredException: -  8192 jar not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTF8" + "'", str34, "UTF8"); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "always" + "'", str50, "always"); }
public void test104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test104"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry15 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("ar", (byte) 49); try { jarArchiveOutputStream11.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry15); org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry"); } catch (java.lang.ClassCastException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test105"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(4); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int15 = tarArchiveEntry14.getDevMinor(); tarArchiveEntry14.setIds((int) (short) 3, 0); long long19 = tarArchiveEntry14.getSize(); tarArchiveEntry14.setSize((long) (short) 3); java.lang.String str22 = org.apache.commons.compress.utils.ArchiveUtils.toString((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry14); boolean boolean23 = tarArchiveEntry14.isGNULongNameEntry(); tarArchiveEntry14.setSize((long) (byte) 76); try { arArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry14); org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.ar.ArArchiveEntry"); } catch (java.lang.ClassCastException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-    3 jar" + "'", str22, "-    3 jar"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); }
public void test106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test106"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); tarArchiveOutputStream4.setLongFileMode((int) '4'); try { tarArchiveOutputStream4.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.OutputStream outputStream27 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar"); int int30 = tarArchiveOutputStream29.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream29); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream34 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream29, 128, "tar"); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream36 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream34, "jar"); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream37 = archiveStreamFactory0.createArchiveOutputStream("070701", (java.io.OutputStream) tarArchiveOutputStream36); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: 070701 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); }
public void test108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test108"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); jarArchiveOutputStream12.setEncoding("5"); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode15 = null; jarArchiveOutputStream12.setUseZip64(zip64Mode15); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); tarArchiveEntry18.setMode((int) (short) 10); java.util.Date date21 = tarArchiveEntry18.getLastModifiedDate(); tarArchiveEntry18.setMode((int) (byte) 120); tarArchiveEntry18.setLinkName(""); tarArchiveEntry18.setUserId(0); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry29 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int30 = tarArchiveEntry29.getDevMinor(); tarArchiveEntry29.setIds((int) (short) 3, 0); boolean boolean34 = tarArchiveEntry29.isGNULongNameEntry(); tarArchiveEntry29.setGroupId(155); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry38 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int39 = tarArchiveEntry38.getDevMinor(); tarArchiveEntry38.setIds((int) (short) 3, 0); java.lang.String str43 = tarArchiveEntry38.getName(); boolean boolean44 = tarArchiveEntry29.equals(tarArchiveEntry38); tarArchiveEntry38.setMode(100); java.io.OutputStream outputStream47 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream49 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream47, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream50 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream47); zipArchiveOutputStream50.setUseLanguageEncodingFlag(true); zipArchiveOutputStream50.count((long) (short) 2); java.io.OutputStream outputStream55 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream57 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream55, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream58 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream55); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy59 = null; zipArchiveOutputStream58.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy59); int int61 = zipArchiveOutputStream58.getCount(); java.lang.String str62 = zipArchiveOutputStream58.getEncoding(); zipArchiveOutputStream58.count(0); zipArchiveOutputStream58.setLevel((int) (byte) 1); java.io.OutputStream outputStream67 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream69 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream67, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream70 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream67); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy71 = null; zipArchiveOutputStream70.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy71); int int73 = zipArchiveOutputStream70.getCount(); zipArchiveOutputStream70.setEncoding("cpio"); zipArchiveOutputStream70.flush(); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy77 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS; java.lang.String str78 = unicodeExtraFieldPolicy77.toString(); zipArchiveOutputStream70.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy77); zipArchiveOutputStream58.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy77); zipArchiveOutputStream50.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy77); boolean boolean82 = tarArchiveEntry38.equals((java.lang.Object) unicodeExtraFieldPolicy77); boolean boolean83 = tarArchiveEntry18.isDescendent(tarArchiveEntry38); try { jarArchiveOutputStream12.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry38); org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry"); } catch (java.lang.ClassCastException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(date21); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "jar" + "'", str43, "jar"); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "UTF8" + "'", str62, "UTF8"); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0); org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy77); org.junit.Assert.assertEquals("'" + str78 + "' != '" + "always" + "'", str78, "always"); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true); }
public void test109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test109"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); try { arArchiveOutputStream10.finish(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: This archive has already been finished"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test110"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory1 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream3 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream3, "jar"); tarArchiveOutputStream5.count(0L); long long8 = tarArchiveOutputStream5.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream9 = archiveStreamFactory1.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream5); int int10 = tarArchiveOutputStream5.getCount(); int int11 = tarArchiveOutputStream5.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong13 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray14 = zipLong13.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong16 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray17 = zipLong16.getBytes(); boolean boolean19 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray14, byteArray17, true); boolean boolean20 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray14); tarArchiveOutputStream5.write(byteArray14, (int) (short) 4, (int) (byte) -1); try { int int26 = org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes((long) 1024, byteArray14, 8192, (int) 'a'); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8287"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(byteArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); }
public void test111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test111"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); try { org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, (short) (byte) 55); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown format: 55"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test112"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream15); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16, "070702", false, false); int int21 = cpioArchiveInputStream16.available(); int int22 = cpioArchiveInputStream16.available(); cpioArchiveInputStream16.pushedBackBytes(8192L); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.zip.Zip64RequiredException: 070707", (java.io.InputStream) cpioArchiveInputStream16); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.zip.Zip64RequiredException: 070707 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1); }
public void test113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test113"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry15 = null; boolean boolean16 = tarArchiveInputStream7.canReadEntryData(archiveEntry15); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream17 = archiveStreamFactory0.createArchiveInputStream("././@LongLink", (java.io.InputStream) tarArchiveInputStream7); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ././@LongLink not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test114"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); int int11 = tarArchiveOutputStream4.getCount(); java.io.File file12 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = tarArchiveOutputStream4.createArchiveEntry(file12, "-    0 070701"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test115"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); java.io.OutputStream outputStream20 = null; try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream21 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!!", outputStream20); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: OutputStream must not be null."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); }
public void test116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test116"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(false); try { org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream28 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, (short) (byte) 120); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown format: 120"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); }
public void test117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test117"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream10); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int14 = tarArchiveEntry13.getDevMinor(); tarArchiveEntry13.setIds((int) (short) 3, 0); int int18 = tarArchiveEntry13.getDevMajor(); boolean boolean19 = tarArchiveEntry13.isFile(); java.io.InputStream inputStream20 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream21 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream20); long long22 = jarArchiveInputStream21.getBytesRead(); long long23 = jarArchiveInputStream21.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream24 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream21); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream25 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream21); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream26 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream25); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream26, "070702", false, false); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry33 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry33.setDevMinor((int) ' '); boolean boolean36 = cpioArchiveInputStream26.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry33); boolean boolean37 = tarArchiveEntry13.equals((java.lang.Object) tarArchiveEntry33); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry39 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int40 = tarArchiveEntry39.getDevMinor(); tarArchiveEntry39.setUserId(0); java.io.File file43 = tarArchiveEntry39.getFile(); long long44 = tarArchiveEntry39.getSize(); java.lang.String str45 = tarArchiveEntry39.getGroupName(); int int46 = tarArchiveEntry39.getUserId(); boolean boolean47 = tarArchiveEntry13.isDescendent(tarArchiveEntry39); tarArchiveEntry13.setUserName("x5S"); try { cpioArchiveOutputStream11.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry13); org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"); } catch (java.lang.ClassCastException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertNull(file43); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, ""); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); }
public void test118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test118"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); try { tarArchiveOutputStream4.flush(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test119"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); try { tarArchiveOutputStream4.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.OutputStream outputStream17 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream19 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream17, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream17); zipArchiveOutputStream20.setMethod(8192); zipArchiveOutputStream20.setUseLanguageEncodingFlag(true); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream25 = archiveStreamFactory0.createArchiveOutputStream("", (java.io.OutputStream) zipArchiveOutputStream20); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); }
public void test121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test121"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("ar", (byte) 0); long long3 = tarArchiveEntry2.getSize(); boolean boolean4 = tarArchiveEntry2.isSymbolicLink(); java.lang.String str5 = tarArchiveEntry2.getName(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory8 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); tarArchiveOutputStream12.count(0L); long long15 = tarArchiveOutputStream12.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream16 = archiveStreamFactory8.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream12); boolean boolean17 = tarArchiveEntry7.equals((java.lang.Object) "ar"); long long18 = tarArchiveEntry7.getSize(); java.lang.String str19 = tarArchiveEntry7.getName(); boolean boolean20 = tarArchiveEntry2.equals(tarArchiveEntry7); org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ar" + "'", str5, "ar"); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.compress.archivers.ArchiveException: ustar\000" + "'", str19, "org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test122"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int13 = tarArchiveEntry12.getDevMinor(); tarArchiveEntry12.setIds((int) (short) 3, 0); java.lang.String str17 = tarArchiveEntry12.getGroupName(); java.util.Date date18 = tarArchiveEntry12.getModTime(); boolean boolean19 = tarArchiveEntry12.isDirectory(); try { jarArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry12); org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry"); } catch (java.lang.ClassCastException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertNotNull(date18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test123"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry26 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry27 = jarArchiveInputStream18.getNextJarEntry(); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertNull(archiveEntry26); org.junit.Assert.assertNull(jarArchiveEntry27); }
public void test124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test124"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); jarArchiveOutputStream12.setEncoding("5"); jarArchiveOutputStream12.setFallbackToUTF8(true); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry19 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry19.setDevMinor((int) ' '); tarArchiveEntry19.setGroupName("\000\000"); long long24 = tarArchiveEntry19.getSize(); java.util.Date date25 = tarArchiveEntry19.getLastModifiedDate(); java.io.File file26 = tarArchiveEntry19.getFile(); int int27 = tarArchiveEntry19.getGroupId(); tarArchiveEntry19.setIds(2048, (int) (byte) 50); java.io.InputStream inputStream31 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream32 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream31); long long33 = jarArchiveInputStream32.getBytesRead(); long long34 = jarArchiveInputStream32.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream35 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream32); arArchiveInputStream35.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream39 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream35, 24576, 255); boolean boolean40 = tarArchiveEntry19.equals((java.lang.Object) arArchiveInputStream35); boolean boolean41 = tarArchiveEntry19.isLink(); boolean boolean42 = jarArchiveOutputStream12.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry19); try { jarArchiveOutputStream12.finish(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(date25); org.junit.Assert.assertNull(file26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L); org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); }
public void test125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test125"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); boolean boolean19 = arArchiveInputStream15.markSupported(); try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry20 = arArchiveInputStream15.getNextEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: The stream is closed"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test126"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(4); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("encryption"); boolean boolean15 = tarArchiveEntry14.isDirectory(); try { arArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry14); org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.ar.ArArchiveEntry"); } catch (java.lang.ClassCastException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test127"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); boolean boolean13 = tarArchiveEntry1.isFile(); tarArchiveEntry1.setLinkName("org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!!"); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); }
public void test128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test128"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry24 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int25 = tarArchiveEntry24.getDevMinor(); tarArchiveEntry24.setIds((int) (short) 3, 0); long long29 = tarArchiveEntry24.getSize(); tarArchiveEntry24.setSize((long) 8192); boolean boolean32 = tarArchiveEntry24.isGlobalPaxHeader(); int int33 = tarArchiveEntry24.getUserId(); tarArchiveEntry24.setDevMinor(2048); tarArchiveEntry24.setNames("0\000", "always"); try { cpioArchiveOutputStream21.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry24); org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"); } catch (java.lang.ClassCastException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3); }
public void test129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test129"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream1 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream2 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream1); long long3 = jarArchiveInputStream2.getBytesRead(); long long4 = jarArchiveInputStream2.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream2); arArchiveInputStream5.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream5); tarArchiveInputStream7.mark((int) (byte) 53); boolean boolean10 = tarArchiveInputStream7.markSupported(); long long12 = tarArchiveInputStream7.skip((-1L)); tarArchiveInputStream7.close(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream14 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) tarArchiveInputStream7); int int15 = tarArchiveInputStream7.getCount(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream16 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); }
public void test130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test130"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(4); try { arArchiveOutputStream10.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test131"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); tarArchiveOutputStream4.count(0); try { tarArchiveOutputStream4.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test132"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); java.io.InputStream inputStream24 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24); long long26 = jarArchiveInputStream25.getBytesRead(); long long27 = jarArchiveInputStream25.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream32 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28, "00", true, false); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry34 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int35 = tarArchiveEntry34.getDevMinor(); tarArchiveEntry34.setIds((int) (short) 3, 0); int int39 = tarArchiveEntry34.getDevMajor(); boolean boolean40 = tarArchiveEntry34.isFile(); java.io.InputStream inputStream41 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream42 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream41); long long43 = jarArchiveInputStream42.getBytesRead(); long long44 = jarArchiveInputStream42.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream45 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream42); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream46 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream42); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream47 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream46); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream51 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream47, "070702", false, false); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry54 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry54.setDevMinor((int) ' '); boolean boolean57 = cpioArchiveInputStream47.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry54); boolean boolean58 = tarArchiveEntry34.equals((java.lang.Object) tarArchiveEntry54); boolean boolean59 = tarArchiveEntry54.isExtended(); tarArchiveEntry54.setIds(32, 29127); boolean boolean63 = tarArchiveEntry54.isExtended(); boolean boolean64 = zipArchiveInputStream32.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry54); boolean boolean65 = zipArchiveInputStream32.markSupported(); zipArchiveInputStream32.close(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream67 = archiveStreamFactory0.createArchiveInputStream("\000\ufffd\000\000", (java.io.InputStream) zipArchiveInputStream32); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); }
public void test133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test133"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); try { jarArchiveOutputStream11.finish(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '4' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test134"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(false); long long27 = tarArchiveOutputStream4.getBytesWritten(); byte[] byteArray33 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean34 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray33); org.apache.commons.compress.archivers.zip.ZipLong zipLong35 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray33); boolean boolean37 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray33, (int) (byte) 50); java.io.InputStream inputStream38 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream39 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream38); long long40 = jarArchiveInputStream39.getBytesRead(); long long41 = jarArchiveInputStream39.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream42 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream39); arArchiveInputStream42.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream44 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream42); org.apache.commons.compress.archivers.zip.ZipLong zipLong46 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray47 = zipLong46.getBytes(); long long48 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray47); int int51 = tarArchiveInputStream44.read(byteArray47, 0, (int) (short) 0); boolean boolean53 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray47, (int) (short) -1); boolean boolean55 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray33, byteArray47, false); boolean boolean57 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray47, 0); byte[] byteArray62 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean63 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray62); boolean boolean64 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray47, byteArray62); org.apache.commons.compress.archivers.zip.ZipLong zipLong68 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray69 = zipLong68.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong70 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray69); long long72 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray69, (int) (short) 0); boolean boolean76 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray62, 33188, 0, byteArray69, 36864, 16384, false); boolean boolean77 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset -1.", byteArray69); boolean boolean78 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray69); try { tarArchiveOutputStream4.write(byteArray69, (int) (short) -1, 3); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '3' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(byteArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L); org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L); org.junit.Assert.assertNotNull(byteArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L); org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1)); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(byteArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(byteArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true); }
public void test135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test135"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.flush(); try { arArchiveOutputStream10.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test136"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true); try { tarArchiveOutputStream4.flush(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test137"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry29 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry29.setDevMinor((int) ' '); tarArchiveEntry29.setGroupName("\000\000"); long long34 = tarArchiveEntry29.getSize(); java.util.Date date35 = tarArchiveEntry29.getLastModifiedDate(); java.io.File file36 = tarArchiveEntry29.getFile(); int int37 = tarArchiveEntry29.getGroupId(); tarArchiveEntry29.setIds(2048, (int) (byte) 50); java.io.InputStream inputStream41 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream42 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream41); long long43 = jarArchiveInputStream42.getBytesRead(); long long44 = jarArchiveInputStream42.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream45 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream42); arArchiveInputStream45.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream49 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream45, 24576, 255); boolean boolean50 = tarArchiveEntry29.equals((java.lang.Object) arArchiveInputStream45); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream51 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream45); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream51, 0, 83); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream55 = archiveStreamFactory0.createArchiveInputStream("-    0 ", (java.io.InputStream) cpioArchiveInputStream51); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: -    0 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L); org.junit.Assert.assertNotNull(date35); org.junit.Assert.assertNull(file36); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0); org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); }
public void test138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test138"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(83); java.io.File file13 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry15 = arArchiveOutputStream10.createArchiveEntry(file13, "org.apache.commons.compress.archivers.dump.DumpArchiveException: -  8192 jar"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test139"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); try { cpioArchiveOutputStream21.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Trying to close non-existent entry"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); }
public void test140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test140"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream11 = archiveStreamFactory0.createArchiveInputStream("", inputStream10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: InputStream must not be null."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test141"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode17 = null; zipArchiveOutputStream13.setUseZip64(zip64Mode17); int int19 = zipArchiveOutputStream13.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13, (int) ' '); zipArchiveOutputStream13.setUseLanguageEncodingFlag(true); int int24 = zipArchiveOutputStream13.getCount(); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream26 = archiveStreamFactory0.createArchiveOutputStream("", (java.io.OutputStream) zipArchiveOutputStream13); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0); }
public void test142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test142"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.setLongFileMode((int) ' '); arArchiveOutputStream10.setLongFileMode((int) (byte) 83); try { arArchiveOutputStream10.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test143"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.InputStream inputStream26 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream27 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream26); long long28 = jarArchiveInputStream27.getBytesRead(); long long29 = jarArchiveInputStream27.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream30 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream27); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream27); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream31); int int33 = cpioArchiveInputStream32.available(); long long34 = cpioArchiveInputStream32.getBytesRead(); long long36 = cpioArchiveInputStream32.skip((long) 8); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream37 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) cpioArchiveInputStream32); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1); org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); }
public void test144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test144"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); tarArchiveOutputStream4.setBigNumberMode(0); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test145"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.flush(); arArchiveOutputStream10.setLongFileMode((int) (byte) -1); arArchiveOutputStream10.flush(); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test146"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream10); try { cpioArchiveOutputStream11.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test147"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.setLongFileMode((int) ' '); arArchiveOutputStream10.setLongFileMode((int) (byte) 83); try { arArchiveOutputStream10.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test148"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.InputStream inputStream26 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream27 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream26); long long28 = jarArchiveInputStream27.getBytesRead(); long long29 = jarArchiveInputStream27.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream30 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream27); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream27); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream31); int int33 = cpioArchiveInputStream32.available(); int int34 = cpioArchiveInputStream32.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry36 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); tarArchiveEntry36.setMode((int) (short) 10); java.util.Date date39 = tarArchiveEntry36.getLastModifiedDate(); tarArchiveEntry36.setMode((int) (byte) 120); java.util.Date date42 = tarArchiveEntry36.getModTime(); tarArchiveEntry36.setNames("hi!", "UTF8"); boolean boolean46 = tarArchiveEntry36.isFIFO(); boolean boolean47 = cpioArchiveInputStream32.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry36); cpioArchiveInputStream32.close(); long long49 = cpioArchiveInputStream32.getBytesRead(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream50 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) cpioArchiveInputStream32); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertNotNull(date39); org.junit.Assert.assertNotNull(date42); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L); }
public void test149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test149"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(83); arArchiveOutputStream10.setLongFileMode(6); try { arArchiveOutputStream10.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test150"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); long long23 = tarArchiveOutputStream4.getBytesWritten(); try { org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream26 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, (short) (byte) 50, (int) (byte) 54); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown format: 50"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); }
public void test151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test151"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.InputStream inputStream27 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream28 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream27); long long29 = jarArchiveInputStream28.getBytesRead(); long long30 = jarArchiveInputStream28.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream31 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream28); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream32 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream28); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream35 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream32, (int) (byte) 53, (int) (short) -1); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream36 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream35); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream37 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) cpioArchiveInputStream36); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream38 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!!", (java.io.InputStream) cpioArchiveInputStream36); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!! not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L); }
public void test152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test152"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.setLongFileMode((int) (short) 8); try { arArchiveOutputStream10.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test153"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: data descriptor"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory4 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream6 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream8 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream6, "jar"); tarArchiveOutputStream8.count(0L); long long11 = tarArchiveOutputStream8.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream12 = archiveStreamFactory4.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream8); boolean boolean13 = tarArchiveEntry3.equals((java.lang.Object) "ar"); long long14 = tarArchiveEntry3.getSize(); tarArchiveEntry3.setDevMajor((int) (short) 10); long long17 = tarArchiveEntry3.getRealSize(); tarArchiveEntry3.setSize((long) 2048); long long20 = tarArchiveEntry3.getRealSize(); boolean boolean21 = tarArchiveEntry1.equals(tarArchiveEntry3); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); }
public void test154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test154"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.setLongFileMode(257); try { arArchiveOutputStream10.finish(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: This archive has already been finished"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test155"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); jarArchiveOutputStream12.setEncoding("5"); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode15 = null; jarArchiveOutputStream12.setUseZip64(zip64Mode15); try { jarArchiveOutputStream12.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test156"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.setLongFileMode(257); java.io.InputStream inputStream14 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream15 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream14); long long16 = jarArchiveInputStream15.getBytesRead(); long long17 = jarArchiveInputStream15.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream18 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream15); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream19 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream15); long long21 = jarArchiveInputStream15.skip((long) 24576); java.io.InputStream inputStream22 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream23 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream22); long long24 = jarArchiveInputStream23.getBytesRead(); long long25 = jarArchiveInputStream23.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream26 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream23); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream27 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream23); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream28 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream27); int int29 = cpioArchiveInputStream28.read(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry31 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int32 = tarArchiveEntry31.getDevMinor(); tarArchiveEntry31.setIds((int) (short) 3, 0); java.lang.String str36 = tarArchiveEntry31.getGroupName(); tarArchiveEntry31.setDevMinor(0); java.util.Date date39 = tarArchiveEntry31.getLastModifiedDate(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry42 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry42.setName(""); boolean boolean45 = tarArchiveEntry31.equals(tarArchiveEntry42); boolean boolean46 = tarArchiveEntry42.isDirectory(); int int47 = tarArchiveEntry42.getGroupId(); boolean boolean48 = cpioArchiveInputStream28.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry42); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream28, 155); byte[] byteArray53 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes((long) 1000); java.lang.String str54 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byteArray53); boolean boolean57 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("", byteArray53, 3, (int) (byte) 0); int int60 = tarArchiveInputStream50.read(byteArray53, (int) (byte) 54, 8192); int int63 = jarArchiveInputStream15.read(byteArray53, 32768, (int) (short) 4); try { arArchiveOutputStream10.write(byteArray53, (int) (short) 12, 1000); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '1000' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1)); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertNotNull(date39); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(byteArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-24, 3, 0, 0]"); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ufffd\003\000\000" + "'", str54, "\ufffd\003\000\000"); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1)); org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1)); }
public void test157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test157"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream9 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream9); long long11 = jarArchiveInputStream10.getBytesRead(); long long12 = jarArchiveInputStream10.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream13 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream10); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10); long long16 = jarArchiveInputStream10.skip((long) 24576); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream17 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10); org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry18 = jarArchiveInputStream17.getNextJarEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry19 = jarArchiveInputStream17.getNextEntry(); jarArchiveInputStream17.count(0L); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream22 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) jarArchiveInputStream17); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNull(jarArchiveEntry18); org.junit.Assert.assertNull(archiveEntry19); }
public void test158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test158"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(83); arArchiveOutputStream10.setLongFileMode(6); try { org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream17 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream10, (int) ' ', "compression method"); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: compression method"); } catch (java.nio.charset.IllegalCharsetNameException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test159"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream16 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream17 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream16); long long18 = jarArchiveInputStream17.getBytesRead(); long long19 = jarArchiveInputStream17.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream20 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream17); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream17); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry22 = tarArchiveInputStream21.getNextEntry(); long long23 = tarArchiveInputStream21.getBytesRead(); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream21); boolean boolean25 = zipArchiveInputStream24.markSupported(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream26 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream24); org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry27 = jarArchiveInputStream26.getNextJarEntry(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream26, (int) (byte) 55); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream30 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream29); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertNull(archiveEntry22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNull(jarArchiveEntry27); }
public void test160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test160"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream1 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream2 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream1); long long3 = jarArchiveInputStream2.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream4 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream2); java.io.InputStream inputStream6 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream7 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream6); long long8 = jarArchiveInputStream7.getBytesRead(); long long9 = jarArchiveInputStream7.getBytesRead(); org.apache.commons.compress.archivers.zip.ZipLong zipLong11 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray12 = zipLong11.getBytes(); int int15 = jarArchiveInputStream7.read(byteArray12, 0, 96); boolean boolean16 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("00", byteArray12); int int19 = arArchiveInputStream4.read(byteArray12, 6, 8); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream4, "always"); arArchiveInputStream4.close(); arArchiveInputStream4.pushedBackBytes(1L); arArchiveInputStream4.close(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream26 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) arArchiveInputStream4); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(byteArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); }
public void test161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test161"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); long long23 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream26 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, 0, (int) (byte) 51); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); }
public void test162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test162"); java.io.OutputStream outputStream0 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream2 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream0); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream4 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0); arArchiveOutputStream4.finish(); arArchiveOutputStream4.setLongFileMode((int) (byte) 48); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory10 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream12 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream12, "jar"); tarArchiveOutputStream14.count(0L); long long17 = tarArchiveOutputStream14.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream18 = archiveStreamFactory10.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream14); boolean boolean19 = tarArchiveEntry9.equals((java.lang.Object) "ar"); long long20 = tarArchiveEntry9.getSize(); try { arArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry9); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); }
public void test163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test163"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(4); arArchiveOutputStream10.setLongFileMode(40960); try { arArchiveOutputStream10.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test164"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); int int11 = tarArchiveOutputStream4.getCount(); try { tarArchiveOutputStream4.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test165"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); try { jarArchiveOutputStream12.flush(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test166"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); java.io.File file10 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry12 = cpioArchiveOutputStream9.createArchiveEntry(file10, "org.apache.commons.compress.archivers.ArchiveException: data descriptor"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test167"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(4); java.io.File file13 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry15 = arArchiveOutputStream10.createArchiveEntry(file13, "org.apache.commons.compress.archivers.ArchiveException: TRAILER!!!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test168"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream2); tarArchiveInputStream3.mark(0); tarArchiveInputStream3.reset(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream7 = archiveStreamFactory0.createArchiveInputStream("65\001\n", (java.io.InputStream) tarArchiveInputStream3); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: 65?? not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } }
public void test169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test169"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); java.io.InputStream inputStream24 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24); long long26 = jarArchiveInputStream25.getBytesRead(); long long27 = jarArchiveInputStream25.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25); arArchiveInputStream28.close(); arArchiveInputStream28.pushedBackBytes((-1L)); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream28); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream33, "always", false, false); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream38, (int) (short) 8); org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray43 = zipLong42.getBytes(); long long44 = zipLong42.getValue(); java.io.InputStream inputStream45 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45); long long47 = jarArchiveInputStream46.getBytesRead(); long long48 = jarArchiveInputStream46.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); boolean boolean51 = zipLong42.equals((java.lang.Object) jarArchiveInputStream46); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46, 1000, 1); byte[] byteArray59 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray59); org.apache.commons.compress.archivers.zip.ZipLong zipLong61 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray59); boolean boolean63 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray59, (int) (byte) 50); int int66 = tarArchiveInputStream54.read(byteArray59, (int) (byte) -1, 24576); int int69 = tarArchiveInputStream40.read(byteArray59, 504, (int) 'a'); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream70 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) tarArchiveInputStream40); java.io.InputStream inputStream72 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream73 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream72); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream74 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream73); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry76 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int77 = tarArchiveEntry76.getDevMinor(); tarArchiveEntry76.setIds((int) (short) 3, 0); boolean boolean81 = jarArchiveInputStream73.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry76); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream82 = archiveStreamFactory0.createArchiveInputStream("\ufffd\ufffd\ufffd\ufffd", (java.io.InputStream) jarArchiveInputStream73); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(byteArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(byteArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1)); org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1)); org.junit.Assert.assertNotNull(archiveInputStream70); org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false); }
public void test170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test170"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(83); try { org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream15 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream10, (short) 12, 33188); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown format: 12"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test171"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); tarArchiveOutputStream4.count(0); java.io.InputStream inputStream11 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream11); long long13 = jarArchiveInputStream12.getBytesRead(); long long14 = jarArchiveInputStream12.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream12); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream16 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream12); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry17 = tarArchiveInputStream16.getNextEntry(); long long18 = tarArchiveInputStream16.getBytesRead(); byte[] byteArray23 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean24 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray23); org.apache.commons.compress.archivers.zip.ZipLong zipLong25 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray23); boolean boolean27 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray23, (int) (byte) 50); int int30 = tarArchiveInputStream16.read(byteArray23, 0, 2048); byte[] byteArray32 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes("always"); int int35 = tarArchiveInputStream16.read(byteArray32, 49152, (int) (byte) 100); byte[] byteArray40 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean41 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray40); org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray40); boolean boolean44 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray40, (int) (byte) 50); boolean boolean45 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray40); int int48 = tarArchiveInputStream16.read(byteArray40, (int) (byte) 48, 504); org.apache.commons.compress.archivers.zip.ZipLong zipLong49 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray40); boolean boolean51 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray40, (-1)); try { tarArchiveOutputStream4.write(byteArray40, 33188, 36864); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '36864' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertNull(archiveEntry17); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNotNull(byteArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1)); org.junit.Assert.assertNotNull(byteArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[97, 108, 119, 97, 121, 115]"); org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1)); org.junit.Assert.assertNotNull(byteArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1)); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); }
public void test172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test172"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); java.io.InputStream inputStream23 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream23); long long25 = jarArchiveInputStream24.getBytesRead(); long long26 = jarArchiveInputStream24.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream27 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream24); org.apache.commons.compress.archivers.zip.ZipLong zipLong29 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray30 = zipLong29.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong32 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray33 = zipLong32.getBytes(); boolean boolean35 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray30, byteArray33, true); boolean boolean36 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray30); int int39 = jarArchiveInputStream24.read(byteArray30, (int) (byte) 10, 3); org.apache.commons.compress.archivers.zip.ZipLong zipLong40 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray30); java.lang.Object obj41 = zipLong40.clone(); byte[] byteArray42 = zipLong40.getBytes(); try { tarArchiveOutputStream4.write(byteArray42, 83, 1000); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '1000' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertNotNull(byteArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1)); org.junit.Assert.assertNotNull(obj41); org.junit.Assert.assertEquals(obj41.toString(), "ZipLong value: 0"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "ZipLong value: 0"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "ZipLong value: 0"); org.junit.Assert.assertNotNull(byteArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 0, 0]"); }
public void test173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test173"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); tarArchiveOutputStream10.setBigNumberMode(3); try { tarArchiveOutputStream10.finish(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '10240' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test174"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream10); java.io.File file12 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = cpioArchiveOutputStream11.createArchiveEntry(file12, "00"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test175"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(83); java.lang.Class<?> wildcardClass13 = arArchiveOutputStream10.getClass(); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(wildcardClass13); }
public void test176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test176"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); archiveInputStream18.reset(); try { org.apache.commons.compress.archivers.dump.DumpArchiveInputStream dumpArchiveInputStream20 = new org.apache.commons.compress.archivers.dump.DumpArchiveInputStream((java.io.InputStream) archiveInputStream18); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: unexpected EOF"); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); }
public void test177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test177"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); java.io.InputStream inputStream23 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream23); long long25 = jarArchiveInputStream24.getBytesRead(); long long26 = jarArchiveInputStream24.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream27 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream24); arArchiveInputStream27.close(); arArchiveInputStream27.pushedBackBytes((-1L)); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream33 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream27, 1024, 504); int int34 = tarArchiveInputStream33.getCount(); tarArchiveInputStream33.close(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream36 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream33); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); }
public void test178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test178"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.setLongFileMode((int) ' '); try { arArchiveOutputStream10.finish(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: This archive has already been finished"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test179"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(false); try { tarArchiveOutputStream4.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); }
public void test180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test180"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); java.io.OutputStream outputStream24 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream26 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream24, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream27 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream24); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy28 = null; zipArchiveOutputStream27.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy28); zipArchiveOutputStream27.setUseLanguageEncodingFlag(true); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream33 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream27, "cpio"); long long34 = tarArchiveOutputStream33.getBytesWritten(); byte[] byteArray39 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean40 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray39); org.apache.commons.compress.archivers.zip.ZipLong zipLong41 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray39); boolean boolean43 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray39, (int) (byte) 50); tarArchiveOutputStream33.write(byteArray39, 24576, 0); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream47 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream33); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream48 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream47); zipArchiveOutputStream48.count((int) (short) 12); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream51 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!!", (java.io.OutputStream) zipArchiveOutputStream48); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!! not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L); org.junit.Assert.assertNotNull(byteArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); }
public void test181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test181"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(83); arArchiveOutputStream10.setLongFileMode(6); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int17 = tarArchiveEntry16.getDevMinor(); tarArchiveEntry16.setUserId(0); java.io.File file20 = tarArchiveEntry16.getFile(); tarArchiveEntry16.setLinkName("org.apache.commons.compress.archivers.ArchiveException: \000"); boolean boolean23 = tarArchiveEntry16.isDirectory(); tarArchiveEntry16.setUserName(""); int int26 = tarArchiveEntry16.getDevMinor(); try { arArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry16); org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.ar.ArArchiveEntry"); } catch (java.lang.ClassCastException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNull(file20); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); }
public void test182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test182"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); try { tarArchiveOutputStream4.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test183"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry27 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); boolean boolean28 = tarArchiveEntry27.isGNUSparse(); java.lang.String str29 = tarArchiveEntry27.getLinkName(); tarArchiveEntry27.setNames("0\000", "jar"); java.io.File file33 = tarArchiveEntry27.getFile(); long long34 = tarArchiveEntry27.getSize(); try { tarArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry27); org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar"); } catch (java.io.UnsupportedEncodingException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNull(file33); org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L); }
public void test184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test184"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.OutputStream outputStream27 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream27); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy31 = null; zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy31); int int33 = zipArchiveOutputStream30.getCount(); java.lang.String str34 = zipArchiveOutputStream30.getEncoding(); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode35 = null; zipArchiveOutputStream30.setUseZip64(zip64Mode35); java.io.InputStream inputStream37 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream38 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream37); long long39 = jarArchiveInputStream38.getBytesRead(); long long40 = jarArchiveInputStream38.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream41 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream38); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream45 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream41, "00", true, false); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry47 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int48 = tarArchiveEntry47.getDevMinor(); tarArchiveEntry47.setIds((int) (short) 3, 0); int int52 = tarArchiveEntry47.getDevMajor(); boolean boolean53 = tarArchiveEntry47.isFile(); java.io.InputStream inputStream54 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream55 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream54); long long56 = jarArchiveInputStream55.getBytesRead(); long long57 = jarArchiveInputStream55.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream58 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream55); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream59 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream55); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream60 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream59); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream64 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream60, "070702", false, false); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry67 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry67.setDevMinor((int) ' '); boolean boolean70 = cpioArchiveInputStream60.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry67); boolean boolean71 = tarArchiveEntry47.equals((java.lang.Object) tarArchiveEntry67); boolean boolean72 = tarArchiveEntry67.isExtended(); tarArchiveEntry67.setIds(32, 29127); boolean boolean76 = tarArchiveEntry67.isExtended(); boolean boolean77 = zipArchiveInputStream45.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry67); boolean boolean78 = tarArchiveEntry67.isPaxHeader(); boolean boolean79 = zipArchiveOutputStream30.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry67); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream80 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset -1.", (java.io.OutputStream) zipArchiveOutputStream30); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset -1. not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTF8" + "'", str34, "UTF8"); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L); org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L); org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); }
public void test185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test185"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream10); java.io.InputStream inputStream12 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream13 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream12); long long14 = jarArchiveInputStream13.getBytesRead(); long long15 = jarArchiveInputStream13.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream16 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream13); org.apache.commons.compress.archivers.zip.ZipLong zipLong18 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray19 = zipLong18.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong21 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray22 = zipLong21.getBytes(); boolean boolean24 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray19, byteArray22, true); boolean boolean25 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray19); int int28 = jarArchiveInputStream13.read(byteArray19, (int) (byte) 10, 3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream13, (int) (byte) 51, "x5S"); tarArchiveInputStream31.close(); byte[] byteArray36 = new byte[] { (byte) 103, (byte) 0, (byte) 100 }; int int39 = tarArchiveInputStream31.read(byteArray36, 257, 16384); java.io.InputStream inputStream42 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream43 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream42); long long44 = jarArchiveInputStream43.getBytesRead(); long long45 = jarArchiveInputStream43.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream46 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream43); arArchiveInputStream46.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream48 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream46); org.apache.commons.compress.archivers.zip.ZipLong zipLong50 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray51 = zipLong50.getBytes(); long long52 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray51); int int55 = tarArchiveInputStream48.read(byteArray51, 0, (int) (short) 0); boolean boolean57 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray51, (int) (short) -1); org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding61 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("UTF8"); boolean boolean63 = zipEncoding61.canEncode("00"); java.lang.String str64 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray51, 8, 0, zipEncoding61); java.lang.String str65 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray36, 33188, 0, zipEncoding61); try { jarArchiveOutputStream10.write(byteArray36, (int) (short) 8, (int) (short) 100); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNotNull(byteArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1)); org.junit.Assert.assertNotNull(byteArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[103, 0, 100]"); org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1)); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L); org.junit.Assert.assertNotNull(byteArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L); org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1)); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(zipEncoding61); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, ""); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, ""); }
public void test186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test186"); java.io.OutputStream outputStream0 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream2 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream0); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy4 = null; zipArchiveOutputStream3.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy4); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream3); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream7 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream3); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream9 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream7, 1000); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory10 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream12 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream12, "jar"); tarArchiveOutputStream14.count(0L); long long17 = tarArchiveOutputStream14.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream18 = archiveStreamFactory10.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream14); int int19 = tarArchiveOutputStream14.getCount(); int int20 = tarArchiveOutputStream14.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong22 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray23 = zipLong22.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong25 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray26 = zipLong25.getBytes(); boolean boolean28 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray23, byteArray26, true); boolean boolean29 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray23); tarArchiveOutputStream14.write(byteArray23, (int) (short) 4, (int) (byte) -1); try { tarArchiveOutputStream9.write(byteArray23, 255, 263); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '263' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(byteArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); }
public void test187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test187"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); byte[] byteArray12 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes(2097151L); java.lang.String str13 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byteArray12); try { arArchiveOutputStream10.write(byteArray12); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '4' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(byteArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, -1, 31, 0]"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ufffd\ufffd\037\000" + "'", str13, "\ufffd\ufffd\037\000"); }
public void test188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test188"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream9 = null; org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream9, 31, 256); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream13 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test189"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); jarArchiveOutputStream12.setEncoding("5"); jarArchiveOutputStream12.setFallbackToUTF8(true); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry19 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry19.setDevMinor((int) ' '); tarArchiveEntry19.setGroupName("\000\000"); long long24 = tarArchiveEntry19.getSize(); java.util.Date date25 = tarArchiveEntry19.getLastModifiedDate(); java.io.File file26 = tarArchiveEntry19.getFile(); int int27 = tarArchiveEntry19.getGroupId(); tarArchiveEntry19.setIds(2048, (int) (byte) 50); java.io.InputStream inputStream31 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream32 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream31); long long33 = jarArchiveInputStream32.getBytesRead(); long long34 = jarArchiveInputStream32.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream35 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream32); arArchiveInputStream35.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream39 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream35, 24576, 255); boolean boolean40 = tarArchiveEntry19.equals((java.lang.Object) arArchiveInputStream35); boolean boolean41 = tarArchiveEntry19.isLink(); boolean boolean42 = jarArchiveOutputStream12.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry19); jarArchiveOutputStream12.setFallbackToUTF8(false); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertNotNull(date25); org.junit.Assert.assertNull(file26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L); org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); }
public void test190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test190"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream10); try { cpioArchiveOutputStream11.finish(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test191"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream11 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream10); org.apache.commons.compress.archivers.zip.ZipLong zipLong13 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray14 = zipLong13.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong16 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray17 = zipLong16.getBytes(); boolean boolean19 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray14, byteArray17, true); int int22 = tarArchiveInputStream11.read(byteArray14, 0, 32); tarArchiveInputStream11.reset(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream24 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream11); long long26 = tarArchiveInputStream11.skip((long) 148); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream27 = archiveStreamFactory0.createArchiveInputStream("", (java.io.InputStream) tarArchiveInputStream11); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertNotNull(byteArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1)); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); }
public void test192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test192"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.InputStream inputStream27 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream28 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream27); long long29 = jarArchiveInputStream28.getBytesRead(); long long30 = jarArchiveInputStream28.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream31 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream28); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream32 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream28); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream35 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream32, (int) (byte) 53, (int) (short) -1); boolean boolean36 = tarArchiveInputStream32.markSupported(); tarArchiveInputStream32.close(); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream40 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream32, "x5S", false); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream41 = archiveStreamFactory0.createArchiveInputStream("\000\ufffd\000\000", (java.io.InputStream) zipArchiveInputStream40); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); }
public void test193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test193"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); tarArchiveEntry1.setDevMajor((int) (short) 10); long long15 = tarArchiveEntry1.getRealSize(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("070707", (byte) 1); boolean boolean19 = tarArchiveEntry1.equals(tarArchiveEntry18); org.apache.commons.compress.archivers.zip.ZipLong zipLong22 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray23 = zipLong22.getBytes(); long long24 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray23); boolean boolean25 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("-    0 ar", byteArray23); org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding26 = null; try { tarArchiveEntry18.writeEntryHeader(byteArray23, zipEncoding26, false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(byteArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); }
public void test194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test194"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); java.util.Date date13 = tarArchiveEntry1.getLastModifiedDate(); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertNotNull(date13); }
public void test195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test195"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); java.lang.String str12 = tarArchiveEntry1.getName(); tarArchiveEntry1.setSize((long) 83); boolean boolean15 = tarArchiveEntry1.isFile(); boolean boolean16 = tarArchiveEntry1.isLink(); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.compress.archivers.ArchiveException: ustar\000" + "'", str12, "org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test196"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream11 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("zip", (byte) 50); try { arArchiveOutputStream11.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry14); org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.ar.ArArchiveEntry"); } catch (java.lang.ClassCastException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test197"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); tarArchiveEntry1.setDevMajor((int) (short) 10); long long15 = tarArchiveEntry1.getRealSize(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("070707", (byte) 1); boolean boolean19 = tarArchiveEntry1.equals(tarArchiveEntry18); boolean boolean20 = tarArchiveEntry18.isGNUSparse(); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test198"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); java.io.OutputStream outputStream20 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream20, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream23 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream20); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy24 = null; zipArchiveOutputStream23.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy24); boolean boolean26 = zipArchiveOutputStream23.isSeekable(); zipArchiveOutputStream23.setLevel((int) (short) 2); java.lang.String str29 = zipArchiveOutputStream23.getEncoding(); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode30 = null; zipArchiveOutputStream23.setUseZip64(zip64Mode30); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream32 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream23); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream35 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream23, 64, 64); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream38 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream35, (short) (byte) 1, (int) (byte) 50); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream39 = archiveStreamFactory0.createArchiveOutputStream("-  8192 jar", (java.io.OutputStream) cpioArchiveOutputStream38); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: -  8192 jar not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTF8" + "'", str29, "UTF8"); }
public void test199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test199"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory10 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream12 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream13 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream12); long long14 = jarArchiveInputStream13.getBytesRead(); long long15 = jarArchiveInputStream13.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream16 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream13); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream17 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream13); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry18 = tarArchiveInputStream17.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry19 = tarArchiveInputStream17.getNextEntry(); tarArchiveInputStream17.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream17, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory10.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream24); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream26 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream24); long long28 = zipArchiveInputStream24.skip((long) (short) 8); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream29 = archiveStreamFactory0.createArchiveInputStream("-    0 jar", (java.io.InputStream) zipArchiveInputStream24); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: -    0 jar not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNull(archiveEntry18); org.junit.Assert.assertNull(archiveEntry19); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); }
public void test200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test200"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); byte[] byteArray13 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes("-    0 jar"); java.io.InputStream inputStream14 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream15 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream14); long long16 = jarArchiveInputStream15.getBytesRead(); byte[] byteArray21 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean22 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray21); org.apache.commons.compress.archivers.zip.ZipLong zipLong23 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray21); byte[] byteArray24 = zipLong23.getBytes(); boolean boolean26 = org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byteArray24, (int) (byte) 1); int int29 = jarArchiveInputStream15.read(byteArray24, (int) (byte) 55, (-1)); byte[] byteArray31 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes("././@LongLink"); int int34 = jarArchiveInputStream15.read(byteArray31, 0, 40960); boolean boolean36 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray31, false); byte[] byteArray41 = new byte[] { (byte) 1, (byte) 52, (byte) -1, (byte) 88 }; org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray41); long long43 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray41); boolean boolean44 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray31, byteArray41); try { jarArchiveOutputStream11.write(byteArray41, 0, (int) (byte) 48); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[45, 32, 32, 32, 32, 32, 32, 32, 48, 32, 106, 97, 114]"); org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L); org.junit.Assert.assertNotNull(byteArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(byteArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1)); org.junit.Assert.assertNotNull(byteArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[46, 47, 46, 47, 64, 76, 111, 110, 103, 76, 105, 110, 107]"); org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1)); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(byteArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 52, -1, 88]"); org.junit.Assert.assertTrue("'" + long43 + "' != '" + 396L + "'", long43 == 396L); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); }
public void test201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test201"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.flush(); arArchiveOutputStream10.setLongFileMode(32); arArchiveOutputStream10.setLongFileMode((int) (short) 10); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test202"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream20 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16, 0, 128, "x5S"); int int21 = cpioArchiveInputStream16.available(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream22 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); }
public void test203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test203"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); try { org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream18 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) archiveInputStream15, (int) '#', 0); org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: null"); } catch (java.lang.ArithmeticException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); }
public void test204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test204"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); java.io.InputStream inputStream24 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24); long long26 = jarArchiveInputStream25.getBytesRead(); long long27 = jarArchiveInputStream25.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25); arArchiveInputStream28.close(); arArchiveInputStream28.pushedBackBytes((-1L)); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream28); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream33, "always", false, false); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream38, (int) (short) 8); org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray43 = zipLong42.getBytes(); long long44 = zipLong42.getValue(); java.io.InputStream inputStream45 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45); long long47 = jarArchiveInputStream46.getBytesRead(); long long48 = jarArchiveInputStream46.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); boolean boolean51 = zipLong42.equals((java.lang.Object) jarArchiveInputStream46); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46, 1000, 1); byte[] byteArray59 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray59); org.apache.commons.compress.archivers.zip.ZipLong zipLong61 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray59); boolean boolean63 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray59, (int) (byte) 50); int int66 = tarArchiveInputStream54.read(byteArray59, (int) (byte) -1, 24576); int int69 = tarArchiveInputStream40.read(byteArray59, 504, (int) 'a'); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream70 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) tarArchiveInputStream40); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory72 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream74 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream76 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream74, "jar"); tarArchiveOutputStream76.count(0L); long long79 = tarArchiveOutputStream76.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream80 = archiveStreamFactory72.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream76); int int81 = tarArchiveOutputStream76.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream82 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream76); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream83 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream76); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream84 = archiveStreamFactory0.createArchiveOutputStream("cpio", (java.io.OutputStream) tarArchiveOutputStream76); java.io.InputStream inputStream86 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream87 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream86); long long88 = jarArchiveInputStream87.getBytesRead(); long long89 = jarArchiveInputStream87.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream90 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream87); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream91 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream87); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry92 = tarArchiveInputStream91.getNextEntry(); long long93 = tarArchiveInputStream91.getBytesRead(); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream94 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream91); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream95 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream94); long long97 = cpioArchiveInputStream95.skip((long) 120); cpioArchiveInputStream95.close(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream99 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.dump.DumpArchiveException: 070702", (java.io.InputStream) cpioArchiveInputStream95); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.dump.DumpArchiveException: 070702 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(byteArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(byteArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1)); org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1)); org.junit.Assert.assertNotNull(archiveInputStream70); org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream80); org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0); org.junit.Assert.assertNotNull(archiveOutputStream84); org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L); org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L); org.junit.Assert.assertNull(archiveEntry92); org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L); org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L); }
public void test205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test205"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.InputStream inputStream27 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream28 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream27); long long29 = jarArchiveInputStream28.getBytesRead(); long long30 = jarArchiveInputStream28.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream31 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream28); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream32 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream28); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream33 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream32); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream37 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream33, "070702", false, false); long long39 = cpioArchiveInputStream33.skip(162L); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream41 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream33, 40960); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream42 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream41); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry43 = null; boolean boolean44 = tarArchiveInputStream42.canReadEntryData(archiveEntry43); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream45 = archiveStreamFactory0.createArchiveInputStream("ZipLong value: 32", (java.io.InputStream) tarArchiveInputStream42); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 32 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L); org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); }
public void test206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test206"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); arArchiveInputStream6.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream8 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream6); tarArchiveInputStream8.mark((int) (byte) 53); boolean boolean11 = tarArchiveInputStream8.markSupported(); long long13 = tarArchiveInputStream8.skip((-1L)); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream14 = archiveStreamFactory0.createArchiveInputStream("\ufffd\003\000\000", (java.io.InputStream) tarArchiveInputStream8); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); }
public void test207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test207"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream11 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int14 = tarArchiveEntry13.getDevMinor(); tarArchiveEntry13.setIds((int) (short) 3, 0); java.lang.String str18 = tarArchiveEntry13.getGroupName(); tarArchiveEntry13.setDevMinor(0); tarArchiveEntry13.setUserId((int) (byte) 48); java.lang.String str23 = tarArchiveEntry13.getUserName(); try { arArchiveOutputStream11.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry13); org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.ar.ArArchiveEntry"); } catch (java.lang.ClassCastException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); }
public void test208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test208"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); java.io.InputStream inputStream24 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24); long long26 = jarArchiveInputStream25.getBytesRead(); long long27 = jarArchiveInputStream25.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25); arArchiveInputStream28.close(); arArchiveInputStream28.pushedBackBytes((-1L)); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream28); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream33, "always", false, false); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream38, (int) (short) 8); org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray43 = zipLong42.getBytes(); long long44 = zipLong42.getValue(); java.io.InputStream inputStream45 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45); long long47 = jarArchiveInputStream46.getBytesRead(); long long48 = jarArchiveInputStream46.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); boolean boolean51 = zipLong42.equals((java.lang.Object) jarArchiveInputStream46); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46, 1000, 1); byte[] byteArray59 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray59); org.apache.commons.compress.archivers.zip.ZipLong zipLong61 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray59); boolean boolean63 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray59, (int) (byte) 50); int int66 = tarArchiveInputStream54.read(byteArray59, (int) (byte) -1, 24576); int int69 = tarArchiveInputStream40.read(byteArray59, 504, (int) 'a'); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream70 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) tarArchiveInputStream40); tarArchiveInputStream40.mark(3); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(byteArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(byteArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1)); org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1)); org.junit.Assert.assertNotNull(archiveInputStream70); }
public void test209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test209"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); try { zipArchiveOutputStream11.finish(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '4' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test210"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); long long23 = tarArchiveOutputStream4.getBytesWritten(); try { org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream25 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, "hi!"); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!"); } catch (java.nio.charset.IllegalCharsetNameException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); }
public void test211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test211"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); java.io.File file23 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry25 = cpioArchiveOutputStream21.createArchiveEntry(file23, "org.apache.commons.compress.archivers.dump.DumpArchiveException"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); }
public void test212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test212"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.setLongFileMode(257); byte[] byteArray14 = null; java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); arArchiveInputStream21.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream23 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream21); org.apache.commons.compress.archivers.zip.ZipLong zipLong25 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray26 = zipLong25.getBytes(); long long27 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray26); int int30 = tarArchiveInputStream23.read(byteArray26, 0, (int) (short) 0); boolean boolean32 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray26, (int) (short) -1); org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding36 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("UTF8"); boolean boolean38 = zipEncoding36.canEncode("00"); java.lang.String str39 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray26, 8, 0, zipEncoding36); boolean boolean42 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray14, (int) (byte) 88, 8, byteArray26, (int) (byte) 103, 0); try { arArchiveOutputStream10.write(byteArray14, 36864, 263); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '263' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNotNull(byteArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(zipEncoding36); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, ""); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); }
public void test213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test213"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); tarArchiveOutputStream4.count(0); tarArchiveOutputStream4.count((long) (byte) 49); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, (int) (short) 0); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test214"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14); try { org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream14, "org.apache.commons.compress.archivers.dump.DumpArchiveException: hi!", true); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: org.apache.commons.compress.archivers.dump.DumpArchiveException: hi!"); } catch (java.nio.charset.IllegalCharsetNameException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); }
public void test215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test215"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); tarArchiveEntry1.setDevMajor((int) (short) 10); long long15 = tarArchiveEntry1.getRealSize(); tarArchiveEntry1.setSize((long) 2048); int int18 = tarArchiveEntry1.getDevMinor(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry21 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry21.setName(""); java.util.Date date24 = tarArchiveEntry21.getLastModifiedDate(); tarArchiveEntry1.setModTime(date24); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(date24); }
public void test216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test216"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9); java.io.InputStream inputStream11 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream11); long long13 = jarArchiveInputStream12.getBytesRead(); long long14 = jarArchiveInputStream12.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream12); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream16 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream12); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream17 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream16); int int18 = cpioArchiveInputStream17.available(); int int19 = cpioArchiveInputStream17.getCount(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream20 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream17); cpioArchiveInputStream17.count((long) (byte) 1); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream24 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream17, "070707"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry26 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int27 = tarArchiveEntry26.getDevMinor(); tarArchiveEntry26.setIds((int) (short) 3, 0); int int31 = tarArchiveEntry26.getDevMajor(); boolean boolean32 = tarArchiveEntry26.isFile(); java.io.InputStream inputStream33 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream33); long long35 = jarArchiveInputStream34.getBytesRead(); long long36 = jarArchiveInputStream34.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream37 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream34); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream38 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream34); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream39 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream38); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream43 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream39, "070702", false, false); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry46 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry46.setDevMinor((int) ' '); boolean boolean49 = cpioArchiveInputStream39.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry46); boolean boolean50 = tarArchiveEntry26.equals((java.lang.Object) tarArchiveEntry46); boolean boolean51 = tarArchiveInputStream24.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry46); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream52 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream24); java.io.InputStream inputStream53 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream54 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream53); long long55 = jarArchiveInputStream54.getBytesRead(); long long56 = jarArchiveInputStream54.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream57 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream54); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream58 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream54); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry59 = tarArchiveInputStream58.getNextEntry(); long long60 = tarArchiveInputStream58.getBytesRead(); byte[] byteArray65 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean66 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray65); org.apache.commons.compress.archivers.zip.ZipLong zipLong67 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray65); boolean boolean69 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray65, (int) (byte) 50); int int72 = tarArchiveInputStream58.read(byteArray65, 0, 2048); byte[] byteArray74 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes("always"); int int77 = tarArchiveInputStream58.read(byteArray74, 49152, (int) (byte) 100); byte[] byteArray82 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean83 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray82); org.apache.commons.compress.archivers.zip.ZipLong zipLong84 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray82); boolean boolean86 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray82, (int) (byte) 50); boolean boolean87 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray82); int int90 = tarArchiveInputStream58.read(byteArray82, (int) (byte) 48, 504); org.apache.commons.compress.archivers.zip.ZipLong zipLong91 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray82); boolean boolean93 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray82, (-1)); int int94 = tarArchiveInputStream24.read(byteArray82); try { jarArchiveOutputStream10.write(byteArray82); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L); org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L); org.junit.Assert.assertNull(archiveEntry59); org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L); org.junit.Assert.assertNotNull(byteArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1)); org.junit.Assert.assertNotNull(byteArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[97, 108, 119, 97, 121, 115]"); org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1)); org.junit.Assert.assertNotNull(byteArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1)); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1)); }
public void test217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test217"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.flush(); arArchiveOutputStream10.setLongFileMode(32); arArchiveOutputStream10.setLongFileMode((int) (byte) 54); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream19 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream10); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test218"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(false); long long27 = tarArchiveOutputStream4.getBytesWritten(); int int28 = tarArchiveOutputStream4.getRecordSize(); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 512 + "'", int28 == 512); }
public void test219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test219"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); jarArchiveOutputStream12.setEncoding("5"); jarArchiveOutputStream12.setFallbackToUTF8(true); int int17 = jarArchiveOutputStream12.getCount(); try { jarArchiveOutputStream12.write(120); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); }
public void test220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test220"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(false); long long27 = tarArchiveOutputStream4.getBytesWritten(); try { tarArchiveOutputStream4.finish(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); }
public void test221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test221"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); tarArchiveOutputStream4.setLongFileMode((int) (byte) 83); try { tarArchiveOutputStream4.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test222"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); jarArchiveOutputStream12.setEncoding("5"); try { jarArchiveOutputStream12.write(10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test223"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray13 = zipLong12.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray16 = zipLong15.getBytes(); boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true); boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13); tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1); tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true); try { tarArchiveOutputStream4.finish(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); }
public void test224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test224"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream19 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) archiveInputStream18); boolean boolean20 = archiveInputStream18.markSupported(); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test225"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9); boolean boolean11 = zipArchiveOutputStream9.isSeekable(); zipArchiveOutputStream9.flush(); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test226"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream19 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) archiveInputStream18); try { org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry20 = cpioArchiveInputStream19.getNextCPIOEntry(); org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null"); } catch (java.io.EOFException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); }
public void test227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test227"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.InputStream inputStream27 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream28 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream27); long long29 = jarArchiveInputStream28.getBytesRead(); long long30 = jarArchiveInputStream28.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream31 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream28); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream32 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream28); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream33 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream32); int int34 = cpioArchiveInputStream33.available(); int int35 = cpioArchiveInputStream33.getCount(); cpioArchiveInputStream33.close(); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream39 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream33, "x5S", false); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream40 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.ArchiveException: 070707", (java.io.InputStream) zipArchiveInputStream39); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException: 070707 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); }
public void test228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test228"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream23 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream22); int int24 = cpioArchiveInputStream23.available(); int int25 = cpioArchiveInputStream23.getCount(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream26 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream23); cpioArchiveInputStream23.count((long) (byte) 1); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream30 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream23, "070707"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry32 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int33 = tarArchiveEntry32.getDevMinor(); tarArchiveEntry32.setIds((int) (short) 3, 0); int int37 = tarArchiveEntry32.getDevMajor(); boolean boolean38 = tarArchiveEntry32.isFile(); java.io.InputStream inputStream39 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream40 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream39); long long41 = jarArchiveInputStream40.getBytesRead(); long long42 = jarArchiveInputStream40.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream43 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream40); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream44 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream40); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream45 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream44); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream49 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream45, "070702", false, false); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry52 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry52.setDevMinor((int) ' '); boolean boolean55 = cpioArchiveInputStream45.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry52); boolean boolean56 = tarArchiveEntry32.equals((java.lang.Object) tarArchiveEntry52); boolean boolean57 = tarArchiveInputStream30.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry52); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream58 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream30); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream59 = archiveStreamFactory0.createArchiveInputStream("", (java.io.InputStream) zipArchiveInputStream58); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L); org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true); }
public void test229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test229"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); tarArchiveEntry1.setDevMajor((int) (short) 10); boolean boolean15 = tarArchiveEntry1.isDirectory(); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test230"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream11 = null; org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream11); org.apache.commons.compress.archivers.zip.ZipLong zipLong14 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray15 = zipLong14.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong17 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray18 = zipLong17.getBytes(); boolean boolean20 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray15, byteArray18, true); int int23 = tarArchiveInputStream12.read(byteArray15, 0, 32); tarArchiveInputStream12.mark((int) '#'); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream26 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream12); java.io.OutputStream outputStream27 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar"); tarArchiveOutputStream29.count(0L); int int32 = tarArchiveOutputStream29.getCount(); tarArchiveOutputStream29.setBigNumberMode(2); tarArchiveOutputStream29.setAddPaxHeadersForNonAsciiNames(true); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry38 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int39 = tarArchiveEntry38.getDevMinor(); boolean boolean40 = tarArchiveOutputStream29.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry38); boolean boolean41 = tarArchiveInputStream12.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry38); java.lang.String str42 = tarArchiveEntry38.getLinkName(); try { tarArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry38); org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar"); } catch (java.io.UnsupportedEncodingException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(byteArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1)); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, ""); }
public void test231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test231"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream16 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream17 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream16); long long18 = jarArchiveInputStream17.getBytesRead(); long long19 = jarArchiveInputStream17.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream20 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream17); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream17); long long23 = jarArchiveInputStream17.skip((long) 24576); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream17); org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry25 = jarArchiveInputStream24.getNextJarEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry26 = jarArchiveInputStream24.getNextEntry(); jarArchiveInputStream24.count(0L); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry29 = jarArchiveInputStream24.getNextEntry(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream30 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) jarArchiveInputStream24); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNull(jarArchiveEntry25); org.junit.Assert.assertNull(archiveEntry26); org.junit.Assert.assertNull(archiveEntry29); }
public void test232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test232"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); boolean boolean15 = tarArchiveEntry14.isGNUSparse(); tarArchiveEntry14.setUserId(4096); tarArchiveEntry14.setMode(4096); try { arArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry14); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test233"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); java.io.InputStream inputStream24 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24); long long26 = jarArchiveInputStream25.getBytesRead(); long long27 = jarArchiveInputStream25.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25); arArchiveInputStream28.close(); arArchiveInputStream28.pushedBackBytes((-1L)); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream28); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream33, "always", false, false); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream38, (int) (short) 8); org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray43 = zipLong42.getBytes(); long long44 = zipLong42.getValue(); java.io.InputStream inputStream45 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45); long long47 = jarArchiveInputStream46.getBytesRead(); long long48 = jarArchiveInputStream46.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); boolean boolean51 = zipLong42.equals((java.lang.Object) jarArchiveInputStream46); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46, 1000, 1); byte[] byteArray59 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray59); org.apache.commons.compress.archivers.zip.ZipLong zipLong61 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray59); boolean boolean63 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray59, (int) (byte) 50); int int66 = tarArchiveInputStream54.read(byteArray59, (int) (byte) -1, 24576); int int69 = tarArchiveInputStream40.read(byteArray59, 504, (int) 'a'); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream70 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) tarArchiveInputStream40); java.io.OutputStream outputStream72 = null; try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream73 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 103.", outputStream72); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: OutputStream must not be null."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(byteArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(byteArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1)); org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1)); org.junit.Assert.assertNotNull(archiveInputStream70); }
public void test234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test234"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13, (short) 2); cpioArchiveOutputStream21.flush(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream24 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream21, 504); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream27 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream24, (short) (byte) 1, (int) (short) 100); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream28 = archiveStreamFactory0.createArchiveOutputStream("\000\ufffd\000\000", (java.io.OutputStream) tarArchiveOutputStream24); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test235"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); tarArchiveOutputStream4.count(0); try { tarArchiveOutputStream4.finish(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test236"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int13 = tarArchiveEntry12.getDevMinor(); tarArchiveEntry12.setIds((int) (short) 3, 0); int int17 = tarArchiveEntry12.getDevMajor(); boolean boolean18 = tarArchiveEntry12.isFile(); tarArchiveEntry12.setSize((long) 100); boolean boolean21 = tarArchiveEntry12.isCharacterDevice(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); tarArchiveEntry23.setMode((int) (short) 10); java.util.Date date26 = tarArchiveEntry23.getLastModifiedDate(); tarArchiveEntry23.setMode((int) (byte) 120); java.util.Date date29 = tarArchiveEntry23.getModTime(); boolean boolean30 = tarArchiveEntry12.equals(tarArchiveEntry23); tarArchiveEntry23.setSize((long) 16); boolean boolean33 = tarArchiveEntry23.isGNUSparse(); java.io.File file34 = tarArchiveEntry23.getFile(); tarArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry23); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry38 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); boolean boolean39 = tarArchiveEntry38.isGNUSparse(); boolean boolean40 = tarArchiveEntry38.isBlockDevice(); org.apache.commons.compress.archivers.tar.TarArchiveEntry[] tarArchiveEntryArray41 = tarArchiveEntry38.getDirectoryEntries(); java.lang.String str42 = tarArchiveEntry38.getLinkName(); tarArchiveEntry38.setIds((int) (short) 100, (int) ' '); int int46 = tarArchiveEntry38.getUserId(); tarArchiveEntry38.setNames("ZipLong value: 0", ""); java.util.Date date50 = tarArchiveEntry38.getModTime(); boolean boolean51 = tarArchiveOutputStream10.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry38); try { tarArchiveOutputStream10.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: entry 'jar' closed at '0' before the '16' bytes specified in the header were written"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(date26); org.junit.Assert.assertNotNull(date29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNull(file34); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(tarArchiveEntryArray41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, ""); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100); org.junit.Assert.assertNotNull(date50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); }
public void test237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test237"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(4); arArchiveOutputStream10.setLongFileMode(40960); org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding16 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("UTF8"); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream20 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); java.io.InputStream inputStream22 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream23 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream22); long long24 = jarArchiveInputStream23.getBytesRead(); long long25 = jarArchiveInputStream23.getBytesRead(); org.apache.commons.compress.archivers.zip.ZipLong zipLong27 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray28 = zipLong27.getBytes(); int int31 = jarArchiveInputStream23.read(byteArray28, 0, 96); boolean boolean32 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("00", byteArray28); int int35 = arArchiveInputStream20.read(byteArray28, 6, 8); byte[] byteArray40 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean41 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray40); int int44 = arArchiveInputStream20.read(byteArray40, 0, 2048); java.lang.String str45 = zipEncoding16.decode(byteArray40); boolean boolean47 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray40, 31); try { arArchiveOutputStream10.write(byteArray40, (int) (short) 2, (int) (byte) 100); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '100' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(zipEncoding16); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertNotNull(byteArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1)); org.junit.Assert.assertNotNull(byteArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1)); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "65\001\n" + "'", str45, "65\001\n"); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); }
public void test238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test238"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); java.io.InputStream inputStream24 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24); long long26 = jarArchiveInputStream25.getBytesRead(); long long27 = jarArchiveInputStream25.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25); arArchiveInputStream28.close(); arArchiveInputStream28.pushedBackBytes((-1L)); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream28); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream33, "always", false, false); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream38, (int) (short) 8); org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray43 = zipLong42.getBytes(); long long44 = zipLong42.getValue(); java.io.InputStream inputStream45 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45); long long47 = jarArchiveInputStream46.getBytesRead(); long long48 = jarArchiveInputStream46.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); boolean boolean51 = zipLong42.equals((java.lang.Object) jarArchiveInputStream46); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46, 1000, 1); byte[] byteArray59 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray59); org.apache.commons.compress.archivers.zip.ZipLong zipLong61 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray59); boolean boolean63 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray59, (int) (byte) 50); int int66 = tarArchiveInputStream54.read(byteArray59, (int) (byte) -1, 24576); int int69 = tarArchiveInputStream40.read(byteArray59, 504, (int) 'a'); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream70 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) tarArchiveInputStream40); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory72 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream74 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream76 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream74, "jar"); tarArchiveOutputStream76.count(0L); long long79 = tarArchiveOutputStream76.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream80 = archiveStreamFactory72.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream76); int int81 = tarArchiveOutputStream76.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream82 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream76); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream83 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream76); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream84 = archiveStreamFactory0.createArchiveOutputStream("cpio", (java.io.OutputStream) tarArchiveOutputStream76); java.io.OutputStream outputStream86 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream88 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream86, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream89 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream86); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy90 = null; zipArchiveOutputStream89.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy90); int int92 = zipArchiveOutputStream89.getCount(); java.lang.String str93 = zipArchiveOutputStream89.getEncoding(); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode94 = null; zipArchiveOutputStream89.setUseZip64(zip64Mode94); zipArchiveOutputStream89.setFallbackToUTF8(false); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream98 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream89); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream99 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) zipArchiveOutputStream89); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(byteArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(byteArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1)); org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1)); org.junit.Assert.assertNotNull(archiveInputStream70); org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream80); org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0); org.junit.Assert.assertNotNull(archiveOutputStream84); org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0); org.junit.Assert.assertEquals("'" + str93 + "' != '" + "UTF8" + "'", str93, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream99); }
public void test239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test239"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream1 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream2 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream1); long long3 = jarArchiveInputStream2.getBytesRead(); long long4 = jarArchiveInputStream2.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream2); arArchiveInputStream5.close(); arArchiveInputStream5.pushedBackBytes((-1L)); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream5); arArchiveInputStream5.count((int) (byte) 54); boolean boolean12 = arArchiveInputStream5.markSupported(); arArchiveInputStream5.mark(33188); arArchiveInputStream5.close(); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream5); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream17 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) zipArchiveInputStream16); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test240"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); java.io.InputStream inputStream24 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24); long long26 = jarArchiveInputStream25.getBytesRead(); long long27 = jarArchiveInputStream25.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25); arArchiveInputStream28.close(); arArchiveInputStream28.pushedBackBytes((-1L)); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream28); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream33, "always", false, false); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream38, (int) (short) 8); org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray43 = zipLong42.getBytes(); long long44 = zipLong42.getValue(); java.io.InputStream inputStream45 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45); long long47 = jarArchiveInputStream46.getBytesRead(); long long48 = jarArchiveInputStream46.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); boolean boolean51 = zipLong42.equals((java.lang.Object) jarArchiveInputStream46); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46, 1000, 1); byte[] byteArray59 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray59); org.apache.commons.compress.archivers.zip.ZipLong zipLong61 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray59); boolean boolean63 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray59, (int) (byte) 50); int int66 = tarArchiveInputStream54.read(byteArray59, (int) (byte) -1, 24576); int int69 = tarArchiveInputStream40.read(byteArray59, 504, (int) 'a'); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream70 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) tarArchiveInputStream40); java.io.InputStream inputStream72 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream73 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream72); long long74 = jarArchiveInputStream73.getBytesRead(); long long75 = jarArchiveInputStream73.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream76 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream73); arArchiveInputStream76.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream80 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream76, 24576, 255); int int81 = tarArchiveInputStream80.available(); int int82 = tarArchiveInputStream80.getRecordSize(); int int83 = tarArchiveInputStream80.available(); long long85 = tarArchiveInputStream80.skip((long) 31); tarArchiveInputStream80.pushedBackBytes((long) 504); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream88 = archiveStreamFactory0.createArchiveInputStream("ZipLong value: 8", (java.io.InputStream) tarArchiveInputStream80); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 8 not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(byteArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(byteArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1)); org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1)); org.junit.Assert.assertNotNull(archiveInputStream70); org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L); org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L); org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0); org.junit.Assert.assertTrue("'" + int82 + "' != '" + 255 + "'", int82 == 255); org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0); org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L); }
public void test241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test241"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(83); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int15 = tarArchiveEntry14.getDevMinor(); tarArchiveEntry14.setIds((int) (short) 3, 0); long long19 = tarArchiveEntry14.getSize(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry21 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int22 = tarArchiveEntry21.getDevMinor(); tarArchiveEntry21.setUserId(0); java.io.File file25 = tarArchiveEntry21.getFile(); java.util.Date date26 = tarArchiveEntry21.getLastModifiedDate(); tarArchiveEntry21.setMode(0); java.lang.String str29 = org.apache.commons.compress.utils.ArchiveUtils.toString((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry21); boolean boolean30 = tarArchiveEntry21.isPaxHeader(); boolean boolean31 = tarArchiveEntry14.isDescendent(tarArchiveEntry21); try { arArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry14); org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.ar.ArArchiveEntry"); } catch (java.lang.ClassCastException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNull(file25); org.junit.Assert.assertNotNull(date26); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-    0 jar" + "'", str29, "-    0 jar"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); }
public void test242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test242"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.flush(); arArchiveOutputStream10.setLongFileMode((int) (byte) -1); try { arArchiveOutputStream10.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test243"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); jarArchiveOutputStream12.setEncoding("5"); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode15 = null; jarArchiveOutputStream12.setUseZip64(zip64Mode15); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry17 = null; try { jarArchiveOutputStream12.putArchiveEntry(archiveEntry17); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test244"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); java.io.InputStream inputStream23 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream23); long long25 = jarArchiveInputStream24.getBytesRead(); long long26 = jarArchiveInputStream24.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream27 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream24); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream28 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream24); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry29 = tarArchiveInputStream28.getNextEntry(); long long30 = tarArchiveInputStream28.getBytesRead(); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream31 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream28); boolean boolean32 = zipArchiveInputStream31.markSupported(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream33 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream31); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream34 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) jarArchiveInputStream33); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry36 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int37 = tarArchiveEntry36.getDevMinor(); tarArchiveEntry36.setUserId(0); java.io.File file40 = tarArchiveEntry36.getFile(); tarArchiveEntry36.setLinkName("org.apache.commons.compress.archivers.ArchiveException: \000"); long long43 = tarArchiveEntry36.getSize(); boolean boolean44 = zipArchiveInputStream34.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry36); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream45 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) zipArchiveInputStream34); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertNull(archiveEntry29); org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0); org.junit.Assert.assertNull(file40); org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); }
public void test245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test245"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream19 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream15, 64); int int20 = tarArchiveInputStream19.available(); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream19, "tar", false, false); int int25 = tarArchiveInputStream19.getRecordSize(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream26 = archiveStreamFactory0.createArchiveInputStream("", (java.io.InputStream) tarArchiveInputStream19); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 512 + "'", int25 == 512); }
public void test246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test246"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.OutputStream outputStream27 = null; try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream28 = archiveStreamFactory0.createArchiveOutputStream("ZipLong value: 0", outputStream27); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: OutputStream must not be null."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); }
public void test247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test247"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); zipArchiveOutputStream9.setLevel((int) (short) 4); zipArchiveOutputStream9.setMethod((int) (byte) 88); zipArchiveOutputStream9.setUseLanguageEncodingFlag(true); java.io.File file16 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry18 = zipArchiveOutputStream9.createArchiveEntry(file16, "org.apache.commons.compress.archivers.ArchiveException: org.apache.commons.compress.archivers.ArchiveException: \000"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test248"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.InputStream inputStream26 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream27 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream26); long long28 = jarArchiveInputStream27.getBytesRead(); long long29 = jarArchiveInputStream27.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream30 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream27); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream27); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream34 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream31, (int) (byte) 53, (int) (short) -1); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream37 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream34, 40960, "jar"); java.io.InputStream inputStream38 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream39 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream38); long long40 = jarArchiveInputStream39.getBytesRead(); long long41 = jarArchiveInputStream39.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream42 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream39); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream43 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream39); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream44 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream43); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream48 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream44, "070702", false, false); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry51 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry51.setDevMinor((int) ' '); boolean boolean54 = cpioArchiveInputStream44.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry51); boolean boolean55 = tarArchiveInputStream34.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry51); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry57 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int58 = tarArchiveEntry57.getDevMinor(); tarArchiveEntry57.setIds((int) (short) 3, 0); java.lang.String str62 = tarArchiveEntry57.getGroupName(); tarArchiveEntry57.setDevMinor(0); tarArchiveEntry57.setLinkName("PK\003\004"); boolean boolean67 = tarArchiveInputStream34.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry57); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream68 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream34); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L); org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, ""); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true); }
public void test249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test249"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.InputStream inputStream27 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream28 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream27); long long29 = jarArchiveInputStream28.getBytesRead(); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) jarArchiveInputStream28); org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry31 = zipArchiveInputStream30.getNextZipEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry32 = zipArchiveInputStream30.getNextEntry(); java.io.InputStream inputStream33 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream33); long long35 = jarArchiveInputStream34.getBytesRead(); long long36 = jarArchiveInputStream34.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream37 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream34); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream38 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream34); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream41 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream38, (int) (byte) 53, (int) (short) -1); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream44 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream41, 40960, "jar"); int int45 = tarArchiveInputStream44.available(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry46 = tarArchiveInputStream44.getNextEntry(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry49 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); boolean boolean50 = tarArchiveEntry49.isGNUSparse(); java.lang.String str51 = tarArchiveEntry49.getLinkName(); tarArchiveEntry49.setNames("0\000", "jar"); java.lang.String str55 = tarArchiveEntry49.getName(); boolean boolean56 = tarArchiveInputStream44.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry49); java.io.InputStream inputStream57 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream58 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream57); long long59 = jarArchiveInputStream58.getBytesRead(); long long60 = jarArchiveInputStream58.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream61 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream58); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream62 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream58); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream63 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream62); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream64 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream62); org.apache.commons.compress.archivers.zip.ZipLong zipLong66 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray67 = zipLong66.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong69 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray70 = zipLong69.getBytes(); boolean boolean72 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray67, byteArray70, true); boolean boolean73 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray67); int int76 = tarArchiveInputStream62.read(byteArray67, (int) (short) 100, 100); long long77 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray67); int int78 = tarArchiveInputStream44.read(byteArray67); int int81 = zipArchiveInputStream30.read(byteArray67, 2048, (int) (byte) 10); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream82 = archiveStreamFactory0.createArchiveInputStream("\ufffd\003\000\000", (java.io.InputStream) zipArchiveInputStream30); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.zip.Zip64RequiredException: ???? not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L); org.junit.Assert.assertNull(zipArchiveEntry31); org.junit.Assert.assertNull(archiveEntry32); org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNull(archiveEntry46); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, ""); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, ""); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true); org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L); org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L); org.junit.Assert.assertNotNull(byteArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray70); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1)); org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L); org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1)); org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1)); }
public void test250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test250"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); long long13 = tarArchiveEntry1.getSize(); org.apache.commons.compress.archivers.tar.TarArchiveEntry[] tarArchiveEntryArray14 = tarArchiveEntry1.getDirectoryEntries(); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(tarArchiveEntryArray14); }
public void test251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test251"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); tarArchiveEntry1.setDevMajor((int) (short) 10); long long15 = tarArchiveEntry1.getRealSize(); tarArchiveEntry1.setSize((long) 2048); tarArchiveEntry1.setDevMinor(49152); int int20 = tarArchiveEntry1.getGroupId(); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); }
public void test252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test252"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); int int13 = tarArchiveEntry1.getGroupId(); java.io.File file14 = tarArchiveEntry1.getFile(); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNull(file14); }
public void test253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test253"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.setLongFileMode((int) ' '); arArchiveOutputStream10.setLongFileMode((-1)); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test254"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.setLongFileMode((int) ' '); byte[] byteArray17 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes(8192L); try { arArchiveOutputStream10.write(byteArray17, (int) 'a', 504); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '504' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(byteArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 32, 0, 0]"); }
public void test255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test255"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); zipArchiveOutputStream9.setLevel((int) (short) 4); zipArchiveOutputStream9.setMethod((int) (byte) 88); zipArchiveOutputStream9.setUseLanguageEncodingFlag(true); java.io.OutputStream outputStream16 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream18 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream16, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream16); zipArchiveOutputStream19.setUseLanguageEncodingFlag(true); zipArchiveOutputStream19.count((long) (short) 2); java.io.OutputStream outputStream24 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream26 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream24, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream27 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream24); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy28 = null; zipArchiveOutputStream27.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy28); int int30 = zipArchiveOutputStream27.getCount(); java.lang.String str31 = zipArchiveOutputStream27.getEncoding(); zipArchiveOutputStream27.count(0); zipArchiveOutputStream27.setLevel((int) (byte) 1); java.io.OutputStream outputStream36 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream38 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream36, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream39 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream36); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy40 = null; zipArchiveOutputStream39.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy40); int int42 = zipArchiveOutputStream39.getCount(); zipArchiveOutputStream39.setEncoding("cpio"); zipArchiveOutputStream39.flush(); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy46 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS; java.lang.String str47 = unicodeExtraFieldPolicy46.toString(); zipArchiveOutputStream39.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy46); zipArchiveOutputStream27.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy46); zipArchiveOutputStream19.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy46); zipArchiveOutputStream9.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy46); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTF8" + "'", str31, "UTF8"); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "always" + "'", str47, "always"); }
public void test256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test256"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) archiveInputStream15, "encryption", true, true); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry20 = zipArchiveInputStream19.getNextEntry(); org.apache.commons.compress.archivers.zip.ZipLong zipLong22 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray23 = zipLong22.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong25 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray26 = zipLong25.getBytes(); boolean boolean28 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray23, byteArray26, true); int int31 = zipArchiveInputStream19.read(byteArray23, (int) (byte) 76, (int) 'a'); try { org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream34 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream19, (int) (byte) 55, "-    0 070701"); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: -    0 070701"); } catch (java.nio.charset.IllegalCharsetNameException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertNull(archiveEntry20); org.junit.Assert.assertNotNull(byteArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1)); }
public void test257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test257"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.flush(); arArchiveOutputStream10.setLongFileMode(32); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int19 = tarArchiveEntry18.getDevMinor(); tarArchiveEntry18.setUserId(0); java.io.File file22 = tarArchiveEntry18.getFile(); tarArchiveEntry18.setLinkName("org.apache.commons.compress.archivers.ArchiveException: \000"); boolean boolean25 = tarArchiveEntry18.isDirectory(); tarArchiveEntry18.setUserName(""); java.lang.String str28 = tarArchiveEntry18.getName(); try { arArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry18); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNull(file22); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "jar" + "'", str28, "jar"); }
public void test258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test258"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream19 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) archiveInputStream18); cpioArchiveInputStream19.mark(512); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); }
public void test259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test259"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); boolean boolean13 = tarArchiveEntry1.isFile(); int int14 = tarArchiveEntry1.getDevMinor(); boolean boolean15 = tarArchiveEntry1.isLink(); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test260"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); boolean boolean19 = arArchiveInputStream15.markSupported(); try { arArchiveInputStream15.reset(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: mark/reset not supported"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test261"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); try { jarArchiveOutputStream10.finish(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '4' bytes exceeds size in header of '0' bytes for entry 'null'"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test262"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); int int12 = tarArchiveEntry1.getMode(); java.lang.String str13 = org.apache.commons.compress.utils.ArchiveUtils.toString((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry1); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 33188 + "'", int12 == 33188); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-    0 org.apache.commons.compress.archivers.ArchiveException: ustar\000" + "'", str13, "-    0 org.apache.commons.compress.archivers.ArchiveException: ustar\000"); }
public void test263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test263"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); jarArchiveOutputStream11.setUseLanguageEncodingFlag(false); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test264"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); tarArchiveEntry1.setDevMajor((int) (short) 10); long long15 = tarArchiveEntry1.getRealSize(); java.io.File file16 = tarArchiveEntry1.getFile(); java.lang.String str17 = tarArchiveEntry1.getName(); long long18 = tarArchiveEntry1.getSize(); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); org.junit.Assert.assertNull(file16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.compress.archivers.ArchiveException: ustar\000" + "'", str17, "org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); }
public void test265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test265"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); java.io.OutputStream outputStream20 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream20, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream23 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream20); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy24 = null; zipArchiveOutputStream23.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy24); boolean boolean26 = zipArchiveOutputStream23.isSeekable(); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream27 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream23); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream28 = archiveStreamFactory0.createArchiveOutputStream("TRAILER!!!", (java.io.OutputStream) zipArchiveOutputStream23); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: TRAILER!!! not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); }
public void test266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test266"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); java.io.OutputStream outputStream13 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream13, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream13); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy17 = null; zipArchiveOutputStream16.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy17); boolean boolean19 = zipArchiveOutputStream16.isSeekable(); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode20 = null; zipArchiveOutputStream16.setUseZip64(zip64Mode20); zipArchiveOutputStream16.flush(); zipArchiveOutputStream16.setMethod(0); zipArchiveOutputStream16.setMethod((int) (short) 100); zipArchiveOutputStream16.setFallbackToUTF8(false); java.io.OutputStream outputStream29 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream29, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream32 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream29); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy33 = null; zipArchiveOutputStream32.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy33); boolean boolean35 = zipArchiveOutputStream32.isSeekable(); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode36 = null; zipArchiveOutputStream32.setUseZip64(zip64Mode36); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream38 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream32); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy39 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS; java.lang.String str40 = unicodeExtraFieldPolicy39.toString(); jarArchiveOutputStream38.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy39); zipArchiveOutputStream16.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy39); jarArchiveOutputStream11.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy39); java.lang.String str44 = unicodeExtraFieldPolicy39.toString(); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "always" + "'", str40, "always"); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "always" + "'", str44, "always"); }
public void test267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test267"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); java.lang.String str13 = tarArchiveEntry1.getName(); boolean boolean14 = tarArchiveEntry1.isExtended(); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.compress.archivers.ArchiveException: ustar\000" + "'", str13, "org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test268"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream17 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16); try { org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry18 = cpioArchiveInputStream16.getNextCPIOEntry(); org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null"); } catch (java.io.EOFException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); }
public void test269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test269"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.flush(); arArchiveOutputStream10.setLongFileMode((int) (byte) -1); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream18 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream10, 1); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test270"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.setLongFileMode((int) ' '); java.io.File file16 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry18 = arArchiveOutputStream10.createArchiveEntry(file16, "org.apache.commons.compress.archivers.dump.DumpArchiveException"); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test271"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream20 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16, 0, 128, "x5S"); java.io.OutputStream outputStream21 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream23 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream21, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream21); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy25 = null; zipArchiveOutputStream24.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy25); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream27 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream24); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream28 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream27); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry30 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("encryption"); boolean boolean31 = tarArchiveEntry30.isLink(); java.io.File file32 = tarArchiveEntry30.getFile(); tarArchiveOutputStream27.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry30); java.io.InputStream inputStream34 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream35 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream34); long long36 = jarArchiveInputStream35.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream37 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream35); java.io.InputStream inputStream39 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream40 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream39); long long41 = jarArchiveInputStream40.getBytesRead(); long long42 = jarArchiveInputStream40.getBytesRead(); org.apache.commons.compress.archivers.zip.ZipLong zipLong44 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray45 = zipLong44.getBytes(); int int48 = jarArchiveInputStream40.read(byteArray45, 0, 96); boolean boolean49 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("00", byteArray45); int int52 = arArchiveInputStream37.read(byteArray45, 6, 8); org.apache.commons.compress.archivers.zip.ZipLong zipLong53 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray45); byte[] byteArray54 = zipLong53.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong55 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray54); tarArchiveOutputStream27.write(byteArray54, (int) (byte) 103, 0); java.lang.String str61 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray54, 49152, 0); try { int int64 = cpioArchiveInputStream16.read(byteArray54, (int) (byte) 52, 0); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null"); } catch (java.lang.IndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNull(file32); org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L); org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L); org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L); org.junit.Assert.assertNotNull(byteArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1)); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1)); org.junit.Assert.assertNotNull(byteArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 0, 0]"); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, ""); }
public void test272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test272"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream11 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); try { arArchiveOutputStream11.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test273"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); boolean boolean19 = arArchiveInputStream15.markSupported(); long long20 = arArchiveInputStream15.getBytesRead(); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); }
public void test274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test274"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); java.io.File file11 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry13 = arArchiveOutputStream10.createArchiveEntry(file11, "65\001\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test275"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); jarArchiveOutputStream12.setEncoding("5"); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode15 = null; jarArchiveOutputStream12.setUseZip64(zip64Mode15); try { jarArchiveOutputStream12.flush(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test276"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); int int10 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int13 = tarArchiveEntry12.getDevMinor(); tarArchiveEntry12.setIds((int) (short) 3, 0); long long17 = tarArchiveEntry12.getSize(); tarArchiveEntry12.setSize((long) (short) 3); java.lang.String str20 = org.apache.commons.compress.utils.ArchiveUtils.toString((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry12); boolean boolean21 = tarArchiveEntry12.isExtended(); boolean boolean22 = tarArchiveEntry12.isLink(); int int23 = tarArchiveEntry12.getDevMinor(); try { tarArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry12); org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar"); } catch (java.io.UnsupportedEncodingException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-    3 jar" + "'", str20, "-    3 jar"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); }
public void test277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test277"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.setLongFileMode(257); try { arArchiveOutputStream10.close(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test278"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); java.io.InputStream inputStream24 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24); long long26 = jarArchiveInputStream25.getBytesRead(); long long27 = jarArchiveInputStream25.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25); arArchiveInputStream28.close(); arArchiveInputStream28.pushedBackBytes((-1L)); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream28); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream33, "always", false, false); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream38, (int) (short) 8); org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray43 = zipLong42.getBytes(); long long44 = zipLong42.getValue(); java.io.InputStream inputStream45 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45); long long47 = jarArchiveInputStream46.getBytesRead(); long long48 = jarArchiveInputStream46.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46); boolean boolean51 = zipLong42.equals((java.lang.Object) jarArchiveInputStream46); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46, 1000, 1); byte[] byteArray59 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray59); org.apache.commons.compress.archivers.zip.ZipLong zipLong61 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray59); boolean boolean63 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray59, (int) (byte) 50); int int66 = tarArchiveInputStream54.read(byteArray59, (int) (byte) -1, 24576); int int69 = tarArchiveInputStream40.read(byteArray59, 504, (int) 'a'); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream70 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) tarArchiveInputStream40); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory72 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream74 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream76 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream74, "jar"); tarArchiveOutputStream76.count(0L); long long79 = tarArchiveOutputStream76.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream80 = archiveStreamFactory72.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream76); int int81 = tarArchiveOutputStream76.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream82 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream76); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream83 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream76); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream84 = archiveStreamFactory0.createArchiveOutputStream("cpio", (java.io.OutputStream) tarArchiveOutputStream76); java.io.OutputStream outputStream86 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream88 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream86, 8192); int int89 = tarArchiveOutputStream88.getCount(); int int90 = tarArchiveOutputStream88.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream93 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream88, 64, (int) (short) 3); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream94 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream88); tarArchiveOutputStream88.setLongFileMode((int) (byte) 100); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream97 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.ArchiveException: \000", (java.io.OutputStream) tarArchiveOutputStream88); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException: ? not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L); org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L); org.junit.Assert.assertNotNull(byteArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L); org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(byteArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1)); org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1)); org.junit.Assert.assertNotNull(archiveInputStream70); org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream80); org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0); org.junit.Assert.assertNotNull(archiveOutputStream84); org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0); org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0); }
public void test279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test279"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream17 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16); int int18 = cpioArchiveInputStream16.available(); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); }
public void test280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test280"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.setLongFileMode((int) ' '); arArchiveOutputStream10.setLongFileMode((int) (byte) 83); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream20 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream10, (int) (byte) 55, (int) (byte) 100); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test281"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); tarArchiveEntry12.setModTime((long) 1024); java.lang.String str15 = tarArchiveEntry12.getUserName(); java.lang.String str16 = tarArchiveEntry12.getName(); boolean boolean17 = tarArchiveEntry12.isGlobalPaxHeader(); tarArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry12); boolean boolean19 = tarArchiveEntry12.isCharacterDevice(); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "jar" + "'", str16, "jar"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test282"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.setLongFileMode(4); arArchiveOutputStream10.setLongFileMode(40960); arArchiveOutputStream10.finish(); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test283"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int2 = tarArchiveEntry1.getDevMinor(); tarArchiveEntry1.setIds((int) (short) 3, 0); java.lang.String str6 = tarArchiveEntry1.getGroupName(); tarArchiveEntry1.setDevMinor(0); boolean boolean9 = tarArchiveEntry1.isSymbolicLink(); tarArchiveEntry1.setGroupId((int) (short) 2); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory12 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream14 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream16 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream14, "jar"); tarArchiveOutputStream16.count(0L); long long19 = tarArchiveOutputStream16.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream20 = archiveStreamFactory12.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream16); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream21 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream20); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream22 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream21); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream23 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream22); java.lang.String str24 = jarArchiveOutputStream22.getEncoding(); boolean boolean25 = tarArchiveEntry1.equals((java.lang.Object) jarArchiveOutputStream22); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream27 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream22, (int) (short) 1); tarArchiveOutputStream27.setAddPaxHeadersForNonAsciiNames(true); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream20); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTF8" + "'", str24, "UTF8"); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); }
public void test284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test284"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9); int int11 = zipArchiveOutputStream9.getCount(); try { zipArchiveOutputStream9.write(0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test285"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.OutputStream outputStream10 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null; zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14); boolean boolean16 = zipArchiveOutputStream13.isSeekable(); zipArchiveOutputStream13.setLevel((int) (short) 2); boolean boolean19 = zipArchiveOutputStream13.isSeekable(); java.lang.String str20 = zipArchiveOutputStream13.getEncoding(); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21); java.io.InputStream inputStream24 = null; org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream25 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream24); org.apache.commons.compress.archivers.zip.ZipLong zipLong27 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray28 = zipLong27.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong30 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray31 = zipLong30.getBytes(); boolean boolean33 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray28, byteArray31, true); int int36 = tarArchiveInputStream25.read(byteArray28, 0, 32); tarArchiveInputStream25.mark((int) '#'); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream39 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream25); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream40 = archiveStreamFactory0.createArchiveInputStream("-    0 ar", (java.io.InputStream) tarArchiveInputStream25); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: -    0 ar not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8"); org.junit.Assert.assertNotNull(archiveOutputStream22); org.junit.Assert.assertNotNull(byteArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true); org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1)); }
public void test286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test286"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); int int12 = tarArchiveEntry1.getMode(); tarArchiveEntry1.setSize((long) (short) 8); tarArchiveEntry1.setSize(3L); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 33188 + "'", int12 == 33188); }
public void test287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test287"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry17 = zipArchiveInputStream14.getNextZipEntry(); zipArchiveInputStream14.close(); int int19 = zipArchiveInputStream14.getCount(); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertNull(zipArchiveEntry17); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); }
public void test288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test288"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.OutputStream outputStream27 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream27); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy31 = null; zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy31); boolean boolean33 = zipArchiveOutputStream30.isSeekable(); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode34 = null; zipArchiveOutputStream30.setUseZip64(zip64Mode34); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream36 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream30); zipArchiveOutputStream30.setUseLanguageEncodingFlag(false); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream39 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream30); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream40 = archiveStreamFactory0.createArchiveOutputStream("jar", (java.io.OutputStream) jarArchiveOutputStream39); java.io.InputStream inputStream42 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream43 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream42); long long44 = jarArchiveInputStream43.getBytesRead(); long long45 = jarArchiveInputStream43.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream46 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream43); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream47 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream43); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream47, (int) (byte) 53, (int) (short) -1); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream53 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream50, 40960, "jar"); java.io.InputStream inputStream54 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream55 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream54); long long56 = jarArchiveInputStream55.getBytesRead(); long long57 = jarArchiveInputStream55.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream58 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream55); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream59 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream55); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream60 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream59); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream64 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream60, "070702", false, false); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry67 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0); tarArchiveEntry67.setDevMinor((int) ' '); boolean boolean70 = cpioArchiveInputStream60.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry67); boolean boolean71 = tarArchiveInputStream50.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry67); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream72 = archiveStreamFactory0.createArchiveInputStream("encryption", (java.io.InputStream) tarArchiveInputStream50); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: encryption not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(archiveOutputStream40); org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L); org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L); org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L); org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true); }
public void test289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test289"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); java.io.OutputStream outputStream20 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream20, "jar"); tarArchiveOutputStream22.count(0L); int int25 = tarArchiveOutputStream22.getCount(); tarArchiveOutputStream22.setBigNumberMode(2); int int28 = tarArchiveOutputStream22.getRecordSize(); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream29 = archiveStreamFactory0.createArchiveOutputStream("", (java.io.OutputStream) tarArchiveOutputStream22); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 512 + "'", int28 == 512); }
public void test290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test290"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); java.io.InputStream inputStream20 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream21 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream20); long long22 = jarArchiveInputStream21.getBytesRead(); long long23 = jarArchiveInputStream21.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream24 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream21); arArchiveInputStream24.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream26 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream24); tarArchiveInputStream26.mark((int) (byte) 53); boolean boolean29 = tarArchiveInputStream26.markSupported(); long long31 = tarArchiveInputStream26.skip((-1L)); tarArchiveInputStream26.close(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream33 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) tarArchiveInputStream26); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry34 = jarArchiveInputStream33.getNextEntry(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream35 = archiveStreamFactory0.createArchiveInputStream("always", (java.io.InputStream) jarArchiveInputStream33); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: always not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L); org.junit.Assert.assertNull(archiveEntry34); }
public void test291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test291"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); zipArchiveOutputStream9.setLevel((int) (short) 4); zipArchiveOutputStream9.setMethod((int) (byte) 88); zipArchiveOutputStream9.setUseLanguageEncodingFlag(true); try { zipArchiveOutputStream9.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test292"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) archiveInputStream15, "encryption", true, true); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry20 = zipArchiveInputStream19.getNextEntry(); org.apache.commons.compress.archivers.zip.ZipLong zipLong22 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray23 = zipLong22.getBytes(); org.apache.commons.compress.archivers.zip.ZipLong zipLong25 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray26 = zipLong25.getBytes(); boolean boolean28 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray23, byteArray26, true); int int31 = zipArchiveInputStream19.read(byteArray23, (int) (byte) 76, (int) 'a'); try { zipArchiveInputStream19.reset(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: mark/reset not supported"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertNull(archiveEntry20); org.junit.Assert.assertNotNull(byteArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1)); }
public void test293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test293"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); jarArchiveInputStream18.close(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18); java.io.OutputStream outputStream27 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar"); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream27); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy31 = null; zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy31); boolean boolean33 = zipArchiveOutputStream30.isSeekable(); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode34 = null; zipArchiveOutputStream30.setUseZip64(zip64Mode34); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream36 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream30); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream36, (int) (byte) 88, 40960, "070702"); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream41 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream36); zipArchiveOutputStream36.count((long) (byte) 103); zipArchiveOutputStream36.count((int) (byte) 54); zipArchiveOutputStream36.flush(); java.lang.String str47 = zipArchiveOutputStream36.getEncoding(); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream48 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream36); try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream49 = archiveStreamFactory0.createArchiveOutputStream("\000\ufffd\000\000", (java.io.OutputStream) jarArchiveOutputStream48); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertNotNull(archiveInputStream25); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTF8" + "'", str47, "UTF8"); }
public void test294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test294"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); zipArchiveOutputStream9.setLevel((int) (short) 4); zipArchiveOutputStream9.setMethod((int) (byte) 88); zipArchiveOutputStream9.setUseLanguageEncodingFlag(true); org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode16 = null; zipArchiveOutputStream9.setUseZip64(zip64Mode16); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream19 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9, (int) (short) 8); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test295"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); tarArchiveOutputStream10.setBigNumberMode(3); try { org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream10, "org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!!"); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!!"); } catch (java.nio.charset.IllegalCharsetNameException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test296"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); long long10 = tarArchiveOutputStream4.getBytesWritten(); java.io.File file11 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry13 = tarArchiveOutputStream4.createArchiveEntry(file11, "org.apache.commons.compress.archivers.ArchiveException: 070707"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L); }
public void test297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test297"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = tarArchiveInputStream22.getNextEntry(); long long24 = tarArchiveInputStream22.getBytesRead(); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream25 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream22); int int26 = zipArchiveInputStream25.available(); int int27 = zipArchiveInputStream25.getCount(); int int28 = zipArchiveInputStream25.available(); org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream29 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream25); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream30 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream25); long long32 = cpioArchiveInputStream30.skip(10L); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream33 = archiveStreamFactory0.createArchiveInputStream("cpio", (java.io.InputStream) cpioArchiveInputStream30); org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertNull(archiveEntry23); org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L); org.junit.Assert.assertNotNull(archiveInputStream33); }
public void test298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test298"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); long long19 = archiveInputStream18.getBytesRead(); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); }
public void test299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test299"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); tarArchiveOutputStream4.setLongFileMode((int) '4'); try { tarArchiveOutputStream4.flush(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test300"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); int int11 = tarArchiveOutputStream4.getCount(); try { tarArchiveOutputStream4.finish(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test301"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); zipArchiveOutputStream9.setMethod(4); java.io.File file12 = null; try { org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = zipArchiveOutputStream9.createArchiveEntry(file12, "ar"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); }
public void test302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test302"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); tarArchiveOutputStream4.setBigNumberMode(256); try { org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream13 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, "ZipLong value: 1000"); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ZipLong value: 1000"); } catch (java.nio.charset.IllegalCharsetNameException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test303"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream16 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream17 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream16); long long18 = jarArchiveInputStream17.getBytesRead(); long long19 = jarArchiveInputStream17.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream20 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream17); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream17); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry22 = tarArchiveInputStream21.getNextEntry(); long long23 = tarArchiveInputStream21.getBytesRead(); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream21); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry25 = tarArchiveInputStream21.getNextEntry(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream26 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported."); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertNull(archiveEntry22); org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L); org.junit.Assert.assertNull(archiveEntry25); }
public void test304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test304"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; try { org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream3 = archiveStreamFactory0.createArchiveOutputStream(" \000", outputStream2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: OutputStream must not be null."); } catch (java.lang.IllegalArgumentException e) { } }
public void test305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test305"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); arArchiveOutputStream10.count((long) (byte) 48); arArchiveOutputStream10.flush(); arArchiveOutputStream10.setLongFileMode((int) (byte) -1); int int17 = arArchiveOutputStream10.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry20 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("ar", (byte) 0); long long21 = tarArchiveEntry20.getSize(); tarArchiveEntry20.setSize((long) 256); byte[] byteArray25 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes((long) 61440); boolean boolean26 = tarArchiveEntry20.equals((java.lang.Object) 61440); tarArchiveEntry20.setSize((long) 16384); java.util.Date date29 = tarArchiveEntry20.getLastModifiedDate(); try { arArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry20); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48); org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L); org.junit.Assert.assertNotNull(byteArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, -16, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(date29); }
public void test306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test306"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14); arArchiveInputStream15.close(); arArchiveInputStream15.close(); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15); archiveInputStream18.reset(); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) archiveInputStream18); try { org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) archiveInputStream18, "-    0 "); org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: -    0 "); } catch (java.nio.charset.IllegalCharsetNameException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(archiveInputStream18); }
public void test307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test307"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.InputStream inputStream2 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2); long long4 = jarArchiveInputStream3.getBytesRead(); long long5 = jarArchiveInputStream3.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry(); org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry(); tarArchiveInputStream7.count((long) 100); org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true); org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14); java.io.InputStream inputStream17 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17); long long19 = jarArchiveInputStream18.getBytesRead(); long long20 = jarArchiveInputStream18.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18); org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream23 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream22); int int24 = cpioArchiveInputStream23.available(); int int25 = cpioArchiveInputStream23.available(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream26 = archiveStreamFactory0.createArchiveInputStream("data descriptor", (java.io.InputStream) cpioArchiveInputStream23); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: data descriptor not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L); org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L); org.junit.Assert.assertNull(archiveEntry8); org.junit.Assert.assertNull(archiveEntry9); org.junit.Assert.assertNotNull(archiveInputStream15); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L); org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1); }
public void test308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test308"); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream4 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar"); tarArchiveOutputStream6.count(0L); long long9 = tarArchiveOutputStream6.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6); boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar"); long long12 = tarArchiveEntry1.getSize(); long long13 = tarArchiveEntry1.getRealSize(); org.apache.commons.compress.archivers.zip.ZipLong zipLong14 = org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG; byte[] byteArray15 = zipLong14.getBytes(); boolean boolean17 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray15, 16877); long long18 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray15); long long19 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray15); byte[] byteArray26 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 }; boolean boolean27 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray26); org.apache.commons.compress.archivers.zip.ZipLong zipLong28 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray26); boolean boolean30 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray26, (int) (byte) 50); java.io.InputStream inputStream31 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream32 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream31); long long33 = jarArchiveInputStream32.getBytesRead(); long long34 = jarArchiveInputStream32.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream35 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream32); arArchiveInputStream35.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream37 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream35); org.apache.commons.compress.archivers.zip.ZipLong zipLong39 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray40 = zipLong39.getBytes(); long long41 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray40); int int44 = tarArchiveInputStream37.read(byteArray40, 0, (int) (short) 0); boolean boolean46 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray40, (int) (short) -1); boolean boolean48 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray26, byteArray40, false); boolean boolean50 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray40, 0); boolean boolean53 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray15, (int) (byte) 51, (-1), byteArray40, 1, (int) '#'); org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding55 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("5"); try { tarArchiveEntry1.writeEntryHeader(byteArray15, zipEncoding55, false); org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 5"); } catch (java.io.UnsupportedEncodingException e) { } org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertNotNull(zipLong14); org.junit.Assert.assertNotNull(byteArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[80, 75, 3, 4]"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 67324752L + "'", long18 == 67324752L); org.junit.Assert.assertTrue("'" + long19 + "' != '" + 162L + "'", long19 == 162L); org.junit.Assert.assertNotNull(byteArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[54, 53, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L); org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L); org.junit.Assert.assertNotNull(byteArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L); org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1)); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(zipEncoding55); }
public void test309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test309"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); java.io.InputStream inputStream10 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10); long long12 = jarArchiveInputStream11.getBytesRead(); long long13 = jarArchiveInputStream11.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream11); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry17 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int18 = tarArchiveEntry17.getDevMinor(); tarArchiveEntry17.setUserId(0); boolean boolean21 = tarArchiveInputStream15.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry17); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream15); tarArchiveInputStream22.reset(); try { org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream24 = archiveStreamFactory0.createArchiveInputStream("-    0 TRAILER!!!", (java.io.InputStream) tarArchiveInputStream22); org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: -    0 TRAILER!!! not found."); } catch (org.apache.commons.compress.archivers.ArchiveException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L); org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); }
public void test310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test310"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); long long9 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); arArchiveOutputStream10.finish(); try { arArchiveOutputStream10.closeArchiveEntry(); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished"); } catch (java.io.IOException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L); }
public void test311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test311"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); int int13 = tarArchiveEntry12.getDevMinor(); tarArchiveEntry12.setIds((int) (short) 3, 0); int int17 = tarArchiveEntry12.getDevMajor(); boolean boolean18 = tarArchiveEntry12.isFile(); tarArchiveEntry12.setSize((long) 100); boolean boolean21 = tarArchiveEntry12.isCharacterDevice(); org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar"); tarArchiveEntry23.setMode((int) (short) 10); java.util.Date date26 = tarArchiveEntry23.getLastModifiedDate(); tarArchiveEntry23.setMode((int) (byte) 120); java.util.Date date29 = tarArchiveEntry23.getModTime(); boolean boolean30 = tarArchiveEntry12.equals(tarArchiveEntry23); tarArchiveEntry23.setSize((long) 16); boolean boolean33 = tarArchiveEntry23.isGNUSparse(); java.io.File file34 = tarArchiveEntry23.getFile(); tarArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry23); tarArchiveEntry23.setModTime(50L); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(date26); org.junit.Assert.assertNotNull(date29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNull(file34); }
public void test312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test312"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); int int9 = tarArchiveOutputStream4.getCount(); org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11); java.lang.String str13 = jarArchiveOutputStream12.getEncoding(); org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTF8" + "'", str13, "UTF8"); }
public void test313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test313"); org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory(); java.io.OutputStream outputStream2 = null; org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar"); tarArchiveOutputStream4.count(0L); long long7 = tarArchiveOutputStream4.getBytesWritten(); org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4); org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8); org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9); org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream10); byte[] byteArray12 = null; java.io.InputStream inputStream15 = null; org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream16 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream15); long long17 = jarArchiveInputStream16.getBytesRead(); long long18 = jarArchiveInputStream16.getBytesRead(); org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream19 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream16); arArchiveInputStream19.close(); org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream19); org.apache.commons.compress.archivers.zip.ZipLong zipLong23 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0); byte[] byteArray24 = zipLong23.getBytes(); long long25 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray24); int int28 = tarArchiveInputStream21.read(byteArray24, 0, (int) (short) 0); boolean boolean30 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray24, (int) (short) -1); org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding34 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("UTF8"); boolean boolean36 = zipEncoding34.canEncode("00"); java.lang.String str37 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray24, 8, 0, zipEncoding34); boolean boolean40 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray12, (int) (byte) 88, 8, byteArray24, (int) (byte) 103, 0); long long41 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray24); boolean boolean43 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray24, 40960); try { cpioArchiveOutputStream11.write(byteArray24, 0, (int) (short) 100); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null"); } catch (java.lang.IndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L); org.junit.Assert.assertNotNull(archiveOutputStream8); org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L); org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L); org.junit.Assert.assertNotNull(byteArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L); org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1)); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(zipEncoding34); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, ""); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); }
