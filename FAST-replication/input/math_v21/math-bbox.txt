public void test01() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test01"); org.apache.commons.math3.linear.RealMatrix realMatrix0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition2 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition(realMatrix0, (double) 100.0f); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test02() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test02"); double[] doubleArray5 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray5); double[] doubleArray12 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix13 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray12); double[] doubleArray19 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix20 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray19); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix21 = array2DRowRealMatrix13.add(array2DRowRealMatrix20); org.apache.commons.math3.linear.RealMatrix realMatrix22 = array2DRowRealMatrix6.subtract((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix21); double double23 = array2DRowRealMatrix21.getFrobeniusNorm(); int int24 = array2DRowRealMatrix21.getColumnDimension(); double[] doubleArray30 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix31 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray30); double[] doubleArray32 = array2DRowRealMatrix21.preMultiply(doubleArray30); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition34 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix21, 3.141592653589793d); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix21); org.junit.Assert.assertNotNull(realMatrix22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 105.92450141492289d + "'", double23 == 105.92450141492289d); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[5610.0]"); }
public void test03() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test03"); double[] doubleArray5 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray5); double[] doubleArray12 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix13 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray12); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix14 = array2DRowRealMatrix6.add(array2DRowRealMatrix13); org.apache.commons.math3.linear.RealMatrix realMatrix15 = array2DRowRealMatrix14.copy(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition17 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix14, 0.5319724169601437d); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix14); org.junit.Assert.assertNotNull(realMatrix15); }
public void test04() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test04"); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix2 = new org.apache.commons.math3.linear.BlockRealMatrix((int) 'a', (int) (byte) 100); org.apache.commons.math3.linear.RealVector realVector4 = blockRealMatrix2.getColumnVector(2); double double5 = blockRealMatrix2.getNorm(); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix6 = blockRealMatrix2.transpose(); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix7 = blockRealMatrix6.transpose(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition9 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) blockRealMatrix6, 262143.99999999994d); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(realVector4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(blockRealMatrix6); org.junit.Assert.assertNotNull(blockRealMatrix7); }
public void test05() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test05"); double[] doubleArray5 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray5); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix7 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray5); int int8 = org.apache.commons.math3.util.MathUtils.hash(doubleArray5); org.apache.commons.math3.linear.RealMatrix realMatrix9 = org.apache.commons.math3.linear.MatrixUtils.createRowRealMatrix(doubleArray5); org.apache.commons.math3.linear.RealMatrix realMatrix10 = realMatrix9.copy(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition12 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition(realMatrix10, 743.8608740886967d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException; message: 10 is smaller than, or equal to, the minimum (743.861): not positive definite matrix: value 10 at index 0"); } catch (org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1909270369) + "'", int8 == (-1909270369)); org.junit.Assert.assertNotNull(realMatrix9); org.junit.Assert.assertNotNull(realMatrix10); }
public void test06() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test06"); double[] doubleArray5 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray5); double[] doubleArray12 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix13 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray12); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix14 = array2DRowRealMatrix6.add(array2DRowRealMatrix13); boolean boolean15 = array2DRowRealMatrix14.isSquare(); double[] doubleArray21 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix22 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray21); double[] doubleArray28 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix29 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray28); double[] doubleArray35 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix36 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray35); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix37 = array2DRowRealMatrix29.add(array2DRowRealMatrix36); org.apache.commons.math3.linear.RealMatrix realMatrix38 = array2DRowRealMatrix22.subtract((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix37); org.apache.commons.math3.linear.MatrixUtils.checkAdditionCompatible((org.apache.commons.math3.linear.AnyMatrix) array2DRowRealMatrix14, (org.apache.commons.math3.linear.AnyMatrix) array2DRowRealMatrix37); double[] doubleArray45 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix46 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray45); double[] doubleArray52 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix53 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray52); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix54 = array2DRowRealMatrix46.add(array2DRowRealMatrix53); boolean boolean55 = array2DRowRealMatrix54.isSquare(); double[] doubleArray61 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix62 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray61); double[] doubleArray68 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix69 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray68); double[] doubleArray75 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix76 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray75); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix77 = array2DRowRealMatrix69.add(array2DRowRealMatrix76); org.apache.commons.math3.linear.RealMatrix realMatrix78 = array2DRowRealMatrix62.subtract((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix77); org.apache.commons.math3.linear.MatrixUtils.checkAdditionCompatible((org.apache.commons.math3.linear.AnyMatrix) array2DRowRealMatrix54, (org.apache.commons.math3.linear.AnyMatrix) array2DRowRealMatrix77); double[] doubleArray85 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix86 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray85); double[] doubleArray87 = array2DRowRealMatrix54.preMultiply(doubleArray85); double[] doubleArray89 = array2DRowRealMatrix54.getRow((int) (short) 0); double[][] doubleArray90 = array2DRowRealMatrix54.getData(); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix91 = array2DRowRealMatrix37.subtract(array2DRowRealMatrix54); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition93 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix37, 0.0d); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix37); org.junit.Assert.assertNotNull(realMatrix38); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray68); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix77); org.junit.Assert.assertNotNull(realMatrix78); org.junit.Assert.assertNotNull(doubleArray85); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray87); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[5610.0]"); org.junit.Assert.assertNotNull(doubleArray89); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[20.0]"); org.junit.Assert.assertNotNull(doubleArray90); org.junit.Assert.assertNotNull(array2DRowRealMatrix91); }
public void test07() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test07"); double[] doubleArray5 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray5); double[] doubleArray12 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix13 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray12); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix14 = array2DRowRealMatrix6.add(array2DRowRealMatrix13); boolean boolean15 = array2DRowRealMatrix14.isSquare(); array2DRowRealMatrix14.setEntry(0, (int) (short) 0, (double) (short) 1); org.apache.commons.math3.linear.RealMatrix realMatrix21 = array2DRowRealMatrix14.getColumnMatrix(0); double[] doubleArray27 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix28 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray27); double[] doubleArray34 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix35 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray34); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix36 = array2DRowRealMatrix28.add(array2DRowRealMatrix35); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix37 = array2DRowRealMatrix14.add(array2DRowRealMatrix35); int int38 = array2DRowRealMatrix14.getColumnDimension(); org.apache.commons.math3.linear.RealMatrix realMatrix40 = array2DRowRealMatrix14.scalarMultiply((double) (-0.0f)); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition42 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix14, (double) 0); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(realMatrix21); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix36); org.junit.Assert.assertNotNull(array2DRowRealMatrix37); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1); org.junit.Assert.assertNotNull(realMatrix40); }
public void test08() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test08"); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix2 = new org.apache.commons.math3.linear.BlockRealMatrix((int) 'a', (int) (byte) 100); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix5 = new org.apache.commons.math3.linear.BlockRealMatrix((int) 'a', (int) (byte) 100); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix6 = blockRealMatrix2.add(blockRealMatrix5); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix8 = blockRealMatrix6.scalarAdd(0.0d); double double9 = blockRealMatrix6.getNorm(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition11 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) blockRealMatrix6, 1.1920928955078068E-7d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException; message: 0 is smaller than, or equal to, the minimum (0): not positive definite matrix: value 0 at index 0"); } catch (org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(blockRealMatrix6); org.junit.Assert.assertNotNull(blockRealMatrix8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test09() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test09"); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix2 = new org.apache.commons.math3.linear.BlockRealMatrix((int) 'a', (int) (byte) 100); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix4 = blockRealMatrix2.scalarAdd(1.0d); double double5 = blockRealMatrix4.getNorm(); org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor6 = new org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor(); defaultRealMatrixPreservingVisitor6.start(36, (int) (byte) 0, (int) (byte) 10, 4, (int) (short) 1, 10); double double14 = blockRealMatrix4.walkInOptimizedOrder((org.apache.commons.math3.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor6); org.apache.commons.math3.linear.RealMatrix realMatrix16 = blockRealMatrix4.getRowMatrix(0); int int17 = blockRealMatrix4.getColumnDimension(); org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition19 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) blockRealMatrix4, (-57.29577951308232d)); int int20 = rectangularCholeskyDecomposition19.getRank(); org.junit.Assert.assertNotNull(blockRealMatrix4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 97.0d + "'", double5 == 97.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(realMatrix16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97); }
public void test10() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test10"); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix2 = new org.apache.commons.math3.linear.BlockRealMatrix((int) 'a', (int) (byte) 100); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix4 = blockRealMatrix2.scalarAdd(1.0d); double double5 = blockRealMatrix4.getNorm(); org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor6 = new org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor(); defaultRealMatrixPreservingVisitor6.start(36, (int) (byte) 0, (int) (byte) 10, 4, (int) (short) 1, 10); double double14 = blockRealMatrix4.walkInOptimizedOrder((org.apache.commons.math3.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor6); org.apache.commons.math3.linear.RealMatrix realMatrix16 = blockRealMatrix4.getRowMatrix(0); int int17 = blockRealMatrix4.getColumnDimension(); org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition19 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) blockRealMatrix4, (-57.29577951308232d)); double[] doubleArray25 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix26 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray25); double[] doubleArray32 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix33 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray32); double[] doubleArray39 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix40 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray39); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix41 = array2DRowRealMatrix33.add(array2DRowRealMatrix40); org.apache.commons.math3.linear.RealMatrix realMatrix42 = array2DRowRealMatrix26.subtract((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix41); double[][] doubleArray43 = array2DRowRealMatrix26.getData(); double[] doubleArray49 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix50 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray49); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix51 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray49); org.apache.commons.math3.linear.RealMatrix realMatrix52 = array2DRowRealMatrix26.add((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix51); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix53 = blockRealMatrix4.add(realMatrix52); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.linear.MatrixDimensionMismatchException; message: got 97x100 but expected 5x1"); } catch (org.apache.commons.math3.linear.MatrixDimensionMismatchException e) { // Expected exception. } org.junit.Assert.assertNotNull(blockRealMatrix4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 97.0d + "'", double5 == 97.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(realMatrix16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix41); org.junit.Assert.assertNotNull(realMatrix42); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(realMatrix52); }
public void test11() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test11"); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix2 = new org.apache.commons.math3.linear.BlockRealMatrix((int) 'a', (int) (byte) 100); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix4 = blockRealMatrix2.scalarAdd(1.0d); double double5 = blockRealMatrix4.getNorm(); org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor6 = new org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor(); defaultRealMatrixPreservingVisitor6.start(36, (int) (byte) 0, (int) (byte) 10, 4, (int) (short) 1, 10); double double14 = blockRealMatrix4.walkInOptimizedOrder((org.apache.commons.math3.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor6); org.apache.commons.math3.linear.RealMatrix realMatrix16 = blockRealMatrix4.getRowMatrix(0); int int17 = blockRealMatrix4.getColumnDimension(); org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition19 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) blockRealMatrix4, (-57.29577951308232d)); org.apache.commons.math3.linear.RealMatrix realMatrix20 = rectangularCholeskyDecomposition19.getRootMatrix(); int int21 = rectangularCholeskyDecomposition19.getRank(); int int22 = rectangularCholeskyDecomposition19.getRank(); org.apache.commons.math3.linear.RealMatrix realMatrix23 = rectangularCholeskyDecomposition19.getRootMatrix(); org.junit.Assert.assertNotNull(blockRealMatrix4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 97.0d + "'", double5 == 97.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(realMatrix16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100); org.junit.Assert.assertNotNull(realMatrix20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97); org.junit.Assert.assertNotNull(realMatrix23); }
public void testDimensions() { CholeskyDecomposition llt = new CholeskyDecomposition(MatrixUtils.createRealMatrix(testData)); Assert.assertEquals(testData.length, llt.getL().getRowDimension()); Assert.assertEquals(testData.length, llt.getL().getColumnDimension()); Assert.assertEquals(testData.length, llt.getLT().getRowDimension()); Assert.assertEquals(testData.length, llt.getLT().getColumnDimension()); }
public void testNonSquare() { new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[3][2])); }
public void testNotSymmetricMatrixException() { double[][] changed = testData.clone(); changed[0][changed[0].length - 1] += 1.0e-5; new CholeskyDecomposition(MatrixUtils.createRealMatrix(changed)); }
public void testNotPositiveDefinite() { new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[][] { { 14, 11, 13, 15, 24 }, { 11, 34, 13, 8, 25 }, { 13, 13, 14, 15, 21 }, { 15, 8, 15, 18, 23 }, { 24, 25, 21, 23, 45 } })); }
public void testMath274() { new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[][] { { 0.40434286, -0.09376327, 0.30328980, 0.04909388 }, {-0.09376327, 0.10400408, 0.07137959, 0.04762857 }, { 0.30328980, 0.07137959, 0.30458776, 0.04882449 }, { 0.04909388, 0.04762857, 0.04882449, 0.07543265 } })); }
public void testAEqualLLT() { RealMatrix matrix = MatrixUtils.createRealMatrix(testData); CholeskyDecomposition llt = new CholeskyDecomposition(matrix); RealMatrix l = llt.getL(); RealMatrix lt = llt.getLT(); double norm = l.multiply(lt).subtract(matrix).getNorm(); Assert.assertEquals(0, norm, 1.0e-15); }
public void testLLowerTriangular() { RealMatrix matrix = MatrixUtils.createRealMatrix(testData); RealMatrix l = new CholeskyDecomposition(matrix).getL(); for (int i = 0; i < l.getRowDimension(); i++) { for (int j = i + 1; j < l.getColumnDimension(); j++) { Assert.assertEquals(0.0, l.getEntry(i, j), 0.0); } } }
public void testLTTransposed() { RealMatrix matrix = MatrixUtils.createRealMatrix(testData); CholeskyDecomposition llt = new CholeskyDecomposition(matrix); RealMatrix l = llt.getL(); RealMatrix lt = llt.getLT(); double norm = l.subtract(lt.transpose()).getNorm(); Assert.assertEquals(0, norm, 1.0e-15); }
public void testMatricesValues() { RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] { { 1, 0, 0, 0, 0 }, { 2, 3, 0, 0, 0 }, { 4, 5, 6, 0, 0 }, { 7, 8, 9, 10, 0 }, { 11, 12, 13, 14, 15 } }); CholeskyDecomposition llt = new CholeskyDecomposition(MatrixUtils.createRealMatrix(testData)); // check values against known references RealMatrix l = llt.getL(); Assert.assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13); RealMatrix lt = llt.getLT(); Assert.assertEquals(0, lt.subtract(lRef.transpose()).getNorm(), 1.0e-13); // check the same cached instance is returned the second time Assert.assertTrue(l == llt.getL()); Assert.assertTrue(lt == llt.getLT()); }
public void testDecomposition3x3() { RealMatrix m = MatrixUtils.createRealMatrix(new double[][] { { 1,  9,  9 }, { 9, 225, 225 }, { 9, 225, 625 } }); RectangularCholeskyDecomposition d = new RectangularCholeskyDecomposition(m, 1.0e-6); // as this decomposition permutes lines and columns, the root is NOT triangular // (in fact here it is the lower right part of the matrix which is zero and // the upper left non-zero) Assert.assertEquals(0.8, d.getRootMatrix().getEntry(0, 2), 1.0e-15); Assert.assertEquals(25.0, d.getRootMatrix().getEntry(2, 0), 1.0e-15); Assert.assertEquals(0.0, d.getRootMatrix().getEntry(2, 2), 1.0e-15); RealMatrix root = d.getRootMatrix(); RealMatrix rebuiltM = root.multiply(root.transpose()); Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15); }
public void testFullRank() { RealMatrix base = MatrixUtils.createRealMatrix(new double[][] { { 0.1159548705,   0.,      0.,      0.   }, { 0.0896442724, 0.1223540781,   0.,      0.   }, { 0.0852155322, 4.558668e-3, 0.1083577299,   0.   }, { 0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693 } }); RealMatrix m = base.multiply(base.transpose()); RectangularCholeskyDecomposition d = new RectangularCholeskyDecomposition(m, 1.0e-10); RealMatrix root = d.getRootMatrix(); RealMatrix rebuiltM = root.multiply(root.transpose()); Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15); // the pivoted Cholesky decomposition is *not* unique. Here, the root is // not equal to the original trianbular base matrix Assert.assertTrue(root.subtract(base).getNorm() > 0.3); }
public void testMath789() { final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{ {0.013445532, 0.010394690, 0.009881156, 0.010499559}, {0.010394690, 0.023006616, 0.008196856, 0.010732709}, {0.009881156, 0.008196856, 0.019023866, 0.009210099}, {0.010499559, 0.010732709, 0.009210099, 0.019107243} }); RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix(); RealMatrix rebuiltM1 = root1.multiply(root1.transpose()); Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16); final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{ {0.0, 0.0, 0.0, 0.0, 0.0}, {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559}, {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709}, {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099}, {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243} }); RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix(); RealMatrix rebuiltM2 = root2.multiply(root2.transpose()); Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16); final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{ {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559}, {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709}, {0.0, 0.0, 0.0, 0.0, 0.0}, {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099}, {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243} }); RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix(); RealMatrix rebuiltM3 = root3.multiply(root3.transpose()); Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16); }
public void test0() throws Throwable { double[] doubleArray0 = new double[3]; doubleArray0[0] = 3680.718975; Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0); RealMatrix realMatrix0 = array2DRowRealMatrix0.getSubMatrix(0, 0, 0, 0); RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 103.9215079); int int0 = rectangularCholeskyDecomposition0.getRank(); assertEquals(1, int0); }
public void test1() throws Throwable { double[] doubleArray0 = new double[3]; doubleArray0[0] = 3680.718975; Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0); RealMatrix realMatrix0 = array2DRowRealMatrix0.getSubMatrix(0, 0, 0, 0); RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 103.9215079); RealMatrix realMatrix1 = rectangularCholeskyDecomposition0.getRootMatrix(); assertNotSame(realMatrix1, realMatrix0); }
public void test2() throws Throwable { double[] doubleArray0 = new double[3]; doubleArray0[2] = 1582.601578048; double[][] doubleArray1 = new double[6][1]; doubleArray1[0] = doubleArray0; doubleArray1[1] = doubleArray0; doubleArray1[2] = doubleArray0; doubleArray1[3] = doubleArray0; doubleArray1[4] = doubleArray0; doubleArray1[5] = doubleArray0; Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, true); RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose(); RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null; try { rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 2281.191013467); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // 1,582.602 is smaller than, or equal to, the minimum (2,281.191): not positive definite matrix: value 1,582.602 at index 2 // verifyException("org.apache.commons.math3.linear.RectangularCholeskyDecomposition", e); } }
public void test3() throws Throwable { double[] doubleArray0 = new double[3]; doubleArray0[0] = 3680.718975; double[][] doubleArray1 = new double[6][1]; doubleArray1[0] = doubleArray0; doubleArray1[1] = doubleArray0; doubleArray1[2] = doubleArray0; doubleArray1[3] = doubleArray0; doubleArray1[4] = doubleArray0; doubleArray1[5] = doubleArray0; Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, true); RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose(); RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 2281.191013467); assertEquals(2, rectangularCholeskyDecomposition0.getRank()); }
public void test4() throws Throwable { double[] doubleArray0 = new double[3]; doubleArray0[0] = 3680.718975; doubleArray0[2] = 1582.601578048; double[][] doubleArray1 = new double[6][1]; doubleArray1[0] = doubleArray0; doubleArray1[1] = doubleArray0; doubleArray1[2] = doubleArray0; doubleArray1[3] = doubleArray0; doubleArray1[4] = doubleArray0; doubleArray1[5] = doubleArray0; Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, true); RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose(); RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null; try { rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, (-830.17)); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // -2,776.352 is smaller than, or equal to, the minimum (-830.17): not positive definite matrix: value -2,776.352 at index 2 // verifyException("org.apache.commons.math3.linear.RectangularCholeskyDecomposition", e); } }
