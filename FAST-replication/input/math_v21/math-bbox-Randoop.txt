public void test01() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test01"); org.apache.commons.math3.linear.RealMatrix realMatrix0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition2 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition(realMatrix0, (double) 100.0f); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test02() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test02"); double[] doubleArray5 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray5); double[] doubleArray12 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix13 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray12); double[] doubleArray19 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix20 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray19); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix21 = array2DRowRealMatrix13.add(array2DRowRealMatrix20); org.apache.commons.math3.linear.RealMatrix realMatrix22 = array2DRowRealMatrix6.subtract((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix21); double double23 = array2DRowRealMatrix21.getFrobeniusNorm(); int int24 = array2DRowRealMatrix21.getColumnDimension(); double[] doubleArray30 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix31 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray30); double[] doubleArray32 = array2DRowRealMatrix21.preMultiply(doubleArray30); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition34 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix21, 3.141592653589793d); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix21); org.junit.Assert.assertNotNull(realMatrix22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 105.92450141492289d + "'", double23 == 105.92450141492289d); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[5610.0]"); }
public void test03() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test03"); double[] doubleArray5 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray5); double[] doubleArray12 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix13 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray12); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix14 = array2DRowRealMatrix6.add(array2DRowRealMatrix13); org.apache.commons.math3.linear.RealMatrix realMatrix15 = array2DRowRealMatrix14.copy(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition17 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix14, 0.5319724169601437d); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix14); org.junit.Assert.assertNotNull(realMatrix15); }
public void test04() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test04"); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix2 = new org.apache.commons.math3.linear.BlockRealMatrix((int) 'a', (int) (byte) 100); org.apache.commons.math3.linear.RealVector realVector4 = blockRealMatrix2.getColumnVector(2); double double5 = blockRealMatrix2.getNorm(); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix6 = blockRealMatrix2.transpose(); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix7 = blockRealMatrix6.transpose(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition9 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) blockRealMatrix6, 262143.99999999994d); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(realVector4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(blockRealMatrix6); org.junit.Assert.assertNotNull(blockRealMatrix7); }
public void test05() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test05"); double[] doubleArray5 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray5); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix7 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray5); int int8 = org.apache.commons.math3.util.MathUtils.hash(doubleArray5); org.apache.commons.math3.linear.RealMatrix realMatrix9 = org.apache.commons.math3.linear.MatrixUtils.createRowRealMatrix(doubleArray5); org.apache.commons.math3.linear.RealMatrix realMatrix10 = realMatrix9.copy(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition12 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition(realMatrix10, 743.8608740886967d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException; message: 10 is smaller than, or equal to, the minimum (743.861): not positive definite matrix: value 10 at index 0"); } catch (org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1909270369) + "'", int8 == (-1909270369)); org.junit.Assert.assertNotNull(realMatrix9); org.junit.Assert.assertNotNull(realMatrix10); }
public void test06() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test06"); double[] doubleArray5 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray5); double[] doubleArray12 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix13 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray12); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix14 = array2DRowRealMatrix6.add(array2DRowRealMatrix13); boolean boolean15 = array2DRowRealMatrix14.isSquare(); double[] doubleArray21 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix22 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray21); double[] doubleArray28 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix29 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray28); double[] doubleArray35 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix36 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray35); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix37 = array2DRowRealMatrix29.add(array2DRowRealMatrix36); org.apache.commons.math3.linear.RealMatrix realMatrix38 = array2DRowRealMatrix22.subtract((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix37); org.apache.commons.math3.linear.MatrixUtils.checkAdditionCompatible((org.apache.commons.math3.linear.AnyMatrix) array2DRowRealMatrix14, (org.apache.commons.math3.linear.AnyMatrix) array2DRowRealMatrix37); double[] doubleArray45 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix46 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray45); double[] doubleArray52 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix53 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray52); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix54 = array2DRowRealMatrix46.add(array2DRowRealMatrix53); boolean boolean55 = array2DRowRealMatrix54.isSquare(); double[] doubleArray61 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix62 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray61); double[] doubleArray68 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix69 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray68); double[] doubleArray75 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix76 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray75); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix77 = array2DRowRealMatrix69.add(array2DRowRealMatrix76); org.apache.commons.math3.linear.RealMatrix realMatrix78 = array2DRowRealMatrix62.subtract((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix77); org.apache.commons.math3.linear.MatrixUtils.checkAdditionCompatible((org.apache.commons.math3.linear.AnyMatrix) array2DRowRealMatrix54, (org.apache.commons.math3.linear.AnyMatrix) array2DRowRealMatrix77); double[] doubleArray85 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix86 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray85); double[] doubleArray87 = array2DRowRealMatrix54.preMultiply(doubleArray85); double[] doubleArray89 = array2DRowRealMatrix54.getRow((int) (short) 0); double[][] doubleArray90 = array2DRowRealMatrix54.getData(); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix91 = array2DRowRealMatrix37.subtract(array2DRowRealMatrix54); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition93 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix37, 0.0d); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix37); org.junit.Assert.assertNotNull(realMatrix38); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray68); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix77); org.junit.Assert.assertNotNull(realMatrix78); org.junit.Assert.assertNotNull(doubleArray85); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray87); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[5610.0]"); org.junit.Assert.assertNotNull(doubleArray89); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[20.0]"); org.junit.Assert.assertNotNull(doubleArray90); org.junit.Assert.assertNotNull(array2DRowRealMatrix91); }
public void test07() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test07"); double[] doubleArray5 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray5); double[] doubleArray12 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix13 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray12); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix14 = array2DRowRealMatrix6.add(array2DRowRealMatrix13); boolean boolean15 = array2DRowRealMatrix14.isSquare(); array2DRowRealMatrix14.setEntry(0, (int) (short) 0, (double) (short) 1); org.apache.commons.math3.linear.RealMatrix realMatrix21 = array2DRowRealMatrix14.getColumnMatrix(0); double[] doubleArray27 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix28 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray27); double[] doubleArray34 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix35 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray34); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix36 = array2DRowRealMatrix28.add(array2DRowRealMatrix35); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix37 = array2DRowRealMatrix14.add(array2DRowRealMatrix35); int int38 = array2DRowRealMatrix14.getColumnDimension(); org.apache.commons.math3.linear.RealMatrix realMatrix40 = array2DRowRealMatrix14.scalarMultiply((double) (-0.0f)); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition42 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix14, (double) 0); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(realMatrix21); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix36); org.junit.Assert.assertNotNull(array2DRowRealMatrix37); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1); org.junit.Assert.assertNotNull(realMatrix40); }
public void test08() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test08"); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix2 = new org.apache.commons.math3.linear.BlockRealMatrix((int) 'a', (int) (byte) 100); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix5 = new org.apache.commons.math3.linear.BlockRealMatrix((int) 'a', (int) (byte) 100); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix6 = blockRealMatrix2.add(blockRealMatrix5); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix8 = blockRealMatrix6.scalarAdd(0.0d); double double9 = blockRealMatrix6.getNorm(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition11 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) blockRealMatrix6, 1.1920928955078068E-7d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException; message: 0 is smaller than, or equal to, the minimum (0): not positive definite matrix: value 0 at index 0"); } catch (org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(blockRealMatrix6); org.junit.Assert.assertNotNull(blockRealMatrix8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test09() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test09"); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix2 = new org.apache.commons.math3.linear.BlockRealMatrix((int) 'a', (int) (byte) 100); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix4 = blockRealMatrix2.scalarAdd(1.0d); double double5 = blockRealMatrix4.getNorm(); org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor6 = new org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor(); defaultRealMatrixPreservingVisitor6.start(36, (int) (byte) 0, (int) (byte) 10, 4, (int) (short) 1, 10); double double14 = blockRealMatrix4.walkInOptimizedOrder((org.apache.commons.math3.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor6); org.apache.commons.math3.linear.RealMatrix realMatrix16 = blockRealMatrix4.getRowMatrix(0); int int17 = blockRealMatrix4.getColumnDimension(); org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition19 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) blockRealMatrix4, (-57.29577951308232d)); int int20 = rectangularCholeskyDecomposition19.getRank(); org.junit.Assert.assertNotNull(blockRealMatrix4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 97.0d + "'", double5 == 97.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(realMatrix16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97); }
public void test10() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test10"); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix2 = new org.apache.commons.math3.linear.BlockRealMatrix((int) 'a', (int) (byte) 100); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix4 = blockRealMatrix2.scalarAdd(1.0d); double double5 = blockRealMatrix4.getNorm(); org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor6 = new org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor(); defaultRealMatrixPreservingVisitor6.start(36, (int) (byte) 0, (int) (byte) 10, 4, (int) (short) 1, 10); double double14 = blockRealMatrix4.walkInOptimizedOrder((org.apache.commons.math3.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor6); org.apache.commons.math3.linear.RealMatrix realMatrix16 = blockRealMatrix4.getRowMatrix(0); int int17 = blockRealMatrix4.getColumnDimension(); org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition19 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) blockRealMatrix4, (-57.29577951308232d)); double[] doubleArray25 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix26 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray25); double[] doubleArray32 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix33 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray32); double[] doubleArray39 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix40 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray39); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix41 = array2DRowRealMatrix33.add(array2DRowRealMatrix40); org.apache.commons.math3.linear.RealMatrix realMatrix42 = array2DRowRealMatrix26.subtract((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix41); double[][] doubleArray43 = array2DRowRealMatrix26.getData(); double[] doubleArray49 = new double[] { 10, 0L, 0.0d, (byte) 1, '4' }; org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix50 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray49); org.apache.commons.math3.linear.Array2DRowRealMatrix array2DRowRealMatrix51 = new org.apache.commons.math3.linear.Array2DRowRealMatrix(doubleArray49); org.apache.commons.math3.linear.RealMatrix realMatrix52 = array2DRowRealMatrix26.add((org.apache.commons.math3.linear.RealMatrix) array2DRowRealMatrix51); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix53 = blockRealMatrix4.add(realMatrix52); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.linear.MatrixDimensionMismatchException; message: got 97x100 but expected 5x1"); } catch (org.apache.commons.math3.linear.MatrixDimensionMismatchException e) { // Expected exception. } org.junit.Assert.assertNotNull(blockRealMatrix4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 97.0d + "'", double5 == 97.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(realMatrix16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(array2DRowRealMatrix41); org.junit.Assert.assertNotNull(realMatrix42); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 0.0, 0.0, 1.0, 52.0]"); org.junit.Assert.assertNotNull(realMatrix52); }
public void test11() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test11"); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix2 = new org.apache.commons.math3.linear.BlockRealMatrix((int) 'a', (int) (byte) 100); org.apache.commons.math3.linear.BlockRealMatrix blockRealMatrix4 = blockRealMatrix2.scalarAdd(1.0d); double double5 = blockRealMatrix4.getNorm(); org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor6 = new org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor(); defaultRealMatrixPreservingVisitor6.start(36, (int) (byte) 0, (int) (byte) 10, 4, (int) (short) 1, 10); double double14 = blockRealMatrix4.walkInOptimizedOrder((org.apache.commons.math3.linear.RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor6); org.apache.commons.math3.linear.RealMatrix realMatrix16 = blockRealMatrix4.getRowMatrix(0); int int17 = blockRealMatrix4.getColumnDimension(); org.apache.commons.math3.linear.RectangularCholeskyDecomposition rectangularCholeskyDecomposition19 = new org.apache.commons.math3.linear.RectangularCholeskyDecomposition((org.apache.commons.math3.linear.RealMatrix) blockRealMatrix4, (-57.29577951308232d)); org.apache.commons.math3.linear.RealMatrix realMatrix20 = rectangularCholeskyDecomposition19.getRootMatrix(); int int21 = rectangularCholeskyDecomposition19.getRank(); int int22 = rectangularCholeskyDecomposition19.getRank(); org.apache.commons.math3.linear.RealMatrix realMatrix23 = rectangularCholeskyDecomposition19.getRootMatrix(); org.junit.Assert.assertNotNull(blockRealMatrix4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 97.0d + "'", double5 == 97.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(realMatrix16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100); org.junit.Assert.assertNotNull(realMatrix20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97); org.junit.Assert.assertNotNull(realMatrix23); }
