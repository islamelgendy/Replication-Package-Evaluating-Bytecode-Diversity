public void testTruncatedData() throws IOException { System.out.println("Attempt to read the whole thing in, should throw ..."); ByteBuffer buffer = ByteBuffer.allocate(8192); bz2Channel.read(buffer); }
public void testPartialReadTruncatedData() throws IOException { final int length = TEXT.length(); ByteBuffer buffer = ByteBuffer.allocate(length); bz2Channel.read(buffer); assertArrayEquals(Arrays.copyOfRange(TEXT.getBytes(), 0, length), buffer.array()); buffer = ByteBuffer.allocate(1); try { bz2Channel.read(buffer); Assert.fail("The read should have thrown."); } catch (IOException e) { } }
public void test0() throws Throwable { BZip2CompressorInputStream bZip2CompressorInputStream0 = null; try { bZip2CompressorInputStream0 = new BZip2CompressorInputStream((InputStream) null); fail("Expecting exception: IOException"); } catch(Throwable e) { verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream", e); } }
public void test1() throws Throwable { byte[] byteArray0 = new byte[0]; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0); BZip2CompressorInputStream bZip2CompressorInputStream0 = null; try { bZip2CompressorInputStream0 = new BZip2CompressorInputStream(byteArrayInputStream0); fail("Expecting exception: IOException"); } catch(Throwable e) { verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream", e); } }
public void test2() throws Throwable { byte[] byteArray0 = new byte[1]; byteArray0[0] = (byte)66; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0); BZip2CompressorInputStream bZip2CompressorInputStream0 = null; try { bZip2CompressorInputStream0 = new BZip2CompressorInputStream(byteArrayInputStream0); fail("Expecting exception: IOException"); } catch(Throwable e) { verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream", e); } }
public void test3() throws Throwable { byte[] byteArray0 = new byte[2]; byteArray0[0] = (byte)66; byteArray0[1] = (byte)90; ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0); BZip2CompressorInputStream bZip2CompressorInputStream0 = null; try { bZip2CompressorInputStream0 = new BZip2CompressorInputStream(byteArrayInputStream0); fail("Expecting exception: IOException"); } catch(Throwable e) { verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream", e); } }
public void test4() throws Throwable { byte[] byteArray0 = new byte[2]; boolean boolean0 = BZip2CompressorInputStream.matches(byteArray0, (byte)90); assertFalse(boolean0); }
public void test5() throws Throwable { byte[] byteArray0 = new byte[1]; boolean boolean0 = BZip2CompressorInputStream.matches(byteArray0, (byte)0); assertFalse(boolean0); }
public void test6() throws Throwable { byte[] byteArray0 = new byte[2]; byteArray0[0] = (byte)66; boolean boolean0 = BZip2CompressorInputStream.matches(byteArray0, (byte)90); assertFalse(boolean0); }
public void test7() throws Throwable { byte[] byteArray0 = new byte[2]; byteArray0[0] = (byte)66; byteArray0[1] = (byte)90; try { BZip2CompressorInputStream.matches(byteArray0, (byte)90); fail("Expecting exception: ArrayIndexOutOfBoundsException"); } catch(ArrayIndexOutOfBoundsException e) { verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream", e); } }
public void test01() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test01"); java.io.InputStream inputStream0 = null; try { org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream bZip2CompressorInputStream2 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream(inputStream0, false); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No InputStream"); } catch (java.io.IOException e) { } }
public void test02() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test02"); byte[] byteArray0 = new byte[] {}; boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (short) 0); java.lang.Class<?> wildcardClass3 = byteArray0.getClass(); org.junit.Assert.assertNotNull(byteArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(wildcardClass3); }
public void test03() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test03"); java.io.InputStream inputStream0 = null; try { org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream bZip2CompressorInputStream1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream(inputStream0); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No InputStream"); } catch (java.io.IOException e) { } }
public void test04() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test04"); java.io.InputStream inputStream0 = null; try { org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream bZip2CompressorInputStream2 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream(inputStream0, true); org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No InputStream"); } catch (java.io.IOException e) { } }
public void test05() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test05"); byte[] byteArray0 = null; try { boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, 9); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test06() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test06"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int2 = data1.origPtr; byte[] byteArray3 = data1.sendMTFValues2_pos; byte[] byteArray4 = data1.generateMTFValues_yy; byte[] byteArray5 = data1.generateMTFValues_yy; boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, 100); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test07() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test07"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int2 = data1.origPtr; byte[] byteArray3 = data1.sendMTFValues2_pos; byte[] byteArray4 = data1.generateMTFValues_yy; byte[] byteArray5 = data1.generateMTFValues_yy; boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, (int) '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test08() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test08"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int2 = data1.origPtr; org.apache.commons.compress.compressors.bzip2.BlockSort blockSort3 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data1); data1.origPtr = 20; org.apache.commons.compress.compressors.bzip2.BlockSort blockSort6 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data1); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data8 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); short[] shortArray9 = data8.sendMTFValues_cost; int[] intArray10 = data8.parent; blockSort6.fallbackSort(data8, (int) ' '); int[] intArray13 = null; org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data15 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int16 = data15.origPtr; byte[] byteArray17 = data15.sendMTFValues2_pos; byte[] byteArray18 = data15.generateMTFValues_yy; byte[] byteArray19 = data15.generateMTFValues_yy; byte[] byteArray20 = data15.unseqToSeq; boolean boolean22 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray20, (int) (byte) 1); try { blockSort6.fallbackSort(intArray13, byteArray20, 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertNotNull(shortArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(byteArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test09() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test09"); byte[] byteArray0 = new byte[] {}; boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (short) 0); boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (-594764567)); try { boolean boolean6 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (short) 100); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } org.junit.Assert.assertNotNull(byteArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test10() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test10"); byte[] byteArray0 = null; boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (short) 1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test11() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test11"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int2 = data1.origPtr; byte[] byteArray3 = data1.sendMTFValues2_pos; int[] intArray4 = data1.mtfFreq; byte[] byteArray5 = data1.unseqToSeq; boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, 1254728195); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test12() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test12"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int2 = data1.origPtr; byte[] byteArray3 = data1.sendMTFValues2_pos; byte[] byteArray4 = data1.generateMTFValues_yy; byte[] byteArray5 = data1.generateMTFValues_yy; byte[] byteArray6 = data1.unseqToSeq; boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, 0); java.lang.Class<?> wildcardClass9 = byteArray6.getClass(); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test13() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test13"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); short[] shortArray2 = data1.sendMTFValues_cost; byte[] byteArray3 = data1.unseqToSeq; boolean boolean5 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray3, (int) (short) 1); java.lang.Class<?> wildcardClass6 = byteArray3.getClass(); org.junit.Assert.assertNotNull(shortArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test14() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test14"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int2 = data1.origPtr; byte[][] byteArray3 = data1.sendMTFValues_len; short[] shortArray4 = data1.sendMTFValues_cost; byte[] byteArray5 = data1.sendMTFValues2_pos; org.apache.commons.compress.compressors.bzip2.BlockSort blockSort6 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data1); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data8 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int9 = data8.origPtr; byte[] byteArray10 = data8.sendMTFValues2_pos; byte[] byteArray11 = data8.generateMTFValues_yy; blockSort6.fallbackSort(data8, 0); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data15 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int16 = data15.origPtr; byte[] byteArray17 = data15.sendMTFValues2_pos; byte[] byteArray18 = data15.generateMTFValues_yy; byte[] byteArray19 = data15.unseqToSeq; int[] intArray20 = data15.parent; boolean[] booleanArray21 = data15.sentMTFValues4_inUse16; blockSort6.fallbackSort(data15, 1); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data25 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int26 = data25.origPtr; byte[] byteArray27 = data25.sendMTFValues2_pos; int int28 = data25.origPtr; blockSort6.mainSort(data25, 50); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data32 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int33 = data32.origPtr; byte[] byteArray34 = data32.sendMTFValues2_pos; byte[] byteArray35 = data32.generateMTFValues_yy; byte[] byteArray36 = data32.unseqToSeq; int[] intArray37 = data32.parent; org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data39 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int40 = data39.origPtr; byte[] byteArray41 = data39.unseqToSeq; boolean boolean43 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray41, 0); blockSort6.fallbackSort(intArray37, byteArray41, 4); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data47 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); byte[][] byteArray48 = data47.sendMTFValues_len; boolean[] booleanArray49 = data47.inUse; int[] intArray50 = data47.mtfFreq; byte[][] byteArray51 = data47.sendMTFValues_len; blockSort6.mainSort(data47, (int) (byte) 1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertNotNull(shortArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(byteArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(byteArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(booleanArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertNotNull(byteArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertNotNull(byteArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertNotNull(byteArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(byteArray48); org.junit.Assert.assertNotNull(booleanArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]"); org.junit.Assert.assertNotNull(intArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray51); }
public void test15() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test15"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int2 = data1.origPtr; byte[] byteArray3 = data1.sendMTFValues2_pos; byte[] byteArray4 = data1.unseqToSeq; boolean boolean6 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray4, 10); boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray4, (int) (byte) -1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test16() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test16"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int2 = data1.origPtr; byte[] byteArray3 = data1.sendMTFValues2_pos; byte[] byteArray4 = data1.generateMTFValues_yy; byte[] byteArray5 = data1.generateMTFValues_yy; byte[] byteArray6 = data1.unseqToSeq; boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (int) (byte) 0); boolean boolean10 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (int) (short) -1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test17() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test17"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(50); byte[] byteArray2 = data1.generateMTFValues_yy; boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray2, 75997786); org.junit.Assert.assertNotNull(byteArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test18() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test18"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); byte[][] byteArray2 = data1.sendMTFValues_len; boolean[] booleanArray3 = data1.inUse; org.apache.commons.compress.compressors.bzip2.BlockSort blockSort4 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data1); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data6 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int7 = data6.origPtr; byte[] byteArray8 = data6.sendMTFValues2_pos; byte[] byteArray9 = data6.generateMTFValues_yy; byte[][] byteArray10 = data6.sendMTFValues_len; byte[] byteArray11 = data6.sendMTFValues2_pos; int[] intArray12 = data6.heap; org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data14 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int15 = data14.origPtr; byte[] byteArray16 = data14.unseqToSeq; boolean boolean18 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray16, (int) (byte) 10); blockSort4.fallbackSort(intArray12, byteArray16, 0); org.junit.Assert.assertNotNull(byteArray2); org.junit.Assert.assertNotNull(booleanArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]"); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(byteArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray10); org.junit.Assert.assertNotNull(byteArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test19() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test19"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int2 = data1.origPtr; byte[] byteArray3 = data1.sendMTFValues2_pos; byte[] byteArray4 = data1.generateMTFValues_yy; int int5 = data1.origPtr; byte[] byteArray6 = data1.unseqToSeq; byte[] byteArray7 = data1.generateMTFValues_yy; byte[] byteArray8 = data1.generateMTFValues_yy; boolean boolean10 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray8, 100000); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test20() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test20"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); short[] shortArray2 = data1.sendMTFValues_cost; byte[] byteArray3 = data1.generateMTFValues_yy; boolean boolean5 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray3, 31); org.junit.Assert.assertNotNull(shortArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test21() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test21"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); byte[][] byteArray2 = data1.sendMTFValues_len; boolean[] booleanArray3 = data1.inUse; org.apache.commons.compress.compressors.bzip2.BlockSort blockSort4 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data1); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data6 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); byte[][] byteArray7 = data6.sendMTFValues_len; boolean[] booleanArray8 = data6.inUse; org.apache.commons.compress.compressors.bzip2.BlockSort blockSort9 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data6); blockSort4.mainSort(data6, 258); byte[][] byteArray12 = data6.sendMTFValues_len; byte[] byteArray13 = data6.sendMTFValues2_pos; boolean boolean15 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray13, (int) 'a'); org.junit.Assert.assertNotNull(byteArray2); org.junit.Assert.assertNotNull(booleanArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]"); org.junit.Assert.assertNotNull(byteArray7); org.junit.Assert.assertNotNull(booleanArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]"); org.junit.Assert.assertNotNull(byteArray12); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test22() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test22"); byte[] byteArray0 = null; boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (short) -1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test23() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test23"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int2 = data1.origPtr; byte[] byteArray3 = data1.sendMTFValues2_pos; byte[] byteArray4 = data1.generateMTFValues_yy; int int5 = data1.origPtr; byte[] byteArray6 = data1.unseqToSeq; boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (-1418654215)); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test24() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test24"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int2 = data1.origPtr; byte[] byteArray3 = data1.sendMTFValues2_pos; byte[] byteArray4 = data1.generateMTFValues_yy; byte[] byteArray5 = data1.generateMTFValues_yy; byte[] byteArray6 = data1.unseqToSeq; boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (int) (byte) 1); boolean boolean10 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test25() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test25"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int2 = data1.origPtr; byte[] byteArray3 = data1.sendMTFValues2_pos; byte[] byteArray4 = data1.generateMTFValues_yy; byte[] byteArray5 = data1.generateMTFValues_yy; byte[] byteArray6 = data1.generateMTFValues_yy; boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (-287117849)); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test26() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test26"); byte[] byteArray0 = null; boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, 0); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test27() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test27"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int2 = data1.origPtr; byte[][] byteArray3 = data1.sendMTFValues_len; short[] shortArray4 = data1.sendMTFValues_cost; byte[] byteArray5 = data1.sendMTFValues2_pos; org.apache.commons.compress.compressors.bzip2.BlockSort blockSort6 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data1); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data8 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int9 = data8.origPtr; byte[] byteArray10 = data8.sendMTFValues2_pos; byte[] byteArray11 = data8.generateMTFValues_yy; blockSort6.fallbackSort(data8, 0); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data15 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int16 = data15.origPtr; byte[] byteArray17 = data15.sendMTFValues2_pos; byte[] byteArray18 = data15.generateMTFValues_yy; byte[] byteArray19 = data15.unseqToSeq; int[] intArray20 = data15.parent; boolean[] booleanArray21 = data15.sentMTFValues4_inUse16; blockSort6.fallbackSort(data15, 1); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data25 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int26 = data25.origPtr; byte[] byteArray27 = data25.sendMTFValues2_pos; int int28 = data25.origPtr; blockSort6.mainSort(data25, 50); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data32 = null; // flaky: new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data((-594764567)); int[] intArray33 = null; // flaky: data32.heap; org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data35 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int36 = data35.origPtr; byte[] byteArray37 = data35.sendMTFValues2_pos; byte[] byteArray38 = data35.generateMTFValues_yy; byte[] byteArray39 = data35.unseqToSeq; boolean boolean41 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray39, 20); try { blockSort6.fallbackSort(intArray33, byteArray39, (int) (short) -1); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: bitIndex < 0: -1"); } catch (java.lang.IndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertNotNull(shortArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(byteArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(byteArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(booleanArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertNotNull(byteArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(byteArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); }
public void test28() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test28"); byte[] byteArray0 = new byte[] {}; boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (short) 1); try { boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, 10); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } org.junit.Assert.assertNotNull(byteArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test29() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test29"); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int2 = data1.origPtr; org.apache.commons.compress.compressors.bzip2.BlockSort blockSort3 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data1); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data5 = null; // flaky: new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data((-594764567)); org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data9 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); int int10 = data9.origPtr; byte[] byteArray11 = data9.sendMTFValues2_pos; byte[] byteArray12 = data9.generateMTFValues_yy; int[][] intArray13 = data9.sendMTFValues_rfreq; int[] intArray14 = data9.sendMTFValues_fave; org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data16 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4); short[] shortArray17 = data16.sendMTFValues_cost; byte[] byteArray18 = data16.generateMTFValues_yy; blockSort3.fallbackSort(intArray14, byteArray18, (int) (byte) 1); boolean boolean22 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray18, (int) '4'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(byteArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray13); org.junit.Assert.assertNotNull(intArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(shortArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(byteArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test30() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test30"); byte[] byteArray5 = new byte[] { (byte) 10, (byte) 0, (byte) 0, (byte) 100, (byte) 1 }; boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, 0); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 0, 0, 100, 1]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test31() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test31"); byte[] byteArray1 = new byte[] { (byte) 10 }; boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, 10); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[10]"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test32() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test32"); byte[] byteArray1 = new byte[] { (byte) -1 }; boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, (int) (short) -1); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-1]"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test33() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test33"); byte[] byteArray1 = new byte[] { (byte) 0 }; boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, 1); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test34() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test34"); byte[] byteArray6 = new byte[] { (byte) 100, (byte) 1, (byte) 100, (byte) 100, (byte) 1, (byte) 100 }; boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, 0); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 1, 100, 100, 1, 100]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test35() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test35"); byte[] byteArray1 = new byte[] { (byte) 0 }; boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, 0); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test36() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test36"); byte[] byteArray2 = new byte[] { (byte) 0, (byte) 0 }; boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray2, (int) (byte) 1); org.junit.Assert.assertNotNull(byteArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0]"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test37() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test37"); byte[] byteArray6 = new byte[] { (byte) 0, (byte) 10, (byte) 0, (byte) 1, (byte) -1, (byte) 10 }; boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (int) (byte) 0); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 10, 0, 1, -1, 10]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test38() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test38"); byte[] byteArray2 = new byte[] { (byte) -1, (byte) 1 }; boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray2, (int) (byte) 1); org.junit.Assert.assertNotNull(byteArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 1]"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test39() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test39"); byte[] byteArray3 = new byte[] { (byte) 1, (byte) 100, (byte) 100 }; boolean boolean5 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray3, 0); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 100, 100]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test40() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test40"); byte[] byteArray2 = new byte[] { (byte) 0, (byte) -1 }; boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray2, 0); org.junit.Assert.assertNotNull(byteArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, -1]"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test41() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test41"); byte[] byteArray5 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) 1, (byte) 0 }; boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, (int) ' '); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 100, -1, 1, 0]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test42() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test42"); byte[] byteArray4 = new byte[] { (byte) 100, (byte) 10, (byte) 1, (byte) 10 }; boolean boolean6 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray4, (int) (byte) 1); org.junit.Assert.assertNotNull(byteArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100, 10, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test43() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test43"); byte[] byteArray3 = new byte[] { (byte) 1, (byte) 10, (byte) -1 }; boolean boolean5 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray3, (int) (byte) 100); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 10, -1]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test44() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test44"); byte[] byteArray5 = new byte[] { (byte) 100, (byte) 1, (byte) 1, (byte) 100, (byte) 10 }; boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, (int) (byte) 10); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 1, 1, 100, 10]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test45() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test45"); byte[] byteArray4 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 0 }; boolean boolean6 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray4, (int) (byte) 10); org.junit.Assert.assertNotNull(byteArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, -1, 10, 0]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test46() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test46"); byte[] byteArray3 = new byte[] { (byte) 100, (byte) 1, (byte) 100 }; boolean boolean5 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray3, (int) (byte) 100); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100, 1, 100]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test47() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test47"); byte[] byteArray4 = new byte[] { (byte) 100, (byte) 100, (byte) 10, (byte) 10 }; boolean boolean6 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray4, 0); org.junit.Assert.assertNotNull(byteArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100, 100, 10, 10]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test48() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test48"); byte[] byteArray2 = new byte[] { (byte) 10, (byte) 1 }; boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray2, (int) (byte) -1); org.junit.Assert.assertNotNull(byteArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, 1]"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test49() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test49"); byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100, (byte) 1, (byte) 100 }; boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (int) (short) 0); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 0, 100, 1, 100]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test50() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test50"); byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 0, (byte) 0, (byte) 10, (byte) -1 }; boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (int) (byte) 1); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 0, 0, 10, -1]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test51() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test51"); byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 100, (byte) 10, (byte) -1 }; boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, 0); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, 100, 100, 10, -1]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test52() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test52"); byte[] byteArray0 = new byte[] {}; boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (byte) -1); org.junit.Assert.assertNotNull(byteArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test53() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test53"); byte[] byteArray0 = new byte[] {}; boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, 0); org.junit.Assert.assertNotNull(byteArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test54() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test54"); byte[] byteArray1 = new byte[] { (byte) 10 }; boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, (-1)); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[10]"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test55() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test55"); byte[] byteArray0 = new byte[] {}; boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, 1); org.junit.Assert.assertNotNull(byteArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test56() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test56"); byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 100, (byte) 0, (byte) 0 }; boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, (int) 'a'); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 100, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test57() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test57"); byte[] byteArray1 = new byte[] { (byte) 10 }; boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, (int) (short) -1); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[10]"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test58() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test58"); byte[] byteArray2 = new byte[] { (byte) 10, (byte) 1 }; boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray2, 0); org.junit.Assert.assertNotNull(byteArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, 1]"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test59() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test59"); byte[] byteArray1 = new byte[] { (byte) 0 }; boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, (int) (short) 1); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test60() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test60"); byte[] byteArray0 = new byte[] {}; boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (byte) 0); org.junit.Assert.assertNotNull(byteArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test61() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test61"); byte[] byteArray6 = new byte[] { (byte) 10, (byte) -1, (byte) 10, (byte) 10, (byte) 1, (byte) 10 }; boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (int) (byte) -1); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, -1, 10, 10, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test62() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test62"); byte[] byteArray6 = new byte[] { (byte) 100, (byte) 1, (byte) 1, (byte) 10, (byte) 100, (byte) -1 }; boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, 0); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 1, 1, 10, 100, -1]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test63() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test63"); byte[] byteArray5 = new byte[] { (byte) 100, (byte) 0, (byte) -1, (byte) 1, (byte) -1 }; boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, (int) (short) 0); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 0, -1, 1, -1]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test64() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test64"); byte[] byteArray1 = new byte[] { (byte) 100 }; boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, (int) (byte) 0); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test65() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test65"); byte[] byteArray5 = new byte[] { (byte) 0, (byte) -1, (byte) 1, (byte) 1, (byte) 10 }; boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, 0); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, -1, 1, 1, 10]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test66() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test66"); byte[] byteArray3 = new byte[] { (byte) 0, (byte) 10, (byte) 1 }; boolean boolean5 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray3, (int) (byte) -1); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 10, 1]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test67() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test67"); byte[] byteArray4 = new byte[] { (byte) 100, (byte) 0, (byte) -1, (byte) 1 }; boolean boolean6 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray4, (int) (byte) 10); org.junit.Assert.assertNotNull(byteArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100, 0, -1, 1]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test68() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test68"); byte[] byteArray0 = null; try { boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) 'a'); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test69() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test69"); byte[] byteArray1 = new byte[] { (byte) 100 }; boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, (int) '4'); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test70() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test70"); byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100, (byte) 0 }; boolean boolean5 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray3, (int) (byte) 100); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100, 0]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test71() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test71"); byte[] byteArray5 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 100, (byte) 0 }; boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, (int) ' '); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 10, 10, 100, 0]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
