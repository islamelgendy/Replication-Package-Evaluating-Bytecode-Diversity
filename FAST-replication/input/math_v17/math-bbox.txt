public void test501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test501"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp[] dfpArray2 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) (short) 10); dfpField1.setIEEEFlagsBits(100); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getLn10(); org.junit.Assert.assertNotNull(dfpArray2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); }
public void test502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test502"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfp3.reciprocal(); int int6 = dfp4.align((int) (short) 100); org.apache.commons.math3.dfp.Dfp dfp7 = dfp4.abs(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(dfp7); }
public void test503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test503"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); boolean boolean14 = dfp13.negativeOrNull(); int int15 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField17.getTwo(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp13.add(dfp19); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField22.getTwo(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField22.getOne(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField22.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField22.newDfp(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp20.add(dfp28); org.apache.commons.math3.dfp.Dfp dfp30 = dfp10.nextAfter(dfp20); org.apache.commons.math3.dfp.Dfp dfp31 = dfp10.getOne(); boolean boolean32 = dfp31.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField33 = dfp31.getField(); boolean boolean34 = dfp31.isZero(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(dfpField33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); }
public void test504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test504"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); double double19 = dfp17.toDouble(); int int20 = dfp17.exp; org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = dfp17.newInstance(dfp29); org.apache.commons.math3.dfp.Dfp dfp31 = dfp30.negate(); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp[] dfpArray36 = dfpField35.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getOne(); org.apache.commons.math3.dfp.DfpField dfpField39 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField39.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField39.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn10(); boolean boolean46 = dfp45.negativeOrNull(); int int47 = dfp45.log10K(); org.apache.commons.math3.dfp.DfpField dfpField49 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp50 = dfpField49.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField49.getTwo(); org.apache.commons.math3.dfp.Dfp dfp52 = dfp45.add(dfp51); org.apache.commons.math3.dfp.Dfp dfp54 = dfp52.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp55 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp42, dfp52); org.apache.commons.math3.dfp.Dfp dfp56 = dfp42.rint(); org.apache.commons.math3.dfp.Dfp dfp57 = dfp56.abs(); org.apache.commons.math3.dfp.Dfp dfp58 = null; org.apache.commons.math3.dfp.Dfp dfp59 = dfp31.trap((int) (byte) 2, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e", dfp37, dfp56, dfp58); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode60 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_UP; org.apache.commons.math3.dfp.Dfp dfp61 = dfp56.trunc(roundingMode60); boolean boolean62 = dfp56.isNaN(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfpArray36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + roundingMode60 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_UP + "'", roundingMode60.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_UP)); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); }
public void test505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test505"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 0L); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.newDfp((long) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp14 = dfp13.sqrt(); boolean boolean15 = dfp14.negativeOrNull(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test506"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp4 = dfp2.ceil(); java.lang.String str5 = dfp4.dfp2string(); org.apache.commons.math3.dfp.Dfp dfp6 = dfp4.reciprocal(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "3." + "'", str5, "3."); org.junit.Assert.assertNotNull(dfp6); }
public void test507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test507"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); boolean boolean6 = dfp5.isInfinite(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test508"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "2."); org.apache.commons.math3.dfp.Dfp[] dfpArray6 = dfpField1.getLn2Split(); int int7 = dfpField1.getIEEEFlags(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfpArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16); }
public void test509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test509"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); int int9 = dfp8.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode10 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp11 = dfp8.trunc(roundingMode10); org.apache.commons.math3.dfp.Dfp dfp13 = dfp11.divide(10); org.apache.commons.math3.dfp.Dfp dfp14 = dfp13.getZero(); boolean boolean15 = dfp13.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp13.floor(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField1.newDfp(dfp16); dfp17.sign = (byte) -1; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + roundingMode10 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode10.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); }
public void test510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test510"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfp6.floor(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); boolean boolean15 = dfp14.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp10.multiply(dfp14); int int18 = dfp16.round(2); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray24 = dfpField22.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField22.getZero(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField22.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField29 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField29.getLn10(); int int31 = dfp30.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode32 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp33 = dfp30.trunc(roundingMode32); org.apache.commons.math3.dfp.Dfp dfp35 = dfp30.power10((int) (short) -1); dfp30.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp37 = dfp27.subtract(dfp30); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); boolean boolean43 = dfp42.negativeOrNull(); int int44 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField46.getTwo(); org.apache.commons.math3.dfp.Dfp dfp49 = dfp42.add(dfp48); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField51.getTwo(); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField51.getOne(); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField51.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField51.newDfp(); org.apache.commons.math3.dfp.Dfp dfp58 = dfp49.add(dfp57); double double59 = dfp57.toDouble(); int int60 = dfp57.exp; org.apache.commons.math3.dfp.DfpField dfpField62 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField62.getLn10(); int int64 = dfp63.log10K(); org.apache.commons.math3.dfp.DfpField dfpField66 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp67 = dfpField66.getLn10(); int int68 = dfp67.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode69 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp70 = dfp67.trunc(roundingMode69); java.lang.String str71 = dfp70.toString(); org.apache.commons.math3.dfp.Dfp dfp72 = dfp63.divide(dfp70); org.apache.commons.math3.dfp.Dfp dfp73 = dfp27.dotrap(100, "", dfp57, dfp72); org.apache.commons.math3.dfp.DfpField dfpField75 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField75.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray77 = dfpField75.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp78 = dfpField75.getZero(); org.apache.commons.math3.dfp.Dfp dfp80 = dfpField75.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp81 = dfp16.dotrap((-1), "2.", dfp57, dfp80); org.apache.commons.math3.dfp.DfpField dfpField83 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp84 = dfpField83.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp85 = dfpField83.getTwo(); org.apache.commons.math3.dfp.Dfp dfp86 = dfpField83.getOne(); org.apache.commons.math3.dfp.Dfp dfp88 = dfpField83.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp89 = dfpField83.getLn10(); org.apache.commons.math3.dfp.Dfp dfp90 = dfpField83.getTwo(); org.apache.commons.math3.dfp.Dfp dfp93 = dfp90.newInstance((byte) 0, (byte) 10); org.apache.commons.math3.dfp.Dfp dfp94 = dfp57.add(dfp90); org.apache.commons.math3.dfp.Dfp dfp95 = dfp57.abs(); boolean boolean96 = dfp6.unequal(dfp57); org.apache.commons.math3.dfp.Dfp dfp97 = dfp6.getZero(); org.apache.commons.math3.dfp.Dfp dfp98 = dfp97.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfpArray24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertTrue("'" + roundingMode32 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode32.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0); org.junit.Assert.assertTrue("'" + roundingMode69 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode69.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "3." + "'", str71, "3."); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertNotNull(dfpArray77); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertNotNull(dfp80); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp84); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertNotNull(dfp88); org.junit.Assert.assertNotNull(dfp89); org.junit.Assert.assertNotNull(dfp90); org.junit.Assert.assertNotNull(dfp93); org.junit.Assert.assertNotNull(dfp94); org.junit.Assert.assertNotNull(dfp95); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true); org.junit.Assert.assertNotNull(dfp97); org.junit.Assert.assertNotNull(dfp98); }
public void test511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test511"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); double double19 = dfp17.toDouble(); int int20 = dfp17.exp; org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = dfp17.newInstance(dfp29); org.apache.commons.math3.dfp.Dfp dfp32 = dfp30.multiply(8); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp32); }
public void test512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test512"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (long) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfpArray8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); }
public void test513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test513"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); int int7 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp9 = dfp6.trunc(roundingMode8); java.lang.String str10 = dfp9.toString(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(dfp9); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); boolean boolean17 = dfp16.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); boolean boolean21 = dfp20.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp16.multiply(dfp20); dfp22.shiftRight(); org.apache.commons.math3.dfp.Dfp dfp24 = null; org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); boolean boolean29 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp27.newInstance((double) (-1)); org.apache.commons.math3.dfp.Dfp dfp32 = dfp9.trap((int) (byte) 1, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e", dfp22, dfp24, dfp31); org.apache.commons.math3.dfp.Dfp dfp34 = dfp22.newInstance((byte) 1); int int35 = dfp34.log10K(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "3." + "'", str10, "3."); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); }
public void test514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test514"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray9 = dfpField7.getESplit(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField7, (-32767)); org.apache.commons.math3.dfp.Dfp dfp13 = dfp11.newInstance("hi!"); org.apache.commons.math3.dfp.Dfp dfp14 = org.apache.commons.math3.dfp.Dfp.copysign(dfp2, dfp11); dfp14.sign = (byte) 0; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfpArray9); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); }
public void test515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test515"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField4 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField4.getLn10(); boolean boolean6 = dfp5.negativeOrNull(); int int7 = dfp5.log10K(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField9.getTwo(); org.apache.commons.math3.dfp.Dfp dfp12 = dfp5.add(dfp11); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.subtract(dfp12); org.apache.commons.math3.dfp.Dfp dfp14 = dfp13.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); int int20 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode21 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp22 = dfp19.trunc(roundingMode21); org.apache.commons.math3.dfp.Dfp dfp24 = dfp19.power10((int) (short) -1); dfp19.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp27 = dfp19.newInstance(1.0d); int int29 = dfp19.round((int) (byte) 0); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); boolean boolean33 = dfp32.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getLn10(); boolean boolean37 = dfp36.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp38 = dfp32.multiply(dfp36); org.apache.commons.math3.dfp.DfpField dfpField40 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField40.getLn10(); int int42 = dfp41.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode43 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp44 = dfp41.trunc(roundingMode43); org.apache.commons.math3.dfp.Dfp dfp46 = dfp44.divide(10); org.apache.commons.math3.dfp.DfpField dfpField48 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField48.getLn10(); boolean boolean50 = dfp49.negativeOrNull(); int int51 = dfp49.log10K(); org.apache.commons.math3.dfp.DfpField dfpField53 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField53.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField53.getTwo(); org.apache.commons.math3.dfp.Dfp dfp56 = dfp49.add(dfp55); boolean boolean57 = dfp55.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp58 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp32, dfp46, dfp55); org.apache.commons.math3.dfp.Dfp dfp59 = dfp58.reciprocal(); boolean boolean60 = dfp19.lessThan(dfp59); org.apache.commons.math3.dfp.Dfp dfp61 = null; org.apache.commons.math3.dfp.DfpField dfpField63 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp65 = new org.apache.commons.math3.dfp.Dfp(dfpField63, (byte) 2); org.apache.commons.math3.dfp.Dfp dfp66 = dfp14.trap((int) (short) 100, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e", dfp19, dfp61, dfp65); org.apache.commons.math3.dfp.Dfp dfp68 = dfp65.newInstance((long) 100); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertTrue("'" + roundingMode21 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode21.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertTrue("'" + roundingMode43 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode43.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNull(dfp66); org.junit.Assert.assertNotNull(dfp68); }
public void test516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test516"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp5.newInstance(1.0d); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); }
public void test517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test517"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp11 = dfp9.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp12 = dfp11.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp12.getTwo(); byte byte14 = dfp12.nans; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0); }
public void test518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test518"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); boolean boolean10 = dfp8.isInfinite(); java.lang.String str11 = dfp8.toString(); org.apache.commons.math3.dfp.DfpField dfpField12 = dfp8.getField(); org.apache.commons.math3.dfp.Dfp dfp14 = new org.apache.commons.math3.dfp.Dfp(dfpField12, (double) (-8)); org.apache.commons.math3.dfp.Dfp dfp15 = dfp14.floor(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2." + "'", str11, "2."); org.junit.Assert.assertNotNull(dfpField12); org.junit.Assert.assertNotNull(dfp15); }
public void test519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test519"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp((long) 0); org.apache.commons.math3.dfp.Dfp[] dfpArray4 = dfpField1.getLn5Split(); org.apache.commons.math3.dfp.Dfp[] dfpArray5 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (double) (-4)); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfpArray4); org.junit.Assert.assertNotNull(dfpArray5); org.junit.Assert.assertNotNull(dfp6); }
public void test520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test520"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp[] dfpArray6 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp10.add(dfp16); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); boolean boolean21 = dfp20.negativeOrNull(); int int22 = dfp20.log10K(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField24.getTwo(); org.apache.commons.math3.dfp.Dfp dfp27 = dfp20.add(dfp26); org.apache.commons.math3.dfp.Dfp dfp28 = dfp16.divide(dfp20); org.apache.commons.math3.dfp.Dfp dfp29 = dfp16.floor(); boolean boolean30 = dfp16.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp7.remainder(dfp16); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField37 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField37.getLn10(); boolean boolean39 = dfp38.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp40 = dfp34.multiply(dfp38); org.apache.commons.math3.dfp.DfpField dfpField42 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField42.getLn10(); int int44 = dfp43.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode45 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp46 = dfp43.trunc(roundingMode45); org.apache.commons.math3.dfp.Dfp dfp48 = dfp46.divide(10); org.apache.commons.math3.dfp.DfpField dfpField50 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField50.getLn10(); boolean boolean52 = dfp51.negativeOrNull(); int int53 = dfp51.log10K(); org.apache.commons.math3.dfp.DfpField dfpField55 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField55.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField55.getTwo(); org.apache.commons.math3.dfp.Dfp dfp58 = dfp51.add(dfp57); boolean boolean59 = dfp57.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp60 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp34, dfp48, dfp57); org.apache.commons.math3.dfp.DfpField dfpField62 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField62.getLn10(); int int64 = dfp63.log10K(); boolean boolean65 = dfp63.isZero(); boolean boolean66 = dfp60.lessThan(dfp63); org.apache.commons.math3.dfp.Dfp dfp67 = dfp16.multiply(dfp63); boolean boolean68 = dfp16.isNaN(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfpArray6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertTrue("'" + roundingMode45 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode45.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); }
public void test521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test521"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn5(); dfpField1.setIEEEFlagsBits((int) (byte) 2); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp((byte) 3, (byte) -1); org.apache.commons.math3.dfp.Dfp dfp8 = dfp7.newInstance(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); }
public void test522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test522"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; dfpField1.setRoundingMode(roundingMode4); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass6 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn2(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.newDfp((long) (short) 100); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.newDfp((long) 9999); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(wildcardClass6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp13); }
public void test523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test523"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp7.newInstance((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp11 = dfp9.newInstance(10L); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); boolean boolean15 = dfp14.negativeOrNull(); int int16 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField18.getTwo(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp14.add(dfp20); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); boolean boolean25 = dfp24.negativeOrNull(); int int26 = dfp24.log10K(); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp24.add(dfp30); org.apache.commons.math3.dfp.Dfp dfp32 = dfp20.divide(dfp24); org.apache.commons.math3.dfp.Dfp dfp33 = dfp20.newInstance(); boolean boolean34 = dfp9.equals((java.lang.Object) dfp20); org.apache.commons.math3.dfp.Dfp dfp35 = dfp9.getTwo(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(dfp35); }
public void test524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test524"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); int int21 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField23.getTwo(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp19.add(dfp25); boolean boolean27 = dfp25.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp28 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp2, dfp16, dfp25); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getLn10(); int int32 = dfp31.log10K(); boolean boolean33 = dfp31.isZero(); boolean boolean34 = dfp28.lessThan(dfp31); dfp28.shiftRight(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); }
public void test525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test525"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField4 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField4.getLn10(); boolean boolean6 = dfp5.negativeOrNull(); int int7 = dfp5.log10K(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField9.getTwo(); org.apache.commons.math3.dfp.Dfp dfp12 = dfp5.add(dfp11); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.subtract(dfp12); org.apache.commons.math3.dfp.Dfp dfp14 = dfp13.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); int int20 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode21 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp22 = dfp19.trunc(roundingMode21); org.apache.commons.math3.dfp.Dfp dfp24 = dfp19.power10((int) (short) -1); dfp19.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp27 = dfp19.newInstance(1.0d); int int29 = dfp19.round((int) (byte) 0); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); boolean boolean33 = dfp32.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getLn10(); boolean boolean37 = dfp36.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp38 = dfp32.multiply(dfp36); org.apache.commons.math3.dfp.DfpField dfpField40 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField40.getLn10(); int int42 = dfp41.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode43 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp44 = dfp41.trunc(roundingMode43); org.apache.commons.math3.dfp.Dfp dfp46 = dfp44.divide(10); org.apache.commons.math3.dfp.DfpField dfpField48 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField48.getLn10(); boolean boolean50 = dfp49.negativeOrNull(); int int51 = dfp49.log10K(); org.apache.commons.math3.dfp.DfpField dfpField53 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField53.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField53.getTwo(); org.apache.commons.math3.dfp.Dfp dfp56 = dfp49.add(dfp55); boolean boolean57 = dfp55.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp58 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp32, dfp46, dfp55); org.apache.commons.math3.dfp.Dfp dfp59 = dfp58.reciprocal(); boolean boolean60 = dfp19.lessThan(dfp59); org.apache.commons.math3.dfp.Dfp dfp61 = null; org.apache.commons.math3.dfp.DfpField dfpField63 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp65 = new org.apache.commons.math3.dfp.Dfp(dfpField63, (byte) 2); org.apache.commons.math3.dfp.Dfp dfp66 = dfp14.trap((int) (short) 100, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e", dfp19, dfp61, dfp65); org.apache.commons.math3.dfp.DfpField dfpField68 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp69 = dfpField68.getLn10(); boolean boolean70 = dfp69.negativeOrNull(); int int71 = dfp69.log10K(); int int72 = dfp69.log10K(); org.apache.commons.math3.dfp.DfpField dfpField74 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp75 = dfpField74.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField74.getTwo(); org.apache.commons.math3.dfp.Dfp dfp77 = dfpField74.getOne(); org.apache.commons.math3.dfp.Dfp dfp79 = new org.apache.commons.math3.dfp.Dfp(dfpField74, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp80 = dfp69.nextAfter(dfp79); boolean boolean81 = dfp19.equals((java.lang.Object) dfp80); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertTrue("'" + roundingMode21 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode21.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertTrue("'" + roundingMode43 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode43.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true); org.junit.Assert.assertNull(dfp66); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertNotNull(dfp77); org.junit.Assert.assertNotNull(dfp80); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false); }
public void test526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test526"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getSqr2(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); int int16 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode17 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp18 = dfp15.trunc(roundingMode17); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField19 = dfp18.getField(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp25 = new org.apache.commons.math3.dfp.Dfp(dfpField23, 16); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField27.getTwo(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField27.getOne(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField27.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField27.newDfp(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField27.getZero(); org.apache.commons.math3.dfp.Dfp dfp35 = dfp18.dotrap(10000, "", dfp25, dfp34); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField1.newDfp(dfp25); org.apache.commons.math3.dfp.Dfp dfp38 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "hi!"); int int39 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField1.getSqr3(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode17.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfpField19); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 25 + "'", int39 == 25); org.junit.Assert.assertNotNull(dfp40); }
public void test527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test527"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp10.align(0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp10.divide(dfp21); org.apache.commons.math3.dfp.Dfp dfp26 = dfp10.power10((int) '#'); org.apache.commons.math3.dfp.DfpField dfpField27 = dfp26.getField(); org.apache.commons.math3.dfp.Dfp dfp29 = new org.apache.commons.math3.dfp.Dfp(dfpField27, "3."); org.apache.commons.math3.dfp.Dfp[] dfpArray30 = dfpField27.getSqr2Split(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfpField27); org.junit.Assert.assertNotNull(dfpArray30); }
public void test528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test528"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; dfpField1.setRoundingMode(roundingMode4); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass6 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(wildcardClass6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); }
public void test529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test529"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp4 = dfp2.ceil(); dfp4.shiftRight(); org.apache.commons.math3.dfp.Dfp dfp6 = dfp4.newInstance(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); }
public void test530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test530"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); dfpField1.setIEEEFlags((int) (short) 0); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField9.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp24 = dfp22.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp25 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp12, dfp22); int[] intArray26 = dfp12.mant; org.apache.commons.math3.dfp.Dfp dfp27 = dfp12.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp12.sqrt(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp12.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray33 = dfpField31.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField31.getZero(); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField31.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp38 = new org.apache.commons.math3.dfp.Dfp(dfpField31, (int) (byte) 10); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode39 = dfpField31.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp40 = dfp12.trunc(roundingMode39); dfpField1.setRoundingMode(roundingMode39); int int42 = dfpField1.getRadixDigits(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(intArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35]"); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfpArray33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + roundingMode39 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode39.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 25 + "'", int42 == 25); }
public void test531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test531"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); boolean boolean9 = dfp2.strictlyNegative(); boolean boolean10 = dfp2.positiveOrNull(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); }
public void test532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test532"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(8); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); int int15 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); java.lang.String str22 = dfp21.toString(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp14.divide(dfp21); boolean boolean24 = dfp11.greaterThan(dfp14); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField26.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); boolean boolean33 = dfp32.negativeOrNull(); int int34 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfp32.add(dfp38); org.apache.commons.math3.dfp.Dfp dfp41 = dfp39.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp42 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp29, dfp39); org.apache.commons.math3.dfp.Dfp dfp43 = new org.apache.commons.math3.dfp.Dfp(dfp29); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField45.getTwo(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField45.getOne(); org.apache.commons.math3.dfp.Dfp dfp50 = dfpField45.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField45.getLn10(); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField45.getTwo(); org.apache.commons.math3.dfp.Dfp dfp55 = dfp52.newInstance((byte) 0, (byte) 10); org.apache.commons.math3.dfp.Dfp dfp56 = dfp43.multiply(dfp55); int int57 = dfp55.intValue(); org.apache.commons.math3.dfp.Dfp dfp58 = dfp11.add(dfp55); java.lang.String str59 = dfp55.toString(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3." + "'", str22, "3."); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NaN" + "'", str59, "NaN"); }
public void test533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test533"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 2); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp((byte) 3, (byte) -1); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField10.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); boolean boolean17 = dfp16.negativeOrNull(); int int18 = dfp16.log10K(); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp16.add(dfp22); org.apache.commons.math3.dfp.Dfp dfp25 = dfp23.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp26 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp13, dfp23); int[] intArray27 = dfp13.mant; org.apache.commons.math3.dfp.Dfp dfp28 = dfp13.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp13.sqrt(); int int30 = dfp13.intValue(); org.apache.commons.math3.dfp.DfpField dfpField32 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField32.getLn10(); int int34 = dfp33.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode35 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp36 = dfp33.trunc(roundingMode35); org.apache.commons.math3.dfp.Dfp dfp37 = dfp13.multiply(dfp36); org.apache.commons.math3.dfp.Dfp dfp38 = dfp8.add(dfp37); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(intArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35]"); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertTrue("'" + roundingMode35 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode35.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); }
public void test534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test534"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.newInstance((byte) 1, (byte) 1); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp17.multiply(dfp21); dfp23.shiftRight(); org.apache.commons.math3.dfp.Dfp dfp25 = dfp14.add(dfp23); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getLn10(); boolean boolean29 = dfp28.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); boolean boolean33 = dfp32.negativeOrNull(); int int34 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfp32.add(dfp38); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); boolean boolean43 = dfp42.negativeOrNull(); int int44 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField46.getTwo(); org.apache.commons.math3.dfp.Dfp dfp49 = dfp42.add(dfp48); org.apache.commons.math3.dfp.Dfp dfp50 = dfp38.divide(dfp42); int int51 = dfp38.getRadixDigits(); int int52 = dfp38.intValue(); org.apache.commons.math3.dfp.DfpField dfpField54 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField54.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField54.getTwo(); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField54.getOne(); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField54.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp61 = new org.apache.commons.math3.dfp.Dfp(dfpField54, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp62 = dfp38.divide(dfp61); boolean boolean63 = dfp28.unequal(dfp62); org.apache.commons.math3.dfp.Dfp dfp65 = dfp62.newInstance(100L); org.apache.commons.math3.dfp.Dfp dfp66 = dfp23.nextAfter(dfp62); org.apache.commons.math3.dfp.Dfp dfp68 = dfp66.power10((-8)); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 25 + "'", int51 == 25); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp66); org.junit.Assert.assertNotNull(dfp68); }
public void test535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test535"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp10.align(0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp10.divide(dfp21); org.apache.commons.math3.dfp.Dfp dfp26 = dfp10.power10((int) (byte) 2); int int27 = dfp26.getRadixDigits(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 25 + "'", int27 == 25); }
public void test536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test536"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); int int5 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); boolean boolean9 = dfp8.negativeOrNull(); int int10 = dfp8.log10K(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField12.getTwo(); org.apache.commons.math3.dfp.Dfp dfp15 = dfp8.add(dfp14); org.apache.commons.math3.dfp.Dfp dfp17 = dfp8.divide(8); org.apache.commons.math3.dfp.Dfp dfp18 = dfp2.remainder(dfp8); java.lang.String str19 = dfp2.dfp2string(); int int21 = dfp2.complement((int) (short) -1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598" + "'", str19, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); }
public void test537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test537"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); dfpField1.setIEEEFlags((int) (short) 0); int int8 = dfpField1.getIEEEFlags(); dfpField1.setIEEEFlagsBits(10); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp11.newInstance(0.0d); byte byte14 = dfp11.nans; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0); }
public void test538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test538"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); int int21 = dfp8.getRadixDigits(); int int22 = dfp8.intValue(); boolean boolean23 = dfp8.isInfinite(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getTwo(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField35.getOne(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField35.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField35.newDfp(); org.apache.commons.math3.dfp.Dfp dfp42 = dfp33.add(dfp41); org.apache.commons.math3.dfp.Dfp dfp43 = org.apache.commons.math3.dfp.Dfp.copysign(dfp8, dfp42); double double44 = dfp42.toDouble(); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField46.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getLn10(); boolean boolean53 = dfp52.negativeOrNull(); int int54 = dfp52.log10K(); org.apache.commons.math3.dfp.DfpField dfpField56 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField56.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField56.getTwo(); org.apache.commons.math3.dfp.Dfp dfp59 = dfp52.add(dfp58); org.apache.commons.math3.dfp.Dfp dfp61 = dfp59.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp62 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp49, dfp59); double double63 = dfp62.toDouble(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp62.ceil(); org.apache.commons.math3.dfp.Dfp dfp65 = org.apache.commons.math3.dfp.Dfp.copysign(dfp42, dfp62); int int66 = dfp62.log10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4.302585092994046d + "'", double44 == 4.302585092994046d); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 14674.41072270908d + "'", double63 == 14674.41072270908d); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4); }
public void test539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test539"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp("hi!"); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass10 = dfpField1.getRuntimeClass(); dfpField1.clearIEEEFlags(); org.apache.commons.math3.dfp.Dfp[] dfpArray12 = dfpField1.getPiSplit(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(wildcardClass10); org.junit.Assert.assertNotNull(dfpArray12); }
public void test540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test540"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); int int10 = dfp8.round(2); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray16 = dfpField14.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField14.getZero(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField14.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getLn10(); int int23 = dfp22.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode24 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp25 = dfp22.trunc(roundingMode24); org.apache.commons.math3.dfp.Dfp dfp27 = dfp22.power10((int) (short) -1); dfp22.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp19.subtract(dfp22); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); int int36 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField38.getTwo(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp34.add(dfp40); org.apache.commons.math3.dfp.DfpField dfpField43 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField43.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField43.getTwo(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField43.getOne(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField43.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField43.newDfp(); org.apache.commons.math3.dfp.Dfp dfp50 = dfp41.add(dfp49); double double51 = dfp49.toDouble(); int int52 = dfp49.exp; org.apache.commons.math3.dfp.DfpField dfpField54 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField54.getLn10(); int int56 = dfp55.log10K(); org.apache.commons.math3.dfp.DfpField dfpField58 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField58.getLn10(); int int60 = dfp59.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode61 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp62 = dfp59.trunc(roundingMode61); java.lang.String str63 = dfp62.toString(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp55.divide(dfp62); org.apache.commons.math3.dfp.Dfp dfp65 = dfp19.dotrap(100, "", dfp49, dfp64); org.apache.commons.math3.dfp.DfpField dfpField67 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField67.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray69 = dfpField67.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp70 = dfpField67.getZero(); org.apache.commons.math3.dfp.Dfp dfp72 = dfpField67.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp73 = dfp8.dotrap((-1), "2.", dfp49, dfp72); org.apache.commons.math3.dfp.DfpField dfpField75 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField75.getSqr3Reciprocal(); int int77 = dfpField75.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp78 = dfpField75.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode79 = dfpField75.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp80 = dfp49.trunc(roundingMode79); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfpArray16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode24.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0); org.junit.Assert.assertTrue("'" + roundingMode61 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode61.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "3." + "'", str63, "3."); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertNotNull(dfpArray69); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertTrue("'" + int77 + "' != '" + 16 + "'", int77 == 16); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertTrue("'" + roundingMode79 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode79.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp80); }
public void test541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test541"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); int int3 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn10(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass5 = dfpField1.getRuntimeClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(wildcardClass5); }
public void test542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test542"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp[] dfpArray4 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getE(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfpArray4); org.junit.Assert.assertNotNull(dfp5); }
public void test543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test543"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); int int6 = dfp5.exp; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test544"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); int int21 = dfp8.getRadixDigits(); int int22 = dfp8.intValue(); boolean boolean23 = dfp8.isInfinite(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getTwo(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField35.getOne(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField35.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField35.newDfp(); org.apache.commons.math3.dfp.Dfp dfp42 = dfp33.add(dfp41); org.apache.commons.math3.dfp.Dfp dfp43 = org.apache.commons.math3.dfp.Dfp.copysign(dfp8, dfp42); double double44 = dfp42.toDouble(); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField46.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getLn10(); boolean boolean53 = dfp52.negativeOrNull(); int int54 = dfp52.log10K(); org.apache.commons.math3.dfp.DfpField dfpField56 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField56.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField56.getTwo(); org.apache.commons.math3.dfp.Dfp dfp59 = dfp52.add(dfp58); org.apache.commons.math3.dfp.Dfp dfp61 = dfp59.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp62 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp49, dfp59); double double63 = dfp62.toDouble(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp62.ceil(); org.apache.commons.math3.dfp.Dfp dfp65 = org.apache.commons.math3.dfp.Dfp.copysign(dfp42, dfp62); int int66 = dfp65.intValue(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4.302585092994046d + "'", double44 == 4.302585092994046d); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 14674.41072270908d + "'", double63 == 14674.41072270908d); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4); }
public void test545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test545"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField10 = dfp9.getField(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfpArray8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfpField10); }
public void test546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test546"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); int int5 = dfpField1.getRadixDigits(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25 + "'", int5 == 25); }
public void test547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test547"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); int int21 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField23.getTwo(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp19.add(dfp25); boolean boolean27 = dfp25.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp28 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp2, dfp16, dfp25); org.apache.commons.math3.dfp.Dfp dfp29 = dfp28.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp29.newInstance((double) '4'); int int32 = dfp29.intValue(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1); }
public void test548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test548"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.DfpField dfpField7 = dfp6.getField(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getPi(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfpField7); org.junit.Assert.assertNotNull(dfp8); }
public void test549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test549"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getZero(); org.apache.commons.math3.dfp.DfpField dfpField4 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField4.getE(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField4.newDfp((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField4.getOne(); org.apache.commons.math3.dfp.Dfp dfp10 = new org.apache.commons.math3.dfp.Dfp(dfpField4, (int) (byte) 3); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField4.getLn5(); org.apache.commons.math3.dfp.Dfp dfp12 = org.apache.commons.math3.dfp.Dfp.copysign(dfp2, dfp11); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); }
public void test550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test550"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); boolean boolean10 = dfp9.negativeOrNull(); int int11 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField13.getTwo(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp9.add(dfp15); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.divide(8); boolean boolean19 = dfp9.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp5.remainder(dfp9); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); int int33 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode34 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp35 = dfp32.trunc(roundingMode34); org.apache.commons.math3.dfp.Dfp dfp37 = dfp35.divide(10); org.apache.commons.math3.dfp.DfpField dfpField39 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField39.getLn10(); boolean boolean41 = dfp40.negativeOrNull(); int int42 = dfp40.log10K(); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField44.getTwo(); org.apache.commons.math3.dfp.Dfp dfp47 = dfp40.add(dfp46); boolean boolean48 = dfp46.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp49 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp23, dfp37, dfp46); boolean boolean50 = dfp49.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp52 = dfp49.multiply((int) (short) 0); org.apache.commons.math3.dfp.Dfp dfp53 = dfp5.newInstance(dfp52); dfp53.exp = 0; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertTrue("'" + roundingMode34 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode34.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); }
public void test551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test551"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(8); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); int int15 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); java.lang.String str22 = dfp21.toString(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp14.divide(dfp21); boolean boolean24 = dfp11.greaterThan(dfp14); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getLn10(); int int30 = dfp29.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode31 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp32 = dfp29.trunc(roundingMode31); org.apache.commons.math3.dfp.Dfp dfp34 = dfp29.power10((int) (short) -1); dfp29.shiftLeft(); boolean boolean36 = dfp29.strictlyNegative(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getLn10(); int int40 = dfp39.log10K(); org.apache.commons.math3.dfp.DfpField dfpField42 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField42.getLn10(); int int44 = dfp43.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode45 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp46 = dfp43.trunc(roundingMode45); java.lang.String str47 = dfp46.toString(); org.apache.commons.math3.dfp.Dfp dfp48 = dfp39.divide(dfp46); boolean boolean50 = dfp46.equals((java.lang.Object) 0.0d); org.apache.commons.math3.dfp.Dfp dfp51 = dfp29.divide(dfp46); org.apache.commons.math3.dfp.DfpField dfpField53 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField53.getLn10(); int int55 = dfp54.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode56 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp57 = dfp54.trunc(roundingMode56); org.apache.commons.math3.dfp.Dfp dfp59 = dfp54.power10((int) (short) -1); dfp54.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp62 = dfp54.newInstance(1.0d); int int64 = dfp62.align(0); org.apache.commons.math3.dfp.DfpField dfpField66 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp67 = dfpField66.getLn10(); boolean boolean68 = dfp67.negativeOrNull(); int int69 = dfp67.log10K(); org.apache.commons.math3.dfp.DfpField dfpField71 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp72 = dfpField71.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp73 = dfpField71.getTwo(); org.apache.commons.math3.dfp.Dfp dfp74 = dfp67.add(dfp73); org.apache.commons.math3.dfp.Dfp dfp75 = dfp73.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp76 = dfp62.divide(dfp73); org.apache.commons.math3.dfp.DfpField dfpField78 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp79 = dfpField78.getLn10(); int int80 = dfp79.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode81 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp82 = dfp79.trunc(roundingMode81); org.apache.commons.math3.dfp.Dfp dfp84 = dfp82.divide(10); org.apache.commons.math3.dfp.Dfp dfp85 = dfp84.getZero(); org.apache.commons.math3.dfp.Dfp dfp86 = dfp76.add(dfp85); org.apache.commons.math3.dfp.DfpField dfpField88 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp89 = dfpField88.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray90 = dfpField88.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp92 = dfpField88.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp93 = dfpField88.getOne(); org.apache.commons.math3.dfp.Dfp dfp94 = dfp93.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp95 = dfp11.trap(2147483647, "0.0e0", dfp51, dfp85, dfp94); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode96 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_DOWN; org.apache.commons.math3.dfp.Dfp dfp97 = dfp95.trunc(roundingMode96); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3." + "'", str22, "3."); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode31.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertTrue("'" + roundingMode45 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode45.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "3." + "'", str47, "3."); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertTrue("'" + roundingMode56 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode56.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertNotNull(dfp79); org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0); org.junit.Assert.assertTrue("'" + roundingMode81 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode81.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp84); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertNotNull(dfp89); org.junit.Assert.assertNotNull(dfpArray90); org.junit.Assert.assertNotNull(dfp92); org.junit.Assert.assertNotNull(dfp93); org.junit.Assert.assertNotNull(dfp94); org.junit.Assert.assertNotNull(dfp95); org.junit.Assert.assertTrue("'" + roundingMode96 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_DOWN + "'", roundingMode96.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_DOWN)); org.junit.Assert.assertNotNull(dfp97); }
public void test552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test552"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.newDfp("2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e"); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getZero(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp12); }
public void test553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test553"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); int int5 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField7.getTwo(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField7.getOne(); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField7, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.nextAfter(dfp12); org.apache.commons.math3.dfp.Dfp dfp15 = dfp13.newInstance("2."); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); }
public void test554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test554"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); }
public void test555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test555"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); int int3 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp6 = dfp4.divide(1); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray12 = dfpField10.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField10.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField10.getOne(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); org.apache.commons.math3.dfp.Dfp dfp23 = dfp18.power10((int) (short) -1); dfp18.shiftLeft(); boolean boolean25 = dfp18.strictlyNegative(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp15.newInstance(dfp18); dfp15.shiftLeft(); org.apache.commons.math3.dfp.DfpField dfpField29 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField29.getLn10(); int int31 = dfp30.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode32 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp33 = dfp30.trunc(roundingMode32); org.apache.commons.math3.dfp.Dfp dfp35 = dfp30.power10((int) (short) -1); dfp30.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp38 = dfp30.newInstance(1.0d); int int40 = dfp38.align(0); org.apache.commons.math3.dfp.DfpField dfpField42 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField42.getLn10(); boolean boolean44 = dfp43.negativeOrNull(); int int45 = dfp43.log10K(); org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField47.getTwo(); org.apache.commons.math3.dfp.Dfp dfp50 = dfp43.add(dfp49); org.apache.commons.math3.dfp.Dfp dfp51 = dfp49.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp52 = dfp38.divide(dfp49); org.apache.commons.math3.dfp.Dfp dfp54 = dfp38.power10((int) '#'); org.apache.commons.math3.dfp.DfpField dfpField56 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField56.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField56.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp dfp62 = new org.apache.commons.math3.dfp.Dfp(dfpField56, (-8)); org.apache.commons.math3.dfp.DfpField dfpField64 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp65 = dfpField64.getLn10(); boolean boolean66 = dfp65.negativeOrNull(); int int67 = dfp65.log10K(); org.apache.commons.math3.dfp.DfpField dfpField69 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp70 = dfpField69.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp71 = dfpField69.getTwo(); org.apache.commons.math3.dfp.Dfp dfp72 = dfp65.add(dfp71); org.apache.commons.math3.dfp.DfpField dfpField74 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp75 = dfpField74.getLn10(); boolean boolean76 = dfp75.negativeOrNull(); int int77 = dfp75.log10K(); org.apache.commons.math3.dfp.DfpField dfpField79 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp80 = dfpField79.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp81 = dfpField79.getTwo(); org.apache.commons.math3.dfp.Dfp dfp82 = dfp75.add(dfp81); org.apache.commons.math3.dfp.Dfp dfp83 = dfp71.divide(dfp75); int int84 = dfp71.getRadixDigits(); int int85 = dfp71.intValue(); org.apache.commons.math3.dfp.DfpField dfpField87 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp88 = dfpField87.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp89 = dfpField87.getTwo(); org.apache.commons.math3.dfp.Dfp dfp90 = dfpField87.getOne(); org.apache.commons.math3.dfp.Dfp dfp92 = dfpField87.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp94 = new org.apache.commons.math3.dfp.Dfp(dfpField87, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp95 = dfp71.divide(dfp94); org.apache.commons.math3.dfp.Dfp dfp96 = dfp62.newInstance(dfp95); org.apache.commons.math3.dfp.Dfp dfp97 = dfp6.trap(0, "", dfp15, dfp54, dfp62); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfpArray12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertTrue("'" + roundingMode32 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode32.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0); org.junit.Assert.assertNotNull(dfp80); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp83); org.junit.Assert.assertTrue("'" + int84 + "' != '" + 25 + "'", int84 == 25); org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2); org.junit.Assert.assertNotNull(dfp88); org.junit.Assert.assertNotNull(dfp89); org.junit.Assert.assertNotNull(dfp90); org.junit.Assert.assertNotNull(dfp92); org.junit.Assert.assertNotNull(dfp95); org.junit.Assert.assertNotNull(dfp96); org.junit.Assert.assertNotNull(dfp97); }
public void test556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test556"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); int int7 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp10.add(dfp16); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); boolean boolean21 = dfp20.negativeOrNull(); int int22 = dfp20.log10K(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField24.getTwo(); org.apache.commons.math3.dfp.Dfp dfp27 = dfp20.add(dfp26); org.apache.commons.math3.dfp.Dfp dfp28 = dfp16.divide(dfp20); java.lang.String str29 = dfp20.dfp2sci(); boolean boolean30 = dfp20.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField1.newDfp(dfp20); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e" + "'", str29, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(dfp31); }
public void test557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test557"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((byte) 100); org.apache.commons.math3.dfp.Dfp dfp10 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp11 = dfp9.multiply(dfp10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); }
public void test558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test558"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp7.newInstance((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp10 = dfp9.rint(); boolean boolean11 = dfp10.isInfinite(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test559"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp7 = dfp6.reciprocal(); byte byte8 = dfp6.sign; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 1 + "'", byte8 == (byte) 1); }
public void test560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test560"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp("hi!"); org.apache.commons.math3.dfp.Dfp dfp10 = new org.apache.commons.math3.dfp.Dfp(dfp9); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfp10); org.apache.commons.math3.dfp.Dfp dfp12 = dfp10.reciprocal(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); }
public void test561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test561"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp((long) 0); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); }
public void test562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test562"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode7 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getSqr2(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + roundingMode7 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode7.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp8); }
public void test563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test563"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); int int7 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp9 = dfp6.trunc(roundingMode8); java.lang.String str10 = dfp9.toString(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(dfp9); boolean boolean13 = dfp9.equals((java.lang.Object) 0.0d); org.apache.commons.math3.dfp.Dfp dfp15 = dfp9.newInstance((long) (short) 10); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); org.apache.commons.math3.dfp.Dfp dfp23 = dfp18.power10((int) (short) -1); dfp18.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp18.newInstance(1.0d); int int28 = dfp18.round((int) (byte) 0); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField30.getOne(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField30.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField30.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode37 = dfpField30.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp38 = dfp18.trunc(roundingMode37); org.apache.commons.math3.dfp.Dfp dfp39 = dfp15.trunc(roundingMode37); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField41.getTwo(); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField41.getOne(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField41.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField41.getE(); org.apache.commons.math3.dfp.Dfp dfp48 = dfp47.getZero(); boolean boolean49 = dfp15.lessThan(dfp48); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "3." + "'", str10, "3."); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + roundingMode37 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode37.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); }
public void test564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test564"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfp4.newInstance("2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166"); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); }
public void test565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test565"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); int[] intArray18 = dfp4.mant; org.apache.commons.math3.dfp.Dfp dfp20 = dfp4.newInstance((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); int int24 = dfp23.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode25 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp26 = dfp23.trunc(roundingMode25); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField28.getOne(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField28.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp35 = new org.apache.commons.math3.dfp.Dfp(dfpField28, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp36 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp20, dfp23, dfp35); dfp36.shiftLeft(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35]"); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0); org.junit.Assert.assertTrue("'" + roundingMode25 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode25.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); }
public void test566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test566"); org.apache.commons.math3.dfp.DfpField dfpField0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp2 = new org.apache.commons.math3.dfp.Dfp(dfpField0, (int) (byte) 100); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test567"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getOne(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); boolean boolean16 = dfp9.strictlyNegative(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp6.newInstance(dfp9); org.apache.commons.math3.dfp.Dfp dfp19 = dfp9.newInstance("2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598"); org.apache.commons.math3.dfp.Dfp dfp20 = dfp9.newInstance(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); }
public void test568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test568"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp10.add(dfp16); org.apache.commons.math3.dfp.Dfp dfp18 = dfp16.reciprocal(); int int20 = dfp16.round((int) (short) 1); boolean boolean21 = dfp7.unequal(dfp16); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField25.getOne(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField25.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp32 = new org.apache.commons.math3.dfp.Dfp(dfpField25, (int) '4'); byte byte33 = dfp32.sign; org.apache.commons.math3.dfp.Dfp dfp34 = dfp32.floor(); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getLn10(); boolean boolean38 = dfp37.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField40 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp42 = new org.apache.commons.math3.dfp.Dfp(dfpField40, 16); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField40.getLn5(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); java.lang.String str50 = dfp49.toString(); org.apache.commons.math3.dfp.Dfp dfp52 = dfp49.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp54 = dfp52.newInstance((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField40.newDfp(dfp52); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField40.newDfp((double) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp58 = dfp7.trap(100, "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166", dfp34, dfp37, dfp57); java.lang.String str59 = dfp34.toString(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertTrue("'" + byte33 + "' != '" + (byte) 1 + "'", byte33 == (byte) 1); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3." + "'", str50, "3."); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "52." + "'", str59, "52."); }
public void test569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test569"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.multiply((int) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); int int14 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode15 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp16 = dfp13.trunc(roundingMode15); java.lang.String str17 = dfp16.toString(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp16.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp21 = dfp19.newInstance((int) 'a'); byte byte22 = dfp21.nans; org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.ceil(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getTwo(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField35.getOne(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField35.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField35.newDfp(); org.apache.commons.math3.dfp.Dfp dfp42 = dfp33.add(dfp41); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn10(); int int46 = dfp45.log10K(); boolean boolean47 = dfp33.greaterThan(dfp45); org.apache.commons.math3.dfp.Dfp dfp49 = dfp33.newInstance((double) 1); org.apache.commons.math3.dfp.Dfp dfp50 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp10, dfp21, dfp49); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode51 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN; org.apache.commons.math3.dfp.Dfp dfp52 = dfp49.trunc(roundingMode51); org.apache.commons.math3.dfp.Dfp dfp53 = dfp52.floor(); byte byte54 = dfp52.nans; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertTrue("'" + roundingMode15 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode15.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3." + "'", str17, "3."); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 0 + "'", byte22 == (byte) 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertTrue("'" + roundingMode51 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode51.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + byte54 + "' != '" + (byte) 0 + "'", byte54 == (byte) 0); }
public void test570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test570"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 2); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = dfpField1.getRoundingMode(); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); }
public void test571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test571"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); dfpField1.setIEEEFlags((int) (short) 0); int int8 = dfpField1.getIEEEFlags(); int int9 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.getPi(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp((byte) 0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField14.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); boolean boolean21 = dfp20.negativeOrNull(); int int22 = dfp20.log10K(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField24.getTwo(); org.apache.commons.math3.dfp.Dfp dfp27 = dfp20.add(dfp26); org.apache.commons.math3.dfp.Dfp dfp29 = dfp27.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp30 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp17, dfp27); org.apache.commons.math3.dfp.Dfp dfp31 = dfp17.rint(); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField32 = dfp17.getField(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp12.add(dfp17); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfpField32); org.junit.Assert.assertNotNull(dfp33); }
public void test572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test572"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); int int5 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField7.getTwo(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField7.getOne(); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField7, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.nextAfter(dfp12); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); int int17 = dfp16.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode18 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp19 = dfp16.trunc(roundingMode18); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField20 = dfp19.getField(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp26 = new org.apache.commons.math3.dfp.Dfp(dfpField24, 16); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField28.getOne(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField28.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField28.newDfp(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField28.getZero(); org.apache.commons.math3.dfp.Dfp dfp36 = dfp19.dotrap(10000, "", dfp26, dfp35); org.apache.commons.math3.dfp.Dfp dfp37 = dfp2.add(dfp19); org.apache.commons.math3.dfp.Dfp dfp38 = dfp19.abs(); org.apache.commons.math3.dfp.Dfp dfp39 = dfp19.getZero(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode18.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfpField20); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); }
public void test573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test573"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp10.align(0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp10.divide(dfp21); int int26 = dfp21.round(0); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.newInstance("3."); boolean boolean29 = dfp28.strictlyPositive(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); }
public void test574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test574"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 3); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getPiSplit(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfpArray8); }
public void test575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test575"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp(25); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode7 = dfpField1.getRoundingMode(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + roundingMode7 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode7.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); }
public void test576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test576"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getZero(); int int9 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.newDfp((long) 32760); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getSqr3Reciprocal(); byte byte13 = dfp12.nans; boolean boolean14 = dfp12.isZero(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp18 = new org.apache.commons.math3.dfp.Dfp(dfpField16, 16); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField16.getLn5(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField16.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp23 = new org.apache.commons.math3.dfp.Dfp(dfpField16, 10); boolean boolean24 = dfp12.lessThan(dfp23); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 25 + "'", int9 == 25); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); }
public void test577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test577"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '#'); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode7 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp[] dfpArray10 = dfpField1.getLn5Split(); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + roundingMode7 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode7.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfpArray10); }
public void test578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test578"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-32767)); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getTwo(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField9, 16); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField9.getOne(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField9.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField9.getSqr2Reciprocal(); boolean boolean16 = dfp7.lessThan(dfp15); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test579"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.Dfp[] dfpArray5 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp[] dfpArray6 = dfpField1.getLn2Split(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getLn10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray5); org.junit.Assert.assertNotNull(dfpArray6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); }
public void test580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test580"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.ceil(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); }
public void test581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test581"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getPi(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp5 = dfp4.abs(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp10.add(dfp16); org.apache.commons.math3.dfp.Dfp dfp18 = dfp16.reciprocal(); int int20 = dfp16.round((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp23 = dfp16.newInstance((byte) -1, (byte) 100); int int24 = dfp23.getRadixDigits(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); int int29 = dfp27.log10K(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField31.getTwo(); org.apache.commons.math3.dfp.Dfp dfp34 = dfp27.add(dfp33); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getLn10(); boolean boolean38 = dfp37.negativeOrNull(); int int39 = dfp37.log10K(); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField41.getTwo(); org.apache.commons.math3.dfp.Dfp dfp44 = dfp37.add(dfp43); org.apache.commons.math3.dfp.Dfp dfp45 = dfp33.divide(dfp37); org.apache.commons.math3.dfp.Dfp dfp46 = dfp33.floor(); org.apache.commons.math3.dfp.DfpField dfpField48 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField48.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray50 = dfpField48.getESplit(); org.apache.commons.math3.dfp.Dfp dfp52 = new org.apache.commons.math3.dfp.Dfp(dfpField48, (-32767)); org.apache.commons.math3.dfp.Dfp dfp54 = dfp52.newInstance("hi!"); boolean boolean55 = dfp33.equals((java.lang.Object) dfp52); org.apache.commons.math3.dfp.Dfp dfp56 = dfp23.add(dfp52); org.apache.commons.math3.dfp.Dfp dfp57 = dfp52.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp58 = null; org.apache.commons.math3.dfp.Dfp dfp59 = dfp5.dotrap(6, "", dfp57, dfp58); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 25 + "'", int24 == 25); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfpArray50); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNull(dfp59); }
public void test582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test582"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.DfpField dfpField7 = dfp5.getField(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField7.newDfp((double) 0L); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfpField7); org.junit.Assert.assertNotNull(dfp9); }
public void test583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test583"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; dfpField1.setRoundingMode(roundingMode4); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass6 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(wildcardClass6); org.junit.Assert.assertNotNull(dfp7); }
public void test584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test584"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getE(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField21.newDfp((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); int int29 = dfp27.log10K(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField31.getTwo(); org.apache.commons.math3.dfp.Dfp dfp34 = dfp27.add(dfp33); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField36.getOne(); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField36.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField36.newDfp(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp34.add(dfp42); double double44 = dfp42.toDouble(); int int45 = dfp42.exp; org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getLn10(); boolean boolean49 = dfp48.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getLn10(); boolean boolean53 = dfp52.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp48.multiply(dfp52); org.apache.commons.math3.dfp.Dfp dfp55 = dfp42.newInstance(dfp54); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField56 = dfp42.getField(); org.apache.commons.math3.dfp.DfpField dfpField58 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField58.getLn10(); boolean boolean60 = dfp59.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField62 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField62.getLn10(); boolean boolean64 = dfp63.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp65 = dfp59.multiply(dfp63); org.apache.commons.math3.dfp.DfpField dfpField67 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField67.getLn10(); int int69 = dfp68.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode70 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp71 = dfp68.trunc(roundingMode70); org.apache.commons.math3.dfp.Dfp dfp73 = dfp71.divide(10); org.apache.commons.math3.dfp.DfpField dfpField75 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField75.getLn10(); boolean boolean77 = dfp76.negativeOrNull(); int int78 = dfp76.log10K(); org.apache.commons.math3.dfp.DfpField dfpField80 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp81 = dfpField80.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp82 = dfpField80.getTwo(); org.apache.commons.math3.dfp.Dfp dfp83 = dfp76.add(dfp82); boolean boolean84 = dfp82.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp85 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp59, dfp73, dfp82); org.apache.commons.math3.dfp.Dfp dfp86 = dfp17.trap(10000, "3.", dfp24, dfp42, dfp85); byte byte87 = dfp85.nans; org.apache.commons.math3.dfp.Dfp dfp89 = dfp85.multiply(1); boolean boolean90 = dfp85.strictlyPositive(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfpField56); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0); org.junit.Assert.assertTrue("'" + roundingMode70 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode70.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp83); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertTrue("'" + byte87 + "' != '" + (byte) 0 + "'", byte87 == (byte) 0); org.junit.Assert.assertNotNull(dfp89); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true); }
public void test585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test585"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.Dfp dfp18 = dfp4.rint(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp18.abs(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp19.newInstance((byte) 10); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); }
public void test586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test586"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getTwo(); int int7 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp("2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e"); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.newDfp(2147483647); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); }
public void test587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test587"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-32767)); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp9 = new org.apache.commons.math3.dfp.Dfp(dfpField1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfpArray8); }
public void test588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test588"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); int int22 = dfp21.log10K(); boolean boolean23 = dfp9.greaterThan(dfp21); org.apache.commons.math3.dfp.Dfp dfp25 = dfp9.newInstance((double) 1); org.apache.commons.math3.dfp.Dfp dfp27 = dfp25.newInstance((long) 8); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp27); }
public void test589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test589"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); boolean boolean10 = dfp8.isInfinite(); java.lang.String str11 = dfp8.toString(); org.apache.commons.math3.dfp.DfpField dfpField12 = dfp8.getField(); org.apache.commons.math3.dfp.Dfp dfp14 = new org.apache.commons.math3.dfp.Dfp(dfpField12, 0L); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField12.getZero(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField12.newDfp((long) ' '); org.apache.commons.math3.dfp.Dfp[] dfpArray18 = dfpField12.getSqr2Split(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2." + "'", str11, "2."); org.junit.Assert.assertNotNull(dfpField12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfpArray18); }
public void test590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test590"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '4'); org.apache.commons.math3.dfp.Dfp[] dfpArray9 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp10 = new org.apache.commons.math3.dfp.Dfp(dfpField1); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = dfpField1.getRoundingMode(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfpArray9); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); }
public void test591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test591"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); }
public void test592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test592"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); boolean boolean10 = dfp9.negativeOrNull(); int int11 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField13.getTwo(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp9.add(dfp15); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.divide(8); boolean boolean19 = dfp9.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp5.remainder(dfp9); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); int int25 = dfp23.log10K(); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField27.getTwo(); org.apache.commons.math3.dfp.Dfp dfp30 = dfp23.add(dfp29); org.apache.commons.math3.dfp.DfpField dfpField32 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField32.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField32.getTwo(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField32.getOne(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField32.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField32.newDfp(); org.apache.commons.math3.dfp.Dfp dfp39 = dfp30.add(dfp38); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); boolean boolean44 = dfp30.greaterThan(dfp42); org.apache.commons.math3.dfp.Dfp dfp46 = dfp30.newInstance((double) 1); int[] intArray47 = dfp46.mant; dfp20.mant = intArray47; org.apache.commons.math3.dfp.DfpField dfpField50 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField50.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray52 = dfpField50.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField50.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField50.getOne(); org.apache.commons.math3.dfp.DfpField dfpField57 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField57.getLn10(); int int59 = dfp58.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode60 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp61 = dfp58.trunc(roundingMode60); org.apache.commons.math3.dfp.Dfp dfp63 = dfp58.power10((int) (short) -1); dfp58.shiftLeft(); boolean boolean65 = dfp58.strictlyNegative(); org.apache.commons.math3.dfp.Dfp dfp66 = dfp55.newInstance(dfp58); org.apache.commons.math3.dfp.Dfp dfp67 = dfp20.remainder(dfp58); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(intArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfpArray52); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0); org.junit.Assert.assertTrue("'" + roundingMode60 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode60.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(dfp66); org.junit.Assert.assertNotNull(dfp67); }
public void test593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test593"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); int int21 = dfp8.getRadixDigits(); int int22 = dfp8.intValue(); boolean boolean23 = dfp8.isInfinite(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getTwo(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField35.getOne(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField35.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField35.newDfp(); org.apache.commons.math3.dfp.Dfp dfp42 = dfp33.add(dfp41); org.apache.commons.math3.dfp.Dfp dfp43 = org.apache.commons.math3.dfp.Dfp.copysign(dfp8, dfp42); double double44 = dfp42.toDouble(); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField46.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getLn10(); boolean boolean53 = dfp52.negativeOrNull(); int int54 = dfp52.log10K(); org.apache.commons.math3.dfp.DfpField dfpField56 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField56.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField56.getTwo(); org.apache.commons.math3.dfp.Dfp dfp59 = dfp52.add(dfp58); org.apache.commons.math3.dfp.Dfp dfp61 = dfp59.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp62 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp49, dfp59); double double63 = dfp62.toDouble(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp62.ceil(); org.apache.commons.math3.dfp.Dfp dfp65 = org.apache.commons.math3.dfp.Dfp.copysign(dfp42, dfp62); boolean boolean66 = dfp42.isNaN(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4.302585092994046d + "'", double44 == 4.302585092994046d); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 14674.41072270908d + "'", double63 == 14674.41072270908d); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test594"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp(); dfp4.sign = (byte) 2; org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); boolean boolean10 = dfp9.negativeOrNull(); int int11 = dfp9.log10K(); int int12 = dfp9.log10K(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp4.multiply(dfp9); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp13); }
public void test595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test595"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(8); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); int int15 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); java.lang.String str22 = dfp21.toString(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp14.divide(dfp21); boolean boolean24 = dfp11.greaterThan(dfp14); org.apache.commons.math3.dfp.Dfp dfp25 = dfp11.newInstance(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp11.reciprocal(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3." + "'", str22, "3."); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); }
public void test596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test596"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp((long) 0); org.apache.commons.math3.dfp.Dfp[] dfpArray4 = dfpField1.getLn5Split(); org.apache.commons.math3.dfp.Dfp[] dfpArray5 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp(); int int7 = dfpField1.getRadixDigits(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass8 = dfpField1.getRuntimeClass(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfpArray4); org.junit.Assert.assertNotNull(dfpArray5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test597"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); int int21 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField23.getTwo(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp19.add(dfp25); boolean boolean27 = dfp25.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp28 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp2, dfp16, dfp25); boolean boolean29 = dfp28.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp28.multiply((int) (short) 0); org.apache.commons.math3.dfp.Dfp dfp32 = dfp31.ceil(); int[] intArray33 = dfp31.mant; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(intArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); }
public void test598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test598"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; dfpField1.setRoundingMode(roundingMode4); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass6 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getZero(); int[] intArray8 = dfp7.mant; byte byte9 = dfp7.sign; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(wildcardClass6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 1 + "'", byte9 == (byte) 1); }
public void test599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test599"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp[] dfpArray2 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) (short) 10); dfpField1.setIEEEFlagsBits(100); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass8 = dfpField1.getRuntimeClass(); org.junit.Assert.assertNotNull(dfpArray2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test600"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); int int7 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp9 = dfp6.trunc(roundingMode8); java.lang.String str10 = dfp9.toString(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(dfp9); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); boolean boolean17 = dfp16.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); boolean boolean21 = dfp20.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp16.multiply(dfp20); dfp22.shiftRight(); org.apache.commons.math3.dfp.Dfp dfp24 = null; org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); boolean boolean29 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp27.newInstance((double) (-1)); org.apache.commons.math3.dfp.Dfp dfp32 = dfp9.trap((int) (byte) 1, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e", dfp22, dfp24, dfp31); org.apache.commons.math3.dfp.Dfp dfp33 = dfp31.abs(); int[] intArray34 = dfp31.mant; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "3." + "'", str10, "3."); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(intArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"); }
public void test601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test601"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getE(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField21.newDfp((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); int int29 = dfp27.log10K(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField31.getTwo(); org.apache.commons.math3.dfp.Dfp dfp34 = dfp27.add(dfp33); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField36.getOne(); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField36.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField36.newDfp(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp34.add(dfp42); double double44 = dfp42.toDouble(); int int45 = dfp42.exp; org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getLn10(); boolean boolean49 = dfp48.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getLn10(); boolean boolean53 = dfp52.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp48.multiply(dfp52); org.apache.commons.math3.dfp.Dfp dfp55 = dfp42.newInstance(dfp54); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField56 = dfp42.getField(); org.apache.commons.math3.dfp.DfpField dfpField58 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField58.getLn10(); boolean boolean60 = dfp59.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField62 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField62.getLn10(); boolean boolean64 = dfp63.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp65 = dfp59.multiply(dfp63); org.apache.commons.math3.dfp.DfpField dfpField67 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField67.getLn10(); int int69 = dfp68.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode70 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp71 = dfp68.trunc(roundingMode70); org.apache.commons.math3.dfp.Dfp dfp73 = dfp71.divide(10); org.apache.commons.math3.dfp.DfpField dfpField75 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField75.getLn10(); boolean boolean77 = dfp76.negativeOrNull(); int int78 = dfp76.log10K(); org.apache.commons.math3.dfp.DfpField dfpField80 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp81 = dfpField80.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp82 = dfpField80.getTwo(); org.apache.commons.math3.dfp.Dfp dfp83 = dfp76.add(dfp82); boolean boolean84 = dfp82.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp85 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp59, dfp73, dfp82); org.apache.commons.math3.dfp.Dfp dfp86 = dfp17.trap(10000, "3.", dfp24, dfp42, dfp85); org.apache.commons.math3.dfp.Dfp dfp87 = dfp24.reciprocal(); int int88 = dfp87.log10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfpField56); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0); org.junit.Assert.assertTrue("'" + roundingMode70 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode70.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp83); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertNotNull(dfp87); org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0); }
public void test602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test602"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp("hi!"); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass10 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfp11); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(wildcardClass10); org.junit.Assert.assertNotNull(dfp11); }
public void test603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test603"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp5.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp9 = dfp5.abs(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); int int19 = dfp17.log10K(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp17.add(dfp23); org.apache.commons.math3.dfp.Dfp dfp26 = dfp24.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp27 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp14, dfp24); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getE(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField31.newDfp((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getLn10(); boolean boolean38 = dfp37.negativeOrNull(); int int39 = dfp37.log10K(); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField41.getTwo(); org.apache.commons.math3.dfp.Dfp dfp44 = dfp37.add(dfp43); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField46.getTwo(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField46.getOne(); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField46.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField46.newDfp(); org.apache.commons.math3.dfp.Dfp dfp53 = dfp44.add(dfp52); double double54 = dfp52.toDouble(); int int55 = dfp52.exp; org.apache.commons.math3.dfp.DfpField dfpField57 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField57.getLn10(); boolean boolean59 = dfp58.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField61 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp62 = dfpField61.getLn10(); boolean boolean63 = dfp62.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp58.multiply(dfp62); org.apache.commons.math3.dfp.Dfp dfp65 = dfp52.newInstance(dfp64); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField66 = dfp52.getField(); org.apache.commons.math3.dfp.DfpField dfpField68 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp69 = dfpField68.getLn10(); boolean boolean70 = dfp69.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField72 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp73 = dfpField72.getLn10(); boolean boolean74 = dfp73.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp75 = dfp69.multiply(dfp73); org.apache.commons.math3.dfp.DfpField dfpField77 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp78 = dfpField77.getLn10(); int int79 = dfp78.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode80 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp81 = dfp78.trunc(roundingMode80); org.apache.commons.math3.dfp.Dfp dfp83 = dfp81.divide(10); org.apache.commons.math3.dfp.DfpField dfpField85 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp86 = dfpField85.getLn10(); boolean boolean87 = dfp86.negativeOrNull(); int int88 = dfp86.log10K(); org.apache.commons.math3.dfp.DfpField dfpField90 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp91 = dfpField90.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp92 = dfpField90.getTwo(); org.apache.commons.math3.dfp.Dfp dfp93 = dfp86.add(dfp92); boolean boolean94 = dfp92.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp95 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp69, dfp83, dfp92); org.apache.commons.math3.dfp.Dfp dfp96 = dfp27.trap(10000, "3.", dfp34, dfp52, dfp95); org.apache.commons.math3.dfp.Dfp dfp97 = dfp5.nextAfter(dfp95); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField98 = dfp97.getField(); org.apache.commons.math3.dfp.Dfp dfp99 = dfp97.getZero(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfpField66); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0); org.junit.Assert.assertTrue("'" + roundingMode80 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode80.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp83); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0); org.junit.Assert.assertNotNull(dfp91); org.junit.Assert.assertNotNull(dfp92); org.junit.Assert.assertNotNull(dfp93); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); org.junit.Assert.assertNotNull(dfp95); org.junit.Assert.assertNotNull(dfp96); org.junit.Assert.assertNotNull(dfp97); org.junit.Assert.assertNotNull(dfpField98); org.junit.Assert.assertNotNull(dfp99); }
public void test604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test604"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField4 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField4.getLn10(); boolean boolean6 = dfp5.negativeOrNull(); int int7 = dfp5.log10K(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField9.getTwo(); org.apache.commons.math3.dfp.Dfp dfp12 = dfp5.add(dfp11); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.subtract(dfp12); dfp13.exp = 16; org.apache.commons.math3.dfp.Dfp dfp17 = dfp13.power10K(0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp17); }
public void test605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test605"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); dfpField1.setIEEEFlags((int) (byte) 1); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.getSqr2Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10, (byte) 0); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); }
public void test606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test606"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(8); boolean boolean12 = dfp2.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.ceil(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); boolean boolean17 = dfp16.negativeOrNull(); int int18 = dfp16.log10K(); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp16.add(dfp22); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.Dfp dfp34 = dfp22.divide(dfp26); org.apache.commons.math3.dfp.Dfp dfp35 = dfp22.floor(); org.apache.commons.math3.dfp.DfpField dfpField37 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField37.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray39 = dfpField37.getESplit(); org.apache.commons.math3.dfp.Dfp dfp41 = new org.apache.commons.math3.dfp.Dfp(dfpField37, (-32767)); org.apache.commons.math3.dfp.Dfp dfp43 = dfp41.newInstance("hi!"); boolean boolean44 = dfp22.equals((java.lang.Object) dfp41); byte byte45 = dfp41.nans; org.apache.commons.math3.dfp.Dfp dfp46 = dfp2.nextAfter(dfp41); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfpArray39); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 0 + "'", byte45 == (byte) 0); org.junit.Assert.assertNotNull(dfp46); }
public void test607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test607"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); int int4 = dfpField1.getIEEEFlags(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16); }
public void test608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test608"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp9 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 1, (byte) -1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); }
public void test609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test609"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); double double19 = dfp17.toDouble(); int int20 = dfp17.exp; org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = dfp17.newInstance(dfp29); org.apache.commons.math3.dfp.DfpField dfpField32 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField32.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp36 = dfp34.newInstance("0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667"); org.apache.commons.math3.dfp.Dfp dfp37 = org.apache.commons.math3.dfp.Dfp.copysign(dfp17, dfp36); org.apache.commons.math3.dfp.DfpField dfpField39 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField39.getLn10(); int int41 = dfp40.log10K(); org.apache.commons.math3.dfp.DfpField dfpField43 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField43.getLn10(); int int45 = dfp44.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode46 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp47 = dfp44.trunc(roundingMode46); java.lang.String str48 = dfp47.toString(); org.apache.commons.math3.dfp.Dfp dfp49 = dfp40.divide(dfp47); org.apache.commons.math3.dfp.DfpField dfpField50 = dfp40.getField(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp36.add(dfp40); int int52 = dfp36.getRadixDigits(); boolean boolean53 = dfp36.isZero(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertTrue("'" + roundingMode46 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode46.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "3." + "'", str48, "3."); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfpField50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 25 + "'", int52 == 25); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); }
public void test610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test610"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); dfpField1.setIEEEFlags((int) (short) 0); int int8 = dfpField1.getIEEEFlags(); int int9 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.newDfp(); int int12 = dfp10.complement((int) (byte) 3); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9997 + "'", int12 == 9997); }
public void test611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test611"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp((long) 0); org.apache.commons.math3.dfp.Dfp[] dfpArray4 = dfpField1.getLn5Split(); org.apache.commons.math3.dfp.Dfp[] dfpArray5 = dfpField1.getSqr2Split(); dfpField1.setIEEEFlags((int) (short) 0); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfpArray4); org.junit.Assert.assertNotNull(dfpArray5); }
public void test612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test612"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp10.add(dfp16); org.apache.commons.math3.dfp.Dfp dfp18 = dfp16.reciprocal(); int int20 = dfp16.round((int) (short) 1); boolean boolean21 = dfp7.unequal(dfp16); int int22 = dfp16.getRadixDigits(); boolean boolean23 = dfp16.isZero(); int int24 = dfp16.log10(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField26.getTwo(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField26.getOne(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField26.getLn2(); dfpField26.setIEEEFlags((int) (short) 0); int int33 = dfpField26.getIEEEFlags(); int int34 = dfpField26.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField26.getPi(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField26.newDfp((byte) 0); org.apache.commons.math3.dfp.DfpField dfpField39 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField39.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField39.newDfp((byte) 10, (byte) 10); org.apache.commons.math3.dfp.Dfp dfp44 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp16, dfp37, dfp43); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 25 + "'", int22 == 25); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); }
public void test613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test613"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (short) 0); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp(9997); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); }
public void test614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test614"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); dfp6.exp = (byte) -1; int int9 = dfp6.log10(); boolean boolean10 = dfp6.isZero(); int int11 = dfp6.classify(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-8) + "'", int9 == (-8)); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test615"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.Dfp[] dfpArray5 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getTwo(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray5); org.junit.Assert.assertNotNull(dfp6); }
public void test616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test616"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); double double18 = dfp17.toDouble(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp17.ceil(); double[] doubleArray20 = dfp17.toSplitDouble(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp17.power10((int) (byte) 10); dfp22.shiftRight(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 14674.41072270908d + "'", double18 == 14674.41072270908d); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[14674.41015625, 5.664590810279311E-4]"); org.junit.Assert.assertNotNull(dfp22); }
public void test617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test617"); org.apache.commons.math3.dfp.DfpField dfpField0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp2 = new org.apache.commons.math3.dfp.Dfp(dfpField0, "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test618"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp9 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "0.0e0"); org.apache.commons.math3.dfp.Dfp[] dfpArray10 = dfpField1.getESplit(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfpArray10); }
public void test619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test619"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getSqr2Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getLn2(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp9.newInstance(1.0d); int int19 = dfp9.round((int) (byte) 0); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField21.getOne(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField21.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField21.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode28 = dfpField21.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp9.trunc(roundingMode28); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode30 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN; org.apache.commons.math3.dfp.Dfp dfp31 = dfp9.trunc(roundingMode30); int int33 = dfp9.align(4); org.apache.commons.math3.dfp.Dfp dfp34 = dfp6.multiply(dfp9); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + roundingMode28 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode28.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode30.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9972 + "'", int33 == 9972); org.junit.Assert.assertNotNull(dfp34); }
public void test620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test620"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp[] dfpArray2 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp(0L); org.apache.commons.math3.dfp.Dfp dfp5 = dfp4.reciprocal(); int[] intArray6 = dfp5.mant; org.junit.Assert.assertNotNull(dfpArray2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(intArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, 0]"); }
public void test621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test621"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getE(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField21.newDfp((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); int int29 = dfp27.log10K(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField31.getTwo(); org.apache.commons.math3.dfp.Dfp dfp34 = dfp27.add(dfp33); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField36.getOne(); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField36.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField36.newDfp(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp34.add(dfp42); double double44 = dfp42.toDouble(); int int45 = dfp42.exp; org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getLn10(); boolean boolean49 = dfp48.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getLn10(); boolean boolean53 = dfp52.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp48.multiply(dfp52); org.apache.commons.math3.dfp.Dfp dfp55 = dfp42.newInstance(dfp54); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField56 = dfp42.getField(); org.apache.commons.math3.dfp.DfpField dfpField58 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField58.getLn10(); boolean boolean60 = dfp59.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField62 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField62.getLn10(); boolean boolean64 = dfp63.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp65 = dfp59.multiply(dfp63); org.apache.commons.math3.dfp.DfpField dfpField67 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField67.getLn10(); int int69 = dfp68.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode70 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp71 = dfp68.trunc(roundingMode70); org.apache.commons.math3.dfp.Dfp dfp73 = dfp71.divide(10); org.apache.commons.math3.dfp.DfpField dfpField75 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField75.getLn10(); boolean boolean77 = dfp76.negativeOrNull(); int int78 = dfp76.log10K(); org.apache.commons.math3.dfp.DfpField dfpField80 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp81 = dfpField80.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp82 = dfpField80.getTwo(); org.apache.commons.math3.dfp.Dfp dfp83 = dfp76.add(dfp82); boolean boolean84 = dfp82.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp85 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp59, dfp73, dfp82); org.apache.commons.math3.dfp.Dfp dfp86 = dfp17.trap(10000, "3.", dfp24, dfp42, dfp85); org.apache.commons.math3.dfp.Dfp dfp87 = dfp42.floor(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfpField56); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0); org.junit.Assert.assertTrue("'" + roundingMode70 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode70.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp83); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertNotNull(dfp87); }
public void test622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test622"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.Dfp dfp17 = dfp16.getZero(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField1.newDfp(dfp16); dfp18.shiftRight(); int int20 = dfp18.classify(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); }
public void test623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test623"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 10); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_DOWN; org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.trunc(roundingMode9); double double11 = dfp10.toDouble(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_DOWN + "'", roundingMode9.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_DOWN)); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d); }
public void test624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test624"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '#'); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode7 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp[] dfpArray10 = dfpField1.getESplit(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + roundingMode7 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode7.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfpArray10); }
public void test625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test625"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); boolean boolean10 = dfp9.negativeOrNull(); int int11 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField13.getTwo(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp9.add(dfp15); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.divide(8); boolean boolean19 = dfp9.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp5.remainder(dfp9); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); int int33 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode34 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp35 = dfp32.trunc(roundingMode34); org.apache.commons.math3.dfp.Dfp dfp37 = dfp35.divide(10); org.apache.commons.math3.dfp.DfpField dfpField39 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField39.getLn10(); boolean boolean41 = dfp40.negativeOrNull(); int int42 = dfp40.log10K(); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField44.getTwo(); org.apache.commons.math3.dfp.Dfp dfp47 = dfp40.add(dfp46); boolean boolean48 = dfp46.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp49 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp23, dfp37, dfp46); boolean boolean50 = dfp49.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp52 = dfp49.multiply((int) (short) 0); org.apache.commons.math3.dfp.Dfp dfp53 = dfp5.newInstance(dfp52); org.apache.commons.math3.dfp.Dfp dfp55 = dfp53.newInstance((long) '4'); org.apache.commons.math3.dfp.Dfp dfp56 = dfp55.rint(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertTrue("'" + roundingMode34 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode34.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); }
public void test626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test626"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); int int19 = dfp17.log10K(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp17.add(dfp23); org.apache.commons.math3.dfp.Dfp dfp25 = dfp13.divide(dfp17); org.apache.commons.math3.dfp.Dfp dfp26 = dfp2.divide(dfp25); boolean boolean27 = dfp25.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp28 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp29 = dfp25.divide(dfp28); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); }
public void test627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test627"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(8); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); int int15 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); java.lang.String str22 = dfp21.toString(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp14.divide(dfp21); boolean boolean24 = dfp11.greaterThan(dfp14); org.apache.commons.math3.dfp.Dfp dfp25 = dfp11.getTwo(); dfp25.exp = 3; org.apache.commons.math3.dfp.Dfp dfp29 = dfp25.multiply((int) (byte) 1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3." + "'", str22, "3."); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp29); }
public void test628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test628"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getESplit(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp("3."); org.apache.commons.math3.dfp.Dfp dfp7 = dfp6.ceil(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); }
public void test629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test629"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); int int5 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField7.getTwo(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField7.getOne(); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField7, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.nextAfter(dfp12); org.apache.commons.math3.dfp.Dfp dfp15 = dfp2.multiply((int) (byte) 100); int int16 = dfp2.intValue(); int int17 = dfp2.exp; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); }
public void test630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test630"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); dfpField1.setIEEEFlagsBits((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getZero(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp6); }
public void test631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test631"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp[] dfpArray2 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp(0L); org.apache.commons.math3.dfp.Dfp dfp5 = dfp4.reciprocal(); boolean boolean6 = dfp4.negativeOrNull(); org.junit.Assert.assertNotNull(dfpArray2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); }
public void test632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test632"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) -1, (byte) -1); org.apache.commons.math3.dfp.Dfp dfp9 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (long) 32760); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray13 = dfpField11.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getZero(); org.apache.commons.math3.dfp.Dfp dfp17 = new org.apache.commons.math3.dfp.Dfp(dfpField11, (byte) -1, (byte) -1); org.apache.commons.math3.dfp.Dfp dfp19 = new org.apache.commons.math3.dfp.Dfp(dfpField11, (long) 32760); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass20 = dfpField11.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField11.getSqr3(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp9.nextAfter(dfp21); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfpArray13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(wildcardClass20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); }
public void test633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test633"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); }
public void test634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test634"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getZero(); int int9 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.newDfp((long) 32760); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp[] dfpArray13 = dfpField1.getLn5Split(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField1.newDfp("3.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e-1"); java.lang.Class<?> wildcardClass16 = dfp15.getClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 25 + "'", int9 == 25); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfpArray13); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(wildcardClass16); }
public void test635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test635"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.newDfp((int) (short) 100); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp11.newInstance((byte) 1); int int14 = dfp13.log10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); }
public void test636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test636"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp10.align(0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp10.divide(dfp21); org.apache.commons.math3.dfp.Dfp dfp26 = dfp10.power10((int) '#'); org.apache.commons.math3.dfp.DfpField dfpField27 = dfp26.getField(); org.apache.commons.math3.dfp.Dfp dfp29 = new org.apache.commons.math3.dfp.Dfp(dfpField27, "3."); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField27.newDfp("97."); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField27.getE(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField27.getE(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfpField27); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); }
public void test637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test637"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.DfpField dfpField7 = dfp6.getField(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); int int11 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode12 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.trunc(roundingMode12); org.apache.commons.math3.dfp.Dfp dfp15 = dfp13.divide(10); org.apache.commons.math3.dfp.Dfp dfp16 = dfp15.getZero(); boolean boolean17 = dfp6.lessThan(dfp16); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfpField7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode12.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test638"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); boolean boolean12 = dfp11.negativeOrNull(); int int13 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField15.getTwo(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp11.add(dfp17); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.Dfp dfp29 = dfp17.divide(dfp21); double[] doubleArray30 = dfp21.toSplitDouble(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp6.multiply(dfp21); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField33.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getLn10(); boolean boolean40 = dfp39.negativeOrNull(); int int41 = dfp39.log10K(); org.apache.commons.math3.dfp.DfpField dfpField43 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField43.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField43.getTwo(); org.apache.commons.math3.dfp.Dfp dfp46 = dfp39.add(dfp45); org.apache.commons.math3.dfp.Dfp dfp48 = dfp46.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp49 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp36, dfp46); org.apache.commons.math3.dfp.Dfp dfp50 = dfp36.rint(); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField51 = dfp36.getField(); org.apache.commons.math3.dfp.Dfp dfp52 = dfp21.remainder(dfp36); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[2.302584648132324, 4.4486172146526797E-7]"); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfpField51); org.junit.Assert.assertNotNull(dfp52); }
public void test639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test639"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); int int5 = dfp4.log10(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); int int9 = dfp8.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode10 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp11 = dfp8.trunc(roundingMode10); org.apache.commons.math3.dfp.Dfp dfp13 = dfp8.power10((int) (short) -1); dfp8.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp8.newInstance(1.0d); int int18 = dfp16.align(0); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.Dfp dfp29 = dfp27.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfp16.divide(dfp27); org.apache.commons.math3.dfp.Dfp dfp32 = dfp16.power10((int) '#'); org.apache.commons.math3.dfp.DfpField dfpField33 = dfp32.getField(); org.apache.commons.math3.dfp.Dfp dfp35 = new org.apache.commons.math3.dfp.Dfp(dfpField33, "3."); org.apache.commons.math3.dfp.DfpField dfpField37 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField37.getLn10(); int int39 = dfp38.log10K(); boolean boolean40 = dfp38.isZero(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp38.getTwo(); org.apache.commons.math3.dfp.Dfp dfp42 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp4, dfp35, dfp41); java.lang.String str43 = dfp42.dfp2string(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + roundingMode10 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode10.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfpField33); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0." + "'", str43, "0."); }
public void test640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test640"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getOne(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); boolean boolean16 = dfp9.strictlyNegative(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp6.newInstance(dfp9); boolean boolean18 = dfp9.isInfinite(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test641"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); double double18 = dfp17.toDouble(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp17.ceil(); int int21 = dfp17.round((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp23 = dfp17.divide(0); byte byte24 = dfp17.nans; int int26 = dfp17.align(32768); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 14674.41072270908d + "'", double18 == 14674.41072270908d); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 0 + "'", byte24 == (byte) 0); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); }
public void test642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test642"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 2); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField6.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp[] dfpArray11 = dfpField6.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField6.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getLn10(); boolean boolean26 = dfp25.negativeOrNull(); int int27 = dfp25.log10K(); org.apache.commons.math3.dfp.DfpField dfpField29 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField29.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField29.getTwo(); org.apache.commons.math3.dfp.Dfp dfp32 = dfp25.add(dfp31); org.apache.commons.math3.dfp.Dfp dfp33 = dfp21.divide(dfp25); org.apache.commons.math3.dfp.Dfp dfp34 = dfp21.floor(); boolean boolean35 = dfp21.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp36 = dfp12.remainder(dfp21); boolean boolean37 = dfp4.equals((java.lang.Object) dfp36); org.apache.commons.math3.dfp.Dfp dfp38 = dfp36.ceil(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfpArray11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(dfp38); }
public void test643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test643"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.DfpField dfpField7 = dfp5.getField(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getSqr3Reciprocal(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfpField7); org.junit.Assert.assertNotNull(dfp8); }
public void test644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test644"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField30.getOne(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField30.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField30.newDfp(); org.apache.commons.math3.dfp.Dfp dfp37 = dfp28.add(dfp36); double double38 = dfp36.toDouble(); int int39 = dfp36.exp; org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); java.lang.String str50 = dfp49.toString(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp42.divide(dfp49); org.apache.commons.math3.dfp.Dfp dfp52 = dfp6.dotrap(100, "", dfp36, dfp51); boolean boolean53 = dfp52.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp55 = dfp52.newInstance((byte) 1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3." + "'", str50, "3."); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(dfp55); }
public void test645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test645"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp8.newInstance((byte) 0, (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); int int15 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); java.lang.String str22 = dfp21.toString(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp14.divide(dfp21); boolean boolean24 = dfp8.lessThan(dfp14); org.apache.commons.math3.dfp.Dfp dfp25 = new org.apache.commons.math3.dfp.Dfp(dfp14); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField27.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField32 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField32.getLn10(); boolean boolean34 = dfp33.negativeOrNull(); int int35 = dfp33.log10K(); org.apache.commons.math3.dfp.DfpField dfpField37 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField37.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField37.getTwo(); org.apache.commons.math3.dfp.Dfp dfp40 = dfp33.add(dfp39); org.apache.commons.math3.dfp.Dfp dfp42 = dfp40.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp43 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp30, dfp40); org.apache.commons.math3.dfp.Dfp dfp44 = dfp30.rint(); org.apache.commons.math3.dfp.Dfp dfp45 = dfp25.divide(dfp44); org.apache.commons.math3.dfp.Dfp dfp46 = new org.apache.commons.math3.dfp.Dfp(dfp44); byte byte47 = dfp46.sign; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3." + "'", str22, "3."); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + byte47 + "' != '" + (byte) 1 + "'", byte47 == (byte) 1); }
public void test646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test646"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getSqr2Reciprocal(); org.apache.commons.math3.dfp.Dfp[] dfpArray4 = dfpField1.getESplit(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfpArray4); }
public void test647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test647"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); int int5 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); boolean boolean9 = dfp8.negativeOrNull(); int int10 = dfp8.log10K(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField12.getTwo(); org.apache.commons.math3.dfp.Dfp dfp15 = dfp8.add(dfp14); org.apache.commons.math3.dfp.Dfp dfp17 = dfp8.divide(8); org.apache.commons.math3.dfp.Dfp dfp18 = dfp2.remainder(dfp8); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); int int22 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode23 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp24 = dfp21.trunc(roundingMode23); org.apache.commons.math3.dfp.Dfp dfp26 = dfp21.power10((int) (short) -1); dfp21.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp21.newInstance(1.0d); int int31 = dfp29.align(0); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); int int36 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField38.getTwo(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp34.add(dfp40); org.apache.commons.math3.dfp.Dfp dfp42 = dfp40.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp29.divide(dfp40); org.apache.commons.math3.dfp.Dfp dfp45 = dfp29.power10((int) (byte) 2); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode46 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_DOWN; org.apache.commons.math3.dfp.Dfp dfp47 = dfp29.trunc(roundingMode46); org.apache.commons.math3.dfp.Dfp dfp48 = dfp18.subtract(dfp47); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertTrue("'" + roundingMode23 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode23.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + roundingMode46 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_DOWN + "'", roundingMode46.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_DOWN)); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); }
public void test648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test648"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); int int21 = dfp8.getRadixDigits(); int int22 = dfp8.intValue(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField24.getTwo(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField24.getOne(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField24.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp31 = new org.apache.commons.math3.dfp.Dfp(dfpField24, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp32 = dfp8.divide(dfp31); org.apache.commons.math3.dfp.DfpField dfpField34 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField34.getLn10(); int int36 = dfp35.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode37 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp38 = dfp35.trunc(roundingMode37); org.apache.commons.math3.dfp.Dfp dfp40 = dfp35.power10((int) (short) -1); dfp35.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp35.newInstance(1.0d); int int45 = dfp43.align(0); org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getLn10(); boolean boolean49 = dfp48.negativeOrNull(); int int50 = dfp48.log10K(); org.apache.commons.math3.dfp.DfpField dfpField52 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField52.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField52.getTwo(); org.apache.commons.math3.dfp.Dfp dfp55 = dfp48.add(dfp54); org.apache.commons.math3.dfp.Dfp dfp56 = dfp54.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp57 = dfp43.divide(dfp54); org.apache.commons.math3.dfp.Dfp dfp59 = dfp43.power10((int) '#'); org.apache.commons.math3.dfp.DfpField dfpField60 = dfp59.getField(); org.apache.commons.math3.dfp.Dfp dfp62 = new org.apache.commons.math3.dfp.Dfp(dfpField60, "3."); org.apache.commons.math3.dfp.Dfp dfp64 = dfpField60.newDfp("97."); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass65 = dfpField60.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp67 = new org.apache.commons.math3.dfp.Dfp(dfpField60, 32760); org.apache.commons.math3.dfp.DfpField dfpField69 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp70 = dfpField69.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass71 = dfpField69.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode72 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; dfpField69.setRoundingMode(roundingMode72); dfpField60.setRoundingMode(roundingMode72); org.apache.commons.math3.dfp.Dfp dfp75 = dfp31.trunc(roundingMode72); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + roundingMode37 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode37.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfpField60); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(wildcardClass65); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(wildcardClass71); org.junit.Assert.assertTrue("'" + roundingMode72 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode72.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp75); }
public void test649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test649"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp5.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.newInstance((int) 'a'); byte byte11 = dfp10.nans; org.apache.commons.math3.dfp.Dfp dfp12 = dfp10.ceil(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.rint(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); }
public void test650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test650"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getTwo(); dfpField1.setIEEEFlags((-4)); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); }
public void test651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test651"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); int int21 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField23.getTwo(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp19.add(dfp25); boolean boolean27 = dfp25.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp28 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp2, dfp16, dfp25); boolean boolean29 = dfp28.isInfinite(); int int30 = dfp28.exp; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1); }
public void test652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test652"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.Dfp dfp18 = dfp6.newInstance((byte) 2); int int20 = dfp18.round((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp22 = dfp18.power10K((-32767)); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getLn10(); int int26 = dfp25.log10K(); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getLn10(); int int30 = dfp29.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode31 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp32 = dfp29.trunc(roundingMode31); java.lang.String str33 = dfp32.toString(); org.apache.commons.math3.dfp.Dfp dfp34 = dfp25.divide(dfp32); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getLn10(); boolean boolean40 = dfp39.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField42 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField42.getLn10(); boolean boolean44 = dfp43.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp45 = dfp39.multiply(dfp43); dfp45.shiftRight(); org.apache.commons.math3.dfp.Dfp dfp47 = null; org.apache.commons.math3.dfp.DfpField dfpField49 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp50 = dfpField49.getLn10(); boolean boolean51 = dfp50.negativeOrNull(); boolean boolean52 = dfp50.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp50.newInstance((double) (-1)); org.apache.commons.math3.dfp.Dfp dfp55 = dfp32.trap((int) (byte) 1, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e", dfp45, dfp47, dfp54); org.apache.commons.math3.dfp.Dfp dfp56 = org.apache.commons.math3.dfp.Dfp.copysign(dfp22, dfp45); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode31.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "3." + "'", str33, "3."); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNull(dfp55); org.junit.Assert.assertNotNull(dfp56); }
public void test653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test653"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getSqr2Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) -1); org.apache.commons.math3.dfp.Dfp dfp8 = dfp6.power10K((int) 'a'); int int10 = dfp8.round(0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test654"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); int int8 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp10 = dfp7.trunc(roundingMode9); java.lang.String str11 = dfp10.toString(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp15 = dfp13.newInstance((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField1.newDfp(dfp13); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField1.newDfp((double) (byte) -1); dfpField1.clearIEEEFlags(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode9.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3." + "'", str11, "3."); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); }
public void test655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test655"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getOne(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); boolean boolean16 = dfp9.strictlyNegative(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp6.newInstance(dfp9); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); boolean boolean21 = dfp20.negativeOrNull(); int int22 = dfp20.log10K(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField24.getTwo(); org.apache.commons.math3.dfp.Dfp dfp27 = dfp20.add(dfp26); boolean boolean28 = dfp26.isInfinite(); java.lang.String str29 = dfp26.toString(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp26.newInstance((long) ' '); boolean boolean32 = dfp17.lessThan(dfp26); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2." + "'", str29, "2."); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); }
public void test656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test656"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp4 = dfp2.ceil(); int[] intArray5 = dfp4.mant; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(intArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]"); }
public void test657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test657"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.Dfp dfp17 = dfp16.getZero(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField1.newDfp(dfp16); org.apache.commons.math3.dfp.Dfp dfp19 = dfp18.getOne(); dfp18.exp = 0; org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray25 = dfpField23.getESplit(); org.apache.commons.math3.dfp.Dfp dfp28 = new org.apache.commons.math3.dfp.Dfp(dfpField23, (byte) 1, (byte) -1); org.apache.commons.math3.dfp.Dfp dfp29 = dfp18.divide(dfp28); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfpArray25); org.junit.Assert.assertNotNull(dfp29); }
public void test658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test658"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp[] dfpArray4 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((double) 10000); org.apache.commons.math3.dfp.Dfp dfp8 = dfp6.newInstance((int) (short) -1); boolean boolean9 = dfp6.positiveOrNull(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfpArray4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); }
public void test659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test659"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); }
public void test660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test660"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField30.getOne(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField30.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField30.newDfp(); org.apache.commons.math3.dfp.Dfp dfp37 = dfp28.add(dfp36); double double38 = dfp36.toDouble(); int int39 = dfp36.exp; org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); java.lang.String str50 = dfp49.toString(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp42.divide(dfp49); org.apache.commons.math3.dfp.Dfp dfp52 = dfp6.dotrap(100, "", dfp36, dfp51); boolean boolean53 = dfp52.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp52.negate(); org.apache.commons.math3.dfp.Dfp dfp56 = dfp54.newInstance((-0.0d)); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3." + "'", str50, "3."); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp56); }
public void test661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test661"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; dfpField1.setRoundingMode(roundingMode4); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass6 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn2(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((byte) 10); dfpField1.clearIEEEFlags(); dfpField1.clearIEEEFlags(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(wildcardClass6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); }
public void test662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test662"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); boolean boolean4 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp6 = dfp2.newInstance((double) (-1)); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); boolean boolean10 = dfp9.negativeOrNull(); int int11 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField13.getTwo(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp9.add(dfp15); org.apache.commons.math3.dfp.Dfp dfp17 = dfp15.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); boolean boolean21 = dfp20.negativeOrNull(); int int22 = dfp20.log10K(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField24.getTwo(); org.apache.commons.math3.dfp.Dfp dfp27 = dfp20.add(dfp26); org.apache.commons.math3.dfp.DfpField dfpField29 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField29.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField29.getTwo(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField29.getOne(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField29.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField29.newDfp(); org.apache.commons.math3.dfp.Dfp dfp36 = dfp27.add(dfp35); org.apache.commons.math3.dfp.Dfp dfp37 = dfp17.nextAfter(dfp27); org.apache.commons.math3.dfp.Dfp dfp38 = dfp17.getOne(); org.apache.commons.math3.dfp.Dfp dfp40 = dfp17.power10((int) (short) 1); dfp40.sign = (byte) 100; org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray46 = dfpField44.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField44.getZero(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField44.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp51 = new org.apache.commons.math3.dfp.Dfp(dfpField44, (int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp52 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp2, dfp40, dfp51); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfpArray46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp52); }
public void test663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test663"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp4 = dfp2.ceil(); boolean boolean5 = dfp4.isZero(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray9 = dfpField7.getESplit(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode10 = dfpField7.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField7.newDfp("3."); org.apache.commons.math3.dfp.DfpField dfpField13 = dfp12.getField(); boolean boolean14 = dfp4.equals((java.lang.Object) dfp12); org.apache.commons.math3.dfp.Dfp dfp16 = dfp4.newInstance((int) (byte) 2); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfpArray9); org.junit.Assert.assertTrue("'" + roundingMode10 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode10.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfpField13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(dfp16); }
public void test664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test664"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); int int5 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); boolean boolean9 = dfp8.negativeOrNull(); int int10 = dfp8.log10K(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField12.getTwo(); org.apache.commons.math3.dfp.Dfp dfp15 = dfp8.add(dfp14); org.apache.commons.math3.dfp.Dfp dfp17 = dfp8.divide(8); org.apache.commons.math3.dfp.Dfp dfp18 = dfp2.remainder(dfp8); org.apache.commons.math3.dfp.Dfp dfp19 = dfp8.abs(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); }
public void test665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test665"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); dfpField1.setIEEEFlagsBits((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 9998); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); }
public void test666() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test666"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp5.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.newInstance((int) 'a'); byte byte11 = dfp10.nans; org.apache.commons.math3.dfp.Dfp dfp12 = dfp10.ceil(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp10.power10K((-32767)); dfp14.nans = (byte) 0; org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField20.getOne(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField20.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField20.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode27 = dfpField20.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp30 = new org.apache.commons.math3.dfp.Dfp(dfpField20, (byte) 100, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField20.getSqr2(); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); int int35 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode36 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp37 = dfp34.trunc(roundingMode36); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField38 = dfp37.getField(); org.apache.commons.math3.dfp.DfpField dfpField42 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp44 = new org.apache.commons.math3.dfp.Dfp(dfpField42, 16); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField46.getTwo(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField46.getOne(); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField46.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField46.newDfp(); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField46.getZero(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp37.dotrap(10000, "", dfp44, dfp53); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField20.newDfp(dfp44); org.apache.commons.math3.dfp.DfpField dfpField57 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField57.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField57.newDfp((long) '#'); org.apache.commons.math3.dfp.Dfp dfp61 = null; org.apache.commons.math3.dfp.Dfp dfp62 = dfp14.trap(5, "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166", dfp55, dfp60, dfp61); org.apache.commons.math3.dfp.Dfp dfp64 = dfp55.newInstance((long) 2); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + roundingMode27 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode27.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode36.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfpField38); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp64); }
public void test667() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test667"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp(25); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "3.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e-1"); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); }
public void test668() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test668"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); dfp4.shiftRight(); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField6 = dfp4.getField(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpField6); org.junit.Assert.assertNotNull(dfp7); }
public void test669() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test669"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp5.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.newInstance((int) 'a'); byte byte11 = dfp10.nans; boolean boolean12 = dfp10.isNaN(); int int13 = dfp10.log10(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField15.getTwo(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField15.getOne(); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField15.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass21 = dfpField15.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField15.newDfp((double) ' '); org.apache.commons.math3.dfp.Dfp dfp25 = new org.apache.commons.math3.dfp.Dfp(dfpField15, 0L); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField15.newDfp((long) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp28 = dfp10.add(dfp27); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(wildcardClass21); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); }
public void test670() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test670"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getESplit(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getTwo(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp5); }
public void test671() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test671"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); int int8 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp10 = dfp7.trunc(roundingMode9); java.lang.String str11 = dfp10.toString(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp15 = dfp13.newInstance((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField1.newDfp(dfp13); org.apache.commons.math3.dfp.Dfp dfp17 = new org.apache.commons.math3.dfp.Dfp(dfpField1); boolean boolean18 = dfp17.isZero(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp17.newInstance((double) 2147483647); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode9.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3." + "'", str11, "3."); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(dfp20); }
public void test672() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test672"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp2.round((int) (byte) 0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField14.getOne(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField14.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField14.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode21 = dfpField14.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp2.trunc(roundingMode21); org.apache.commons.math3.dfp.Dfp dfp23 = new org.apache.commons.math3.dfp.Dfp(dfp2); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField25.getOne(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField25.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp32 = new org.apache.commons.math3.dfp.Dfp(dfpField25, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp34 = dfp32.multiply(2); org.apache.commons.math3.dfp.Dfp dfp36 = dfp32.newInstance("2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598"); boolean boolean37 = dfp2.unequal(dfp32); org.apache.commons.math3.dfp.Dfp dfp38 = dfp2.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + roundingMode21 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode21.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(dfp38); }
public void test673() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test673"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 2); org.apache.commons.math3.dfp.Dfp dfp4 = new org.apache.commons.math3.dfp.Dfp(dfpField1); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp((byte) -1, (byte) 100); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getPiSplit(); dfpField1.setIEEEFlagsBits(0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfpArray8); }
public void test674() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test674"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); int int6 = dfp2.log10K(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test675() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test675"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (double) 10000); dfpField1.clearIEEEFlags(); }
public void test676() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test676"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); int int9 = dfp8.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode10 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp11 = dfp8.trunc(roundingMode10); org.apache.commons.math3.dfp.Dfp dfp13 = dfp11.divide(10); org.apache.commons.math3.dfp.Dfp dfp14 = dfp13.getZero(); boolean boolean15 = dfp13.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp13.floor(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField1.newDfp(dfp16); org.apache.commons.math3.dfp.Dfp dfp18 = dfp17.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField19 = dfp18.getField(); org.apache.commons.math3.dfp.Dfp[] dfpArray20 = dfpField19.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp22 = new org.apache.commons.math3.dfp.Dfp(dfpField19, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598"); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + roundingMode10 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode10.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfpField19); org.junit.Assert.assertNotNull(dfpArray20); }
public void test677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test677"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "2."); dfpField1.setIEEEFlagsBits(2); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); }
public void test678() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test678"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); dfp4.shiftRight(); dfp4.sign = (byte) 10; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); }
public void test679() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test679"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); int int22 = dfp21.log10K(); boolean boolean23 = dfp9.greaterThan(dfp21); org.apache.commons.math3.dfp.Dfp dfp25 = dfp9.newInstance((double) 1); org.apache.commons.math3.dfp.Dfp dfp27 = dfp9.newInstance((int) (short) -1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp27); }
public void test680() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test680"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField dfpField4 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField4.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField4.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp10.add(dfp16); org.apache.commons.math3.dfp.Dfp dfp19 = dfp17.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp20 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp7, dfp17); double double21 = dfp20.toDouble(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField1.newDfp(dfp20); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField1.getSqr2Reciprocal(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 14674.41072270908d + "'", double21 == 14674.41072270908d); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); }
public void test681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test681"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField30.getOne(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField30.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField30.newDfp(); org.apache.commons.math3.dfp.Dfp dfp37 = dfp28.add(dfp36); double double38 = dfp36.toDouble(); int int39 = dfp36.exp; org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); java.lang.String str50 = dfp49.toString(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp42.divide(dfp49); org.apache.commons.math3.dfp.Dfp dfp52 = dfp6.dotrap(100, "", dfp36, dfp51); int int54 = dfp52.align(0); boolean boolean55 = dfp52.strictlyPositive(); int int57 = dfp52.round((int) (byte) -1); int int58 = dfp52.intValue(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3." + "'", str50, "3."); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertTrue("'" + int57 + "' != '" + 16 + "'", int57 == 16); org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1); }
public void test682() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test682"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); dfpField1.setIEEEFlags((int) (short) 0); int int8 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = null; dfpField1.setRoundingMode(roundingMode9); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp((double) 1.0f); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test683() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test683"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); int int9 = dfp8.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode10 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp11 = dfp8.trunc(roundingMode10); org.apache.commons.math3.dfp.Dfp dfp13 = dfp11.divide(10); org.apache.commons.math3.dfp.Dfp dfp14 = dfp13.getZero(); boolean boolean15 = dfp13.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp13.floor(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField1.newDfp(dfp16); org.apache.commons.math3.dfp.Dfp dfp18 = dfp17.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField19 = dfp18.getField(); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + roundingMode10 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode10.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfpField19); org.junit.Assert.assertNotNull(dfp20); }
public void test684() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test684"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.multiply((int) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); int int14 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode15 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp16 = dfp13.trunc(roundingMode15); java.lang.String str17 = dfp16.toString(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp16.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp21 = dfp19.newInstance((int) 'a'); byte byte22 = dfp21.nans; org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.ceil(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getTwo(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField35.getOne(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField35.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField35.newDfp(); org.apache.commons.math3.dfp.Dfp dfp42 = dfp33.add(dfp41); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn10(); int int46 = dfp45.log10K(); boolean boolean47 = dfp33.greaterThan(dfp45); org.apache.commons.math3.dfp.Dfp dfp49 = dfp33.newInstance((double) 1); org.apache.commons.math3.dfp.Dfp dfp50 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp10, dfp21, dfp49); org.apache.commons.math3.dfp.Dfp dfp51 = dfp10.getZero(); int int53 = dfp51.align((int) (short) -1); org.apache.commons.math3.dfp.DfpField dfpField55 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField55.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField55.getTwo(); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField55.getOne(); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField55.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp62 = new org.apache.commons.math3.dfp.Dfp(dfpField55, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp64 = dfp62.multiply(2); org.apache.commons.math3.dfp.Dfp dfp66 = dfp62.newInstance("2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598"); org.apache.commons.math3.dfp.Dfp dfp67 = dfp51.multiply(dfp66); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertTrue("'" + roundingMode15 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode15.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3." + "'", str17, "3."); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 0 + "'", byte22 == (byte) 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp66); org.junit.Assert.assertNotNull(dfp67); }
public void test685() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test685"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField30.getOne(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField30.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField30.newDfp(); org.apache.commons.math3.dfp.Dfp dfp37 = dfp28.add(dfp36); double double38 = dfp36.toDouble(); int int39 = dfp36.exp; org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); java.lang.String str50 = dfp49.toString(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp42.divide(dfp49); org.apache.commons.math3.dfp.Dfp dfp52 = dfp6.dotrap(100, "", dfp36, dfp51); java.lang.String str53 = dfp52.toString(); org.apache.commons.math3.dfp.DfpField dfpField55 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField55.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField55.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField60 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp61 = dfpField60.getLn10(); boolean boolean62 = dfp61.negativeOrNull(); int int63 = dfp61.log10K(); org.apache.commons.math3.dfp.DfpField dfpField65 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp66 = dfpField65.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp67 = dfpField65.getTwo(); org.apache.commons.math3.dfp.Dfp dfp68 = dfp61.add(dfp67); org.apache.commons.math3.dfp.Dfp dfp70 = dfp68.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp71 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp58, dfp68); org.apache.commons.math3.dfp.Dfp dfp72 = dfp52.divide(dfp58); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3." + "'", str50, "3."); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667" + "'", str53, "0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667"); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0); org.junit.Assert.assertNotNull(dfp66); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp72); }
public void test686() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test686"); org.apache.commons.math3.dfp.DfpField dfpField0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp2 = new org.apache.commons.math3.dfp.Dfp(dfpField0, (byte) 0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test687() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test687"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass8 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = dfpField1.getRoundingMode(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(wildcardClass8); org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode9.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); }
public void test688() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test688"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); int int7 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp9 = dfp6.trunc(roundingMode8); java.lang.String str10 = dfp9.toString(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(dfp9); org.apache.commons.math3.dfp.DfpField dfpField12 = dfp2.getField(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getZero(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField12.newDfp((byte) 0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "3." + "'", str10, "3."); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfpField12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); }
public void test689() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test689"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 0L); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn5(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass15 = dfpField13.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode16 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_FLOOR; dfpField13.setRoundingMode(roundingMode16); dfpField1.setRoundingMode(roundingMode16); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode19 = dfpField1.getRoundingMode(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(wildcardClass15); org.junit.Assert.assertTrue("'" + roundingMode16 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_FLOOR + "'", roundingMode16.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_FLOOR)); org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_FLOOR + "'", roundingMode19.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_FLOOR)); }
public void test690() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test690"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode7 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_UP; dfpField1.setRoundingMode(roundingMode7); org.apache.commons.math3.dfp.Dfp dfp10 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (short) 0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + roundingMode7 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_UP + "'", roundingMode7.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_UP)); }
public void test691() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test691"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp4 = dfp2.negate(); org.apache.commons.math3.dfp.Dfp dfp5 = dfp4.floor(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField7.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); boolean boolean14 = dfp13.negativeOrNull(); int int15 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField17.getTwo(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp13.add(dfp19); org.apache.commons.math3.dfp.Dfp dfp22 = dfp20.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp23 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp10, dfp20); org.apache.commons.math3.dfp.Dfp dfp24 = new org.apache.commons.math3.dfp.Dfp(dfp10); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField26.getTwo(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField26.getOne(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField26.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField26.getLn10(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField26.getTwo(); org.apache.commons.math3.dfp.Dfp dfp36 = dfp33.newInstance((byte) 0, (byte) 10); org.apache.commons.math3.dfp.Dfp dfp37 = dfp24.multiply(dfp36); boolean boolean38 = dfp5.unequal(dfp24); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); }
public void test692() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test692"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-32767)); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp10 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 6); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfpArray8); }
public void test693() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test693"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); boolean boolean12 = dfp11.negativeOrNull(); int int13 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField15.getTwo(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp11.add(dfp17); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.Dfp dfp29 = dfp17.divide(dfp21); double[] doubleArray30 = dfp21.toSplitDouble(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp6.multiply(dfp21); org.apache.commons.math3.dfp.Dfp dfp34 = null; org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getLn10(); int int38 = dfp37.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode39 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp40 = dfp37.trunc(roundingMode39); org.apache.commons.math3.dfp.Dfp dfp42 = dfp40.divide(10); org.apache.commons.math3.dfp.Dfp dfp43 = dfp42.getZero(); boolean boolean44 = dfp42.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp45 = dfp42.floor(); org.apache.commons.math3.dfp.Dfp dfp46 = dfp45.ceil(); org.apache.commons.math3.dfp.Dfp dfp47 = dfp6.dotrap((int) '#', "3.", dfp34, dfp46); boolean boolean48 = dfp47.isZero(); int int50 = dfp47.align(0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[2.302584648132324, 4.4486172146526797E-7]"); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertTrue("'" + roundingMode39 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode39.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0); }
public void test694() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test694"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp[] dfpArray10 = dfpField1.getLn2Split(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getSqr2(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfpArray8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfpArray10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); }
public void test695() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test695"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); int int3 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (double) '4'); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField7.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); boolean boolean14 = dfp13.negativeOrNull(); int int15 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField17.getTwo(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp13.add(dfp19); org.apache.commons.math3.dfp.Dfp dfp22 = dfp20.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp23 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp10, dfp20); int[] intArray24 = dfp10.mant; org.apache.commons.math3.dfp.Dfp dfp26 = dfp10.newInstance((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getLn10(); int int30 = dfp29.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode31 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp32 = dfp29.trunc(roundingMode31); org.apache.commons.math3.dfp.DfpField dfpField34 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField34.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField34.getTwo(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField34.getOne(); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField34.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp41 = new org.apache.commons.math3.dfp.Dfp(dfpField34, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp42 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp26, dfp29, dfp41); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray46 = dfpField44.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField44.getZero(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField44.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp51 = new org.apache.commons.math3.dfp.Dfp(dfpField44, (int) (byte) 10); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode52 = dfpField44.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp53 = dfp29.trunc(roundingMode52); dfpField1.setRoundingMode(roundingMode52); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField1.getPi(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(intArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35]"); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode31.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfpArray46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertTrue("'" + roundingMode52 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode52.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp55); }
public void test696() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test696"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); int int21 = dfp8.getRadixDigits(); int int22 = dfp8.intValue(); boolean boolean23 = dfp8.isInfinite(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getTwo(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField35.getOne(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField35.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField35.newDfp(); org.apache.commons.math3.dfp.Dfp dfp42 = dfp33.add(dfp41); org.apache.commons.math3.dfp.Dfp dfp43 = org.apache.commons.math3.dfp.Dfp.copysign(dfp8, dfp42); org.apache.commons.math3.dfp.Dfp dfp44 = dfp43.sqrt(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); }
public void test697() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test697"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(8); int int13 = dfp2.round(4); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16); }
public void test698() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test698"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); double double19 = dfp17.toDouble(); int int20 = dfp17.exp; org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = dfp17.newInstance(dfp29); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField31 = dfp17.getField(); int int32 = dfp17.log10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfpField31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-4) + "'", int32 == (-4)); }
public void test699() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test699"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-32767)); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 1); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.newDfp(9999); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp10); }
public void test700() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test700"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.newInstance((byte) 1, (byte) 1); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp17.multiply(dfp21); dfp23.shiftRight(); org.apache.commons.math3.dfp.Dfp dfp25 = dfp14.add(dfp23); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getLn10(); boolean boolean29 = dfp28.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); boolean boolean33 = dfp32.negativeOrNull(); int int34 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfp32.add(dfp38); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); boolean boolean43 = dfp42.negativeOrNull(); int int44 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField46.getTwo(); org.apache.commons.math3.dfp.Dfp dfp49 = dfp42.add(dfp48); org.apache.commons.math3.dfp.Dfp dfp50 = dfp38.divide(dfp42); int int51 = dfp38.getRadixDigits(); int int52 = dfp38.intValue(); org.apache.commons.math3.dfp.DfpField dfpField54 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField54.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField54.getTwo(); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField54.getOne(); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField54.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp61 = new org.apache.commons.math3.dfp.Dfp(dfpField54, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp62 = dfp38.divide(dfp61); boolean boolean63 = dfp28.unequal(dfp62); org.apache.commons.math3.dfp.Dfp dfp65 = dfp62.newInstance(100L); org.apache.commons.math3.dfp.Dfp dfp66 = dfp23.nextAfter(dfp62); org.apache.commons.math3.dfp.Dfp dfp67 = dfp23.floor(); org.apache.commons.math3.dfp.Dfp dfp68 = dfp23.getZero(); int int69 = dfp68.classify(); org.apache.commons.math3.dfp.Dfp dfp70 = dfp68.abs(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 25 + "'", int51 == 25); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp66); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0); org.junit.Assert.assertNotNull(dfp70); }
public void test001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test001"); org.apache.commons.math3.dfp.DfpField dfpField0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp2 = new org.apache.commons.math3.dfp.Dfp(dfpField0, (long) (short) 0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test002"); org.apache.commons.math3.dfp.Dfp dfp0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp1 = new org.apache.commons.math3.dfp.Dfp(dfp0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test003"); org.apache.commons.math3.dfp.DfpField dfpField0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp2 = new org.apache.commons.math3.dfp.Dfp(dfpField0, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test004"); org.apache.commons.math3.dfp.DfpField dfpField0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp2 = new org.apache.commons.math3.dfp.Dfp(dfpField0, (double) 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test005"); org.apache.commons.math3.dfp.DfpField dfpField0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp2 = new org.apache.commons.math3.dfp.Dfp(dfpField0, (double) (byte) 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test006"); org.apache.commons.math3.dfp.DfpField dfpField0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp2 = new org.apache.commons.math3.dfp.Dfp(dfpField0, (byte) 100); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test007"); org.apache.commons.math3.dfp.DfpField dfpField0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp1 = new org.apache.commons.math3.dfp.Dfp(dfpField0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test008"); org.apache.commons.math3.dfp.DfpField dfpField0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp2 = new org.apache.commons.math3.dfp.Dfp(dfpField0, (long) (byte) 2); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test009"); org.apache.commons.math3.dfp.Dfp dfp0 = null; org.apache.commons.math3.dfp.Dfp dfp1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp2 = org.apache.commons.math3.dfp.Dfp.copysign(dfp0, dfp1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test010"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); dfp8.shiftRight(); int int10 = dfp8.exp; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2); }
public void test011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test011"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp10 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp11 = dfp8.add(dfp10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); }
public void test012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test012"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp6 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp7 = dfp5.nextAfter(dfp6); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); }
public void test013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test013"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); boolean boolean9 = dfp6.isNaN(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test014"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); boolean boolean4 = dfp3.negativeOrNull(); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test015"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); double[] doubleArray9 = dfp2.toSplitDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.30258506536483765, 2.7629208037533617E-8]"); }
public void test016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test016"); int int0 = org.apache.commons.math3.dfp.DfpField.FLAG_UNDERFLOW; org.junit.Assert.assertTrue("'" + int0 + "' != '" + 8 + "'", int0 == 8); }
public void test017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test017"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 10); java.lang.Class<?> wildcardClass9 = dfpField1.getClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test018"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode10 = null; dfpField1.setRoundingMode(roundingMode10); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); }
public void test019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test019"); byte byte0 = org.apache.commons.math3.dfp.Dfp.QNAN; org.junit.Assert.assertTrue("'" + byte0 + "' != '" + (byte) 3 + "'", byte0 == (byte) 3); }
public void test020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test020"); org.apache.commons.math3.dfp.DfpField dfpField0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp2 = new org.apache.commons.math3.dfp.Dfp(dfpField0, (byte) 2); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test021"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); java.lang.Class<?> wildcardClass4 = dfpArray3.getClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(wildcardClass4); }
public void test022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test022"); int int0 = org.apache.commons.math3.dfp.DfpField.FLAG_OVERFLOW; org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4); }
public void test023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test023"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); dfp6.exp = (byte) -1; boolean boolean9 = dfp6.positiveOrNull(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); }
public void test024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test024"); org.apache.commons.math3.dfp.Dfp dfp0 = null; org.apache.commons.math3.dfp.DfpField dfpField2 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField2.getLn10(); int int4 = dfp3.log10K(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp5 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp0, dfp3); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getE(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField21.newDfp((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); int int29 = dfp27.log10K(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField31.getTwo(); org.apache.commons.math3.dfp.Dfp dfp34 = dfp27.add(dfp33); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField36.getOne(); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField36.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField36.newDfp(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp34.add(dfp42); double double44 = dfp42.toDouble(); int int45 = dfp42.exp; org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getLn10(); boolean boolean49 = dfp48.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getLn10(); boolean boolean53 = dfp52.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp48.multiply(dfp52); org.apache.commons.math3.dfp.Dfp dfp55 = dfp42.newInstance(dfp54); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField56 = dfp42.getField(); org.apache.commons.math3.dfp.DfpField dfpField58 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField58.getLn10(); boolean boolean60 = dfp59.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField62 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField62.getLn10(); boolean boolean64 = dfp63.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp65 = dfp59.multiply(dfp63); org.apache.commons.math3.dfp.DfpField dfpField67 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField67.getLn10(); int int69 = dfp68.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode70 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp71 = dfp68.trunc(roundingMode70); org.apache.commons.math3.dfp.Dfp dfp73 = dfp71.divide(10); org.apache.commons.math3.dfp.DfpField dfpField75 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField75.getLn10(); boolean boolean77 = dfp76.negativeOrNull(); int int78 = dfp76.log10K(); org.apache.commons.math3.dfp.DfpField dfpField80 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp81 = dfpField80.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp82 = dfpField80.getTwo(); org.apache.commons.math3.dfp.Dfp dfp83 = dfp76.add(dfp82); boolean boolean84 = dfp82.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp85 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp59, dfp73, dfp82); org.apache.commons.math3.dfp.Dfp dfp86 = dfp17.trap(10000, "3.", dfp24, dfp42, dfp85); boolean boolean87 = dfp86.negativeOrNull(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfpField56); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0); org.junit.Assert.assertTrue("'" + roundingMode70 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode70.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp83); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true); }
public void test026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test026"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((int) (short) 10); byte byte17 = dfp16.sign; org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); int int21 = dfp20.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); int int25 = dfp24.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode26 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp27 = dfp24.trunc(roundingMode26); java.lang.String str28 = dfp27.toString(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp20.divide(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp9, dfp16, dfp27); dfp16.shiftLeft(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 1 + "'", byte17 == (byte) 1); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertTrue("'" + roundingMode26 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode26.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "3." + "'", str28, "3."); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); }
public void test027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test027"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); int int21 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField23.getTwo(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp19.add(dfp25); boolean boolean27 = dfp25.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp28 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp2, dfp16, dfp25); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getLn10(); int int32 = dfp31.log10K(); boolean boolean33 = dfp31.isZero(); boolean boolean34 = dfp28.lessThan(dfp31); double double35 = dfp28.toDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.09993709943356d + "'", double35 == 1.09993709943356d); }
public void test028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test028"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 10); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_ODD; dfpField1.setRoundingMode(roundingMode9); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass11 = dfpField1.getRuntimeClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_ODD + "'", roundingMode9.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_ODD)); org.junit.Assert.assertNotNull(wildcardClass11); }
public void test029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test029"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfp3.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField6.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp21 = dfp19.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp22 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp9, dfp19); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getE(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField26.newDfp((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); boolean boolean33 = dfp32.negativeOrNull(); int int34 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfp32.add(dfp38); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField41.getTwo(); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField41.getOne(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField41.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField41.newDfp(); org.apache.commons.math3.dfp.Dfp dfp48 = dfp39.add(dfp47); double double49 = dfp47.toDouble(); int int50 = dfp47.exp; org.apache.commons.math3.dfp.DfpField dfpField52 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField52.getLn10(); boolean boolean54 = dfp53.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField56 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField56.getLn10(); boolean boolean58 = dfp57.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp59 = dfp53.multiply(dfp57); org.apache.commons.math3.dfp.Dfp dfp60 = dfp47.newInstance(dfp59); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField61 = dfp47.getField(); org.apache.commons.math3.dfp.DfpField dfpField63 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp64 = dfpField63.getLn10(); boolean boolean65 = dfp64.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField67 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField67.getLn10(); boolean boolean69 = dfp68.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp70 = dfp64.multiply(dfp68); org.apache.commons.math3.dfp.DfpField dfpField72 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp73 = dfpField72.getLn10(); int int74 = dfp73.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode75 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp76 = dfp73.trunc(roundingMode75); org.apache.commons.math3.dfp.Dfp dfp78 = dfp76.divide(10); org.apache.commons.math3.dfp.DfpField dfpField80 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp81 = dfpField80.getLn10(); boolean boolean82 = dfp81.negativeOrNull(); int int83 = dfp81.log10K(); org.apache.commons.math3.dfp.DfpField dfpField85 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp86 = dfpField85.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp87 = dfpField85.getTwo(); org.apache.commons.math3.dfp.Dfp dfp88 = dfp81.add(dfp87); boolean boolean89 = dfp87.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp90 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp64, dfp78, dfp87); org.apache.commons.math3.dfp.Dfp dfp91 = dfp22.trap(10000, "3.", dfp29, dfp47, dfp90); org.apache.commons.math3.dfp.Dfp dfp92 = dfp3.nextAfter(dfp29); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfpField61); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0); org.junit.Assert.assertTrue("'" + roundingMode75 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode75.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertNotNull(dfp87); org.junit.Assert.assertNotNull(dfp88); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false); org.junit.Assert.assertNotNull(dfp90); org.junit.Assert.assertNotNull(dfp91); org.junit.Assert.assertNotNull(dfp92); }
public void test030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test030"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); int int7 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp9 = dfp6.trunc(roundingMode8); java.lang.String str10 = dfp9.toString(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(dfp9); org.apache.commons.math3.dfp.Dfp dfp12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp13 = dfp11.divide(dfp12); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "3." + "'", str10, "3."); org.junit.Assert.assertNotNull(dfp11); }
public void test031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test031"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((int) (short) 10); byte byte17 = dfp16.sign; org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); int int21 = dfp20.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); int int25 = dfp24.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode26 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp27 = dfp24.trunc(roundingMode26); java.lang.String str28 = dfp27.toString(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp20.divide(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp9, dfp16, dfp27); org.apache.commons.math3.dfp.DfpField dfpField32 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField32.getSqr3Reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getLn10(); boolean boolean37 = dfp36.negativeOrNull(); int int38 = dfp36.log10K(); org.apache.commons.math3.dfp.DfpField dfpField40 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField40.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField40.getTwo(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp36.add(dfp42); org.apache.commons.math3.dfp.Dfp dfp44 = dfp33.subtract(dfp43); org.apache.commons.math3.dfp.Dfp dfp45 = dfp44.reciprocal(); boolean boolean46 = dfp9.lessThan(dfp44); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 1 + "'", byte17 == (byte) 1); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertTrue("'" + roundingMode26 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode26.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "3." + "'", str28, "3."); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); }
public void test032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test032"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.getTwo(); int int10 = dfp9.exp; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); }
public void test033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test033"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100, (byte) 100); org.apache.commons.math3.dfp.Dfp[] dfpArray12 = dfpField1.getSqr2Split(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfpArray12); }
public void test034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test034"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); int int11 = dfp9.align((int) (byte) -1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test035"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp[] dfpArray2 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 3); org.junit.Assert.assertNotNull(dfpArray2); }
public void test036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test036"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); int int11 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode12 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.trunc(roundingMode12); java.lang.String str14 = dfp13.toString(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField1.newDfp(dfp13); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); org.apache.commons.math3.dfp.Dfp dfp23 = dfp18.power10((int) (short) -1); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.Dfp dfp34 = dfp32.reciprocal(); int int36 = dfp32.round((int) (short) 1); boolean boolean37 = dfp23.unequal(dfp32); boolean boolean38 = dfp15.greaterThan(dfp32); boolean boolean39 = dfp15.strictlyNegative(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode12.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "3." + "'", str14, "3."); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); }
public void test037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test037"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); double double19 = dfp17.toDouble(); int int20 = dfp17.exp; org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = dfp17.newInstance(dfp29); org.apache.commons.math3.dfp.Dfp dfp31 = dfp30.negate(); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField32 = dfp30.getField(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfpField32); }
public void test038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test038"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); int int21 = dfp8.getRadixDigits(); int int22 = dfp8.intValue(); boolean boolean23 = dfp8.isInfinite(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); int int27 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode28 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp29 = dfp26.trunc(roundingMode28); org.apache.commons.math3.dfp.Dfp dfp30 = dfp8.trunc(roundingMode28); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertTrue("'" + roundingMode28 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode28.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); }
public void test039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test039"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getSqr2Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, ""); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0"); } catch (java.lang.StringIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); }
public void test040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test040"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); int int5 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField7.getTwo(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField7.getOne(); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField7, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.nextAfter(dfp12); int int15 = dfp2.complement((int) (byte) -1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); }
public void test041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test041"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp11 = dfp9.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.getTwo(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp9.getTwo(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); }
public void test042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test042"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getOne(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); boolean boolean15 = dfp14.negativeOrNull(); int int16 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField18.getTwo(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp14.add(dfp20); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); boolean boolean25 = dfp24.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getLn10(); boolean boolean29 = dfp28.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp30 = dfp24.multiply(dfp28); org.apache.commons.math3.dfp.DfpField dfpField32 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField32.getLn10(); int int34 = dfp33.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode35 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp36 = dfp33.trunc(roundingMode35); org.apache.commons.math3.dfp.Dfp dfp38 = dfp36.divide(10); org.apache.commons.math3.dfp.DfpField dfpField40 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField40.getLn10(); boolean boolean42 = dfp41.negativeOrNull(); int int43 = dfp41.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField45.getTwo(); org.apache.commons.math3.dfp.Dfp dfp48 = dfp41.add(dfp47); boolean boolean49 = dfp47.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp50 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp24, dfp38, dfp47); org.apache.commons.math3.dfp.Dfp dfp51 = dfp50.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField53 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField53.getLn10(); int int55 = dfp54.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode56 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp57 = dfp54.trunc(roundingMode56); org.apache.commons.math3.dfp.Dfp dfp59 = dfp57.divide(10); org.apache.commons.math3.dfp.Dfp dfp60 = dfp59.getZero(); boolean boolean61 = dfp59.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp62 = dfp59.floor(); org.apache.commons.math3.dfp.Dfp dfp63 = dfp9.trap((int) ' ', "0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667", dfp14, dfp51, dfp62); int int64 = dfp62.classify(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertTrue("'" + roundingMode35 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode35.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertTrue("'" + roundingMode56 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode56.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); }
public void test043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test043"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); boolean boolean19 = dfp17.isNaN(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test044"); org.apache.commons.math3.dfp.DfpField dfpField0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp2 = new org.apache.commons.math3.dfp.Dfp(dfpField0, (byte) 3); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test045"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField dfpField4 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField4.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField4.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp10.add(dfp16); org.apache.commons.math3.dfp.Dfp dfp19 = dfp17.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp20 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp7, dfp17); double double21 = dfp20.toDouble(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField1.newDfp(dfp20); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp24 = new org.apache.commons.math3.dfp.Dfp(dfpField1, ""); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0"); } catch (java.lang.StringIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 14674.41072270908d + "'", double21 == 14674.41072270908d); org.junit.Assert.assertNotNull(dfp22); }
public void test046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test046"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (long) 8); dfpField1.setIEEEFlagsBits(1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); }
public void test047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test047"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); dfpField1.setIEEEFlags((int) (short) 0); dfpField1.setIEEEFlags((int) (byte) 10); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); }
public void test048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test048"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField6 = dfp5.getField(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField10, 16); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField14.getOne(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField14.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField14.newDfp(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField14.getZero(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp5.dotrap(10000, "", dfp12, dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp12.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfpField6); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); }
public void test049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test049"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 10); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getLn5(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); }
public void test050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test050"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((-1)); int int7 = dfpField1.getRadixDigits(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 25 + "'", int7 == 25); }
public void test051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test051"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100, (byte) 100); dfp11.sign = (byte) 1; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); }
public void test052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test052"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.Dfp dfp18 = new org.apache.commons.math3.dfp.Dfp(dfp4); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField20.getOne(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField20.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField20.getLn10(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp30 = dfp27.newInstance((byte) 0, (byte) 10); org.apache.commons.math3.dfp.Dfp dfp31 = dfp18.multiply(dfp30); int int32 = dfp30.log10K(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1)); }
public void test053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test053"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField30.getOne(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField30.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField30.newDfp(); org.apache.commons.math3.dfp.Dfp dfp37 = dfp28.add(dfp36); double double38 = dfp36.toDouble(); int int39 = dfp36.exp; org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); java.lang.String str50 = dfp49.toString(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp42.divide(dfp49); org.apache.commons.math3.dfp.Dfp dfp52 = dfp6.dotrap(100, "", dfp36, dfp51); java.lang.String str53 = dfp36.dfp2sci(); dfp36.exp = (-8); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3." + "'", str50, "3."); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0.0e0" + "'", str53, "0.0e0"); }
public void test054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test054"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); boolean boolean7 = dfp6.isNaN(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test055"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); dfpField1.setIEEEFlags((int) (short) 0); int int8 = dfpField1.getIEEEFlags(); dfpField1.setIEEEFlagsBits(10); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass11 = dfpField1.getRuntimeClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(wildcardClass11); }
public void test056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test056"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 10); dfp8.shiftRight(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); }
public void test057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test057"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getOne(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); boolean boolean15 = dfp14.negativeOrNull(); int int16 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField18.getTwo(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp14.add(dfp20); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); boolean boolean25 = dfp24.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getLn10(); boolean boolean29 = dfp28.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp30 = dfp24.multiply(dfp28); org.apache.commons.math3.dfp.DfpField dfpField32 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField32.getLn10(); int int34 = dfp33.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode35 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp36 = dfp33.trunc(roundingMode35); org.apache.commons.math3.dfp.Dfp dfp38 = dfp36.divide(10); org.apache.commons.math3.dfp.DfpField dfpField40 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField40.getLn10(); boolean boolean42 = dfp41.negativeOrNull(); int int43 = dfp41.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField45.getTwo(); org.apache.commons.math3.dfp.Dfp dfp48 = dfp41.add(dfp47); boolean boolean49 = dfp47.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp50 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp24, dfp38, dfp47); org.apache.commons.math3.dfp.Dfp dfp51 = dfp50.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField53 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField53.getLn10(); int int55 = dfp54.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode56 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp57 = dfp54.trunc(roundingMode56); org.apache.commons.math3.dfp.Dfp dfp59 = dfp57.divide(10); org.apache.commons.math3.dfp.Dfp dfp60 = dfp59.getZero(); boolean boolean61 = dfp59.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp62 = dfp59.floor(); org.apache.commons.math3.dfp.Dfp dfp63 = dfp9.trap((int) ' ', "0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667", dfp14, dfp51, dfp62); java.lang.String str64 = dfp14.dfp2string(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertTrue("'" + roundingMode35 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode35.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertTrue("'" + roundingMode56 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode56.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598" + "'", str64, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598"); }
public void test058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test058"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getE(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField21.newDfp((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); int int29 = dfp27.log10K(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField31.getTwo(); org.apache.commons.math3.dfp.Dfp dfp34 = dfp27.add(dfp33); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField36.getOne(); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField36.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField36.newDfp(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp34.add(dfp42); double double44 = dfp42.toDouble(); int int45 = dfp42.exp; org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getLn10(); boolean boolean49 = dfp48.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getLn10(); boolean boolean53 = dfp52.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp48.multiply(dfp52); org.apache.commons.math3.dfp.Dfp dfp55 = dfp42.newInstance(dfp54); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField56 = dfp42.getField(); org.apache.commons.math3.dfp.DfpField dfpField58 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField58.getLn10(); boolean boolean60 = dfp59.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField62 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField62.getLn10(); boolean boolean64 = dfp63.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp65 = dfp59.multiply(dfp63); org.apache.commons.math3.dfp.DfpField dfpField67 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField67.getLn10(); int int69 = dfp68.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode70 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp71 = dfp68.trunc(roundingMode70); org.apache.commons.math3.dfp.Dfp dfp73 = dfp71.divide(10); org.apache.commons.math3.dfp.DfpField dfpField75 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField75.getLn10(); boolean boolean77 = dfp76.negativeOrNull(); int int78 = dfp76.log10K(); org.apache.commons.math3.dfp.DfpField dfpField80 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp81 = dfpField80.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp82 = dfpField80.getTwo(); org.apache.commons.math3.dfp.Dfp dfp83 = dfp76.add(dfp82); boolean boolean84 = dfp82.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp85 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp59, dfp73, dfp82); org.apache.commons.math3.dfp.Dfp dfp86 = dfp17.trap(10000, "3.", dfp24, dfp42, dfp85); double double87 = dfp85.toDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfpField56); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0); org.junit.Assert.assertTrue("'" + roundingMode70 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode70.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp83); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.09993709943356d + "'", double87 == 1.09993709943356d); }
public void test059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test059"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.reciprocal(); int int12 = dfp8.round((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp15 = dfp8.newInstance((byte) -1, (byte) 100); dfp15.sign = (byte) 10; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16); org.junit.Assert.assertNotNull(dfp15); }
public void test060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test060"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfp4.power10((int) (byte) 2); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); }
public void test061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test061"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); int int21 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField23.getTwo(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp19.add(dfp25); boolean boolean27 = dfp25.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp28 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp2, dfp16, dfp25); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getLn10(); int int32 = dfp31.log10K(); boolean boolean33 = dfp31.isZero(); boolean boolean34 = dfp28.lessThan(dfp31); dfp28.shiftLeft(); boolean boolean36 = dfp28.negativeOrNull(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); }
public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); int int11 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode12 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.trunc(roundingMode12); java.lang.String str14 = dfp13.toString(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField1.newDfp(dfp13); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); org.apache.commons.math3.dfp.Dfp dfp23 = dfp18.power10((int) (short) -1); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.Dfp dfp34 = dfp32.reciprocal(); int int36 = dfp32.round((int) (short) 1); boolean boolean37 = dfp23.unequal(dfp32); boolean boolean38 = dfp15.greaterThan(dfp32); boolean boolean39 = dfp15.strictlyPositive(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode12.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "3." + "'", str14, "3."); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); }
public void test063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test063"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp5 = dfp4.reciprocal(); boolean boolean6 = dfp4.strictlyNegative(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test064"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); int int19 = dfp17.log10K(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp17.add(dfp23); org.apache.commons.math3.dfp.Dfp dfp25 = dfp13.divide(dfp17); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField1.newDfp(dfp25); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); }
public void test065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test065"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); int int8 = dfp6.round((int) 'a'); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16); }
public void test066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test066"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.reciprocal(); int int12 = dfp8.round((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp15 = dfp8.newInstance((byte) -1, (byte) 100); int int16 = dfp15.getRadixDigits(); boolean boolean17 = dfp15.strictlyPositive(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); boolean boolean21 = dfp20.negativeOrNull(); int int22 = dfp20.log10K(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField24.getTwo(); org.apache.commons.math3.dfp.Dfp dfp27 = dfp20.add(dfp26); org.apache.commons.math3.dfp.DfpField dfpField29 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField29.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField29.getTwo(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField29.getOne(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField29.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField29.newDfp(); org.apache.commons.math3.dfp.Dfp dfp36 = dfp27.add(dfp35); org.apache.commons.math3.dfp.Dfp dfp37 = dfp15.remainder(dfp27); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 25 + "'", int16 == 25); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); }
public void test067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test067"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField30.getOne(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField30.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField30.newDfp(); org.apache.commons.math3.dfp.Dfp dfp37 = dfp28.add(dfp36); double double38 = dfp36.toDouble(); int int39 = dfp36.exp; org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); java.lang.String str50 = dfp49.toString(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp42.divide(dfp49); org.apache.commons.math3.dfp.Dfp dfp52 = dfp6.dotrap(100, "", dfp36, dfp51); double double53 = dfp36.toDouble(); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField54 = dfp36.getField(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3." + "'", str50, "3."); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(dfpField54); }
public void test068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test068"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); boolean boolean10 = dfp9.negativeOrNull(); int int11 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField13.getTwo(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp9.add(dfp15); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.divide(8); boolean boolean19 = dfp9.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp5.remainder(dfp9); boolean boolean21 = dfp9.isNaN(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); }
public void test069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test069"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.Dfp dfp18 = dfp6.newInstance((byte) 2); int int20 = dfp18.round((int) (short) 10); int int21 = dfp18.exp; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); }
public void test070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test070"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp10.align(0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp10.divide(dfp21); org.apache.commons.math3.dfp.Dfp dfp26 = dfp10.power10((int) '#'); int int27 = dfp26.exp; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9); }
public void test071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test071"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); int int6 = dfp4.round((int) (short) 100); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16); }
public void test072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test072"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp5.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.newInstance((int) 'a'); byte byte11 = dfp10.nans; org.apache.commons.math3.dfp.Dfp dfp12 = dfp10.ceil(); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField13 = dfp10.getField(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfpField13); }
public void test073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test073"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.newInstance((byte) 1, (byte) 1); int int15 = dfp14.log10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-4) + "'", int15 == (-4)); }
public void test074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test074"); org.apache.commons.math3.dfp.Dfp dfp0 = null; org.apache.commons.math3.dfp.DfpField dfpField2 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp4 = new org.apache.commons.math3.dfp.Dfp(dfpField2, (int) (short) 0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField2.getOne(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp6 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp0, dfp5); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp5); }
public void test075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test075"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100, (byte) 100); int int12 = dfpField1.getRadixDigits(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 25 + "'", int12 == 25); }
public void test076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test076"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); double double18 = dfp17.toDouble(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp17.ceil(); int int21 = dfp17.round((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp23 = dfp17.divide(0); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getLn10(); boolean boolean37 = dfp36.negativeOrNull(); int int38 = dfp36.log10K(); org.apache.commons.math3.dfp.DfpField dfpField40 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField40.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField40.getTwo(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp36.add(dfp42); org.apache.commons.math3.dfp.Dfp dfp44 = dfp32.divide(dfp36); org.apache.commons.math3.dfp.Dfp dfp45 = dfp32.floor(); org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray49 = dfpField47.getESplit(); org.apache.commons.math3.dfp.Dfp dfp51 = new org.apache.commons.math3.dfp.Dfp(dfpField47, (-32767)); org.apache.commons.math3.dfp.Dfp dfp53 = dfp51.newInstance("hi!"); boolean boolean54 = dfp32.equals((java.lang.Object) dfp51); org.apache.commons.math3.dfp.Dfp dfp55 = dfp17.divide(dfp51); org.apache.commons.math3.dfp.Dfp dfp58 = dfp17.newInstance((byte) 3, (byte) 10); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 14674.41072270908d + "'", double18 == 14674.41072270908d); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfpArray49); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp58); }
public void test077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test077"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (short) 0); int int5 = dfp3.round((int) '#'); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16); }
public void test078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test078"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getSqr2(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); int int16 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode17 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp18 = dfp15.trunc(roundingMode17); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField19 = dfp18.getField(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp25 = new org.apache.commons.math3.dfp.Dfp(dfpField23, 16); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField27.getTwo(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField27.getOne(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField27.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField27.newDfp(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField27.getZero(); org.apache.commons.math3.dfp.Dfp dfp35 = dfp18.dotrap(10000, "", dfp25, dfp34); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField1.newDfp(dfp25); org.apache.commons.math3.dfp.Dfp dfp39 = dfp36.newInstance((byte) 0, (byte) 10); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode17.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfpField19); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp39); }
public void test079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test079"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField6 = dfp5.getField(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField10, 16); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField14.getOne(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField14.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField14.newDfp(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField14.getZero(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp5.dotrap(10000, "", dfp12, dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp22.floor(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfpField6); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); }
public void test080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test080"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getOne(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); boolean boolean15 = dfp14.negativeOrNull(); int int16 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField18.getTwo(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp14.add(dfp20); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); boolean boolean25 = dfp24.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getLn10(); boolean boolean29 = dfp28.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp30 = dfp24.multiply(dfp28); org.apache.commons.math3.dfp.DfpField dfpField32 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField32.getLn10(); int int34 = dfp33.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode35 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp36 = dfp33.trunc(roundingMode35); org.apache.commons.math3.dfp.Dfp dfp38 = dfp36.divide(10); org.apache.commons.math3.dfp.DfpField dfpField40 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField40.getLn10(); boolean boolean42 = dfp41.negativeOrNull(); int int43 = dfp41.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField45.getTwo(); org.apache.commons.math3.dfp.Dfp dfp48 = dfp41.add(dfp47); boolean boolean49 = dfp47.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp50 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp24, dfp38, dfp47); org.apache.commons.math3.dfp.Dfp dfp51 = dfp50.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField53 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField53.getLn10(); int int55 = dfp54.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode56 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp57 = dfp54.trunc(roundingMode56); org.apache.commons.math3.dfp.Dfp dfp59 = dfp57.divide(10); org.apache.commons.math3.dfp.Dfp dfp60 = dfp59.getZero(); boolean boolean61 = dfp59.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp62 = dfp59.floor(); org.apache.commons.math3.dfp.Dfp dfp63 = dfp9.trap((int) ' ', "0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667", dfp14, dfp51, dfp62); double double64 = dfp51.toDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertTrue("'" + roundingMode35 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode35.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertTrue("'" + roundingMode56 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode56.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.9091428960028487d + "'", double64 == 0.9091428960028487d); }
public void test081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test081"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 10); int int10 = dfp8.round(32768); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16); }
public void test082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test082"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getOne(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField8.getTwo(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField8.getOne(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField8.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField8.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode15 = dfpField8.getRoundingMode(); dfpField1.setRoundingMode(roundingMode15); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + roundingMode15 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode15.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); }
public void test083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test083"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp("hi!"); double double10 = dfp9.toDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); }
public void test084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test084"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.Dfp dfp17 = dfp16.getZero(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField1.newDfp(dfp16); org.apache.commons.math3.dfp.Dfp dfp19 = dfp18.getOne(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray23 = dfpField21.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField21.getZero(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField21.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getLn10(); int int30 = dfp29.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode31 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp32 = dfp29.trunc(roundingMode31); org.apache.commons.math3.dfp.Dfp dfp34 = dfp29.power10((int) (short) -1); dfp29.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp36 = dfp26.subtract(dfp29); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getLn10(); int int40 = dfp39.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode41 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp42 = dfp39.trunc(roundingMode41); java.lang.String str43 = dfp42.toString(); org.apache.commons.math3.dfp.Dfp dfp45 = dfp42.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp47 = dfp45.newInstance((int) 'a'); byte byte48 = dfp47.nans; boolean boolean49 = dfp47.isNaN(); org.apache.commons.math3.dfp.Dfp dfp50 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp18, dfp36, dfp47); double double51 = dfp47.toDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfpArray23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode31.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertTrue("'" + roundingMode41 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode41.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "3." + "'", str43, "3."); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 0 + "'", byte48 == (byte) 0); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 97.0d + "'", double51 == 97.0d); }
public void test085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test085"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (short) 0); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfp4.getOne(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); }
public void test086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test086"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.Dfp dfp17 = dfp16.getZero(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField1.newDfp(dfp16); org.apache.commons.math3.dfp.Dfp dfp19 = dfp18.getOne(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray23 = dfpField21.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField21.getZero(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField21.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getLn10(); int int30 = dfp29.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode31 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp32 = dfp29.trunc(roundingMode31); org.apache.commons.math3.dfp.Dfp dfp34 = dfp29.power10((int) (short) -1); dfp29.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp36 = dfp26.subtract(dfp29); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getLn10(); int int40 = dfp39.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode41 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp42 = dfp39.trunc(roundingMode41); java.lang.String str43 = dfp42.toString(); org.apache.commons.math3.dfp.Dfp dfp45 = dfp42.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp47 = dfp45.newInstance((int) 'a'); byte byte48 = dfp47.nans; boolean boolean49 = dfp47.isNaN(); org.apache.commons.math3.dfp.Dfp dfp50 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp18, dfp36, dfp47); java.lang.String str51 = dfp47.dfp2string(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfpArray23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode31.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertTrue("'" + roundingMode41 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode41.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "3." + "'", str43, "3."); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 0 + "'", byte48 == (byte) 0); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "97." + "'", str51, "97."); }
public void test087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test087"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); boolean boolean12 = dfp11.negativeOrNull(); int int13 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField15.getTwo(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp11.add(dfp17); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.Dfp dfp29 = dfp17.divide(dfp21); double[] doubleArray30 = dfp21.toSplitDouble(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp6.multiply(dfp21); org.apache.commons.math3.dfp.Dfp dfp34 = null; org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getLn10(); int int38 = dfp37.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode39 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp40 = dfp37.trunc(roundingMode39); org.apache.commons.math3.dfp.Dfp dfp42 = dfp40.divide(10); org.apache.commons.math3.dfp.Dfp dfp43 = dfp42.getZero(); boolean boolean44 = dfp42.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp45 = dfp42.floor(); org.apache.commons.math3.dfp.Dfp dfp46 = dfp45.ceil(); org.apache.commons.math3.dfp.Dfp dfp47 = dfp6.dotrap((int) '#', "3.", dfp34, dfp46); org.apache.commons.math3.dfp.DfpField dfpField49 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp50 = dfpField49.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray51 = dfpField49.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField49.getZero(); org.apache.commons.math3.dfp.Dfp dfp55 = new org.apache.commons.math3.dfp.Dfp(dfpField49, (byte) -1, (byte) -1); org.apache.commons.math3.dfp.Dfp dfp57 = new org.apache.commons.math3.dfp.Dfp(dfpField49, (long) 32760); org.apache.commons.math3.dfp.Dfp dfp58 = dfp57.negate(); org.apache.commons.math3.dfp.Dfp dfp59 = dfp46.multiply(dfp57); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[2.302584648132324, 4.4486172146526797E-7]"); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertTrue("'" + roundingMode39 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode39.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfpArray51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp59); }
public void test088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test088"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn5(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp8 = dfp6.divide(0); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass12 = dfpField10.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField10.newDfp(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp13.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp15 = org.apache.commons.math3.dfp.Dfp.copysign(dfp8, dfp14); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(wildcardClass12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); }
public void test089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test089"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp((byte) 2); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); }
public void test090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test090"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getSqr2Reciprocal(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); }
public void test091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test091"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp10.add(dfp16); org.apache.commons.math3.dfp.Dfp dfp18 = dfp16.reciprocal(); int int20 = dfp16.round((int) (short) 1); boolean boolean21 = dfp7.unequal(dfp16); double[] doubleArray22 = dfp16.toSplitDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2.0, 0.0]"); }
public void test092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test092"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp5.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp9 = dfp5.abs(); org.apache.commons.math3.dfp.Dfp dfp10 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp11 = dfp9.nextAfter(dfp10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); }
public void test093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test093"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp("hi!"); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass10 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getZero(); dfpField1.setIEEEFlags((int) (byte) 3); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(wildcardClass10); org.junit.Assert.assertNotNull(dfp11); }
public void test094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test094"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.getPi(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getZero(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); }
public void test095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test095"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.Dfp dfp18 = new org.apache.commons.math3.dfp.Dfp(dfp4); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField20.getOne(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField20.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField20.getLn10(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp30 = dfp27.newInstance((byte) 0, (byte) 10); org.apache.commons.math3.dfp.Dfp dfp31 = dfp18.multiply(dfp30); int int32 = dfp30.intValue(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp30.sqrt(); int int34 = dfp33.getRadixDigits(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 25 + "'", int34 == 25); }
public void test096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test096"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.multiply((int) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp10.negate(); dfp10.shiftRight(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); }
public void test097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test097"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); dfp6.exp = (byte) -1; int int9 = dfp6.log10(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp6.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp10.negate(); org.apache.commons.math3.dfp.Dfp dfp12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp13 = dfp11.multiply(dfp12); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-8) + "'", int9 == (-8)); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); }
public void test098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test098"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp("hi!"); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass10 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp((double) 100); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.getSqr2(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(wildcardClass10); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); }
public void test099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test099"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); dfp6.exp = (byte) -1; int int9 = dfp6.log10(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp6.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp10.negate(); int int12 = dfp10.log10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-8) + "'", int9 == (-8)); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6); }
public void test100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test100"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp10.align(0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp10.divide(dfp21); org.apache.commons.math3.dfp.Dfp dfp25 = dfp21.negate(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); }
public void test101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test101"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); org.apache.commons.math3.dfp.Dfp dfp21 = dfp8.newInstance(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); int int25 = dfp24.log10K(); boolean boolean26 = dfp24.isZero(); org.apache.commons.math3.dfp.Dfp dfp27 = dfp8.subtract(dfp24); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(dfp27); }
public void test102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test102"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); int int7 = dfp5.getRadixDigits(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 25 + "'", int7 == 25); }
public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfp3.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp5 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp6 = dfp3.divide(dfp5); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); }
public void test104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test104"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp4 = dfp2.ceil(); java.lang.String str5 = dfp4.dfp2string(); java.lang.String str6 = dfp4.dfp2string(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "3." + "'", str5, "3."); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); }
public void test105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test105"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp10.align(0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp10.divide(dfp21); org.apache.commons.math3.dfp.Dfp dfp26 = dfp10.power10((int) (byte) 2); org.apache.commons.math3.dfp.Dfp dfp29 = dfp10.newInstance((byte) 2, (byte) 0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); }
public void test106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test106"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); double double19 = dfp17.toDouble(); int int20 = dfp17.exp; org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = dfp17.newInstance(dfp29); org.apache.commons.math3.dfp.DfpField dfpField32 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField32.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp36 = dfp34.newInstance("0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667"); org.apache.commons.math3.dfp.Dfp dfp37 = org.apache.commons.math3.dfp.Dfp.copysign(dfp17, dfp36); org.apache.commons.math3.dfp.DfpField dfpField39 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField39.getLn10(); int int41 = dfp40.log10K(); org.apache.commons.math3.dfp.DfpField dfpField43 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField43.getLn10(); int int45 = dfp44.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode46 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp47 = dfp44.trunc(roundingMode46); java.lang.String str48 = dfp47.toString(); org.apache.commons.math3.dfp.Dfp dfp49 = dfp40.divide(dfp47); org.apache.commons.math3.dfp.DfpField dfpField50 = dfp40.getField(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp36.add(dfp40); org.apache.commons.math3.dfp.Dfp dfp52 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp53 = dfp36.nextAfter(dfp52); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertTrue("'" + roundingMode46 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode46.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "3." + "'", str48, "3."); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfpField50); org.junit.Assert.assertNotNull(dfp51); }
public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn5(); dfpField1.setIEEEFlagsBits((int) (byte) 2); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp((byte) 3, (byte) -1); dfpField1.setIEEEFlags(9); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp7); }
public void test108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test108"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); int int3 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (double) '4'); int int6 = dfp5.classify(); org.apache.commons.math3.dfp.Dfp dfp7 = dfp5.rint(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(dfp7); }
public void test109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test109"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.multiply(2); org.apache.commons.math3.dfp.Dfp dfp12 = dfp8.newInstance("2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598"); boolean boolean13 = dfp8.isZero(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test110"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); boolean boolean14 = dfp13.negativeOrNull(); int int15 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField17.getTwo(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp13.add(dfp19); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField22.getTwo(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField22.getOne(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField22.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField22.newDfp(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp20.add(dfp28); org.apache.commons.math3.dfp.Dfp dfp30 = dfp10.nextAfter(dfp20); dfp30.exp = 0; org.apache.commons.math3.dfp.DfpField dfpField34 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField34.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray36 = dfpField34.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField34.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField34.getOne(); org.apache.commons.math3.dfp.Dfp dfp40 = dfp30.newInstance(dfp39); byte byte41 = dfp39.nans; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfpArray36); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertTrue("'" + byte41 + "' != '" + (byte) 0 + "'", byte41 == (byte) 0); }
public void test111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test111"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField6 = dfp5.getField(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField10, 16); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField14.getOne(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField14.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField14.newDfp(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField14.getZero(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp5.dotrap(10000, "", dfp12, dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp22.ceil(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfpField6); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); }
public void test112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test112"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); }
public void test113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test113"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(8); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); int int15 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); java.lang.String str22 = dfp21.toString(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp14.divide(dfp21); boolean boolean24 = dfp11.greaterThan(dfp14); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getLn10(); int int30 = dfp29.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode31 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp32 = dfp29.trunc(roundingMode31); org.apache.commons.math3.dfp.Dfp dfp34 = dfp29.power10((int) (short) -1); dfp29.shiftLeft(); boolean boolean36 = dfp29.strictlyNegative(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getLn10(); int int40 = dfp39.log10K(); org.apache.commons.math3.dfp.DfpField dfpField42 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField42.getLn10(); int int44 = dfp43.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode45 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp46 = dfp43.trunc(roundingMode45); java.lang.String str47 = dfp46.toString(); org.apache.commons.math3.dfp.Dfp dfp48 = dfp39.divide(dfp46); boolean boolean50 = dfp46.equals((java.lang.Object) 0.0d); org.apache.commons.math3.dfp.Dfp dfp51 = dfp29.divide(dfp46); org.apache.commons.math3.dfp.DfpField dfpField53 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField53.getLn10(); int int55 = dfp54.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode56 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp57 = dfp54.trunc(roundingMode56); org.apache.commons.math3.dfp.Dfp dfp59 = dfp54.power10((int) (short) -1); dfp54.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp62 = dfp54.newInstance(1.0d); int int64 = dfp62.align(0); org.apache.commons.math3.dfp.DfpField dfpField66 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp67 = dfpField66.getLn10(); boolean boolean68 = dfp67.negativeOrNull(); int int69 = dfp67.log10K(); org.apache.commons.math3.dfp.DfpField dfpField71 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp72 = dfpField71.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp73 = dfpField71.getTwo(); org.apache.commons.math3.dfp.Dfp dfp74 = dfp67.add(dfp73); org.apache.commons.math3.dfp.Dfp dfp75 = dfp73.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp76 = dfp62.divide(dfp73); org.apache.commons.math3.dfp.DfpField dfpField78 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp79 = dfpField78.getLn10(); int int80 = dfp79.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode81 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp82 = dfp79.trunc(roundingMode81); org.apache.commons.math3.dfp.Dfp dfp84 = dfp82.divide(10); org.apache.commons.math3.dfp.Dfp dfp85 = dfp84.getZero(); org.apache.commons.math3.dfp.Dfp dfp86 = dfp76.add(dfp85); org.apache.commons.math3.dfp.DfpField dfpField88 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp89 = dfpField88.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray90 = dfpField88.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp92 = dfpField88.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp93 = dfpField88.getOne(); org.apache.commons.math3.dfp.Dfp dfp94 = dfp93.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp95 = dfp11.trap(2147483647, "0.0e0", dfp51, dfp85, dfp94); org.apache.commons.math3.dfp.Dfp dfp96 = dfp51.getOne(); double[] doubleArray97 = dfp51.toSplitDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3." + "'", str22, "3."); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode31.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertTrue("'" + roundingMode45 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode45.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "3." + "'", str47, "3."); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertTrue("'" + roundingMode56 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode56.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertNotNull(dfp79); org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0); org.junit.Assert.assertTrue("'" + roundingMode81 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode81.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp84); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertNotNull(dfp89); org.junit.Assert.assertNotNull(dfpArray90); org.junit.Assert.assertNotNull(dfp92); org.junit.Assert.assertNotNull(dfp93); org.junit.Assert.assertNotNull(dfp94); org.junit.Assert.assertNotNull(dfp95); org.junit.Assert.assertNotNull(dfp96); org.junit.Assert.assertNotNull(doubleArray97); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[0.10086168348789215, 1.4176789743793758E-8]"); }
public void test114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test114"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn5(); org.junit.Assert.assertNotNull(dfp2); }
public void test115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test115"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getE(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField21.newDfp((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); int int29 = dfp27.log10K(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField31.getTwo(); org.apache.commons.math3.dfp.Dfp dfp34 = dfp27.add(dfp33); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField36.getOne(); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField36.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField36.newDfp(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp34.add(dfp42); double double44 = dfp42.toDouble(); int int45 = dfp42.exp; org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getLn10(); boolean boolean49 = dfp48.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getLn10(); boolean boolean53 = dfp52.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp48.multiply(dfp52); org.apache.commons.math3.dfp.Dfp dfp55 = dfp42.newInstance(dfp54); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField56 = dfp42.getField(); org.apache.commons.math3.dfp.DfpField dfpField58 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField58.getLn10(); boolean boolean60 = dfp59.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField62 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField62.getLn10(); boolean boolean64 = dfp63.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp65 = dfp59.multiply(dfp63); org.apache.commons.math3.dfp.DfpField dfpField67 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField67.getLn10(); int int69 = dfp68.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode70 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp71 = dfp68.trunc(roundingMode70); org.apache.commons.math3.dfp.Dfp dfp73 = dfp71.divide(10); org.apache.commons.math3.dfp.DfpField dfpField75 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField75.getLn10(); boolean boolean77 = dfp76.negativeOrNull(); int int78 = dfp76.log10K(); org.apache.commons.math3.dfp.DfpField dfpField80 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp81 = dfpField80.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp82 = dfpField80.getTwo(); org.apache.commons.math3.dfp.Dfp dfp83 = dfp76.add(dfp82); boolean boolean84 = dfp82.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp85 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp59, dfp73, dfp82); org.apache.commons.math3.dfp.Dfp dfp86 = dfp17.trap(10000, "3.", dfp24, dfp42, dfp85); org.apache.commons.math3.dfp.Dfp dfp88 = dfp42.newInstance("3."); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfpField56); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0); org.junit.Assert.assertTrue("'" + roundingMode70 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode70.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp83); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertNotNull(dfp88); }
public void test116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test116"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp5.multiply((int) (byte) 100); java.lang.String str9 = dfp5.dfp2string(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3." + "'", str9, "3."); }
public void test117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test117"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); boolean boolean10 = dfp8.isInfinite(); java.lang.String str11 = dfp8.toString(); org.apache.commons.math3.dfp.DfpField dfpField12 = dfp8.getField(); org.apache.commons.math3.dfp.Dfp dfp14 = new org.apache.commons.math3.dfp.Dfp(dfpField12, 0L); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField12.getLn5(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2." + "'", str11, "2."); org.junit.Assert.assertNotNull(dfpField12); org.junit.Assert.assertNotNull(dfp15); }
public void test118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test118"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp[] dfpArray4 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp7 = dfp5.multiply((int) (byte) 1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfpArray4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); }
public void test119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test119"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); dfpField1.setIEEEFlags((int) (short) 0); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getSqr3Reciprocal(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); }
public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-32767)); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getLn10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp6); }
public void test121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test121"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); int int5 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField7.getTwo(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField7.getOne(); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField7, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.nextAfter(dfp12); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); int int17 = dfp16.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode18 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp19 = dfp16.trunc(roundingMode18); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField20 = dfp19.getField(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp26 = new org.apache.commons.math3.dfp.Dfp(dfpField24, 16); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField28.getOne(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField28.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField28.newDfp(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField28.getZero(); org.apache.commons.math3.dfp.Dfp dfp36 = dfp19.dotrap(10000, "", dfp26, dfp35); org.apache.commons.math3.dfp.Dfp dfp37 = dfp2.add(dfp19); dfp19.exp = (short) 100; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode18.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfpField20); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); }
public void test122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test122"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp7 = dfp6.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp7.getTwo(); boolean boolean9 = dfp7.strictlyPositive(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true); }
public void test123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test123"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); dfpField1.clearIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); }
public void test124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test124"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp[] dfpArray2 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getOne(); int int4 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getZero(); org.junit.Assert.assertNotNull(dfpArray2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16); org.junit.Assert.assertNotNull(dfp5); }
public void test125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test125"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-8)); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp12 = dfp10.negate(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp15.multiply(dfp19); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); boolean boolean25 = dfp24.negativeOrNull(); int int26 = dfp24.log10K(); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp24.add(dfp30); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); int int36 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField38.getTwo(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp34.add(dfp40); org.apache.commons.math3.dfp.Dfp dfp42 = dfp30.divide(dfp34); double[] doubleArray43 = dfp34.toSplitDouble(); org.apache.commons.math3.dfp.Dfp dfp44 = dfp19.multiply(dfp34); org.apache.commons.math3.dfp.Dfp dfp45 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp7, dfp12, dfp44); boolean boolean46 = dfp12.strictlyNegative(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[2.302584648132324, 4.4486172146526797E-7]"); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); }
public void test126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test126"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp7 = dfp6.reciprocal(); int int8 = dfp7.log10K(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); }
public void test127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test127"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.Dfp[] dfpArray5 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp[] dfpArray6 = dfpField1.getLn2Split(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray5); org.junit.Assert.assertNotNull(dfpArray6); org.junit.Assert.assertNotNull(dfp7); }
public void test128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test128"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.multiply((int) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); int int14 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode15 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp16 = dfp13.trunc(roundingMode15); java.lang.String str17 = dfp16.toString(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp16.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp21 = dfp19.newInstance((int) 'a'); byte byte22 = dfp21.nans; org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.ceil(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getTwo(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField35.getOne(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField35.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField35.newDfp(); org.apache.commons.math3.dfp.Dfp dfp42 = dfp33.add(dfp41); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn10(); int int46 = dfp45.log10K(); boolean boolean47 = dfp33.greaterThan(dfp45); org.apache.commons.math3.dfp.Dfp dfp49 = dfp33.newInstance((double) 1); org.apache.commons.math3.dfp.Dfp dfp50 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp10, dfp21, dfp49); org.apache.commons.math3.dfp.DfpField dfpField52 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField52.getLn10(); boolean boolean54 = dfp53.negativeOrNull(); int int55 = dfp53.log10K(); org.apache.commons.math3.dfp.DfpField dfpField57 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField57.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField57.getTwo(); org.apache.commons.math3.dfp.Dfp dfp60 = dfp53.add(dfp59); org.apache.commons.math3.dfp.Dfp dfp61 = dfp59.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField63 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp64 = dfpField63.getLn10(); boolean boolean65 = dfp64.negativeOrNull(); int int66 = dfp64.log10K(); org.apache.commons.math3.dfp.DfpField dfpField68 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp69 = dfpField68.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp70 = dfpField68.getTwo(); org.apache.commons.math3.dfp.Dfp dfp71 = dfp64.add(dfp70); org.apache.commons.math3.dfp.DfpField dfpField73 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp74 = dfpField73.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp75 = dfpField73.getTwo(); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField73.getOne(); org.apache.commons.math3.dfp.Dfp dfp78 = dfpField73.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp79 = dfpField73.newDfp(); org.apache.commons.math3.dfp.Dfp dfp80 = dfp71.add(dfp79); org.apache.commons.math3.dfp.Dfp dfp81 = dfp61.nextAfter(dfp71); org.apache.commons.math3.dfp.Dfp dfp82 = dfp50.remainder(dfp61); boolean boolean83 = dfp50.positiveOrNull(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertTrue("'" + roundingMode15 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode15.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3." + "'", str17, "3."); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 0 + "'", byte22 == (byte) 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertNotNull(dfp79); org.junit.Assert.assertNotNull(dfp80); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); }
public void test129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test129"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); int int8 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp10 = dfp7.trunc(roundingMode9); java.lang.String str11 = dfp10.toString(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp15 = dfp13.newInstance((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField1.newDfp(dfp13); org.apache.commons.math3.dfp.Dfp dfp18 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) -1); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode9.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3." + "'", str11, "3."); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); }
public void test130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test130"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); double double19 = dfp17.toDouble(); int int20 = dfp17.exp; org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = dfp17.newInstance(dfp29); int int32 = dfp30.round(9); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16); }
public void test131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test131"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp2.round((int) (byte) 0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField24.getTwo(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField24.getOne(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField24.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField24.newDfp(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp22.add(dfp30); double double32 = dfp30.toDouble(); int int33 = dfp30.exp; org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getLn10(); boolean boolean37 = dfp36.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField39 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField39.getLn10(); boolean boolean41 = dfp40.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp42 = dfp36.multiply(dfp40); org.apache.commons.math3.dfp.Dfp dfp43 = dfp30.newInstance(dfp42); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField45.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp49 = dfp47.newInstance("0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667"); org.apache.commons.math3.dfp.Dfp dfp50 = org.apache.commons.math3.dfp.Dfp.copysign(dfp30, dfp49); boolean boolean51 = dfp2.greaterThan(dfp30); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true); }
public void test132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test132"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); int int7 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp9 = dfp6.trunc(roundingMode8); java.lang.String str10 = dfp9.toString(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(dfp9); org.apache.commons.math3.dfp.DfpField dfpField12 = dfp2.getField(); double[] doubleArray13 = dfp2.toSplitDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "3." + "'", str10, "3."); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfpField12); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[2.302584648132324, 4.4486172146526797E-7]"); }
public void test133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test133"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 2); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) '4'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getZero(); int int7 = dfpField1.getRadixDigits(); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 25 + "'", int7 == 25); }
public void test134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test134"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); int int8 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField10.getTwo(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp6.add(dfp12); org.apache.commons.math3.dfp.Dfp dfp14 = dfp12.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); int int19 = dfp17.log10K(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp17.add(dfp23); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField26.getTwo(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField26.getOne(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField26.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField26.newDfp(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp24.add(dfp32); org.apache.commons.math3.dfp.Dfp dfp34 = dfp14.nextAfter(dfp24); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField35 = dfp24.getField(); int[] intArray36 = dfp24.mant; boolean boolean37 = dfp2.unequal(dfp24); int int38 = dfp24.getRadixDigits(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfpField35); org.junit.Assert.assertNotNull(intArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[9598, 508, 9972, 235, 5248, 6773, 2609, 6757, 9009, 3327, 7603, 7729, 8628, 148, 6011, 4207, 8436, 4546, 7991, 8401, 456, 2994, 8509, 3025, 4]"); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 25 + "'", int38 == 25); }
public void test135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test135"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); int int11 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode12 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.trunc(roundingMode12); java.lang.String str14 = dfp13.toString(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField1.newDfp(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField1.getSqr2Reciprocal(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode12.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "3." + "'", str14, "3."); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); }
public void test136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test136"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.multiply((int) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); int int14 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode15 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp16 = dfp13.trunc(roundingMode15); java.lang.String str17 = dfp16.toString(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp16.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp21 = dfp19.newInstance((int) 'a'); byte byte22 = dfp21.nans; org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.ceil(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getTwo(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField35.getOne(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField35.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField35.newDfp(); org.apache.commons.math3.dfp.Dfp dfp42 = dfp33.add(dfp41); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn10(); int int46 = dfp45.log10K(); boolean boolean47 = dfp33.greaterThan(dfp45); org.apache.commons.math3.dfp.Dfp dfp49 = dfp33.newInstance((double) 1); org.apache.commons.math3.dfp.Dfp dfp50 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp10, dfp21, dfp49); org.apache.commons.math3.dfp.DfpField dfpField52 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField52.getLn10(); boolean boolean54 = dfp53.negativeOrNull(); int int55 = dfp53.log10K(); org.apache.commons.math3.dfp.DfpField dfpField57 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField57.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField57.getTwo(); org.apache.commons.math3.dfp.Dfp dfp60 = dfp53.add(dfp59); org.apache.commons.math3.dfp.Dfp dfp61 = dfp59.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField63 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp64 = dfpField63.getLn10(); boolean boolean65 = dfp64.negativeOrNull(); int int66 = dfp64.log10K(); org.apache.commons.math3.dfp.DfpField dfpField68 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp69 = dfpField68.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp70 = dfpField68.getTwo(); org.apache.commons.math3.dfp.Dfp dfp71 = dfp64.add(dfp70); org.apache.commons.math3.dfp.DfpField dfpField73 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp74 = dfpField73.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp75 = dfpField73.getTwo(); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField73.getOne(); org.apache.commons.math3.dfp.Dfp dfp78 = dfpField73.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp79 = dfpField73.newDfp(); org.apache.commons.math3.dfp.Dfp dfp80 = dfp71.add(dfp79); org.apache.commons.math3.dfp.Dfp dfp81 = dfp61.nextAfter(dfp71); org.apache.commons.math3.dfp.Dfp dfp82 = dfp50.remainder(dfp61); org.apache.commons.math3.dfp.Dfp dfp84 = dfp61.newInstance(0L); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertTrue("'" + roundingMode15 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode15.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3." + "'", str17, "3."); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 0 + "'", byte22 == (byte) 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertNotNull(dfp79); org.junit.Assert.assertNotNull(dfp80); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp84); }
public void test137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test137"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); boolean boolean10 = dfp9.negativeOrNull(); int int11 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField13.getTwo(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp9.add(dfp15); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.divide(8); boolean boolean19 = dfp9.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp5.remainder(dfp9); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); int int33 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode34 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp35 = dfp32.trunc(roundingMode34); org.apache.commons.math3.dfp.Dfp dfp37 = dfp35.divide(10); org.apache.commons.math3.dfp.DfpField dfpField39 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField39.getLn10(); boolean boolean41 = dfp40.negativeOrNull(); int int42 = dfp40.log10K(); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField44.getTwo(); org.apache.commons.math3.dfp.Dfp dfp47 = dfp40.add(dfp46); boolean boolean48 = dfp46.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp49 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp23, dfp37, dfp46); boolean boolean50 = dfp49.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp52 = dfp49.multiply((int) (short) 0); org.apache.commons.math3.dfp.Dfp dfp53 = dfp5.newInstance(dfp52); int int55 = dfp5.complement(100); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertTrue("'" + roundingMode34 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode34.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9900 + "'", int55 == 9900); }
public void test138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test138"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp7 = dfp6.getTwo(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); }
public void test139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test139"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp5.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.newInstance((int) 'a'); byte byte11 = dfp10.nans; boolean boolean12 = dfp10.isNaN(); int int13 = dfp10.log10(); int int15 = dfp10.complement((-4)); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4); }
public void test140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test140"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); boolean boolean14 = dfp13.negativeOrNull(); int int15 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField17.getTwo(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp13.add(dfp19); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField22.getTwo(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField22.getOne(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField22.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField22.newDfp(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp20.add(dfp28); org.apache.commons.math3.dfp.Dfp dfp30 = dfp10.nextAfter(dfp20); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField31 = dfp20.getField(); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); int int36 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField38.getTwo(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp34.add(dfp40); org.apache.commons.math3.dfp.Dfp dfp42 = dfp40.reciprocal(); int int44 = dfp40.round((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp47 = dfp40.newInstance((byte) -1, (byte) 100); boolean boolean48 = dfp20.lessThan(dfp47); org.apache.commons.math3.dfp.Dfp dfp49 = dfp47.getTwo(); int int51 = dfp47.align(0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfpField31); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 16 + "'", int44 == 16); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); }
public void test141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test141"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp((long) 0); int[] intArray4 = dfp3.mant; dfp3.nans = (byte) 10; org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(intArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 0, 0, 0]"); }
public void test142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test142"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); int int19 = dfp17.exp; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); }
public void test143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test143"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); boolean boolean20 = dfp18.isInfinite(); java.lang.String str21 = dfp18.toString(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp18.newInstance((byte) 3, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp26 = dfp24.newInstance(0.0d); boolean boolean27 = dfp9.greaterThan(dfp26); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfpArray8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2." + "'", str21, "2."); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); }
public void test144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test144"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); org.apache.commons.math3.dfp.Dfp dfp21 = dfp8.floor(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray25 = dfpField23.getESplit(); org.apache.commons.math3.dfp.Dfp dfp27 = new org.apache.commons.math3.dfp.Dfp(dfpField23, (-32767)); org.apache.commons.math3.dfp.Dfp dfp29 = dfp27.newInstance("hi!"); boolean boolean30 = dfp8.equals((java.lang.Object) dfp27); java.lang.Class<?> wildcardClass31 = dfp8.getClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfpArray25); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(wildcardClass31); }
public void test145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test145"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = dfpField1.getRoundingMode(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode9.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); }
public void test146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test146"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getLn5(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); }
public void test147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test147"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); dfp10.shiftLeft(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); }
public void test148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test148"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); }
public void test149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test149"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp10.align(0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp10.divide(dfp21); org.apache.commons.math3.dfp.Dfp dfp26 = dfp10.power10((int) '#'); org.apache.commons.math3.dfp.Dfp dfp27 = dfp10.getTwo(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); }
public void test150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test150"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.Dfp dfp17 = dfp16.getZero(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField1.newDfp(dfp16); dfp18.shiftRight(); int int21 = dfp18.round((int) '#'); org.apache.commons.math3.dfp.Dfp dfp23 = dfp18.newInstance(0L); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16); org.junit.Assert.assertNotNull(dfp23); }
public void test151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test151"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp5.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp9 = dfp5.abs(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); int int19 = dfp17.log10K(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp17.add(dfp23); org.apache.commons.math3.dfp.Dfp dfp26 = dfp24.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp27 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp14, dfp24); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getE(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField31.newDfp((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getLn10(); boolean boolean38 = dfp37.negativeOrNull(); int int39 = dfp37.log10K(); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField41.getTwo(); org.apache.commons.math3.dfp.Dfp dfp44 = dfp37.add(dfp43); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField46.getTwo(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField46.getOne(); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField46.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField46.newDfp(); org.apache.commons.math3.dfp.Dfp dfp53 = dfp44.add(dfp52); double double54 = dfp52.toDouble(); int int55 = dfp52.exp; org.apache.commons.math3.dfp.DfpField dfpField57 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField57.getLn10(); boolean boolean59 = dfp58.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField61 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp62 = dfpField61.getLn10(); boolean boolean63 = dfp62.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp58.multiply(dfp62); org.apache.commons.math3.dfp.Dfp dfp65 = dfp52.newInstance(dfp64); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField66 = dfp52.getField(); org.apache.commons.math3.dfp.DfpField dfpField68 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp69 = dfpField68.getLn10(); boolean boolean70 = dfp69.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField72 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp73 = dfpField72.getLn10(); boolean boolean74 = dfp73.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp75 = dfp69.multiply(dfp73); org.apache.commons.math3.dfp.DfpField dfpField77 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp78 = dfpField77.getLn10(); int int79 = dfp78.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode80 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp81 = dfp78.trunc(roundingMode80); org.apache.commons.math3.dfp.Dfp dfp83 = dfp81.divide(10); org.apache.commons.math3.dfp.DfpField dfpField85 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp86 = dfpField85.getLn10(); boolean boolean87 = dfp86.negativeOrNull(); int int88 = dfp86.log10K(); org.apache.commons.math3.dfp.DfpField dfpField90 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp91 = dfpField90.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp92 = dfpField90.getTwo(); org.apache.commons.math3.dfp.Dfp dfp93 = dfp86.add(dfp92); boolean boolean94 = dfp92.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp95 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp69, dfp83, dfp92); org.apache.commons.math3.dfp.Dfp dfp96 = dfp27.trap(10000, "3.", dfp34, dfp52, dfp95); org.apache.commons.math3.dfp.Dfp dfp97 = dfp5.nextAfter(dfp95); org.apache.commons.math3.dfp.Dfp dfp99 = dfp5.newInstance((byte) 0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfpField66); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0); org.junit.Assert.assertTrue("'" + roundingMode80 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode80.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp83); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0); org.junit.Assert.assertNotNull(dfp91); org.junit.Assert.assertNotNull(dfp92); org.junit.Assert.assertNotNull(dfp93); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); org.junit.Assert.assertNotNull(dfp95); org.junit.Assert.assertNotNull(dfp96); org.junit.Assert.assertNotNull(dfp97); org.junit.Assert.assertNotNull(dfp99); }
public void test152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test152"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp(); boolean boolean5 = dfp4.isZero(); int int7 = dfp4.complement(2); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9998 + "'", int7 == 9998); }
public void test153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test153"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getZero(); int int9 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.newDfp((long) 32760); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp14 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 1); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField1.getE(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 25 + "'", int9 == 25); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); }
public void test154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test154"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.Dfp dfp18 = new org.apache.commons.math3.dfp.Dfp(dfp4); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField20.getOne(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField20.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField20.getLn10(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp30 = dfp27.newInstance((byte) 0, (byte) 10); org.apache.commons.math3.dfp.Dfp dfp31 = dfp18.multiply(dfp30); int int32 = dfp30.intValue(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp30.sqrt(); org.apache.commons.math3.dfp.Dfp dfp34 = dfp30.abs(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); }
public void test155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test155"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField4 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField4.getLn10(); boolean boolean6 = dfp5.negativeOrNull(); int int7 = dfp5.log10K(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField9.getTwo(); org.apache.commons.math3.dfp.Dfp dfp12 = dfp5.add(dfp11); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.subtract(dfp12); org.apache.commons.math3.dfp.Dfp dfp16 = dfp2.newInstance((byte) 1, (byte) 0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); }
public void test156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test156"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.Dfp dfp18 = dfp4.rint(); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.Dfp dfp29 = dfp27.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); boolean boolean33 = dfp32.negativeOrNull(); int int34 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfp32.add(dfp38); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField41.getTwo(); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField41.getOne(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField41.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField41.newDfp(); org.apache.commons.math3.dfp.Dfp dfp48 = dfp39.add(dfp47); org.apache.commons.math3.dfp.Dfp dfp49 = dfp29.nextAfter(dfp39); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getLn10(); boolean boolean53 = dfp52.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField55 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField55.getLn10(); boolean boolean57 = dfp56.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp58 = dfp52.multiply(dfp56); org.apache.commons.math3.dfp.DfpField dfpField60 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp61 = dfpField60.getLn10(); int int62 = dfp61.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode63 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp64 = dfp61.trunc(roundingMode63); org.apache.commons.math3.dfp.Dfp dfp66 = dfp64.divide(10); org.apache.commons.math3.dfp.DfpField dfpField68 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp69 = dfpField68.getLn10(); boolean boolean70 = dfp69.negativeOrNull(); int int71 = dfp69.log10K(); org.apache.commons.math3.dfp.DfpField dfpField73 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp74 = dfpField73.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp75 = dfpField73.getTwo(); org.apache.commons.math3.dfp.Dfp dfp76 = dfp69.add(dfp75); boolean boolean77 = dfp75.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp78 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp52, dfp66, dfp75); org.apache.commons.math3.dfp.DfpField dfpField80 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp81 = dfpField80.getLn10(); int int82 = dfp81.log10K(); boolean boolean83 = dfp81.isZero(); boolean boolean84 = dfp78.lessThan(dfp81); dfp78.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp86 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp4, dfp29, dfp78); dfp86.sign = (byte) 0; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0); org.junit.Assert.assertTrue("'" + roundingMode63 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode63.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp66); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true); org.junit.Assert.assertNotNull(dfp86); }
public void test157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test157"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (double) 10000); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); dfp6.sign = (byte) 0; boolean boolean10 = dfp3.greaterThan(dfp6); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test158"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.DfpField dfpField7 = dfp5.getField(); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField7.getLn2Split(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField7.getLn2(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfpField7); org.junit.Assert.assertNotNull(dfpArray8); org.junit.Assert.assertNotNull(dfp9); }
public void test159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test159"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); double double19 = dfp17.toDouble(); int int20 = dfp17.exp; org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = dfp17.newInstance(dfp29); org.apache.commons.math3.dfp.Dfp dfp31 = dfp30.negate(); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp[] dfpArray36 = dfpField35.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getOne(); org.apache.commons.math3.dfp.DfpField dfpField39 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField39.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField39.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn10(); boolean boolean46 = dfp45.negativeOrNull(); int int47 = dfp45.log10K(); org.apache.commons.math3.dfp.DfpField dfpField49 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp50 = dfpField49.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField49.getTwo(); org.apache.commons.math3.dfp.Dfp dfp52 = dfp45.add(dfp51); org.apache.commons.math3.dfp.Dfp dfp54 = dfp52.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp55 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp42, dfp52); org.apache.commons.math3.dfp.Dfp dfp56 = dfp42.rint(); org.apache.commons.math3.dfp.Dfp dfp57 = dfp56.abs(); org.apache.commons.math3.dfp.Dfp dfp58 = null; org.apache.commons.math3.dfp.Dfp dfp59 = dfp31.trap((int) (byte) 2, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e", dfp37, dfp56, dfp58); double double60 = dfp59.toDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfpArray36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 35.0d + "'", double60 == 35.0d); }
public void test160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test160"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp("hi!"); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass10 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp((double) 100); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.getSqr2(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField1.getSqr2Reciprocal(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(wildcardClass10); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); }
public void test161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test161"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfp3.reciprocal(); int int5 = dfp3.getRadixDigits(); byte byte6 = dfp3.sign; int int7 = dfp3.classify(); boolean boolean8 = dfp3.isInfinite(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25 + "'", int5 == 25); org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 1 + "'", byte6 == (byte) 1); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test162"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); int int8 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp10 = dfp7.trunc(roundingMode9); java.lang.String str11 = dfp10.toString(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp15 = dfp13.newInstance((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField1.newDfp(dfp13); org.apache.commons.math3.dfp.Dfp dfp17 = dfp16.getTwo(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode9.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3." + "'", str11, "3."); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); }
public void test163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test163"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getSqr2(); dfp12.nans = (byte) 100; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp12); }
public void test164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test164"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn5(); dfpField1.setIEEEFlagsBits((int) (byte) 2); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp((byte) 3, (byte) -1); dfpField1.clearIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); }
public void test165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test165"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.Dfp dfp18 = dfp4.rint(); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass22 = dfpField20.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField20.newDfp(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp23.negate(); boolean boolean25 = dfp18.unequal(dfp23); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(wildcardClass22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); }
public void test166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test166"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); org.apache.commons.math3.dfp.Dfp dfp21 = dfp8.newInstance(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp8.newInstance(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); }
public void test167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test167"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); int int8 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp10 = dfp7.trunc(roundingMode9); java.lang.String str11 = dfp10.toString(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp15 = dfp13.newInstance((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField1.newDfp(dfp13); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass17 = dfpField1.getRuntimeClass(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode9.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3." + "'", str11, "3."); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(wildcardClass17); }
public void test168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test168"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); int int5 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField7.getTwo(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField7.getOne(); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField7, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.nextAfter(dfp12); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); int int17 = dfp16.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode18 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp19 = dfp16.trunc(roundingMode18); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField20 = dfp19.getField(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp26 = new org.apache.commons.math3.dfp.Dfp(dfpField24, 16); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField28.getOne(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField28.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField28.newDfp(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField28.getZero(); org.apache.commons.math3.dfp.Dfp dfp36 = dfp19.dotrap(10000, "", dfp26, dfp35); org.apache.commons.math3.dfp.Dfp dfp37 = dfp2.add(dfp19); org.apache.commons.math3.dfp.Dfp dfp38 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp39 = dfp2.add(dfp38); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode18.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfpField20); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); }
public void test169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test169"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); int int10 = dfp8.round(2); org.apache.commons.math3.dfp.Dfp dfp11 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp12 = dfp8.divide(dfp11); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16); }
public void test170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test170"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.multiply((int) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); int int14 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode15 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp16 = dfp13.trunc(roundingMode15); java.lang.String str17 = dfp16.toString(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp16.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp21 = dfp19.newInstance((int) 'a'); byte byte22 = dfp21.nans; org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.ceil(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getTwo(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField35.getOne(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField35.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField35.newDfp(); org.apache.commons.math3.dfp.Dfp dfp42 = dfp33.add(dfp41); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn10(); int int46 = dfp45.log10K(); boolean boolean47 = dfp33.greaterThan(dfp45); org.apache.commons.math3.dfp.Dfp dfp49 = dfp33.newInstance((double) 1); org.apache.commons.math3.dfp.Dfp dfp50 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp10, dfp21, dfp49); org.apache.commons.math3.dfp.Dfp dfp51 = dfp10.getZero(); org.apache.commons.math3.dfp.DfpField dfpField53 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField53.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField53.getTwo(); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField53.getOne(); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField53.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp60 = new org.apache.commons.math3.dfp.Dfp(dfpField53, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp62 = dfp60.multiply(2); org.apache.commons.math3.dfp.Dfp dfp64 = dfp60.newInstance("2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598"); org.apache.commons.math3.dfp.Dfp dfp65 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp51, dfp60); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertTrue("'" + roundingMode15 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode15.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3." + "'", str17, "3."); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 0 + "'", byte22 == (byte) 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); }
public void test171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test171"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp[] dfpArray4 = dfpField1.getSqr2Split(); dfpField1.setIEEEFlagsBits((int) ' '); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getSqr2(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfpArray4); org.junit.Assert.assertNotNull(dfp7); }
public void test172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test172"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); boolean boolean10 = dfp8.isInfinite(); java.lang.String str11 = dfp8.toString(); org.apache.commons.math3.dfp.DfpField dfpField12 = dfp8.getField(); org.apache.commons.math3.dfp.Dfp dfp14 = new org.apache.commons.math3.dfp.Dfp(dfpField12, 0L); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField12.getZero(); dfpField12.setIEEEFlagsBits((-32767)); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2." + "'", str11, "2."); org.junit.Assert.assertNotNull(dfpField12); org.junit.Assert.assertNotNull(dfp15); }
public void test173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test173"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp8 = dfp6.newInstance((double) (-1)); java.lang.String str9 = dfp8.dfp2sci(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e" + "'", str9, "-1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e"); }
public void test174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test174"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp[] dfpArray2 = dfpField1.getLn2Split(); org.junit.Assert.assertNotNull(dfpArray2); }
public void test175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test175"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp4 = dfp2.ceil(); java.lang.String str5 = dfp4.dfp2string(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); int int9 = dfp8.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode10 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp11 = dfp8.trunc(roundingMode10); org.apache.commons.math3.dfp.Dfp dfp13 = dfp8.power10((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp15 = dfp8.multiply((int) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp16 = dfp8.newInstance(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); int int20 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode21 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp22 = dfp19.trunc(roundingMode21); java.lang.String str23 = dfp22.toString(); org.apache.commons.math3.dfp.Dfp dfp25 = dfp22.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp27 = dfp25.newInstance((int) 'a'); byte byte28 = dfp27.nans; org.apache.commons.math3.dfp.Dfp dfp29 = dfp27.ceil(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); boolean boolean33 = dfp32.negativeOrNull(); int int34 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfp32.add(dfp38); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField41.getTwo(); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField41.getOne(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField41.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField41.newDfp(); org.apache.commons.math3.dfp.Dfp dfp48 = dfp39.add(dfp47); org.apache.commons.math3.dfp.DfpField dfpField50 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField50.getLn10(); int int52 = dfp51.log10K(); boolean boolean53 = dfp39.greaterThan(dfp51); org.apache.commons.math3.dfp.Dfp dfp55 = dfp39.newInstance((double) 1); org.apache.commons.math3.dfp.Dfp dfp56 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp16, dfp27, dfp55); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode57 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN; org.apache.commons.math3.dfp.Dfp dfp58 = dfp55.trunc(roundingMode57); org.apache.commons.math3.dfp.Dfp dfp59 = dfp4.multiply(dfp55); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "3." + "'", str5, "3."); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + roundingMode10 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode10.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertTrue("'" + roundingMode21 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode21.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "3." + "'", str23, "3."); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 0 + "'", byte28 == (byte) 0); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertTrue("'" + roundingMode57 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode57.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp59); }
public void test176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test176"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); org.apache.commons.math3.dfp.Dfp dfp19 = dfp9.reciprocal(); dfp9.nans = (byte) 0; double[] doubleArray22 = dfp9.toSplitDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[4.302584648132324, 4.4486172146526797E-7]"); }
public void test177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test177"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField5 = dfp4.getField(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpField5); }
public void test178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test178"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp[] dfpArray6 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp10.add(dfp16); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); boolean boolean21 = dfp20.negativeOrNull(); int int22 = dfp20.log10K(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField24.getTwo(); org.apache.commons.math3.dfp.Dfp dfp27 = dfp20.add(dfp26); org.apache.commons.math3.dfp.Dfp dfp28 = dfp16.divide(dfp20); org.apache.commons.math3.dfp.Dfp dfp29 = dfp16.floor(); boolean boolean30 = dfp16.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp7.remainder(dfp16); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField37 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField37.getLn10(); boolean boolean39 = dfp38.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp40 = dfp34.multiply(dfp38); org.apache.commons.math3.dfp.DfpField dfpField42 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField42.getLn10(); int int44 = dfp43.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode45 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp46 = dfp43.trunc(roundingMode45); org.apache.commons.math3.dfp.Dfp dfp48 = dfp46.divide(10); org.apache.commons.math3.dfp.DfpField dfpField50 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField50.getLn10(); boolean boolean52 = dfp51.negativeOrNull(); int int53 = dfp51.log10K(); org.apache.commons.math3.dfp.DfpField dfpField55 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField55.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField55.getTwo(); org.apache.commons.math3.dfp.Dfp dfp58 = dfp51.add(dfp57); boolean boolean59 = dfp57.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp60 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp34, dfp48, dfp57); org.apache.commons.math3.dfp.DfpField dfpField62 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField62.getLn10(); int int64 = dfp63.log10K(); boolean boolean65 = dfp63.isZero(); boolean boolean66 = dfp60.lessThan(dfp63); org.apache.commons.math3.dfp.Dfp dfp67 = dfp16.multiply(dfp63); boolean boolean68 = dfp63.strictlyPositive(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfpArray6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertTrue("'" + roundingMode45 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode45.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true); }
public void test179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test179"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp6.newInstance((byte) 100); org.apache.commons.math3.dfp.Dfp dfp9 = dfp8.newInstance(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); }
public void test180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test180"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 3); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.newInstance((byte) 1); int int11 = dfp8.log10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); }
public void test181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test181"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp5.divide(10); org.apache.commons.math3.dfp.Dfp dfp8 = dfp7.getZero(); int int9 = dfp7.getRadixDigits(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 25 + "'", int9 == 25); }
public void test182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test182"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp((long) 0); org.apache.commons.math3.dfp.Dfp[] dfpArray4 = dfpField1.getLn5Split(); org.apache.commons.math3.dfp.Dfp[] dfpArray5 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getSqr2(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfpArray4); org.junit.Assert.assertNotNull(dfpArray5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); }
public void test183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test183"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField(25); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getZero(); org.junit.Assert.assertNotNull(dfp2); }
public void test184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test184"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.Dfp dfp18 = dfp4.rint(); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.Dfp dfp29 = dfp27.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); boolean boolean33 = dfp32.negativeOrNull(); int int34 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfp32.add(dfp38); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField41.getTwo(); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField41.getOne(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField41.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField41.newDfp(); org.apache.commons.math3.dfp.Dfp dfp48 = dfp39.add(dfp47); org.apache.commons.math3.dfp.Dfp dfp49 = dfp29.nextAfter(dfp39); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getLn10(); boolean boolean53 = dfp52.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField55 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField55.getLn10(); boolean boolean57 = dfp56.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp58 = dfp52.multiply(dfp56); org.apache.commons.math3.dfp.DfpField dfpField60 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp61 = dfpField60.getLn10(); int int62 = dfp61.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode63 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp64 = dfp61.trunc(roundingMode63); org.apache.commons.math3.dfp.Dfp dfp66 = dfp64.divide(10); org.apache.commons.math3.dfp.DfpField dfpField68 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp69 = dfpField68.getLn10(); boolean boolean70 = dfp69.negativeOrNull(); int int71 = dfp69.log10K(); org.apache.commons.math3.dfp.DfpField dfpField73 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp74 = dfpField73.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp75 = dfpField73.getTwo(); org.apache.commons.math3.dfp.Dfp dfp76 = dfp69.add(dfp75); boolean boolean77 = dfp75.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp78 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp52, dfp66, dfp75); org.apache.commons.math3.dfp.DfpField dfpField80 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp81 = dfpField80.getLn10(); int int82 = dfp81.log10K(); boolean boolean83 = dfp81.isZero(); boolean boolean84 = dfp78.lessThan(dfp81); dfp78.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp86 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp4, dfp29, dfp78); org.apache.commons.math3.dfp.Dfp dfp87 = dfp86.getOne(); org.apache.commons.math3.dfp.Dfp dfp88 = dfp86.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp89 = dfp86.abs(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0); org.junit.Assert.assertTrue("'" + roundingMode63 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode63.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp66); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertNotNull(dfp87); org.junit.Assert.assertNotNull(dfp88); org.junit.Assert.assertNotNull(dfp89); }
public void test185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test185"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp11 = dfp9.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp14 = null; org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.newDfp((long) 0); org.apache.commons.math3.dfp.Dfp[] dfpArray19 = dfpField16.getLn5Split(); org.apache.commons.math3.dfp.Dfp[] dfpArray20 = dfpField16.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField16.newDfp(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp11.dotrap(9998, "", dfp14, dfp21); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfpArray19); org.junit.Assert.assertNotNull(dfpArray20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); }
public void test186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test186"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.multiply((int) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.abs(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); }
public void test187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test187"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); boolean boolean12 = dfp11.negativeOrNull(); int int13 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField15.getTwo(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp11.add(dfp17); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.Dfp dfp29 = dfp17.divide(dfp21); double[] doubleArray30 = dfp21.toSplitDouble(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp6.multiply(dfp21); org.apache.commons.math3.dfp.Dfp dfp32 = dfp6.negate(); int int33 = dfp32.classify(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[2.302584648132324, 4.4486172146526797E-7]"); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); }
public void test188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test188"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; dfpField1.setRoundingMode(roundingMode4); int int6 = dfpField1.getIEEEFlags(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16); }
public void test189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test189"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp5.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.newInstance((int) 'a'); byte byte11 = dfp10.nans; org.apache.commons.math3.dfp.Dfp dfp12 = dfp10.ceil(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp10.power10K((-32767)); // The following exception was thrown during execution in test generation try { java.lang.String str15 = dfp14.dfp2string(); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 120"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); }
public void test190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test190"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); int int7 = dfp6.intValue(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getE(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField9.newDfp((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField9.getOne(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); int int17 = dfp16.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode18 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp19 = dfp16.trunc(roundingMode18); org.apache.commons.math3.dfp.Dfp dfp21 = dfp19.divide(10); org.apache.commons.math3.dfp.Dfp dfp22 = dfp21.getZero(); boolean boolean23 = dfp21.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp21.floor(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField9.newDfp(dfp24); org.apache.commons.math3.dfp.Dfp dfp26 = dfp6.newInstance(dfp25); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getLn10(); int int30 = dfp29.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode31 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp32 = dfp29.trunc(roundingMode31); org.apache.commons.math3.dfp.Dfp dfp34 = dfp32.divide(10); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getLn10(); boolean boolean38 = dfp37.negativeOrNull(); int int39 = dfp37.log10K(); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField41.getTwo(); org.apache.commons.math3.dfp.Dfp dfp44 = dfp37.add(dfp43); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getLn10(); boolean boolean48 = dfp47.negativeOrNull(); int int49 = dfp47.log10K(); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField51.getTwo(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp47.add(dfp53); org.apache.commons.math3.dfp.Dfp dfp55 = dfp43.divide(dfp47); int int56 = dfp43.getRadixDigits(); int int57 = dfp43.intValue(); org.apache.commons.math3.dfp.DfpField dfpField59 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField59.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp61 = dfpField59.getTwo(); org.apache.commons.math3.dfp.Dfp dfp62 = dfpField59.getOne(); org.apache.commons.math3.dfp.Dfp dfp64 = dfpField59.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp66 = new org.apache.commons.math3.dfp.Dfp(dfpField59, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp67 = dfp43.divide(dfp66); org.apache.commons.math3.dfp.Dfp dfp68 = dfp34.nextAfter(dfp67); org.apache.commons.math3.dfp.Dfp dfp69 = dfp25.add(dfp68); org.apache.commons.math3.dfp.DfpField dfpField71 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp72 = dfpField71.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray73 = dfpField71.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp74 = dfpField71.getZero(); org.apache.commons.math3.dfp.Dfp dfp77 = new org.apache.commons.math3.dfp.Dfp(dfpField71, (byte) -1, (byte) -1); dfp77.exp = 10; org.apache.commons.math3.dfp.Dfp dfp80 = dfp68.divide(dfp77); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode18.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode31.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 25 + "'", int56 == 25); org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfpArray73); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertNotNull(dfp80); }
public void test191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test191"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-8)); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp12 = dfp10.negate(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp15.multiply(dfp19); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); boolean boolean25 = dfp24.negativeOrNull(); int int26 = dfp24.log10K(); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp24.add(dfp30); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); int int36 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField38.getTwo(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp34.add(dfp40); org.apache.commons.math3.dfp.Dfp dfp42 = dfp30.divide(dfp34); double[] doubleArray43 = dfp34.toSplitDouble(); org.apache.commons.math3.dfp.Dfp dfp44 = dfp19.multiply(dfp34); org.apache.commons.math3.dfp.Dfp dfp45 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp7, dfp12, dfp44); int int46 = dfp44.intValue(); byte byte47 = dfp44.nans; org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[2.302584648132324, 4.4486172146526797E-7]"); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5); org.junit.Assert.assertTrue("'" + byte47 + "' != '" + (byte) 0 + "'", byte47 == (byte) 0); }
public void test192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test192"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp2.round((int) (byte) 0); org.apache.commons.math3.dfp.Dfp dfp14 = dfp2.newInstance((byte) 2); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); int int19 = dfp17.log10K(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp17.add(dfp23); org.apache.commons.math3.dfp.Dfp dfp25 = dfp14.add(dfp23); int int27 = dfp25.round((int) '4'); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16); }
public void test193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test193"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(8); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); int int15 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); java.lang.String str22 = dfp21.toString(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp14.divide(dfp21); boolean boolean24 = dfp11.greaterThan(dfp14); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getLn10(); int int30 = dfp29.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode31 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp32 = dfp29.trunc(roundingMode31); org.apache.commons.math3.dfp.Dfp dfp34 = dfp29.power10((int) (short) -1); dfp29.shiftLeft(); boolean boolean36 = dfp29.strictlyNegative(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getLn10(); int int40 = dfp39.log10K(); org.apache.commons.math3.dfp.DfpField dfpField42 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField42.getLn10(); int int44 = dfp43.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode45 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp46 = dfp43.trunc(roundingMode45); java.lang.String str47 = dfp46.toString(); org.apache.commons.math3.dfp.Dfp dfp48 = dfp39.divide(dfp46); boolean boolean50 = dfp46.equals((java.lang.Object) 0.0d); org.apache.commons.math3.dfp.Dfp dfp51 = dfp29.divide(dfp46); org.apache.commons.math3.dfp.DfpField dfpField53 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField53.getLn10(); int int55 = dfp54.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode56 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp57 = dfp54.trunc(roundingMode56); org.apache.commons.math3.dfp.Dfp dfp59 = dfp54.power10((int) (short) -1); dfp54.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp62 = dfp54.newInstance(1.0d); int int64 = dfp62.align(0); org.apache.commons.math3.dfp.DfpField dfpField66 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp67 = dfpField66.getLn10(); boolean boolean68 = dfp67.negativeOrNull(); int int69 = dfp67.log10K(); org.apache.commons.math3.dfp.DfpField dfpField71 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp72 = dfpField71.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp73 = dfpField71.getTwo(); org.apache.commons.math3.dfp.Dfp dfp74 = dfp67.add(dfp73); org.apache.commons.math3.dfp.Dfp dfp75 = dfp73.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp76 = dfp62.divide(dfp73); org.apache.commons.math3.dfp.DfpField dfpField78 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp79 = dfpField78.getLn10(); int int80 = dfp79.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode81 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp82 = dfp79.trunc(roundingMode81); org.apache.commons.math3.dfp.Dfp dfp84 = dfp82.divide(10); org.apache.commons.math3.dfp.Dfp dfp85 = dfp84.getZero(); org.apache.commons.math3.dfp.Dfp dfp86 = dfp76.add(dfp85); org.apache.commons.math3.dfp.DfpField dfpField88 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp89 = dfpField88.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray90 = dfpField88.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp92 = dfpField88.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp93 = dfpField88.getOne(); org.apache.commons.math3.dfp.Dfp dfp94 = dfp93.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp95 = dfp11.trap(2147483647, "0.0e0", dfp51, dfp85, dfp94); boolean boolean96 = dfp85.strictlyPositive(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3." + "'", str22, "3."); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode31.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertTrue("'" + roundingMode45 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode45.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "3." + "'", str47, "3."); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertTrue("'" + roundingMode56 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode56.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertNotNull(dfp79); org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0); org.junit.Assert.assertTrue("'" + roundingMode81 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode81.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp84); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertNotNull(dfp89); org.junit.Assert.assertNotNull(dfpArray90); org.junit.Assert.assertNotNull(dfp92); org.junit.Assert.assertNotNull(dfp93); org.junit.Assert.assertNotNull(dfp94); org.junit.Assert.assertNotNull(dfp95); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false); }
public void test194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test194"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp5.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp9 = dfp5.abs(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); int int19 = dfp17.log10K(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp17.add(dfp23); org.apache.commons.math3.dfp.Dfp dfp26 = dfp24.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp27 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp14, dfp24); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getE(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField31.newDfp((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getLn10(); boolean boolean38 = dfp37.negativeOrNull(); int int39 = dfp37.log10K(); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField41.getTwo(); org.apache.commons.math3.dfp.Dfp dfp44 = dfp37.add(dfp43); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField46.getTwo(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField46.getOne(); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField46.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField46.newDfp(); org.apache.commons.math3.dfp.Dfp dfp53 = dfp44.add(dfp52); double double54 = dfp52.toDouble(); int int55 = dfp52.exp; org.apache.commons.math3.dfp.DfpField dfpField57 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField57.getLn10(); boolean boolean59 = dfp58.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField61 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp62 = dfpField61.getLn10(); boolean boolean63 = dfp62.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp58.multiply(dfp62); org.apache.commons.math3.dfp.Dfp dfp65 = dfp52.newInstance(dfp64); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField66 = dfp52.getField(); org.apache.commons.math3.dfp.DfpField dfpField68 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp69 = dfpField68.getLn10(); boolean boolean70 = dfp69.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField72 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp73 = dfpField72.getLn10(); boolean boolean74 = dfp73.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp75 = dfp69.multiply(dfp73); org.apache.commons.math3.dfp.DfpField dfpField77 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp78 = dfpField77.getLn10(); int int79 = dfp78.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode80 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp81 = dfp78.trunc(roundingMode80); org.apache.commons.math3.dfp.Dfp dfp83 = dfp81.divide(10); org.apache.commons.math3.dfp.DfpField dfpField85 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp86 = dfpField85.getLn10(); boolean boolean87 = dfp86.negativeOrNull(); int int88 = dfp86.log10K(); org.apache.commons.math3.dfp.DfpField dfpField90 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp91 = dfpField90.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp92 = dfpField90.getTwo(); org.apache.commons.math3.dfp.Dfp dfp93 = dfp86.add(dfp92); boolean boolean94 = dfp92.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp95 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp69, dfp83, dfp92); org.apache.commons.math3.dfp.Dfp dfp96 = dfp27.trap(10000, "3.", dfp34, dfp52, dfp95); org.apache.commons.math3.dfp.Dfp dfp97 = dfp5.nextAfter(dfp95); double double98 = dfp97.toDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfpField66); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0); org.junit.Assert.assertTrue("'" + roundingMode80 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode80.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp83); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0); org.junit.Assert.assertNotNull(dfp91); org.junit.Assert.assertNotNull(dfp92); org.junit.Assert.assertNotNull(dfp93); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); org.junit.Assert.assertNotNull(dfp95); org.junit.Assert.assertNotNull(dfp96); org.junit.Assert.assertNotNull(dfp97); org.junit.Assert.assertTrue("'" + double98 + "' != '" + 3.0d + "'", double98 == 3.0d); }
public void test195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test195"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); double double19 = dfp17.toDouble(); dfp17.sign = (byte) -1; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); }
public void test196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test196"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp9 = new org.apache.commons.math3.dfp.Dfp(dfpField1, ""); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0"); } catch (java.lang.StringIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); }
public void test197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test197"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.newInstance((byte) 1, (byte) 1); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp17.multiply(dfp21); dfp23.shiftRight(); org.apache.commons.math3.dfp.Dfp dfp25 = dfp14.add(dfp23); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getLn10(); boolean boolean29 = dfp28.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); boolean boolean33 = dfp32.negativeOrNull(); int int34 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfp32.add(dfp38); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); boolean boolean43 = dfp42.negativeOrNull(); int int44 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField46.getTwo(); org.apache.commons.math3.dfp.Dfp dfp49 = dfp42.add(dfp48); org.apache.commons.math3.dfp.Dfp dfp50 = dfp38.divide(dfp42); int int51 = dfp38.getRadixDigits(); int int52 = dfp38.intValue(); org.apache.commons.math3.dfp.DfpField dfpField54 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField54.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField54.getTwo(); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField54.getOne(); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField54.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp61 = new org.apache.commons.math3.dfp.Dfp(dfpField54, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp62 = dfp38.divide(dfp61); boolean boolean63 = dfp28.unequal(dfp62); org.apache.commons.math3.dfp.Dfp dfp65 = dfp62.newInstance(100L); org.apache.commons.math3.dfp.Dfp dfp66 = dfp23.nextAfter(dfp62); org.apache.commons.math3.dfp.Dfp dfp67 = dfp23.floor(); org.apache.commons.math3.dfp.Dfp dfp68 = dfp23.floor(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 25 + "'", int51 == 25); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp66); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertNotNull(dfp68); }
public void test198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test198"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getZero(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode3 = dfpField1.getRoundingMode(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + roundingMode3 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode3.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); }
public void test199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test199"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.Dfp dfp17 = dfp16.getZero(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField1.newDfp(dfp16); dfp18.shiftRight(); boolean boolean20 = dfp18.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); int int24 = dfp23.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode25 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp26 = dfp23.trunc(roundingMode25); org.apache.commons.math3.dfp.Dfp dfp28 = dfp23.power10((int) (short) -1); dfp23.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp23.newInstance(1.0d); int int33 = dfp31.align(0); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getLn10(); boolean boolean37 = dfp36.negativeOrNull(); int int38 = dfp36.log10K(); org.apache.commons.math3.dfp.DfpField dfpField40 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField40.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField40.getTwo(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp36.add(dfp42); org.apache.commons.math3.dfp.Dfp dfp44 = dfp42.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp45 = dfp31.divide(dfp42); org.apache.commons.math3.dfp.Dfp dfp47 = dfp31.power10((int) (byte) 2); org.apache.commons.math3.dfp.Dfp dfp48 = dfp18.multiply(dfp47); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0); org.junit.Assert.assertTrue("'" + roundingMode25 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode25.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); }
public void test200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test200"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); int int21 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField23.getTwo(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp19.add(dfp25); boolean boolean27 = dfp25.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp28 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp2, dfp16, dfp25); boolean boolean29 = dfp28.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp28.multiply((int) (short) 0); dfp31.sign = (byte) 0; org.apache.commons.math3.dfp.Dfp dfp35 = dfp31.multiply(0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp35); }
public void test201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test201"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.multiply(2); org.apache.commons.math3.dfp.Dfp dfp12 = dfp8.newInstance("2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598"); int int14 = dfp12.round(100); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16); }
public void test202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test202"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.Dfp dfp19 = dfp4.newInstance((double) 100L); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp19); }
public void test203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test203"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-32767)); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getZero(); dfp6.shiftRight(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField9.getTwo(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField9.getOne(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField9.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField9.newDfp(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField9.getZero(); int int17 = dfpField9.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField9.newDfp((long) 32760); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField9.getSqr3Reciprocal(); boolean boolean21 = dfp6.greaterThan(dfp20); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 25 + "'", int17 == 25); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); }
public void test204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test204"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 32760); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); }
public void test205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test205"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp5.divide(10); org.apache.commons.math3.dfp.Dfp dfp9 = dfp7.multiply((int) (byte) 1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); }
public void test206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test206"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (double) 100L); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((byte) 100); org.apache.commons.math3.dfp.Dfp dfp6 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp7 = dfp5.subtract(dfp6); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp5); }
public void test207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test207"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (long) 8); org.apache.commons.math3.dfp.Dfp dfp10 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 2, (byte) 0); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); boolean boolean14 = dfp13.negativeOrNull(); int int15 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField17.getTwo(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp13.add(dfp19); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField22.getTwo(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField22.getOne(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField22.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField22.newDfp(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp20.add(dfp28); double double30 = dfp28.toDouble(); int int31 = dfp28.exp; org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField37 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField37.getLn10(); boolean boolean39 = dfp38.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp40 = dfp34.multiply(dfp38); org.apache.commons.math3.dfp.Dfp dfp41 = dfp28.newInstance(dfp40); boolean boolean42 = dfp10.unequal(dfp28); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); }
public void test208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test208"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); int int7 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp9 = dfp6.trunc(roundingMode8); java.lang.String str10 = dfp9.toString(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(dfp9); boolean boolean13 = dfp9.equals((java.lang.Object) 0.0d); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); int int17 = dfp16.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode18 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp19 = dfp16.trunc(roundingMode18); org.apache.commons.math3.dfp.Dfp dfp21 = dfp16.power10((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp23 = dfp16.multiply((int) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp24 = dfp16.newInstance(); boolean boolean25 = dfp16.negativeOrNull(); boolean boolean26 = dfp9.lessThan(dfp16); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "3." + "'", str10, "3."); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode18.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); }
public void test209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test209"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp10.add(dfp16); org.apache.commons.math3.dfp.Dfp dfp18 = dfp16.reciprocal(); int int20 = dfp16.round((int) (short) 1); boolean boolean21 = dfp7.unequal(dfp16); int int22 = dfp16.getRadixDigits(); int int24 = dfp16.align((int) '#'); dfp16.shiftLeft(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 25 + "'", int22 == 25); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0); }
public void test210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test210"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.multiply((int) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); int int14 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode15 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp16 = dfp13.trunc(roundingMode15); java.lang.String str17 = dfp16.toString(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp16.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp21 = dfp19.newInstance((int) 'a'); byte byte22 = dfp21.nans; org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.ceil(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getTwo(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField35.getOne(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField35.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField35.newDfp(); org.apache.commons.math3.dfp.Dfp dfp42 = dfp33.add(dfp41); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn10(); int int46 = dfp45.log10K(); boolean boolean47 = dfp33.greaterThan(dfp45); org.apache.commons.math3.dfp.Dfp dfp49 = dfp33.newInstance((double) 1); org.apache.commons.math3.dfp.Dfp dfp50 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp10, dfp21, dfp49); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode51 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN; org.apache.commons.math3.dfp.Dfp dfp52 = dfp49.trunc(roundingMode51); boolean boolean53 = dfp49.strictlyPositive(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertTrue("'" + roundingMode15 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode15.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3." + "'", str17, "3."); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 0 + "'", byte22 == (byte) 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertTrue("'" + roundingMode51 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode51.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); }
public void test211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test211"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); java.lang.String str21 = dfp12.dfp2sci(); dfp12.shiftRight(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e" + "'", str21, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e"); }
public void test212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test212"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.Dfp[] dfpArray6 = dfpField1.getLn5Split(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfpArray6); }
public void test213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test213"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.Dfp dfp18 = new org.apache.commons.math3.dfp.Dfp(dfp4); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField20.getOne(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField20.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField20.getLn10(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp30 = dfp27.newInstance((byte) 0, (byte) 10); org.apache.commons.math3.dfp.Dfp dfp31 = dfp18.multiply(dfp30); org.apache.commons.math3.dfp.Dfp dfp32 = dfp31.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); }
public void test214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test214"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-32767)); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); }
public void test215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test215"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); double double19 = dfp17.toDouble(); int int20 = dfp17.exp; org.apache.commons.math3.dfp.Dfp dfp21 = dfp17.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(dfp21); }
public void test216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test216"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 10); dfpField1.setIEEEFlagsBits((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getTwo(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp11); }
public void test217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test217"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); boolean boolean10 = dfp9.negativeOrNull(); int int11 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField13.getTwo(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp9.add(dfp15); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.divide(8); boolean boolean19 = dfp9.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp5.remainder(dfp9); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); int int33 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode34 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp35 = dfp32.trunc(roundingMode34); org.apache.commons.math3.dfp.Dfp dfp37 = dfp35.divide(10); org.apache.commons.math3.dfp.DfpField dfpField39 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField39.getLn10(); boolean boolean41 = dfp40.negativeOrNull(); int int42 = dfp40.log10K(); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField44.getTwo(); org.apache.commons.math3.dfp.Dfp dfp47 = dfp40.add(dfp46); boolean boolean48 = dfp46.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp49 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp23, dfp37, dfp46); boolean boolean50 = dfp49.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp52 = dfp49.multiply((int) (short) 0); org.apache.commons.math3.dfp.Dfp dfp53 = dfp5.newInstance(dfp52); boolean boolean54 = dfp5.isInfinite(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertTrue("'" + roundingMode34 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode34.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); }
public void test218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test218"); org.apache.commons.math3.dfp.Dfp dfp0 = null; org.apache.commons.math3.dfp.DfpField dfpField2 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField2.getLn10(); boolean boolean4 = dfp3.negativeOrNull(); int int5 = dfp3.log10K(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField7.getTwo(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp3.add(dfp9); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField12.getTwo(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField12.getOne(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField12.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField12.newDfp(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp10.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp10.reciprocal(); dfp10.nans = (byte) 0; org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray26 = dfpField24.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField24.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp30 = new org.apache.commons.math3.dfp.Dfp(dfpField24, (long) 8); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField24.newDfp((long) (-4)); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp33 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp0, dfp10, dfp32); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfpArray26); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp32); }
public void test219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test219"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-8)); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp10.add(dfp16); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); boolean boolean21 = dfp20.negativeOrNull(); int int22 = dfp20.log10K(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField24.getTwo(); org.apache.commons.math3.dfp.Dfp dfp27 = dfp20.add(dfp26); org.apache.commons.math3.dfp.Dfp dfp28 = dfp16.divide(dfp20); int int29 = dfp16.getRadixDigits(); int int30 = dfp16.intValue(); org.apache.commons.math3.dfp.DfpField dfpField32 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField32.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField32.getTwo(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField32.getOne(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField32.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp39 = new org.apache.commons.math3.dfp.Dfp(dfpField32, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp40 = dfp16.divide(dfp39); org.apache.commons.math3.dfp.Dfp dfp41 = dfp7.newInstance(dfp40); java.lang.String str42 = dfp41.dfp2sci(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 25 + "'", int29 == 25); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "3.84615384615384615384615384615384615384615384615384615384615384615384615384615384615384615384615385e-2" + "'", str42, "3.84615384615384615384615384615384615384615384615384615384615384615384615384615384615384615384615385e-2"); }
public void test220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test220"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.getTwo(); boolean boolean11 = dfp10.isInfinite(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfpArray8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test221"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); double double19 = dfp17.toDouble(); int int20 = dfp17.exp; org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = dfp17.newInstance(dfp29); org.apache.commons.math3.dfp.Dfp dfp31 = dfp30.negate(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp31.multiply((int) (byte) 1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp33); }
public void test222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test222"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp5 = dfp4.negate(); org.apache.commons.math3.dfp.Dfp dfp7 = dfp4.newInstance((long) '4'); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); }
public void test223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test223"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.Dfp dfp18 = dfp6.newInstance((byte) 2); int int20 = dfp18.round((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.negate(); double double22 = dfp18.toDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2.0d + "'", double22 == 2.0d); }
public void test224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test224"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.multiply(2); org.apache.commons.math3.dfp.Dfp dfp11 = dfp10.newInstance(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.divide(100); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp13); }
public void test225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test225"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-8)); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp12 = dfp10.negate(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp15.multiply(dfp19); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); boolean boolean25 = dfp24.negativeOrNull(); int int26 = dfp24.log10K(); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp24.add(dfp30); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); int int36 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField38.getTwo(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp34.add(dfp40); org.apache.commons.math3.dfp.Dfp dfp42 = dfp30.divide(dfp34); double[] doubleArray43 = dfp34.toSplitDouble(); org.apache.commons.math3.dfp.Dfp dfp44 = dfp19.multiply(dfp34); org.apache.commons.math3.dfp.Dfp dfp45 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp7, dfp12, dfp44); org.apache.commons.math3.dfp.Dfp dfp46 = dfp7.reciprocal(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[2.302584648132324, 4.4486172146526797E-7]"); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); }
public void test226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test226"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); dfp6.exp = (byte) -1; org.apache.commons.math3.dfp.Dfp dfp9 = dfp6.negate(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); }
public void test227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test227"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (double) 100L); int int4 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode7 = dfpField1.getRoundingMode(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + roundingMode7 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode7.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); }
public void test228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test228"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); boolean boolean9 = dfp2.strictlyNegative(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.power10((int) (byte) 100); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField12 = dfp11.getField(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfpField12); }
public void test229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test229"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); double double19 = dfp17.toDouble(); int int20 = dfp17.exp; org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = dfp17.newInstance(dfp29); org.apache.commons.math3.dfp.Dfp dfp31 = dfp30.negate(); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp[] dfpArray36 = dfpField35.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getOne(); org.apache.commons.math3.dfp.DfpField dfpField39 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField39.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField39.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn10(); boolean boolean46 = dfp45.negativeOrNull(); int int47 = dfp45.log10K(); org.apache.commons.math3.dfp.DfpField dfpField49 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp50 = dfpField49.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField49.getTwo(); org.apache.commons.math3.dfp.Dfp dfp52 = dfp45.add(dfp51); org.apache.commons.math3.dfp.Dfp dfp54 = dfp52.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp55 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp42, dfp52); org.apache.commons.math3.dfp.Dfp dfp56 = dfp42.rint(); org.apache.commons.math3.dfp.Dfp dfp57 = dfp56.abs(); org.apache.commons.math3.dfp.Dfp dfp58 = null; org.apache.commons.math3.dfp.Dfp dfp59 = dfp31.trap((int) (byte) 2, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e", dfp37, dfp56, dfp58); int int60 = dfp56.intValue(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfpArray36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35); }
public void test230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test230"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp("hi!"); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass10 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp((double) 100); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.getLn2(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(wildcardClass10); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); }
public void test231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test231"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); java.lang.String str10 = dfp2.toString(); dfp2.shiftLeft(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598" + "'", str10, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598"); }
public void test232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test232"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp("hi!"); org.apache.commons.math3.dfp.Dfp dfp10 = new org.apache.commons.math3.dfp.Dfp(dfp9); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfp10); int int12 = dfp11.log10K(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); }
public void test233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test233"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); dfpField1.setIEEEFlags((int) (short) 0); int int8 = dfpField1.getIEEEFlags(); dfpField1.setIEEEFlagsBits(10); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getSqr3Reciprocal(); dfpField1.setIEEEFlags((int) (short) 0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(dfp11); }
public void test234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test234"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getSqr2(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); int int16 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode17 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp18 = dfp15.trunc(roundingMode17); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField19 = dfp18.getField(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp25 = new org.apache.commons.math3.dfp.Dfp(dfpField23, 16); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField27.getTwo(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField27.getOne(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField27.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField27.newDfp(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField27.getZero(); org.apache.commons.math3.dfp.Dfp dfp35 = dfp18.dotrap(10000, "", dfp25, dfp34); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField1.newDfp(dfp25); org.apache.commons.math3.dfp.Dfp dfp38 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "hi!"); org.apache.commons.math3.dfp.Dfp dfp40 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 0L); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode17.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfpField19); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); }
public void test235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test235"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp("hi!"); org.apache.commons.math3.dfp.Dfp dfp10 = dfp9.rint(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); }
public void test236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test236"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); int int5 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); boolean boolean9 = dfp8.negativeOrNull(); int int10 = dfp8.log10K(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField12.getTwo(); org.apache.commons.math3.dfp.Dfp dfp15 = dfp8.add(dfp14); org.apache.commons.math3.dfp.Dfp dfp17 = dfp8.divide(8); org.apache.commons.math3.dfp.Dfp dfp18 = dfp2.remainder(dfp8); org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.newInstance((byte) 0, (byte) 0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); }
public void test237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test237"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp10 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "3."); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); }
public void test238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test238"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn5(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10, (byte) 100); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(wildcardClass7); }
public void test239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test239"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.getTwo(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.newInstance((long) '#'); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); }
public void test240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test240"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); int int10 = dfp8.round(2); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray16 = dfpField14.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField14.getZero(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField14.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getLn10(); int int23 = dfp22.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode24 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp25 = dfp22.trunc(roundingMode24); org.apache.commons.math3.dfp.Dfp dfp27 = dfp22.power10((int) (short) -1); dfp22.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp19.subtract(dfp22); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); int int36 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField38.getTwo(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp34.add(dfp40); org.apache.commons.math3.dfp.DfpField dfpField43 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField43.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField43.getTwo(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField43.getOne(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField43.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField43.newDfp(); org.apache.commons.math3.dfp.Dfp dfp50 = dfp41.add(dfp49); double double51 = dfp49.toDouble(); int int52 = dfp49.exp; org.apache.commons.math3.dfp.DfpField dfpField54 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField54.getLn10(); int int56 = dfp55.log10K(); org.apache.commons.math3.dfp.DfpField dfpField58 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField58.getLn10(); int int60 = dfp59.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode61 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp62 = dfp59.trunc(roundingMode61); java.lang.String str63 = dfp62.toString(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp55.divide(dfp62); org.apache.commons.math3.dfp.Dfp dfp65 = dfp19.dotrap(100, "", dfp49, dfp64); org.apache.commons.math3.dfp.DfpField dfpField67 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField67.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray69 = dfpField67.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp70 = dfpField67.getZero(); org.apache.commons.math3.dfp.Dfp dfp72 = dfpField67.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp73 = dfp8.dotrap((-1), "2.", dfp49, dfp72); org.apache.commons.math3.dfp.DfpField dfpField75 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField75.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp77 = dfpField75.getTwo(); org.apache.commons.math3.dfp.Dfp dfp78 = dfpField75.getOne(); org.apache.commons.math3.dfp.Dfp dfp80 = dfpField75.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp81 = dfpField75.getLn10(); org.apache.commons.math3.dfp.Dfp dfp82 = dfpField75.getTwo(); org.apache.commons.math3.dfp.Dfp dfp85 = dfp82.newInstance((byte) 0, (byte) 10); org.apache.commons.math3.dfp.Dfp dfp86 = dfp49.add(dfp82); boolean boolean87 = dfp49.positiveOrNull(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfpArray16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode24.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0); org.junit.Assert.assertTrue("'" + roundingMode61 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode61.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "3." + "'", str63, "3."); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertNotNull(dfpArray69); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertNotNull(dfp77); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertNotNull(dfp80); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true); }
public void test241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test241"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); boolean boolean4 = dfp2.isZero(); org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.getTwo(); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.multiply(8); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.getTwo(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); }
public void test242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test242"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); dfp6.exp = (byte) -1; int int9 = dfp6.log10(); boolean boolean10 = dfp6.isZero(); double[] doubleArray11 = dfp6.toSplitDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-8) + "'", int9 == (-8)); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[9.999999406318238E-8, 5.936817615292966E-15]"); }
public void test243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test243"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); int int3 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (double) '4'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp((byte) 100); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getPiSplit(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfpArray8); }
public void test244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test244"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); boolean boolean4 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp6 = dfp2.newInstance((double) (-1)); org.apache.commons.math3.dfp.Dfp dfp7 = dfp6.negate(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp7.newInstance((byte) 1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); }
public void test245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test245"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); boolean boolean4 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp6 = dfp2.newInstance((double) (-1)); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.newInstance((byte) 0, (byte) 100); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); }
public void test246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test246"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); boolean boolean10 = dfp9.negativeOrNull(); int int11 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField13.getTwo(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp9.add(dfp15); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.divide(8); boolean boolean19 = dfp9.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp5.remainder(dfp9); org.apache.commons.math3.dfp.Dfp dfp21 = dfp20.abs(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); }
public void test247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test247"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp7.newInstance((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp11 = dfp9.power10K((-32767)); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); }
public void test248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test248"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (double) 100L); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getSqr2Reciprocal(); org.junit.Assert.assertNotNull(dfp4); }
public void test249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test249"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp10.align(0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp10.divide(dfp21); org.apache.commons.math3.dfp.Dfp dfp26 = dfp10.power10((int) '#'); org.apache.commons.math3.dfp.DfpField dfpField27 = dfp26.getField(); org.apache.commons.math3.dfp.Dfp dfp29 = new org.apache.commons.math3.dfp.Dfp(dfpField27, "3."); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField27.newDfp("97."); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField27.newDfp((long) 0); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField27.getLn10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfpField27); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); }
public void test250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test250"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp((byte) 0, (byte) 1); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.getLn2(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField1.newDfp(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass15 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField1.newDfp((byte) 100, (byte) 100); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(wildcardClass15); org.junit.Assert.assertNotNull(dfp18); }
public void test251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test251"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 10); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField10.getTwo(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField10.getOne(); org.apache.commons.math3.dfp.Dfp dfp15 = new org.apache.commons.math3.dfp.Dfp(dfpField10, (int) '#'); boolean boolean16 = dfp8.lessThan(dfp15); int int17 = dfp8.exp; org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray23 = dfpField21.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField21.getZero(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField21.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getLn10(); int int30 = dfp29.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode31 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp32 = dfp29.trunc(roundingMode31); org.apache.commons.math3.dfp.Dfp dfp34 = dfp29.power10((int) (short) -1); dfp29.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp36 = dfp26.subtract(dfp29); org.apache.commons.math3.dfp.Dfp dfp38 = dfp26.newInstance((byte) 2); org.apache.commons.math3.dfp.DfpField dfpField40 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField40.getLn10(); int int42 = dfp41.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode43 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp44 = dfp41.trunc(roundingMode43); java.lang.String str45 = dfp44.toString(); org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getLn10(); boolean boolean49 = dfp48.negativeOrNull(); int int50 = dfp48.log10K(); org.apache.commons.math3.dfp.DfpField dfpField52 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField52.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField52.getTwo(); org.apache.commons.math3.dfp.Dfp dfp55 = dfp48.add(dfp54); org.apache.commons.math3.dfp.Dfp dfp57 = dfp48.divide(8); boolean boolean58 = dfp48.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp59 = dfp44.remainder(dfp48); org.apache.commons.math3.dfp.DfpField dfpField61 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp62 = dfpField61.getLn10(); boolean boolean63 = dfp62.negativeOrNull(); int int64 = dfp62.log10K(); org.apache.commons.math3.dfp.DfpField dfpField66 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp67 = dfpField66.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField66.getTwo(); org.apache.commons.math3.dfp.Dfp dfp69 = dfp62.add(dfp68); org.apache.commons.math3.dfp.DfpField dfpField71 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp72 = dfpField71.getLn10(); boolean boolean73 = dfp72.negativeOrNull(); int int74 = dfp72.log10K(); org.apache.commons.math3.dfp.DfpField dfpField76 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp77 = dfpField76.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp78 = dfpField76.getTwo(); org.apache.commons.math3.dfp.Dfp dfp79 = dfp72.add(dfp78); org.apache.commons.math3.dfp.Dfp dfp80 = dfp68.divide(dfp72); int int81 = dfp68.getRadixDigits(); int int82 = dfp68.intValue(); org.apache.commons.math3.dfp.DfpField dfpField84 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp85 = dfpField84.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp86 = dfpField84.getTwo(); org.apache.commons.math3.dfp.Dfp dfp87 = dfpField84.getOne(); org.apache.commons.math3.dfp.Dfp dfp89 = dfpField84.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp91 = new org.apache.commons.math3.dfp.Dfp(dfpField84, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp92 = dfp68.divide(dfp91); org.apache.commons.math3.dfp.Dfp dfp93 = dfp8.trap((int) (short) 1, "0.0e0", dfp26, dfp44, dfp92); org.apache.commons.math3.dfp.Dfp dfp94 = dfp44.abs(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfpArray23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode31.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertTrue("'" + roundingMode43 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode43.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "3." + "'", str45, "3."); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0); org.junit.Assert.assertNotNull(dfp77); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertNotNull(dfp79); org.junit.Assert.assertNotNull(dfp80); org.junit.Assert.assertTrue("'" + int81 + "' != '" + 25 + "'", int81 == 25); org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertNotNull(dfp87); org.junit.Assert.assertNotNull(dfp89); org.junit.Assert.assertNotNull(dfp92); org.junit.Assert.assertNotNull(dfp93); org.junit.Assert.assertNotNull(dfp94); }
public void test252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test252"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getLn5(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); boolean boolean10 = dfp9.negativeOrNull(); int int11 = dfp9.log10K(); int int12 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp24 = dfp15.divide(8); org.apache.commons.math3.dfp.Dfp dfp25 = dfp9.remainder(dfp15); org.apache.commons.math3.dfp.Dfp dfp26 = dfp6.add(dfp15); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField28.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); int int36 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField38.getTwo(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp34.add(dfp40); org.apache.commons.math3.dfp.Dfp dfp43 = dfp41.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp44 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp31, dfp41); org.apache.commons.math3.dfp.Dfp dfp45 = dfp31.rint(); org.apache.commons.math3.dfp.Dfp dfp46 = dfp45.abs(); org.apache.commons.math3.dfp.DfpField dfpField48 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField48.getLn10(); boolean boolean50 = dfp49.negativeOrNull(); int int51 = dfp49.log10K(); org.apache.commons.math3.dfp.DfpField dfpField53 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField53.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField53.getTwo(); org.apache.commons.math3.dfp.Dfp dfp56 = dfp49.add(dfp55); org.apache.commons.math3.dfp.DfpField dfpField58 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField58.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField58.getTwo(); org.apache.commons.math3.dfp.Dfp dfp61 = dfpField58.getOne(); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField58.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp64 = dfpField58.newDfp(); org.apache.commons.math3.dfp.Dfp dfp65 = dfp56.add(dfp64); org.apache.commons.math3.dfp.DfpField dfpField67 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField67.getLn10(); int int69 = dfp68.log10K(); boolean boolean70 = dfp56.greaterThan(dfp68); org.apache.commons.math3.dfp.Dfp dfp72 = dfp56.newInstance((double) 1); int[] intArray73 = dfp72.mant; org.apache.commons.math3.dfp.Dfp dfp74 = dfp46.nextAfter(dfp72); org.apache.commons.math3.dfp.Dfp dfp75 = dfp15.divide(dfp74); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(intArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertNotNull(dfp75); }
public void test253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test253"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp10.align(0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp10.divide(dfp21); int int26 = dfp21.round(0); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.newInstance("3."); org.apache.commons.math3.dfp.Dfp dfp29 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp30 = dfp28.remainder(dfp29); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertNotNull(dfp28); }
public void test254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test254"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); int int11 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode12 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.trunc(roundingMode12); java.lang.String str14 = dfp13.toString(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField1.newDfp(dfp13); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); org.apache.commons.math3.dfp.Dfp dfp23 = dfp18.power10((int) (short) -1); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.Dfp dfp34 = dfp32.reciprocal(); int int36 = dfp32.round((int) (short) 1); boolean boolean37 = dfp23.unequal(dfp32); boolean boolean38 = dfp15.greaterThan(dfp32); dfp15.sign = (byte) 10; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode12.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "3." + "'", str14, "3."); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); }
public void test255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test255"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField6.getOne(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField6.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField6.newDfp(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField6.getOne(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField1.newDfp(dfp13); org.apache.commons.math3.dfp.Dfp dfp15 = dfp13.newInstance(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); }
public void test256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test256"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getZero(); int int9 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.newDfp((long) 32760); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp14 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 1); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode15 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_DOWN; dfpField1.setRoundingMode(roundingMode15); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); int int21 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField23.getTwo(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp19.add(dfp25); boolean boolean27 = dfp25.isInfinite(); java.lang.String str28 = dfp25.toString(); org.apache.commons.math3.dfp.DfpField dfpField29 = dfp25.getField(); org.apache.commons.math3.dfp.Dfp dfp30 = dfp25.getZero(); org.apache.commons.math3.dfp.Dfp dfp31 = new org.apache.commons.math3.dfp.Dfp(dfp25); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField1.newDfp(dfp25); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 25 + "'", int9 == 25); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + roundingMode15 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_DOWN + "'", roundingMode15.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_DOWN)); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2." + "'", str28, "2."); org.junit.Assert.assertNotNull(dfpField29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp32); }
public void test257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test257"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp5.divide(10); org.apache.commons.math3.dfp.Dfp dfp8 = dfp7.getZero(); boolean boolean9 = dfp7.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp7.floor(); dfp10.sign = (byte) 10; org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.negate(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); }
public void test258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test258"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); }
public void test259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test259"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.reciprocal(); int int12 = dfp8.round((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp15 = dfp8.newInstance((byte) -1, (byte) 100); int int16 = dfp15.getRadixDigits(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); int int21 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField23.getTwo(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp19.add(dfp25); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getLn10(); boolean boolean30 = dfp29.negativeOrNull(); int int31 = dfp29.log10K(); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField33.getTwo(); org.apache.commons.math3.dfp.Dfp dfp36 = dfp29.add(dfp35); org.apache.commons.math3.dfp.Dfp dfp37 = dfp25.divide(dfp29); org.apache.commons.math3.dfp.Dfp dfp38 = dfp25.floor(); org.apache.commons.math3.dfp.DfpField dfpField40 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField40.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray42 = dfpField40.getESplit(); org.apache.commons.math3.dfp.Dfp dfp44 = new org.apache.commons.math3.dfp.Dfp(dfpField40, (-32767)); org.apache.commons.math3.dfp.Dfp dfp46 = dfp44.newInstance("hi!"); boolean boolean47 = dfp25.equals((java.lang.Object) dfp44); org.apache.commons.math3.dfp.Dfp dfp48 = dfp15.add(dfp44); org.apache.commons.math3.dfp.Dfp dfp50 = dfp15.newInstance("3."); org.apache.commons.math3.dfp.Dfp dfp51 = dfp50.sqrt(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 25 + "'", int16 == 25); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfpArray42); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); }
public void test260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test260"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp((byte) 0, (byte) 1); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.getLn2(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField1.newDfp(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass15 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp[] dfpArray17 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp[] dfpArray18 = dfpField1.getPiSplit(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(wildcardClass15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfpArray17); org.junit.Assert.assertNotNull(dfpArray18); }
public void test261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test261"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp8.newInstance((byte) 0, (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); int int15 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); java.lang.String str22 = dfp21.toString(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp14.divide(dfp21); boolean boolean24 = dfp8.lessThan(dfp14); org.apache.commons.math3.dfp.Dfp dfp25 = new org.apache.commons.math3.dfp.Dfp(dfp14); org.apache.commons.math3.dfp.Dfp dfp26 = dfp25.getZero(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3." + "'", str22, "3."); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(dfp26); }
public void test262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test262"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField30.getOne(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField30.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField30.newDfp(); org.apache.commons.math3.dfp.Dfp dfp37 = dfp28.add(dfp36); double double38 = dfp36.toDouble(); int int39 = dfp36.exp; org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); java.lang.String str50 = dfp49.toString(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp42.divide(dfp49); org.apache.commons.math3.dfp.Dfp dfp52 = dfp6.dotrap(100, "", dfp36, dfp51); org.apache.commons.math3.dfp.Dfp dfp53 = dfp51.abs(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3." + "'", str50, "3."); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); }
public void test263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test263"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); org.apache.commons.math3.dfp.Dfp dfp19 = dfp9.reciprocal(); boolean boolean20 = dfp9.isNaN(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp9.reciprocal(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(dfp21); }
public void test264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test264"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.Dfp dfp18 = dfp4.rint(); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp22 = new org.apache.commons.math3.dfp.Dfp(dfpField20, 16); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField20.getLn5(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField20.newDfp((byte) -1); dfpField20.setIEEEFlags((int) (byte) 1); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField20.getOne(); boolean boolean29 = dfp18.equals((java.lang.Object) dfp28); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); }
public void test265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test265"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(8); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); int int15 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); java.lang.String str22 = dfp21.toString(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp14.divide(dfp21); boolean boolean24 = dfp11.greaterThan(dfp14); org.apache.commons.math3.dfp.Dfp dfp25 = dfp11.getTwo(); boolean boolean26 = dfp11.isZero(); java.lang.String str27 = dfp11.toString(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3." + "'", str22, "3."); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0.28782313662425571050224893183554552595013768607859662200416598762094657620966906002949965063619975" + "'", str27, "0.28782313662425571050224893183554552595013768607859662200416598762094657620966906002949965063619975"); }
public void test266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test266"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp8 = dfp6.newInstance((int) 'a'); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp8); }
public void test267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test267"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "2."); org.apache.commons.math3.dfp.Dfp[] dfpArray6 = dfpField1.getLn2Split(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfpArray6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); }
public void test268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test268"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) -1, (byte) -1); dfp7.exp = 10; int int10 = dfp7.intValue(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); boolean boolean14 = dfp13.negativeOrNull(); int int15 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField17.getTwo(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp13.add(dfp19); boolean boolean21 = dfp19.isInfinite(); java.lang.String str22 = dfp19.toString(); org.apache.commons.math3.dfp.DfpField dfpField23 = dfp19.getField(); org.apache.commons.math3.dfp.Dfp dfp25 = new org.apache.commons.math3.dfp.Dfp(dfpField23, (double) (-8)); org.apache.commons.math3.dfp.Dfp dfp26 = dfp7.multiply(dfp25); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2." + "'", str22, "2."); org.junit.Assert.assertNotNull(dfpField23); org.junit.Assert.assertNotNull(dfp26); }
public void test269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test269"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp("hi!"); org.apache.commons.math3.dfp.Dfp dfp10 = new org.apache.commons.math3.dfp.Dfp(dfp9); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfp10); org.apache.commons.math3.dfp.Dfp dfp12 = dfp11.sqrt(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); }
public void test270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test270"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '#'); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode7 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp[] dfpArray10 = dfpField1.getLn5Split(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getLn2(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + roundingMode7 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode7.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfpArray10); org.junit.Assert.assertNotNull(dfp11); }
public void test271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test271"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); double double18 = dfp17.toDouble(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp17.ceil(); int int21 = dfp17.round((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp23 = dfp17.divide(0); org.apache.commons.math3.dfp.Dfp dfp24 = dfp17.getZero(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 14674.41072270908d + "'", double18 == 14674.41072270908d); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); }
public void test272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test272"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 0L); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.newDfp((long) (byte) 100); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField15.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = dfp28.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp31 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp18, dfp28); int[] intArray32 = dfp18.mant; org.apache.commons.math3.dfp.Dfp dfp34 = dfp18.newInstance((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getLn10(); boolean boolean38 = dfp37.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField40 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField40.getLn10(); boolean boolean42 = dfp41.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp37.multiply(dfp41); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); org.apache.commons.math3.dfp.Dfp dfp51 = dfp49.divide(10); org.apache.commons.math3.dfp.DfpField dfpField53 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField53.getLn10(); boolean boolean55 = dfp54.negativeOrNull(); int int56 = dfp54.log10K(); org.apache.commons.math3.dfp.DfpField dfpField58 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField58.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField58.getTwo(); org.apache.commons.math3.dfp.Dfp dfp61 = dfp54.add(dfp60); boolean boolean62 = dfp60.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp63 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp37, dfp51, dfp60); boolean boolean64 = dfp63.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp65 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp13, dfp18, dfp63); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(intArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35]"); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(dfp65); }
public void test273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test273"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); dfp6.exp = (byte) -1; org.apache.commons.math3.dfp.Dfp dfp9 = dfp6.abs(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); boolean boolean17 = dfp16.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp12.multiply(dfp16); int int20 = dfp18.round(2); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray26 = dfpField24.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField24.getZero(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField24.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); int int33 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode34 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp35 = dfp32.trunc(roundingMode34); org.apache.commons.math3.dfp.Dfp dfp37 = dfp32.power10((int) (short) -1); dfp32.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp39 = dfp29.subtract(dfp32); org.apache.commons.math3.dfp.DfpField dfpField43 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField43.getLn10(); boolean boolean45 = dfp44.negativeOrNull(); int int46 = dfp44.log10K(); org.apache.commons.math3.dfp.DfpField dfpField48 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField48.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp50 = dfpField48.getTwo(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp44.add(dfp50); org.apache.commons.math3.dfp.DfpField dfpField53 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField53.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField53.getTwo(); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField53.getOne(); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField53.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField53.newDfp(); org.apache.commons.math3.dfp.Dfp dfp60 = dfp51.add(dfp59); double double61 = dfp59.toDouble(); int int62 = dfp59.exp; org.apache.commons.math3.dfp.DfpField dfpField64 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp65 = dfpField64.getLn10(); int int66 = dfp65.log10K(); org.apache.commons.math3.dfp.DfpField dfpField68 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp69 = dfpField68.getLn10(); int int70 = dfp69.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode71 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp72 = dfp69.trunc(roundingMode71); java.lang.String str73 = dfp72.toString(); org.apache.commons.math3.dfp.Dfp dfp74 = dfp65.divide(dfp72); org.apache.commons.math3.dfp.Dfp dfp75 = dfp29.dotrap(100, "", dfp59, dfp74); org.apache.commons.math3.dfp.DfpField dfpField77 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp78 = dfpField77.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray79 = dfpField77.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp80 = dfpField77.getZero(); org.apache.commons.math3.dfp.Dfp dfp82 = dfpField77.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp83 = dfp18.dotrap((-1), "2.", dfp59, dfp82); org.apache.commons.math3.dfp.DfpField dfpField85 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp86 = dfpField85.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp87 = dfpField85.getTwo(); org.apache.commons.math3.dfp.Dfp dfp88 = dfpField85.getOne(); org.apache.commons.math3.dfp.Dfp dfp90 = dfpField85.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp91 = dfpField85.getLn10(); org.apache.commons.math3.dfp.Dfp dfp92 = dfpField85.getTwo(); org.apache.commons.math3.dfp.Dfp dfp95 = dfp92.newInstance((byte) 0, (byte) 10); org.apache.commons.math3.dfp.Dfp dfp96 = dfp59.add(dfp92); boolean boolean97 = dfp9.equals((java.lang.Object) dfp96); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfpArray26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertTrue("'" + roundingMode34 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode34.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0); org.junit.Assert.assertTrue("'" + roundingMode71 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode71.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "3." + "'", str73, "3."); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertNotNull(dfpArray79); org.junit.Assert.assertNotNull(dfp80); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp83); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertNotNull(dfp87); org.junit.Assert.assertNotNull(dfp88); org.junit.Assert.assertNotNull(dfp90); org.junit.Assert.assertNotNull(dfp91); org.junit.Assert.assertNotNull(dfp92); org.junit.Assert.assertNotNull(dfp95); org.junit.Assert.assertNotNull(dfp96); org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false); }
public void test274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test274"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField30.getOne(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField30.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField30.newDfp(); org.apache.commons.math3.dfp.Dfp dfp37 = dfp28.add(dfp36); double double38 = dfp36.toDouble(); int int39 = dfp36.exp; org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); java.lang.String str50 = dfp49.toString(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp42.divide(dfp49); org.apache.commons.math3.dfp.Dfp dfp52 = dfp6.dotrap(100, "", dfp36, dfp51); int int54 = dfp52.align(0); boolean boolean55 = dfp52.negativeOrNull(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3." + "'", str50, "3."); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); }
public void test275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test275"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); int int21 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField23.getTwo(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp19.add(dfp25); boolean boolean27 = dfp25.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp28 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp2, dfp16, dfp25); org.apache.commons.math3.dfp.Dfp dfp29 = dfp28.reciprocal(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode30 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_UP; org.apache.commons.math3.dfp.Dfp dfp31 = dfp28.trunc(roundingMode30); org.apache.commons.math3.dfp.Dfp dfp33 = dfp31.power10K(9900); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_UP + "'", roundingMode30.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_UP)); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp33); }
public void test276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test276"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.newDfp((byte) 100); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp8); }
public void test277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test277"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.multiply((int) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp10.negate(); double double12 = dfp11.toDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.0d) + "'", double12 == (-0.0d)); }
public void test278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test278"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); boolean boolean10 = dfp8.isInfinite(); java.lang.String str11 = dfp8.toString(); org.apache.commons.math3.dfp.DfpField dfpField12 = dfp8.getField(); org.apache.commons.math3.dfp.Dfp dfp14 = new org.apache.commons.math3.dfp.Dfp(dfpField12, (double) (-8)); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField12.getLn2(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2." + "'", str11, "2."); org.junit.Assert.assertNotNull(dfpField12); org.junit.Assert.assertNotNull(dfp15); }
public void test279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test279"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-8)); org.apache.commons.math3.dfp.Dfp dfp9 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (long) (short) 100); java.lang.String str10 = dfp9.toString(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100." + "'", str10, "100."); }
public void test280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test280"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); int int8 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp10 = dfp7.trunc(roundingMode9); java.lang.String str11 = dfp10.toString(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp15 = dfp13.newInstance((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField1.newDfp(dfp13); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField1.newDfp((double) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp19 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp20 = dfpField1.newDfp(dfp19); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode9.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3." + "'", str11, "3."); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); }
public void test281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test281"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getSqr2Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp(0L); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getSqr3Reciprocal(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); }
public void test282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test282"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp6.newInstance((byte) 100); java.lang.String str9 = dfp8.toString(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100." + "'", str9, "100."); }
public void test283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test283"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp[] dfpArray4 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass6 = dfpField1.getRuntimeClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfpArray4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test284"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField4 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField4.getLn10(); boolean boolean6 = dfp5.negativeOrNull(); int int7 = dfp5.log10K(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField9.getTwo(); org.apache.commons.math3.dfp.Dfp dfp12 = dfp5.add(dfp11); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.subtract(dfp12); org.apache.commons.math3.dfp.Dfp dfp14 = dfp13.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField16.getOne(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField16.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField16.getLn10(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp23.newInstance((byte) 0, (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getLn10(); int int30 = dfp29.log10K(); org.apache.commons.math3.dfp.DfpField dfpField32 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField32.getLn10(); int int34 = dfp33.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode35 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp36 = dfp33.trunc(roundingMode35); java.lang.String str37 = dfp36.toString(); org.apache.commons.math3.dfp.Dfp dfp38 = dfp29.divide(dfp36); boolean boolean39 = dfp23.lessThan(dfp29); org.apache.commons.math3.dfp.Dfp dfp40 = new org.apache.commons.math3.dfp.Dfp(dfp29); org.apache.commons.math3.dfp.Dfp dfp41 = dfp13.remainder(dfp40); dfp41.shiftRight(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertTrue("'" + roundingMode35 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode35.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "3." + "'", str37, "3."); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(dfp41); }
public void test285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test285"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); int int8 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp10 = dfp7.trunc(roundingMode9); java.lang.String str11 = dfp10.toString(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp15 = dfp13.newInstance((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField1.newDfp(dfp13); org.apache.commons.math3.dfp.Dfp dfp18 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 0); org.apache.commons.math3.dfp.Dfp dfp19 = dfp18.getTwo(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode9.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3." + "'", str11, "3."); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp19); }
public void test286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test286"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getSqr3Reciprocal(); int int8 = dfp7.log10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); }
public void test287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test287"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-8)); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getLn2Split(); org.apache.commons.math3.dfp.Dfp[] dfpArray9 = dfpField1.getLn2Split(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfpArray8); org.junit.Assert.assertNotNull(dfpArray9); }
public void test288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test288"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField30.getOne(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField30.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField30.newDfp(); org.apache.commons.math3.dfp.Dfp dfp37 = dfp28.add(dfp36); double double38 = dfp36.toDouble(); int int39 = dfp36.exp; org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); java.lang.String str50 = dfp49.toString(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp42.divide(dfp49); org.apache.commons.math3.dfp.Dfp dfp52 = dfp6.dotrap(100, "", dfp36, dfp51); boolean boolean53 = dfp52.positiveOrNull(); org.apache.commons.math3.dfp.DfpField dfpField55 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField55.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray57 = dfpField55.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField55.getZero(); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField55.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField62 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField62.getLn10(); int int64 = dfp63.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode65 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp66 = dfp63.trunc(roundingMode65); org.apache.commons.math3.dfp.Dfp dfp68 = dfp63.power10((int) (short) -1); dfp63.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp70 = dfp60.subtract(dfp63); org.apache.commons.math3.dfp.Dfp dfp72 = dfp60.newInstance((byte) 2); org.apache.commons.math3.dfp.Dfp dfp73 = dfp52.divide(dfp72); org.apache.commons.math3.dfp.DfpField dfpField75 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField75.getLn10(); int int77 = dfp76.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode78 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp79 = dfp76.trunc(roundingMode78); org.apache.commons.math3.dfp.Dfp dfp81 = dfp76.power10((int) (short) -1); dfp76.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp84 = dfp76.newInstance(1.0d); int int86 = dfp84.align(0); boolean boolean87 = dfp72.lessThan(dfp84); boolean boolean88 = dfp84.positiveOrNull(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3." + "'", str50, "3."); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfpArray57); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertTrue("'" + roundingMode65 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode65.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp66); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0); org.junit.Assert.assertTrue("'" + roundingMode78 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode78.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp79); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp84); org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true); }
public void test289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test289"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp("hi!"); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass10 = dfpField1.getRuntimeClass(); dfpField1.clearIEEEFlags(); org.apache.commons.math3.dfp.Dfp[] dfpArray12 = dfpField1.getLn2Split(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(wildcardClass10); org.junit.Assert.assertNotNull(dfpArray12); }
public void test290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test290"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "2."); org.apache.commons.math3.dfp.Dfp[] dfpArray6 = dfpField1.getLn2Split(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.newDfp(2147483647); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfpArray6); org.junit.Assert.assertNotNull(dfp8); }
public void test291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test291"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((-8)); }
public void test292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test292"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfp6.floor(); int int8 = dfp7.intValue(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10); }
public void test293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test293"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((int) (short) 10); byte byte17 = dfp16.sign; org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); int int21 = dfp20.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); int int25 = dfp24.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode26 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp27 = dfp24.trunc(roundingMode26); java.lang.String str28 = dfp27.toString(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp20.divide(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp9, dfp16, dfp27); double double31 = dfp27.toDouble(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 1 + "'", byte17 == (byte) 1); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertTrue("'" + roundingMode26 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode26.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "3." + "'", str28, "3."); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.0d + "'", double31 == 3.0d); }
public void test294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test294"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray9 = dfpField7.getESplit(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode10 = dfpField7.getRoundingMode(); dfpField1.setRoundingMode(roundingMode10); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfpArray9); org.junit.Assert.assertTrue("'" + roundingMode10 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode10.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); }
public void test295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test295"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); dfpField1.setIEEEFlags((int) (short) 0); int int8 = dfpField1.getIEEEFlags(); dfpField1.setIEEEFlagsBits(10); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getSqr3Reciprocal(); dfpField1.setIEEEFlags(3); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(dfp11); }
public void test296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test296"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 10); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getSqr3Reciprocal(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); }
public void test297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test297"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 10); dfpField1.setIEEEFlagsBits((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getPi(); dfpField1.setIEEEFlags(0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp11); }
public void test298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test298"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); dfpField1.clearIEEEFlags(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfp4); }
public void test299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test299"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp12.subtract(dfp22); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getLn10(); int int29 = dfp28.log10K(); boolean boolean30 = dfp28.isZero(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp28.multiply(8); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp37 = new org.apache.commons.math3.dfp.Dfp(dfpField35, 16); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField35.getLn5(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField35.newDfp((byte) -1); org.apache.commons.math3.dfp.DfpField dfpField42 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField42.getLn5(); org.apache.commons.math3.dfp.Dfp dfp44 = dfp22.trap((int) (byte) 100, "3.", dfp33, dfp40, dfp43); org.apache.commons.math3.dfp.Dfp dfp45 = dfp9.newInstance(dfp33); org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField47.getTwo(); org.apache.commons.math3.dfp.Dfp dfp50 = dfpField47.getOne(); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField47.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField47.getLn10(); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField47.getTwo(); org.apache.commons.math3.dfp.DfpField dfpField56 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField56.getLn10(); int int58 = dfp57.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode59 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp60 = dfp57.trunc(roundingMode59); org.apache.commons.math3.dfp.Dfp dfp62 = dfp57.power10((int) (short) -1); dfp57.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp54.nextAfter(dfp57); org.apache.commons.math3.dfp.Dfp dfp65 = dfp9.multiply(dfp64); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0); org.junit.Assert.assertTrue("'" + roundingMode59 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode59.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); }
public void test300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test300"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField(0); }
public void test301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test301"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp7 = dfp6.ceil(); java.lang.Class<?> wildcardClass8 = dfp7.getClass(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test302"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); int int21 = dfp8.getRadixDigits(); int int22 = dfp8.intValue(); boolean boolean23 = dfp8.isInfinite(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getTwo(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField35.getOne(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField35.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField35.newDfp(); org.apache.commons.math3.dfp.Dfp dfp42 = dfp33.add(dfp41); org.apache.commons.math3.dfp.Dfp dfp43 = org.apache.commons.math3.dfp.Dfp.copysign(dfp8, dfp42); org.apache.commons.math3.dfp.Dfp dfp44 = dfp42.negate(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); }
public void test303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test303"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); double double18 = dfp17.toDouble(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp17.ceil(); double[] doubleArray20 = dfp17.toSplitDouble(); boolean boolean21 = dfp17.strictlyPositive(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 14674.41072270908d + "'", double18 == 14674.41072270908d); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[14674.41015625, 5.664590810279311E-4]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); }
public void test304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test304"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getZero(); int int9 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.newDfp((long) 32760); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass13 = dfpField1.getRuntimeClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 25 + "'", int9 == 25); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(wildcardClass13); }
public void test305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test305"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.Dfp dfp6 = dfp2.newInstance((byte) 1); int int7 = dfp2.classify(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test306"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.Dfp[] dfpArray5 = dfpField1.getESplit(); dfpField1.setIEEEFlagsBits(0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray5); }
public void test307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test307"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); int int21 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField23.getTwo(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp19.add(dfp25); boolean boolean27 = dfp25.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp28 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp2, dfp16, dfp25); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getLn10(); int int32 = dfp31.log10K(); boolean boolean33 = dfp31.isZero(); boolean boolean34 = dfp28.lessThan(dfp31); int int36 = dfp31.round((int) (byte) 2); org.apache.commons.math3.dfp.Dfp dfp38 = dfp31.newInstance(100L); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16); org.junit.Assert.assertNotNull(dfp38); }
public void test308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test308"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp10.align(0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp10.divide(dfp21); org.apache.commons.math3.dfp.Dfp dfp26 = dfp10.power10((int) '#'); org.apache.commons.math3.dfp.DfpField dfpField27 = dfp26.getField(); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getSqr3(); int int29 = dfp28.log10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfpField27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); }
public void test309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test309"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); int int19 = dfp17.log10K(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp17.add(dfp23); org.apache.commons.math3.dfp.Dfp dfp25 = dfp13.divide(dfp17); org.apache.commons.math3.dfp.Dfp dfp26 = dfp2.divide(dfp25); double[] doubleArray27 = dfp25.toSplitDouble(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp25.getZero(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.868588924407959, 3.9398544670927255E-8]"); org.junit.Assert.assertNotNull(dfp28); }
public void test310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test310"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp5.divide(10); org.apache.commons.math3.dfp.Dfp dfp8 = dfp7.getZero(); boolean boolean9 = dfp7.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp7.floor(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); boolean boolean14 = dfp13.negativeOrNull(); int int15 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField17.getTwo(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp13.add(dfp19); boolean boolean21 = dfp19.isInfinite(); java.lang.String str22 = dfp19.toString(); org.apache.commons.math3.dfp.DfpField dfpField23 = dfp19.getField(); org.apache.commons.math3.dfp.Dfp dfp25 = new org.apache.commons.math3.dfp.Dfp(dfpField23, (double) (-8)); org.apache.commons.math3.dfp.Dfp dfp26 = dfp10.divide(dfp25); org.apache.commons.math3.dfp.Dfp dfp28 = dfp26.power10(0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2." + "'", str22, "2."); org.junit.Assert.assertNotNull(dfpField23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp28); }
public void test311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test311"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 1, (byte) 0); org.junit.Assert.assertNotNull(dfp2); }
public void test312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test312"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); int int8 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField10.getTwo(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp6.add(dfp12); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); boolean boolean17 = dfp16.negativeOrNull(); int int18 = dfp16.log10K(); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp16.add(dfp22); org.apache.commons.math3.dfp.Dfp dfp24 = dfp12.divide(dfp16); int int25 = dfp12.getRadixDigits(); int int26 = dfp12.intValue(); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField28.getOne(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField28.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp35 = new org.apache.commons.math3.dfp.Dfp(dfpField28, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp36 = dfp12.divide(dfp35); boolean boolean37 = dfp2.unequal(dfp36); org.apache.commons.math3.dfp.Dfp dfp39 = dfp36.newInstance(100L); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); boolean boolean43 = dfp42.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp44 = dfp42.ceil(); boolean boolean45 = dfp39.lessThan(dfp42); dfp42.exp = 6; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 25 + "'", int25 == 25); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); }
public void test313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test313"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-8)); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp12 = dfp10.negate(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp15.multiply(dfp19); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); boolean boolean25 = dfp24.negativeOrNull(); int int26 = dfp24.log10K(); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp24.add(dfp30); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); int int36 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField38.getTwo(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp34.add(dfp40); org.apache.commons.math3.dfp.Dfp dfp42 = dfp30.divide(dfp34); double[] doubleArray43 = dfp34.toSplitDouble(); org.apache.commons.math3.dfp.Dfp dfp44 = dfp19.multiply(dfp34); org.apache.commons.math3.dfp.Dfp dfp45 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp7, dfp12, dfp44); boolean boolean46 = dfp12.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp48 = dfp12.newInstance((double) 9900); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[2.302584648132324, 4.4486172146526797E-7]"); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(dfp48); }
public void test314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test314"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getSqr3(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); }
public void test315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test315"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode7 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_UP; dfpField1.setRoundingMode(roundingMode7); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); boolean boolean12 = dfp11.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getLn10(); boolean boolean26 = dfp25.negativeOrNull(); int int27 = dfp25.log10K(); org.apache.commons.math3.dfp.DfpField dfpField29 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField29.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField29.getTwo(); org.apache.commons.math3.dfp.Dfp dfp32 = dfp25.add(dfp31); org.apache.commons.math3.dfp.Dfp dfp33 = dfp21.divide(dfp25); int int34 = dfp21.getRadixDigits(); int int35 = dfp21.intValue(); org.apache.commons.math3.dfp.DfpField dfpField37 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField37.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField37.getTwo(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField37.getOne(); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField37.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp44 = new org.apache.commons.math3.dfp.Dfp(dfpField37, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp45 = dfp21.divide(dfp44); boolean boolean46 = dfp11.unequal(dfp45); org.apache.commons.math3.dfp.Dfp dfp48 = dfp45.newInstance(100L); org.apache.commons.math3.dfp.DfpField dfpField50 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField50.getLn10(); boolean boolean52 = dfp51.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp53 = dfp51.ceil(); boolean boolean54 = dfp48.lessThan(dfp51); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField1.newDfp(dfp48); org.apache.commons.math3.dfp.DfpField dfpField57 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField57.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField57.getTwo(); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField57.getOne(); org.apache.commons.math3.dfp.Dfp dfp62 = dfpField57.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField57.getLn10(); org.apache.commons.math3.dfp.Dfp dfp64 = dfpField57.getTwo(); org.apache.commons.math3.dfp.DfpField dfpField66 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp67 = dfpField66.getLn10(); int int68 = dfp67.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode69 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp70 = dfp67.trunc(roundingMode69); org.apache.commons.math3.dfp.Dfp dfp72 = dfp67.power10((int) (short) -1); dfp67.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp74 = dfp64.nextAfter(dfp67); byte byte75 = dfp64.nans; org.apache.commons.math3.dfp.Dfp dfp76 = dfpField1.newDfp(dfp64); int int77 = dfp64.getRadixDigits(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + roundingMode7 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_UP + "'", roundingMode7.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_UP)); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 25 + "'", int34 == 25); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0); org.junit.Assert.assertTrue("'" + roundingMode69 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode69.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertTrue("'" + byte75 + "' != '" + (byte) 0 + "'", byte75 == (byte) 0); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertTrue("'" + int77 + "' != '" + 25 + "'", int77 == 25); }
public void test316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test316"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField30.getOne(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField30.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField30.newDfp(); org.apache.commons.math3.dfp.Dfp dfp37 = dfp28.add(dfp36); double double38 = dfp36.toDouble(); int int39 = dfp36.exp; org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); java.lang.String str50 = dfp49.toString(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp42.divide(dfp49); org.apache.commons.math3.dfp.Dfp dfp52 = dfp6.dotrap(100, "", dfp36, dfp51); boolean boolean53 = dfp52.positiveOrNull(); double double54 = dfp52.toDouble(); org.apache.commons.math3.dfp.DfpField dfpField56 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField56.getLn10(); int int58 = dfp57.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode59 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp60 = dfp57.trunc(roundingMode59); java.lang.String str61 = dfp60.toString(); org.apache.commons.math3.dfp.Dfp dfp63 = dfp60.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp65 = dfp63.newInstance((int) 'a'); byte byte66 = dfp65.nans; org.apache.commons.math3.dfp.Dfp dfp67 = dfp65.ceil(); org.apache.commons.math3.dfp.Dfp dfp69 = dfp65.power10K((-32767)); org.apache.commons.math3.dfp.Dfp dfp70 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp52, dfp65); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3." + "'", str50, "3."); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.7675283643313485d + "'", double54 == 0.7675283643313485d); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0); org.junit.Assert.assertTrue("'" + roundingMode59 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode59.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertEquals("'" + str61 + "' != '" + "3." + "'", str61, "3."); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertTrue("'" + byte66 + "' != '" + (byte) 0 + "'", byte66 == (byte) 0); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertNotNull(dfp70); }
public void test317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test317"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); boolean boolean9 = dfp2.strictlyNegative(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); int int13 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); int int17 = dfp16.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode18 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp19 = dfp16.trunc(roundingMode18); java.lang.String str20 = dfp19.toString(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp12.divide(dfp19); boolean boolean23 = dfp19.equals((java.lang.Object) 0.0d); org.apache.commons.math3.dfp.Dfp dfp24 = dfp2.divide(dfp19); org.apache.commons.math3.dfp.Dfp dfp25 = dfp2.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode18.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "3." + "'", str20, "3."); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); }
public void test318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test318"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); dfp2.sign = (byte) 0; byte byte6 = dfp2.nans; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 0 + "'", byte6 == (byte) 0); }
public void test319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test319"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn5(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField5.getTwo(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField5.getOne(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField5.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField5.newDfp(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField5.getZero(); int int13 = dfpField5.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField5.newDfp((long) 32760); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField5.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = new org.apache.commons.math3.dfp.Dfp(dfpField5, (byte) 1); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode19 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_DOWN; dfpField5.setRoundingMode(roundingMode19); dfpField1.setRoundingMode(roundingMode19); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 25 + "'", int13 == 25); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_DOWN + "'", roundingMode19.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_DOWN)); }
public void test320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test320"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); dfpField1.setIEEEFlags((-32767)); org.junit.Assert.assertNotNull(dfp2); }
public void test321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test321"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); java.lang.String str6 = dfp5.dfp2string(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "16." + "'", str6, "16."); }
public void test322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test322"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp((byte) 0, (byte) 1); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.getLn2(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField15.getTwo(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField15.getOne(); org.apache.commons.math3.dfp.Dfp dfp20 = new org.apache.commons.math3.dfp.Dfp(dfpField15, (int) '#'); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode21 = dfpField15.getRoundingMode(); dfpField1.setRoundingMode(roundingMode21); org.apache.commons.math3.dfp.Dfp[] dfpArray23 = dfpField1.getESplit(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + roundingMode21 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode21.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfpArray23); }
public void test323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test323"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); boolean boolean4 = dfp2.isZero(); org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.getTwo(); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.multiply(8); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp10.add(dfp16); org.apache.commons.math3.dfp.Dfp dfp18 = dfp16.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField22.getTwo(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField22.getOne(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField22.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField22.getLn10(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField22.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); int int33 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode34 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp35 = dfp32.trunc(roundingMode34); org.apache.commons.math3.dfp.Dfp dfp37 = dfp35.divide(10); org.apache.commons.math3.dfp.Dfp dfp38 = dfp37.getZero(); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField22.newDfp(dfp37); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); boolean boolean43 = dfp42.negativeOrNull(); int int44 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField46.getTwo(); org.apache.commons.math3.dfp.Dfp dfp49 = dfp42.add(dfp48); org.apache.commons.math3.dfp.Dfp dfp50 = dfp48.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField52 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField52.getLn10(); boolean boolean54 = dfp53.negativeOrNull(); int int55 = dfp53.log10K(); org.apache.commons.math3.dfp.DfpField dfpField57 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField57.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField57.getTwo(); org.apache.commons.math3.dfp.Dfp dfp60 = dfp53.add(dfp59); org.apache.commons.math3.dfp.DfpField dfpField62 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField62.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp64 = dfpField62.getTwo(); org.apache.commons.math3.dfp.Dfp dfp65 = dfpField62.getOne(); org.apache.commons.math3.dfp.Dfp dfp67 = dfpField62.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField62.newDfp(); org.apache.commons.math3.dfp.Dfp dfp69 = dfp60.add(dfp68); org.apache.commons.math3.dfp.Dfp dfp70 = dfp50.nextAfter(dfp60); dfp70.exp = 0; org.apache.commons.math3.dfp.DfpField dfpField74 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp75 = dfpField74.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray76 = dfpField74.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp78 = dfpField74.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp79 = dfpField74.getOne(); org.apache.commons.math3.dfp.Dfp dfp80 = dfp70.newInstance(dfp79); org.apache.commons.math3.dfp.Dfp dfp81 = dfp16.dotrap(32768, "0.0e0", dfp37, dfp80); org.apache.commons.math3.dfp.Dfp dfp82 = dfp2.nextAfter(dfp16); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertTrue("'" + roundingMode34 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode34.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfpArray76); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertNotNull(dfp79); org.junit.Assert.assertNotNull(dfp80); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp82); }
public void test324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test324"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getZero(); int int9 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.newDfp((long) 32760); boolean boolean12 = dfp11.strictlyPositive(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 25 + "'", int9 == 25); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); }
public void test325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test325"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp7.newInstance((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp11 = dfp9.newInstance(10L); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); boolean boolean15 = dfp14.negativeOrNull(); int int16 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField18.getTwo(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp14.add(dfp20); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); boolean boolean25 = dfp24.negativeOrNull(); int int26 = dfp24.log10K(); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp24.add(dfp30); org.apache.commons.math3.dfp.Dfp dfp32 = dfp20.divide(dfp24); org.apache.commons.math3.dfp.Dfp dfp33 = dfp20.newInstance(); boolean boolean34 = dfp9.equals((java.lang.Object) dfp20); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getLn10(); boolean boolean38 = dfp37.negativeOrNull(); int int39 = dfp37.log10K(); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField41.getTwo(); org.apache.commons.math3.dfp.Dfp dfp44 = dfp37.add(dfp43); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField46.getTwo(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField46.getOne(); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField46.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField46.newDfp(); org.apache.commons.math3.dfp.Dfp dfp53 = dfp44.add(dfp52); double double54 = dfp52.toDouble(); int int55 = dfp52.exp; org.apache.commons.math3.dfp.DfpField dfpField57 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField57.getLn10(); boolean boolean59 = dfp58.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField61 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp62 = dfpField61.getLn10(); boolean boolean63 = dfp62.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp58.multiply(dfp62); org.apache.commons.math3.dfp.Dfp dfp65 = dfp52.newInstance(dfp64); org.apache.commons.math3.dfp.DfpField dfpField67 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp69 = dfpField67.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp71 = dfp69.newInstance("0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667"); org.apache.commons.math3.dfp.Dfp dfp72 = org.apache.commons.math3.dfp.Dfp.copysign(dfp52, dfp71); org.apache.commons.math3.dfp.DfpField dfpField74 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp75 = dfpField74.getLn10(); int int76 = dfp75.log10K(); org.apache.commons.math3.dfp.DfpField dfpField78 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp79 = dfpField78.getLn10(); int int80 = dfp79.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode81 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp82 = dfp79.trunc(roundingMode81); java.lang.String str83 = dfp82.toString(); org.apache.commons.math3.dfp.Dfp dfp84 = dfp75.divide(dfp82); org.apache.commons.math3.dfp.DfpField dfpField85 = dfp75.getField(); org.apache.commons.math3.dfp.Dfp dfp86 = dfp71.add(dfp75); org.apache.commons.math3.dfp.Dfp dfp87 = dfp9.multiply(dfp86); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0); org.junit.Assert.assertNotNull(dfp79); org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0); org.junit.Assert.assertTrue("'" + roundingMode81 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode81.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "3." + "'", str83, "3."); org.junit.Assert.assertNotNull(dfp84); org.junit.Assert.assertNotNull(dfpField85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertNotNull(dfp87); }
public void test326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test326"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "hi!"); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); }
public void test327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test327"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getLn2Split(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField10, 16); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField10.getLn5(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField10.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField10.getZero(); org.apache.commons.math3.dfp.Dfp[] dfpArray17 = dfpField10.getESplit(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField10.getLn2(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField10.getLn5(); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField10.getSqr3(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField1.newDfp(dfp20); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfpArray8); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfpArray17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); }
public void test328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test328"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_UP; org.apache.commons.math3.dfp.Dfp dfp9 = dfp7.trunc(roundingMode8); byte byte10 = dfp9.nans; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_UP + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_UP)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 0 + "'", byte10 == (byte) 0); }
public void test329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test329"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); int int9 = dfp8.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode10 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp11 = dfp8.trunc(roundingMode10); org.apache.commons.math3.dfp.Dfp dfp13 = dfp11.divide(10); org.apache.commons.math3.dfp.Dfp dfp14 = dfp13.getZero(); boolean boolean15 = dfp13.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp13.floor(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField1.newDfp(dfp16); org.apache.commons.math3.dfp.Dfp dfp18 = dfp17.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField19 = dfp18.getField(); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getZero(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + roundingMode10 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode10.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfpField19); org.junit.Assert.assertNotNull(dfp20); }
public void test330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test330"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); int int5 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField7.getTwo(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField7.getOne(); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField7, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.nextAfter(dfp12); org.apache.commons.math3.dfp.Dfp dfp15 = dfp2.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp17 = dfp2.newInstance((double) 2); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp17); }
public void test331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test331"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp10 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e"); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp(0L); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); }
public void test332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test332"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); int[] intArray18 = dfp4.mant; org.apache.commons.math3.dfp.Dfp dfp20 = dfp4.newInstance((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); int int24 = dfp23.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode25 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp26 = dfp23.trunc(roundingMode25); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField28.getOne(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField28.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp35 = new org.apache.commons.math3.dfp.Dfp(dfpField28, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp36 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp20, dfp23, dfp35); java.lang.String str37 = dfp20.toString(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35]"); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0); org.junit.Assert.assertTrue("'" + roundingMode25 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode25.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1." + "'", str37, "1."); }
public void test333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test333"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (double) 100L); int int4 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 2); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4); org.junit.Assert.assertNotNull(dfp6); }
public void test334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test334"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getTwo(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp11.power10((int) (short) -1); dfp11.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp8.nextAfter(dfp11); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField20.getOne(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField20.getLn2(); dfpField20.setIEEEFlags((int) (short) 0); org.apache.commons.math3.dfp.Dfp dfp29 = new org.apache.commons.math3.dfp.Dfp(dfpField20, (byte) -1, (byte) 1); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField20.newDfp((double) 32760); org.apache.commons.math3.dfp.Dfp dfp32 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp18, dfp31); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); }
public void test335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test335"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); boolean boolean14 = dfp13.negativeOrNull(); int int15 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField17.getTwo(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp13.add(dfp19); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField22.getTwo(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField22.getOne(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField22.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField22.newDfp(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp20.add(dfp28); org.apache.commons.math3.dfp.Dfp dfp30 = dfp10.nextAfter(dfp20); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField31 = dfp20.getField(); byte byte32 = dfp20.sign; int int33 = dfp20.classify(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfpField31); org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 1 + "'", byte32 == (byte) 1); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); }
public void test336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test336"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp[] dfpArray2 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) (short) 10); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass6 = dfpField1.getRuntimeClass(); org.junit.Assert.assertNotNull(dfpArray2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test337"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); boolean boolean9 = dfp2.strictlyNegative(); int int11 = dfp2.complement((int) (short) 1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9999 + "'", int11 == 9999); }
public void test338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test338"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.getTwo(); dfp9.nans = (byte) 10; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); }
public void test339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test339"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp5.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.newInstance((int) 'a'); byte byte11 = dfp10.nans; boolean boolean12 = dfp10.isNaN(); dfp10.sign = (byte) -1; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test340"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); boolean boolean12 = dfp11.negativeOrNull(); int int13 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField15.getTwo(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp11.add(dfp17); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.Dfp dfp29 = dfp17.divide(dfp21); double[] doubleArray30 = dfp21.toSplitDouble(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp6.multiply(dfp21); dfp6.sign = (byte) 10; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[2.302584648132324, 4.4486172146526797E-7]"); org.junit.Assert.assertNotNull(dfp31); }
public void test341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test341"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; dfpField1.setRoundingMode(roundingMode4); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass6 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn2(); dfpField1.setIEEEFlags(1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(wildcardClass6); org.junit.Assert.assertNotNull(dfp7); }
public void test342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test342"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp10.align(0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp10.divide(dfp21); org.apache.commons.math3.dfp.Dfp dfp26 = dfp10.power10((int) '#'); org.apache.commons.math3.dfp.Dfp dfp28 = dfp26.multiply((int) (short) 1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp28); }
public void test343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test343"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp((long) 0); org.apache.commons.math3.dfp.Dfp[] dfpArray4 = dfpField1.getLn5Split(); org.apache.commons.math3.dfp.Dfp[] dfpArray5 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp((byte) 2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfpArray4); org.junit.Assert.assertNotNull(dfpArray5); org.junit.Assert.assertNotNull(dfp7); }
public void test344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test344"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((int) (short) 10); byte byte17 = dfp16.sign; org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); int int21 = dfp20.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); int int25 = dfp24.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode26 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp27 = dfp24.trunc(roundingMode26); java.lang.String str28 = dfp27.toString(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp20.divide(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp9, dfp16, dfp27); boolean boolean31 = dfp16.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp35 = new org.apache.commons.math3.dfp.Dfp(dfpField33, (byte) 2); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField33.newDfp((long) '4'); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField33.getZero(); org.apache.commons.math3.dfp.Dfp dfp39 = dfp16.newInstance(dfp38); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 1 + "'", byte17 == (byte) 1); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertTrue("'" + roundingMode26 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode26.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "3." + "'", str28, "3."); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); }
public void test345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test345"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); }
public void test346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test346"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); org.apache.commons.math3.dfp.Dfp dfp19 = dfp9.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp19.getZero(); int int21 = dfp20.exp; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); }
public void test347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test347"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField10 = dfp9.getField(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfpField10); }
public void test348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test348"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); int int7 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp9 = dfp6.trunc(roundingMode8); java.lang.String str10 = dfp9.toString(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(dfp9); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.multiply(0); dfp13.shiftLeft(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "3." + "'", str10, "3."); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp13); }
public void test349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test349"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp[] dfpArray10 = dfpField1.getLn2Split(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getSqr2Reciprocal(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfpArray8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfpArray10); org.junit.Assert.assertNotNull(dfp11); }
public void test350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test350"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField30.getOne(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField30.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField30.newDfp(); org.apache.commons.math3.dfp.Dfp dfp37 = dfp28.add(dfp36); double double38 = dfp36.toDouble(); int int39 = dfp36.exp; org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); java.lang.String str50 = dfp49.toString(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp42.divide(dfp49); org.apache.commons.math3.dfp.Dfp dfp52 = dfp6.dotrap(100, "", dfp36, dfp51); org.apache.commons.math3.dfp.Dfp dfp53 = dfp6.rint(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3." + "'", str50, "3."); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); }
public void test351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test351"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp7.getZero(); java.lang.String str9 = dfp7.toString(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166" + "'", str9, "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166"); }
public void test352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test352"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField30.getOne(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField30.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField30.newDfp(); org.apache.commons.math3.dfp.Dfp dfp37 = dfp28.add(dfp36); double double38 = dfp36.toDouble(); int int39 = dfp36.exp; org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); java.lang.String str50 = dfp49.toString(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp42.divide(dfp49); org.apache.commons.math3.dfp.Dfp dfp52 = dfp6.dotrap(100, "", dfp36, dfp51); java.lang.String str53 = dfp52.toString(); java.lang.Class<?> wildcardClass54 = dfp52.getClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3." + "'", str50, "3."); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667" + "'", str53, "0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667"); org.junit.Assert.assertNotNull(wildcardClass54); }
public void test353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test353"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); int int8 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp10 = dfp7.trunc(roundingMode9); java.lang.String str11 = dfp10.toString(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp10.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp15 = dfp13.newInstance((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField1.newDfp(dfp13); byte byte17 = dfp13.sign; org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode9.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3." + "'", str11, "3."); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 1 + "'", byte17 == (byte) 1); }
public void test354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test354"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 10); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_ODD; dfpField1.setRoundingMode(roundingMode9); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField1, ""); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0"); } catch (java.lang.StringIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_ODD + "'", roundingMode9.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_ODD)); }
public void test355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test355"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getTwo(); dfpField1.setIEEEFlagsBits(5); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getLn5(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); }
public void test356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test356"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); boolean boolean10 = dfp8.isInfinite(); java.lang.String str11 = dfp8.toString(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray15 = dfpField13.getSqr2Split(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField17.getTwo(); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField17.getOne(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField17.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass23 = dfpField17.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField17.newDfp((double) ' '); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField17.getPi(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField13.newDfp(dfp26); org.apache.commons.math3.dfp.Dfp dfp29 = dfp26.divide(0); org.apache.commons.math3.dfp.Dfp dfp30 = dfp8.add(dfp26); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2." + "'", str11, "2."); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfpArray15); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(wildcardClass23); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); }
public void test357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test357"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField4 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField4.getLn10(); boolean boolean6 = dfp5.negativeOrNull(); int int7 = dfp5.log10K(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField9.getTwo(); org.apache.commons.math3.dfp.Dfp dfp12 = dfp5.add(dfp11); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.subtract(dfp12); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); boolean boolean20 = dfp18.isZero(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.getTwo(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp18.multiply(8); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp27 = new org.apache.commons.math3.dfp.Dfp(dfpField25, 16); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField25.getLn5(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField25.newDfp((byte) -1); org.apache.commons.math3.dfp.DfpField dfpField32 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField32.getLn5(); org.apache.commons.math3.dfp.Dfp dfp34 = dfp12.trap((int) (byte) 100, "3.", dfp23, dfp30, dfp33); int int36 = dfp33.complement((-8)); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8); }
public void test358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test358"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp7.getTwo(); dfp8.shiftRight(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); }
public void test359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test359"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getOne(); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField7 = dfp6.getField(); int int8 = dfp6.log10K(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfpField7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test360"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); dfpField1.setIEEEFlags((int) (short) 0); int int8 = dfpField1.getIEEEFlags(); int int9 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.getPi(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp("2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e"); boolean boolean13 = dfp12.positiveOrNull(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); }
public void test361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test361"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.Dfp dfp17 = dfp16.getZero(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField1.newDfp(dfp16); int int19 = dfp18.log10K(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); }
public void test362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test362"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp10 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e"); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp(0L); java.lang.Class<?> wildcardClass13 = dfp12.getClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(wildcardClass13); }
public void test363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test363"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 2); org.apache.commons.math3.dfp.Dfp dfp4 = dfp3.ceil(); org.junit.Assert.assertNotNull(dfp4); }
public void test364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test364"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getLn2(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField1); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfpArray8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); }
public void test365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test365"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfp3.newInstance("0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667"); org.apache.commons.math3.dfp.Dfp dfp6 = dfp5.getZero(); org.apache.commons.math3.dfp.Dfp dfp7 = dfp5.getZero(); int int9 = dfp7.round(5); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16); }
public void test366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test366"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); java.lang.String str7 = dfp6.dfp2string(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10." + "'", str7, "10."); }
public void test367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test367"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); int int8 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField10.getTwo(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp6.add(dfp12); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); boolean boolean17 = dfp16.negativeOrNull(); int int18 = dfp16.log10K(); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp16.add(dfp22); org.apache.commons.math3.dfp.Dfp dfp24 = dfp12.divide(dfp16); int int25 = dfp12.getRadixDigits(); int int26 = dfp12.intValue(); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField28.getOne(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField28.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp35 = new org.apache.commons.math3.dfp.Dfp(dfpField28, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp36 = dfp12.divide(dfp35); boolean boolean37 = dfp2.unequal(dfp36); org.apache.commons.math3.dfp.Dfp dfp39 = dfp36.newInstance(100L); org.apache.commons.math3.dfp.Dfp dfp40 = dfp36.newInstance(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 25 + "'", int25 == 25); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); }
public void test368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test368"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getE(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField21.newDfp((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); int int29 = dfp27.log10K(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField31.getTwo(); org.apache.commons.math3.dfp.Dfp dfp34 = dfp27.add(dfp33); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField36.getOne(); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField36.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField36.newDfp(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp34.add(dfp42); double double44 = dfp42.toDouble(); int int45 = dfp42.exp; org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getLn10(); boolean boolean49 = dfp48.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getLn10(); boolean boolean53 = dfp52.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp48.multiply(dfp52); org.apache.commons.math3.dfp.Dfp dfp55 = dfp42.newInstance(dfp54); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField56 = dfp42.getField(); org.apache.commons.math3.dfp.DfpField dfpField58 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField58.getLn10(); boolean boolean60 = dfp59.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField62 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField62.getLn10(); boolean boolean64 = dfp63.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp65 = dfp59.multiply(dfp63); org.apache.commons.math3.dfp.DfpField dfpField67 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField67.getLn10(); int int69 = dfp68.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode70 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp71 = dfp68.trunc(roundingMode70); org.apache.commons.math3.dfp.Dfp dfp73 = dfp71.divide(10); org.apache.commons.math3.dfp.DfpField dfpField75 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField75.getLn10(); boolean boolean77 = dfp76.negativeOrNull(); int int78 = dfp76.log10K(); org.apache.commons.math3.dfp.DfpField dfpField80 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp81 = dfpField80.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp82 = dfpField80.getTwo(); org.apache.commons.math3.dfp.Dfp dfp83 = dfp76.add(dfp82); boolean boolean84 = dfp82.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp85 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp59, dfp73, dfp82); org.apache.commons.math3.dfp.Dfp dfp86 = dfp17.trap(10000, "3.", dfp24, dfp42, dfp85); boolean boolean87 = dfp42.strictlyPositive(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfpField56); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0); org.junit.Assert.assertTrue("'" + roundingMode70 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode70.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp83); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); }
public void test369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test369"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; dfpField1.setRoundingMode(roundingMode4); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass6 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn2(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((byte) 10); int int11 = dfp9.round((int) (byte) 10); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(wildcardClass6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16); }
public void test370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test370"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp7.newInstance((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp11 = dfp9.newInstance(10L); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); boolean boolean15 = dfp14.negativeOrNull(); int int16 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField18.getTwo(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp14.add(dfp20); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); boolean boolean25 = dfp24.negativeOrNull(); int int26 = dfp24.log10K(); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField28.getTwo(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp24.add(dfp30); org.apache.commons.math3.dfp.Dfp dfp32 = dfp20.divide(dfp24); org.apache.commons.math3.dfp.Dfp dfp33 = dfp20.newInstance(); boolean boolean34 = dfp9.equals((java.lang.Object) dfp20); org.apache.commons.math3.dfp.Dfp dfp36 = dfp9.newInstance((byte) 0); java.lang.String str37 = dfp9.dfp2sci(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e" + "'", str37, "1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e"); }
public void test371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test371"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-32767)); org.apache.commons.math3.dfp.Dfp dfp7 = dfp5.divide((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); int int13 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField15.getTwo(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField15.getOne(); org.apache.commons.math3.dfp.Dfp dfp20 = new org.apache.commons.math3.dfp.Dfp(dfpField15, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp21 = dfp10.nextAfter(dfp20); org.apache.commons.math3.dfp.Dfp dfp22 = dfp5.subtract(dfp10); org.apache.commons.math3.dfp.Dfp dfp24 = dfp22.divide((int) (short) 0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); }
public void test372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test372"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getESplit(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp("3."); org.apache.commons.math3.dfp.DfpField dfpField7 = dfp6.getField(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfpField7); org.junit.Assert.assertNotNull(dfp8); }
public void test373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test373"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (double) 100L); int int4 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); }
public void test374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test374"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); org.apache.commons.math3.dfp.Dfp dfp19 = dfp9.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField21.getOne(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField21.newDfp((byte) 10); int int27 = dfp26.intValue(); org.apache.commons.math3.dfp.Dfp dfp28 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp9, dfp26); org.apache.commons.math3.dfp.Dfp dfp30 = dfp26.newInstance((int) (short) 100); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp30); }
public void test375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test375"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp5 = dfp4.negate(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); }
public void test376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test376"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); boolean boolean10 = dfp8.isInfinite(); java.lang.String str11 = dfp8.toString(); org.apache.commons.math3.dfp.DfpField dfpField12 = dfp8.getField(); org.apache.commons.math3.dfp.Dfp dfp14 = new org.apache.commons.math3.dfp.Dfp(dfpField12, 0L); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField12.getZero(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField12.newDfp((long) ' '); dfpField12.clearIEEEFlags(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2." + "'", str11, "2."); org.junit.Assert.assertNotNull(dfpField12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp17); }
public void test377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test377"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.newDfp((int) (short) 100); dfpField1.setIEEEFlags((-4)); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); }
public void test378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test378"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); int int24 = dfp23.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode25 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp26 = dfp23.trunc(roundingMode25); org.apache.commons.math3.dfp.Dfp dfp28 = dfp23.power10((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp30 = dfp23.multiply((int) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp31 = dfp23.newInstance(); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); int int35 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode36 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp37 = dfp34.trunc(roundingMode36); java.lang.String str38 = dfp37.toString(); org.apache.commons.math3.dfp.Dfp dfp40 = dfp37.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp42 = dfp40.newInstance((int) 'a'); byte byte43 = dfp42.nans; org.apache.commons.math3.dfp.Dfp dfp44 = dfp42.ceil(); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getLn10(); boolean boolean48 = dfp47.negativeOrNull(); int int49 = dfp47.log10K(); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField51.getTwo(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp47.add(dfp53); org.apache.commons.math3.dfp.DfpField dfpField56 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField56.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField56.getTwo(); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField56.getOne(); org.apache.commons.math3.dfp.Dfp dfp61 = dfpField56.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp62 = dfpField56.newDfp(); org.apache.commons.math3.dfp.Dfp dfp63 = dfp54.add(dfp62); org.apache.commons.math3.dfp.DfpField dfpField65 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp66 = dfpField65.getLn10(); int int67 = dfp66.log10K(); boolean boolean68 = dfp54.greaterThan(dfp66); org.apache.commons.math3.dfp.Dfp dfp70 = dfp54.newInstance((double) 1); org.apache.commons.math3.dfp.Dfp dfp71 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp31, dfp42, dfp70); org.apache.commons.math3.dfp.Dfp dfp72 = dfp31.getZero(); boolean boolean73 = dfp8.greaterThan(dfp72); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0); org.junit.Assert.assertTrue("'" + roundingMode25 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode25.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode36.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "3." + "'", str38, "3."); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + byte43 + "' != '" + (byte) 0 + "'", byte43 == (byte) 0); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertNotNull(dfp66); org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); }
public void test379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test379"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); int int20 = dfp9.round((int) (short) 0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); }
public void test380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test380"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); int int7 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp9 = dfp6.trunc(roundingMode8); java.lang.String str10 = dfp9.toString(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(dfp9); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.multiply(0); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray17 = dfpField15.getESplit(); org.apache.commons.math3.dfp.Dfp dfp19 = new org.apache.commons.math3.dfp.Dfp(dfpField15, (-32767)); org.apache.commons.math3.dfp.Dfp dfp21 = dfp19.divide((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); boolean boolean25 = dfp24.negativeOrNull(); int int26 = dfp24.log10K(); int int27 = dfp24.log10K(); org.apache.commons.math3.dfp.DfpField dfpField29 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField29.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField29.getTwo(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField29.getOne(); org.apache.commons.math3.dfp.Dfp dfp34 = new org.apache.commons.math3.dfp.Dfp(dfpField29, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp35 = dfp24.nextAfter(dfp34); org.apache.commons.math3.dfp.Dfp dfp36 = dfp19.subtract(dfp24); boolean boolean37 = dfp2.unequal(dfp24); boolean boolean38 = dfp24.positiveOrNull(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "3." + "'", str10, "3."); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfpArray17); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true); }
public void test381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test381"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); boolean boolean10 = dfp9.negativeOrNull(); int int11 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField13.getTwo(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp9.add(dfp15); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.divide(8); boolean boolean19 = dfp9.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp5.remainder(dfp9); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); int int25 = dfp23.log10K(); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField27.getTwo(); org.apache.commons.math3.dfp.Dfp dfp30 = dfp23.add(dfp29); org.apache.commons.math3.dfp.DfpField dfpField32 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField32.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField32.getTwo(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField32.getOne(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField32.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField32.newDfp(); org.apache.commons.math3.dfp.Dfp dfp39 = dfp30.add(dfp38); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); boolean boolean44 = dfp30.greaterThan(dfp42); org.apache.commons.math3.dfp.Dfp dfp46 = dfp30.newInstance((double) 1); int[] intArray47 = dfp46.mant; dfp20.mant = intArray47; org.apache.commons.math3.dfp.Dfp dfp49 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp50 = dfp20.divide(dfp49); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(intArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"); }
public void test382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test382"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 10); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode9 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode9.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp10); }
public void test383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test383"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); dfpField1.setIEEEFlags((int) (short) 0); int int8 = dfpField1.getIEEEFlags(); int int9 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.getPi(); int int11 = dfp10.intValue(); org.apache.commons.math3.dfp.Dfp dfp12 = dfp10.negate(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3); org.junit.Assert.assertNotNull(dfp12); }
public void test384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test384"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp((byte) 0, (byte) 1); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass13 = dfpField1.getRuntimeClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(wildcardClass13); }
public void test385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test385"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp7 = dfp6.newInstance(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); }
public void test386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test386"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp((byte) 0, (byte) 1); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.getLn2(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField1.newDfp(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); int int18 = dfp17.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode19 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp20 = dfp17.trunc(roundingMode19); org.apache.commons.math3.dfp.Dfp dfp22 = dfp17.power10((int) (short) -1); dfp17.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp25 = dfp17.newInstance(1.0d); int int27 = dfp17.round((int) (byte) 0); org.apache.commons.math3.dfp.Dfp dfp29 = dfp17.newInstance((byte) 2); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); boolean boolean33 = dfp32.negativeOrNull(); int int34 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfp32.add(dfp38); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField41.getTwo(); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField41.getOne(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField41.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField41.newDfp(); org.apache.commons.math3.dfp.Dfp dfp48 = dfp39.add(dfp47); org.apache.commons.math3.dfp.DfpField dfpField50 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField50.getLn10(); int int52 = dfp51.log10K(); boolean boolean53 = dfp39.greaterThan(dfp51); boolean boolean54 = dfp39.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp55 = dfp29.divide(dfp39); org.apache.commons.math3.dfp.DfpField dfpField57 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField57.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass59 = dfpField57.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp[] dfpArray60 = dfpField57.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp63 = new org.apache.commons.math3.dfp.Dfp(dfpField57, (byte) -1, (byte) 100); boolean boolean64 = dfp39.unequal(dfp63); org.apache.commons.math3.dfp.Dfp dfp65 = dfp14.multiply(dfp39); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode19.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(wildcardClass59); org.junit.Assert.assertNotNull(dfpArray60); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertNotNull(dfp65); }
public void test387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test387"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField6 = dfp5.getField(); dfp5.sign = (byte) 1; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfpField6); }
public void test388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test388"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 3); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.newInstance((byte) 1); int int11 = dfp8.getRadixDigits(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 25 + "'", int11 == 25); }
public void test389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test389"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 0L); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.newDfp((long) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp15 = dfp13.newInstance(35.0d); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp15); }
public void test390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test390"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp[] dfpArray6 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp10.add(dfp16); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); boolean boolean21 = dfp20.negativeOrNull(); int int22 = dfp20.log10K(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField24.getTwo(); org.apache.commons.math3.dfp.Dfp dfp27 = dfp20.add(dfp26); org.apache.commons.math3.dfp.Dfp dfp28 = dfp16.divide(dfp20); org.apache.commons.math3.dfp.Dfp dfp29 = dfp16.floor(); boolean boolean30 = dfp16.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp7.remainder(dfp16); boolean boolean32 = dfp7.strictlyNegative(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfpArray6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); }
public void test391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test391"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode7 = dfpField1.getRoundingMode(); int int8 = dfpField1.getRadixDigits(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + roundingMode7 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode7.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4); }
public void test392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test392"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getTwo(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField7.getTwo(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField7.getOne(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField7.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField7.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode14 = dfpField7.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp17 = new org.apache.commons.math3.dfp.Dfp(dfpField7, (byte) 100, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField7.getSqr2(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField7.getLn2(); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField7.getLn2(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp5.subtract(dfp20); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + roundingMode14 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode14.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); }
public void test393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test393"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField6 = dfp5.getField(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp12 = new org.apache.commons.math3.dfp.Dfp(dfpField10, 16); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField14.getOne(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField14.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField14.newDfp(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField14.getZero(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp5.dotrap(10000, "", dfp12, dfp21); int[] intArray23 = dfp21.mant; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfpField6); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(intArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); }
public void test394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test394"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.multiply(2); int int11 = dfp10.log10(); org.apache.commons.math3.dfp.Dfp dfp12 = dfp10.floor(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2); org.junit.Assert.assertNotNull(dfp12); }
public void test395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test395"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.Dfp[] dfpArray5 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp[] dfpArray6 = dfpField1.getLn2Split(); dfpField1.setIEEEFlagsBits((int) (short) 0); dfpField1.clearIEEEFlags(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray5); org.junit.Assert.assertNotNull(dfpArray6); }
public void test396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test396"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp7 = dfp6.ceil(); dfp7.exp = 8; org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); }
public void test397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test397"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 2); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp((byte) 3, (byte) -1); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); }
public void test398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test398"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); int int21 = dfp8.getRadixDigits(); int int22 = dfp8.intValue(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField24.getTwo(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField24.getOne(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField24.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp31 = new org.apache.commons.math3.dfp.Dfp(dfpField24, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp32 = dfp8.divide(dfp31); org.apache.commons.math3.dfp.DfpField dfpField34 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField34.getLn10(); int int36 = dfp35.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode37 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp38 = dfp35.trunc(roundingMode37); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField39 = dfp38.getField(); org.apache.commons.math3.dfp.DfpField dfpField43 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp45 = new org.apache.commons.math3.dfp.Dfp(dfpField43, 16); org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField47.getTwo(); org.apache.commons.math3.dfp.Dfp dfp50 = dfpField47.getOne(); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField47.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField47.newDfp(); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField47.getZero(); org.apache.commons.math3.dfp.Dfp dfp55 = dfp38.dotrap(10000, "", dfp45, dfp54); org.apache.commons.math3.dfp.Dfp dfp56 = new org.apache.commons.math3.dfp.Dfp(dfp38); org.apache.commons.math3.dfp.Dfp dfp57 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp31, dfp38); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertTrue("'" + roundingMode37 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode37.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfpField39); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp57); }
public void test399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test399"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) -1, (byte) -1); dfp7.exp = 10; org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); int int13 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); int int17 = dfp16.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode18 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp19 = dfp16.trunc(roundingMode18); java.lang.String str20 = dfp19.toString(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp12.divide(dfp19); org.apache.commons.math3.dfp.Dfp dfp22 = dfp7.nextAfter(dfp12); org.apache.commons.math3.dfp.Dfp dfp24 = dfp22.newInstance("2."); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray28 = dfpField26.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField26.getZero(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField26.newDfp((int) (byte) 10); dfp31.exp = (byte) -1; org.apache.commons.math3.dfp.Dfp dfp34 = dfp22.divide(dfp31); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode18.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "3." + "'", str20, "3."); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfpArray28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp34); }
public void test400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test400"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); java.lang.String str6 = dfp5.toString(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp5.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.newInstance((int) 'a'); byte byte11 = dfp10.nans; org.apache.commons.math3.dfp.Dfp dfp12 = dfp10.ceil(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp10.power10K((-32767)); boolean boolean15 = dfp14.negativeOrNull(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3." + "'", str6, "3."); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test401"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp8.newInstance((byte) 0, (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); int int15 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getLn10(); int int19 = dfp18.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode20 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp21 = dfp18.trunc(roundingMode20); java.lang.String str22 = dfp21.toString(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp14.divide(dfp21); boolean boolean24 = dfp8.lessThan(dfp14); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField26.getSqr2Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField26.getLn5(); dfp29.exp = 0; org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray35 = dfpField33.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField33.getZero(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField33.newDfp((int) (byte) 10); int int39 = dfp38.exp; org.apache.commons.math3.dfp.Dfp dfp41 = dfp38.power10K(8); boolean boolean42 = dfp29.unequal(dfp38); org.apache.commons.math3.dfp.Dfp dfp43 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp14, dfp29); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode20.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3." + "'", str22, "3."); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfpArray35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertNotNull(dfp43); }
public void test402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test402"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfp3.getOne(); int int5 = dfp4.log10K(); org.apache.commons.math3.dfp.Dfp dfp6 = dfp4.reciprocal(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertNotNull(dfp6); }
public void test403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test403"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); int int5 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getLn5(); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); java.lang.String str13 = dfp12.toString(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); boolean boolean17 = dfp16.negativeOrNull(); int int18 = dfp16.log10K(); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField20.getTwo(); org.apache.commons.math3.dfp.Dfp dfp23 = dfp16.add(dfp22); org.apache.commons.math3.dfp.Dfp dfp25 = dfp16.divide(8); boolean boolean26 = dfp16.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp27 = dfp12.remainder(dfp16); org.apache.commons.math3.dfp.DfpField dfpField29 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField29.getLn10(); boolean boolean31 = dfp30.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp36 = dfp30.multiply(dfp34); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getLn10(); int int40 = dfp39.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode41 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp42 = dfp39.trunc(roundingMode41); org.apache.commons.math3.dfp.Dfp dfp44 = dfp42.divide(10); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getLn10(); boolean boolean48 = dfp47.negativeOrNull(); int int49 = dfp47.log10K(); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField51.getTwo(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp47.add(dfp53); boolean boolean55 = dfp53.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp56 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp30, dfp44, dfp53); boolean boolean57 = dfp56.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp59 = dfp56.multiply((int) (short) 0); org.apache.commons.math3.dfp.Dfp dfp60 = dfp12.newInstance(dfp59); org.apache.commons.math3.dfp.Dfp dfp62 = dfp60.newInstance((long) '4'); org.apache.commons.math3.dfp.Dfp dfp63 = dfp6.newInstance(dfp60); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3." + "'", str13, "3."); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertTrue("'" + roundingMode41 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode41.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp63); }
public void test404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test404"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); boolean boolean14 = dfp13.negativeOrNull(); int int15 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField17.getTwo(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp13.add(dfp19); org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField22.getTwo(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField22.getOne(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField22.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField22.newDfp(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp20.add(dfp28); org.apache.commons.math3.dfp.Dfp dfp30 = dfp10.nextAfter(dfp20); int int32 = dfp10.complement(0); org.apache.commons.math3.dfp.Dfp dfp33 = dfp10.reciprocal(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertNotNull(dfp33); }
public void test405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test405"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp(); boolean boolean5 = dfp4.isZero(); int int7 = dfp4.align((int) (short) -1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test406"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField dfpField4 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField4.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField4.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getLn10(); boolean boolean11 = dfp10.negativeOrNull(); int int12 = dfp10.log10K(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfp10.add(dfp16); org.apache.commons.math3.dfp.Dfp dfp19 = dfp17.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp20 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp7, dfp17); double double21 = dfp20.toDouble(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField1.newDfp(dfp20); dfpField1.setIEEEFlags(9998); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField1.newDfp((byte) 3); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 14674.41072270908d + "'", double21 == 14674.41072270908d); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp26); }
public void test407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test407"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); int int7 = dfpField1.getRadixDigits(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 25 + "'", int7 == 25); }
public void test408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test408"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); dfp8.shiftRight(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.floor(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); }
public void test409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test409"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn5(); dfpField1.setIEEEFlagsBits((int) (byte) 2); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp((byte) 3, (byte) -1); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getESplit(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfpArray8); }
public void test410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test410"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn5(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass22 = dfpField20.getRuntimeClass(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode23 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_FLOOR; dfpField20.setRoundingMode(roundingMode23); org.apache.commons.math3.dfp.Dfp dfp25 = dfp9.trunc(roundingMode23); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(wildcardClass22); org.junit.Assert.assertTrue("'" + roundingMode23 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_FLOOR + "'", roundingMode23.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_FLOOR)); org.junit.Assert.assertNotNull(dfp25); }
public void test411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test411"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) (-1)); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); }
public void test412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test412"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); boolean boolean9 = dfp8.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.ceil(); java.lang.String str11 = dfp10.dfp2string(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getSqr3Reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); int int19 = dfp17.log10K(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp17.add(dfp23); org.apache.commons.math3.dfp.Dfp dfp25 = dfp14.subtract(dfp24); org.apache.commons.math3.dfp.DfpField dfpField29 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField29.getLn10(); int int31 = dfp30.log10K(); boolean boolean32 = dfp30.isZero(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp35 = dfp30.multiply(8); org.apache.commons.math3.dfp.DfpField dfpField37 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp39 = new org.apache.commons.math3.dfp.Dfp(dfpField37, 16); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField37.getLn5(); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField37.newDfp((byte) -1); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn5(); org.apache.commons.math3.dfp.Dfp dfp46 = dfp24.trap((int) (byte) 100, "3.", dfp35, dfp42, dfp45); org.apache.commons.math3.dfp.Dfp dfp47 = dfp3.dotrap((int) (byte) 0, "hi!", dfp10, dfp35); org.apache.commons.math3.dfp.Dfp dfp49 = dfp10.power10((int) ' '); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3." + "'", str11, "3."); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp49); }
public void test413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test413"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp[] dfpArray6 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getSqr2Split(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfpArray6); org.junit.Assert.assertNotNull(dfpArray7); }
public void test414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test414"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) -1, (byte) -1); org.apache.commons.math3.dfp.Dfp dfp9 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (long) 32760); org.apache.commons.math3.dfp.Dfp dfp10 = dfp9.negate(); org.apache.commons.math3.dfp.Dfp dfp12 = dfp10.multiply((-1)); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp12); }
public void test415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test415"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getE(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField21.newDfp((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); int int29 = dfp27.log10K(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField31.getTwo(); org.apache.commons.math3.dfp.Dfp dfp34 = dfp27.add(dfp33); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField36.getTwo(); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField36.getOne(); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField36.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField36.newDfp(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp34.add(dfp42); double double44 = dfp42.toDouble(); int int45 = dfp42.exp; org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getLn10(); boolean boolean49 = dfp48.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getLn10(); boolean boolean53 = dfp52.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp48.multiply(dfp52); org.apache.commons.math3.dfp.Dfp dfp55 = dfp42.newInstance(dfp54); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField56 = dfp42.getField(); org.apache.commons.math3.dfp.DfpField dfpField58 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField58.getLn10(); boolean boolean60 = dfp59.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField62 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField62.getLn10(); boolean boolean64 = dfp63.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp65 = dfp59.multiply(dfp63); org.apache.commons.math3.dfp.DfpField dfpField67 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField67.getLn10(); int int69 = dfp68.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode70 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp71 = dfp68.trunc(roundingMode70); org.apache.commons.math3.dfp.Dfp dfp73 = dfp71.divide(10); org.apache.commons.math3.dfp.DfpField dfpField75 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField75.getLn10(); boolean boolean77 = dfp76.negativeOrNull(); int int78 = dfp76.log10K(); org.apache.commons.math3.dfp.DfpField dfpField80 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp81 = dfpField80.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp82 = dfpField80.getTwo(); org.apache.commons.math3.dfp.Dfp dfp83 = dfp76.add(dfp82); boolean boolean84 = dfp82.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp85 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp59, dfp73, dfp82); org.apache.commons.math3.dfp.Dfp dfp86 = dfp17.trap(10000, "3.", dfp24, dfp42, dfp85); int int87 = dfp42.log10K(); org.apache.commons.math3.dfp.Dfp dfp88 = dfp42.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfpField56); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0); org.junit.Assert.assertTrue("'" + roundingMode70 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode70.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfp83); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1)); org.junit.Assert.assertNotNull(dfp88); }
public void test416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test416"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); java.lang.String str7 = dfp6.toString(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10." + "'", str7, "10."); }
public void test417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test417"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.Dfp dfp18 = dfp6.newInstance((byte) 2); int int20 = dfp18.round(0); org.apache.commons.math3.dfp.Dfp dfp22 = dfp18.newInstance((byte) 10); java.lang.String str23 = dfp22.toString(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "10." + "'", str23, "10."); }
public void test418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test418"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-32767)); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp8 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 1); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass9 = dfpField1.getRuntimeClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test419"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); org.apache.commons.math3.dfp.Dfp dfp18 = dfp4.rint(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp18.abs(); int int20 = dfp19.log10K(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); }
public void test420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test420"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getSqr2(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); int int16 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode17 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp18 = dfp15.trunc(roundingMode17); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField19 = dfp18.getField(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp25 = new org.apache.commons.math3.dfp.Dfp(dfpField23, 16); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField27.getTwo(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField27.getOne(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField27.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField27.newDfp(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField27.getZero(); org.apache.commons.math3.dfp.Dfp dfp35 = dfp18.dotrap(10000, "", dfp25, dfp34); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField1.newDfp(dfp25); org.apache.commons.math3.dfp.Dfp dfp38 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "hi!"); boolean boolean39 = dfp38.isZero(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode17.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfpField19); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); }
public void test421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test421"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); int int8 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField10.getTwo(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp6.add(dfp12); org.apache.commons.math3.dfp.Dfp dfp14 = dfp12.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); int int19 = dfp17.log10K(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp17.add(dfp23); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField26.getTwo(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField26.getOne(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField26.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField26.newDfp(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp24.add(dfp32); org.apache.commons.math3.dfp.Dfp dfp34 = dfp14.nextAfter(dfp24); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField35 = dfp24.getField(); int[] intArray36 = dfp24.mant; boolean boolean37 = dfp2.unequal(dfp24); org.apache.commons.math3.dfp.DfpField dfpField39 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField39.getLn10(); boolean boolean41 = dfp40.negativeOrNull(); int int42 = dfp40.log10K(); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField44.getTwo(); org.apache.commons.math3.dfp.Dfp dfp47 = dfp40.add(dfp46); org.apache.commons.math3.dfp.DfpField dfpField49 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp50 = dfpField49.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField49.getTwo(); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField49.getOne(); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField49.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField49.newDfp(); org.apache.commons.math3.dfp.Dfp dfp56 = dfp47.add(dfp55); double double57 = dfp55.toDouble(); int int58 = dfp55.exp; org.apache.commons.math3.dfp.DfpField dfpField60 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp61 = dfpField60.getLn10(); boolean boolean62 = dfp61.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField64 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp65 = dfpField64.getLn10(); boolean boolean66 = dfp65.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp67 = dfp61.multiply(dfp65); org.apache.commons.math3.dfp.Dfp dfp68 = dfp55.newInstance(dfp67); org.apache.commons.math3.dfp.DfpField dfpField70 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp72 = dfpField70.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp74 = dfp72.newInstance("0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667"); org.apache.commons.math3.dfp.Dfp dfp75 = org.apache.commons.math3.dfp.Dfp.copysign(dfp55, dfp74); org.apache.commons.math3.dfp.DfpField dfpField77 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp78 = dfpField77.getLn10(); int int79 = dfp78.log10K(); org.apache.commons.math3.dfp.DfpField dfpField81 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp82 = dfpField81.getLn10(); int int83 = dfp82.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode84 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp85 = dfp82.trunc(roundingMode84); java.lang.String str86 = dfp85.toString(); org.apache.commons.math3.dfp.Dfp dfp87 = dfp78.divide(dfp85); org.apache.commons.math3.dfp.DfpField dfpField88 = dfp78.getField(); org.apache.commons.math3.dfp.Dfp dfp89 = dfp74.add(dfp78); boolean boolean90 = dfp2.equals((java.lang.Object) dfp89); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfpField35); org.junit.Assert.assertNotNull(intArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[9598, 508, 9972, 235, 5248, 6773, 2609, 6757, 9009, 3327, 7603, 7729, 8628, 148, 6011, 4207, 8436, 4546, 7991, 8401, 456, 2994, 8509, 3025, 4]"); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0); org.junit.Assert.assertTrue("'" + roundingMode84 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode84.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertEquals("'" + str86 + "' != '" + "3." + "'", str86, "3."); org.junit.Assert.assertNotNull(dfp87); org.junit.Assert.assertNotNull(dfpField88); org.junit.Assert.assertNotNull(dfp89); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false); }
public void test422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test422"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp[] dfpArray9 = dfpField1.getLn2Split(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfpArray9); }
public void test423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test423"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp((long) 0); int[] intArray4 = dfp3.mant; boolean boolean5 = dfp3.isInfinite(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(intArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test424"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getZero(); int int9 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.newDfp((long) 32760); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getLn10(); boolean boolean26 = dfp25.negativeOrNull(); int int27 = dfp25.log10K(); org.apache.commons.math3.dfp.DfpField dfpField29 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField29.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField29.getTwo(); org.apache.commons.math3.dfp.Dfp dfp32 = dfp25.add(dfp31); org.apache.commons.math3.dfp.Dfp dfp33 = dfp21.divide(dfp25); double[] doubleArray34 = dfp25.toSplitDouble(); org.apache.commons.math3.dfp.Dfp dfp35 = dfp12.divide(dfp25); org.apache.commons.math3.dfp.DfpField dfpField37 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField37.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray39 = dfpField37.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField37.getZero(); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField37.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn10(); int int46 = dfp45.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode47 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp48 = dfp45.trunc(roundingMode47); org.apache.commons.math3.dfp.Dfp dfp50 = dfp45.power10((int) (short) -1); dfp45.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp52 = dfp42.subtract(dfp45); org.apache.commons.math3.dfp.DfpField dfpField56 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField56.getLn10(); boolean boolean58 = dfp57.negativeOrNull(); int int59 = dfp57.log10K(); org.apache.commons.math3.dfp.DfpField dfpField61 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp62 = dfpField61.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField61.getTwo(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp57.add(dfp63); org.apache.commons.math3.dfp.DfpField dfpField66 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp67 = dfpField66.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField66.getTwo(); org.apache.commons.math3.dfp.Dfp dfp69 = dfpField66.getOne(); org.apache.commons.math3.dfp.Dfp dfp71 = dfpField66.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp72 = dfpField66.newDfp(); org.apache.commons.math3.dfp.Dfp dfp73 = dfp64.add(dfp72); double double74 = dfp72.toDouble(); int int75 = dfp72.exp; org.apache.commons.math3.dfp.DfpField dfpField77 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp78 = dfpField77.getLn10(); int int79 = dfp78.log10K(); org.apache.commons.math3.dfp.DfpField dfpField81 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp82 = dfpField81.getLn10(); int int83 = dfp82.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode84 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp85 = dfp82.trunc(roundingMode84); java.lang.String str86 = dfp85.toString(); org.apache.commons.math3.dfp.Dfp dfp87 = dfp78.divide(dfp85); org.apache.commons.math3.dfp.Dfp dfp88 = dfp42.dotrap(100, "", dfp72, dfp87); boolean boolean89 = dfp88.strictlyPositive(); org.apache.commons.math3.dfp.Dfp dfp90 = dfp12.newInstance(dfp88); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 25 + "'", int9 == 25); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[2.302584648132324, 4.4486172146526797E-7]"); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfpArray39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertTrue("'" + roundingMode47 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode47.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0); org.junit.Assert.assertNotNull(dfp78); org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0); org.junit.Assert.assertTrue("'" + roundingMode84 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode84.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertEquals("'" + str86 + "' != '" + "3." + "'", str86, "3."); org.junit.Assert.assertNotNull(dfp87); org.junit.Assert.assertNotNull(dfp88); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true); org.junit.Assert.assertNotNull(dfp90); }
public void test425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test425"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp(25); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.newDfp((byte) 100); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp8); }
public void test426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test426"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp("hi!"); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass10 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getZero(); dfpField1.setIEEEFlags(6); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(wildcardClass10); org.junit.Assert.assertNotNull(dfp11); }
public void test427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test427"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getTwo(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp11.power10((int) (short) -1); dfp11.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp8.nextAfter(dfp11); int[] intArray19 = dfp8.mant; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(intArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]"); }
public void test428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test428"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp5.divide(10); org.apache.commons.math3.dfp.Dfp dfp8 = dfp7.getZero(); boolean boolean9 = dfp7.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp7.floor(); double[] doubleArray11 = dfp10.toSplitDouble(); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getLn10(); boolean boolean15 = dfp14.negativeOrNull(); int int16 = dfp14.log10K(); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField18.getTwo(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp14.add(dfp20); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField23.getTwo(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField23.getOne(); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField23.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField23.newDfp(); org.apache.commons.math3.dfp.Dfp dfp30 = dfp21.add(dfp29); double double31 = dfp29.toDouble(); int int32 = dfp29.exp; org.apache.commons.math3.dfp.DfpField dfpField34 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField34.getLn10(); boolean boolean36 = dfp35.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getLn10(); boolean boolean40 = dfp39.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp35.multiply(dfp39); org.apache.commons.math3.dfp.Dfp dfp42 = dfp29.newInstance(dfp41); org.apache.commons.math3.dfp.Dfp dfp43 = dfp42.negate(); org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp[] dfpArray48 = dfpField47.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField47.getOne(); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField51.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField56 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField56.getLn10(); boolean boolean58 = dfp57.negativeOrNull(); int int59 = dfp57.log10K(); org.apache.commons.math3.dfp.DfpField dfpField61 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp62 = dfpField61.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField61.getTwo(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp57.add(dfp63); org.apache.commons.math3.dfp.Dfp dfp66 = dfp64.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp67 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp54, dfp64); org.apache.commons.math3.dfp.Dfp dfp68 = dfp54.rint(); org.apache.commons.math3.dfp.Dfp dfp69 = dfp68.abs(); org.apache.commons.math3.dfp.Dfp dfp70 = null; org.apache.commons.math3.dfp.Dfp dfp71 = dfp43.trap((int) (byte) 2, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e", dfp49, dfp68, dfp70); double double72 = dfp68.toDouble(); org.apache.commons.math3.dfp.Dfp dfp73 = dfp10.add(dfp68); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfpArray48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp66); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 35.0d + "'", double72 == 35.0d); org.junit.Assert.assertNotNull(dfp73); }
public void test429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test429"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); double double18 = dfp17.toDouble(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp17.ceil(); dfp19.shiftRight(); org.apache.commons.math3.dfp.Dfp dfp21 = dfp19.floor(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 14674.41072270908d + "'", double18 == 14674.41072270908d); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); }
public void test430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test430"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getSqr2(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); int int16 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode17 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp18 = dfp15.trunc(roundingMode17); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField19 = dfp18.getField(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp25 = new org.apache.commons.math3.dfp.Dfp(dfpField23, 16); org.apache.commons.math3.dfp.DfpField dfpField27 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp28 = dfpField27.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField27.getTwo(); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField27.getOne(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField27.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField27.newDfp(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField27.getZero(); org.apache.commons.math3.dfp.Dfp dfp35 = dfp18.dotrap(10000, "", dfp25, dfp34); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField1.newDfp(dfp25); org.apache.commons.math3.dfp.Dfp dfp37 = dfp25.ceil(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode17.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfpField19); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); }
public void test431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test431"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField5.getTwo(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField5.getOne(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField5.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass11 = dfpField5.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField5.newDfp((double) ' '); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField5.getPi(); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField1.newDfp(dfp14); org.apache.commons.math3.dfp.Dfp dfp17 = dfp14.divide(0); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField19.getOne(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField19.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField19.getLn10(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp26.newInstance((byte) 0, (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); int int33 = dfp32.log10K(); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getLn10(); int int37 = dfp36.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode38 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp39 = dfp36.trunc(roundingMode38); java.lang.String str40 = dfp39.toString(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp32.divide(dfp39); boolean boolean42 = dfp26.lessThan(dfp32); org.apache.commons.math3.dfp.Dfp dfp43 = new org.apache.commons.math3.dfp.Dfp(dfp32); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField45.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField50 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField50.getLn10(); boolean boolean52 = dfp51.negativeOrNull(); int int53 = dfp51.log10K(); org.apache.commons.math3.dfp.DfpField dfpField55 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField55.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField55.getTwo(); org.apache.commons.math3.dfp.Dfp dfp58 = dfp51.add(dfp57); org.apache.commons.math3.dfp.Dfp dfp60 = dfp58.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp61 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp48, dfp58); org.apache.commons.math3.dfp.Dfp dfp62 = dfp48.rint(); org.apache.commons.math3.dfp.Dfp dfp63 = dfp43.divide(dfp62); org.apache.commons.math3.dfp.Dfp dfp64 = dfp17.subtract(dfp63); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(wildcardClass11); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0); org.junit.Assert.assertTrue("'" + roundingMode38 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode38.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "3." + "'", str40, "3."); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertNotNull(dfp64); }
public void test432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test432"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (-32767)); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp7); }
public void test433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test433"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getOne(); int int10 = dfp9.intValue(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); }
public void test434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test434"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); dfpField1.clearIEEEFlags(); org.junit.Assert.assertNotNull(dfp4); }
public void test435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test435"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp((long) 0); org.apache.commons.math3.dfp.Dfp[] dfpArray4 = dfpField1.getLn5Split(); org.apache.commons.math3.dfp.Dfp[] dfpArray5 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp(); int int7 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getSqr2Split(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfpArray4); org.junit.Assert.assertNotNull(dfpArray5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4); org.junit.Assert.assertNotNull(dfpArray8); }
public void test436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test436"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 2); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp((byte) 3, (byte) -1); org.apache.commons.math3.dfp.Dfp dfp9 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "0.28782313662425571050224893183554552595013768607859662200416598762094657620966906002949965063619975"); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); }
public void test437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test437"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.divide(10); org.apache.commons.math3.dfp.DfpField dfpField18 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField18.getLn10(); boolean boolean20 = dfp19.negativeOrNull(); int int21 = dfp19.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField23.getTwo(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp19.add(dfp25); boolean boolean27 = dfp25.isInfinite(); org.apache.commons.math3.dfp.Dfp dfp28 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp2, dfp16, dfp25); org.apache.commons.math3.dfp.Dfp dfp29 = dfp28.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp31 = dfp29.newInstance((double) '4'); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); int int35 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode36 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp37 = dfp34.trunc(roundingMode36); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField38 = dfp37.getField(); org.apache.commons.math3.dfp.DfpField dfpField42 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp44 = new org.apache.commons.math3.dfp.Dfp(dfpField42, 16); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField46.getTwo(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField46.getOne(); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField46.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField46.newDfp(); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField46.getZero(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp37.dotrap(10000, "", dfp44, dfp53); org.apache.commons.math3.dfp.Dfp dfp55 = new org.apache.commons.math3.dfp.Dfp(dfp37); org.apache.commons.math3.dfp.Dfp dfp56 = dfp29.subtract(dfp37); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode36.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfpField38); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp56); }
public void test438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test438"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp[] dfpArray2 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp(0L); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); org.junit.Assert.assertNotNull(dfpArray2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); }
public void test439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test439"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getPi(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); boolean boolean9 = dfp8.negativeOrNull(); dfp8.sign = (byte) 0; boolean boolean12 = dfp8.isZero(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp5.add(dfp8); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(dfp13); }
public void test440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test440"); org.apache.commons.math3.dfp.DfpField dfpField0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp2 = new org.apache.commons.math3.dfp.Dfp(dfpField0, (byte) 10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test441"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfp6.rint(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp6.rint(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); }
public void test442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test442"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (double) 100L); int int4 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp("2."); byte byte7 = dfp6.nans; org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0); }
public void test443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test443"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); int int8 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 25 + "'", int8 == 25); org.junit.Assert.assertNotNull(dfp9); }
public void test444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test444"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfp6.floor(); int int9 = dfp7.align((int) (byte) 100); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test445"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.newDfp((byte) 3, (byte) 10); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp("2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166"); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp12); }
public void test446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test446"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (byte) -1); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode2 = dfpField1.getRoundingMode(); org.junit.Assert.assertTrue("'" + roundingMode2 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode2.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); }
public void test447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test447"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.multiply((int) (byte) -1); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp10.negate(); boolean boolean12 = dfp10.negativeOrNull(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); }
public void test448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test448"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); boolean boolean9 = dfp2.strictlyNegative(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.power10((int) (byte) 100); int int13 = dfp11.align(2147483647); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); }
public void test449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test449"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((double) 1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); }
public void test450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test450"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getSqr2Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp(0L); boolean boolean6 = dfp5.positiveOrNull(); dfp5.sign = (byte) 1; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); }
public void test451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test451"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getTwo(); org.apache.commons.math3.dfp.DfpField dfpField10 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField10.getLn10(); int int12 = dfp11.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode13 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.trunc(roundingMode13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp11.power10((int) (short) -1); dfp11.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp8.nextAfter(dfp11); dfp11.shiftLeft(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode13.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp18); }
public void test452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test452"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); int int7 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp9 = dfp6.trunc(roundingMode8); java.lang.String str10 = dfp9.toString(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(dfp9); boolean boolean13 = dfp9.equals((java.lang.Object) 0.0d); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.getOne(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); int int19 = dfp17.log10K(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp17.add(dfp23); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); int int29 = dfp27.log10K(); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField31.getTwo(); org.apache.commons.math3.dfp.Dfp dfp34 = dfp27.add(dfp33); org.apache.commons.math3.dfp.Dfp dfp35 = dfp23.divide(dfp27); org.apache.commons.math3.dfp.DfpField dfpField37 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp39 = new org.apache.commons.math3.dfp.Dfp(dfpField37, 16); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField37.getLn5(); org.apache.commons.math3.dfp.DfpField dfpField42 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField42.getLn10(); int int44 = dfp43.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode45 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp46 = dfp43.trunc(roundingMode45); java.lang.String str47 = dfp46.toString(); org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.multiply((int) (byte) 100); org.apache.commons.math3.dfp.Dfp dfp51 = dfp49.newInstance((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField37.newDfp(dfp49); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField37.newDfp((double) (byte) -1); boolean boolean55 = dfp27.unequal(dfp54); org.apache.commons.math3.dfp.Dfp dfp56 = dfp14.nextAfter(dfp27); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "3." + "'", str10, "3."); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertTrue("'" + roundingMode45 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode45.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "3." + "'", str47, "3."); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(dfp56); }
public void test453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test453"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp7.newInstance((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp10 = dfp9.rint(); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp14 = new org.apache.commons.math3.dfp.Dfp(dfpField12, 16); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField12.getLn5(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField12.newDfp((byte) -1); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode18 = dfpField12.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp10.trunc(roundingMode18); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode18.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp19); }
public void test454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test454"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray9 = dfpField7.getESplit(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField7, (-32767)); org.apache.commons.math3.dfp.Dfp dfp13 = dfp11.newInstance("hi!"); org.apache.commons.math3.dfp.Dfp dfp14 = org.apache.commons.math3.dfp.Dfp.copysign(dfp2, dfp11); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField16.getOne(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField16.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField16.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode23 = dfpField16.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp26 = new org.apache.commons.math3.dfp.Dfp(dfpField16, (byte) 100, (byte) 100); org.apache.commons.math3.dfp.Dfp dfp29 = dfp26.newInstance((byte) 1, (byte) 1); org.apache.commons.math3.dfp.DfpField dfpField31 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField31.getLn10(); boolean boolean33 = dfp32.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getLn10(); boolean boolean37 = dfp36.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp38 = dfp32.multiply(dfp36); dfp38.shiftRight(); org.apache.commons.math3.dfp.Dfp dfp40 = dfp29.add(dfp38); org.apache.commons.math3.dfp.DfpField dfpField42 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField42.getLn10(); boolean boolean44 = dfp43.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getLn10(); boolean boolean48 = dfp47.negativeOrNull(); int int49 = dfp47.log10K(); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField51.getTwo(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp47.add(dfp53); org.apache.commons.math3.dfp.DfpField dfpField56 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField56.getLn10(); boolean boolean58 = dfp57.negativeOrNull(); int int59 = dfp57.log10K(); org.apache.commons.math3.dfp.DfpField dfpField61 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp62 = dfpField61.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField61.getTwo(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp57.add(dfp63); org.apache.commons.math3.dfp.Dfp dfp65 = dfp53.divide(dfp57); int int66 = dfp53.getRadixDigits(); int int67 = dfp53.intValue(); org.apache.commons.math3.dfp.DfpField dfpField69 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp70 = dfpField69.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp71 = dfpField69.getTwo(); org.apache.commons.math3.dfp.Dfp dfp72 = dfpField69.getOne(); org.apache.commons.math3.dfp.Dfp dfp74 = dfpField69.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp76 = new org.apache.commons.math3.dfp.Dfp(dfpField69, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp77 = dfp53.divide(dfp76); boolean boolean78 = dfp43.unequal(dfp77); org.apache.commons.math3.dfp.Dfp dfp80 = dfp77.newInstance(100L); org.apache.commons.math3.dfp.Dfp dfp81 = dfp38.nextAfter(dfp77); boolean boolean82 = dfp11.lessThan(dfp38); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfpArray9); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertTrue("'" + roundingMode23 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode23.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertTrue("'" + int66 + "' != '" + 25 + "'", int66 == 25); org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertNotNull(dfp77); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true); org.junit.Assert.assertNotNull(dfp80); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true); }
public void test455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test455"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); double double18 = dfp17.toDouble(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp17.ceil(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField21.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp dfp27 = new org.apache.commons.math3.dfp.Dfp(dfpField21, (-8)); org.apache.commons.math3.dfp.DfpField dfpField29 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField29.getLn10(); boolean boolean31 = dfp30.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp32 = dfp30.negate(); org.apache.commons.math3.dfp.DfpField dfpField34 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField34.getLn10(); boolean boolean36 = dfp35.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getLn10(); boolean boolean40 = dfp39.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp35.multiply(dfp39); org.apache.commons.math3.dfp.DfpField dfpField43 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField43.getLn10(); boolean boolean45 = dfp44.negativeOrNull(); int int46 = dfp44.log10K(); org.apache.commons.math3.dfp.DfpField dfpField48 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField48.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp50 = dfpField48.getTwo(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp44.add(dfp50); org.apache.commons.math3.dfp.DfpField dfpField53 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField53.getLn10(); boolean boolean55 = dfp54.negativeOrNull(); int int56 = dfp54.log10K(); org.apache.commons.math3.dfp.DfpField dfpField58 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField58.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField58.getTwo(); org.apache.commons.math3.dfp.Dfp dfp61 = dfp54.add(dfp60); org.apache.commons.math3.dfp.Dfp dfp62 = dfp50.divide(dfp54); double[] doubleArray63 = dfp54.toSplitDouble(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp39.multiply(dfp54); org.apache.commons.math3.dfp.Dfp dfp65 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp27, dfp32, dfp64); org.apache.commons.math3.dfp.Dfp dfp66 = dfp17.subtract(dfp27); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 14674.41072270908d + "'", double18 == 14674.41072270908d); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[2.302584648132324, 4.4486172146526797E-7]"); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp66); }
public void test456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test456"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getSqr3(); java.lang.String str9 = dfp8.dfp2string(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248" + "'", str9, "1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248"); }
public void test457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test457"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); dfp4.shiftRight(); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField6 = dfp4.getField(); byte byte7 = dfp4.sign; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpField6); org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 1 + "'", byte7 == (byte) 1); }
public void test458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test458"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 3); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) 9900); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp9); }
public void test459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test459"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); int int3 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp5 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (double) '4'); org.apache.commons.math3.dfp.DfpField dfpField7 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField7.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField7.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField12 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField12.getLn10(); boolean boolean14 = dfp13.negativeOrNull(); int int15 = dfp13.log10K(); org.apache.commons.math3.dfp.DfpField dfpField17 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField17.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField17.getTwo(); org.apache.commons.math3.dfp.Dfp dfp20 = dfp13.add(dfp19); org.apache.commons.math3.dfp.Dfp dfp22 = dfp20.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp23 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp10, dfp20); int[] intArray24 = dfp10.mant; org.apache.commons.math3.dfp.Dfp dfp26 = dfp10.newInstance((int) (short) 1); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getLn10(); int int30 = dfp29.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode31 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp32 = dfp29.trunc(roundingMode31); org.apache.commons.math3.dfp.DfpField dfpField34 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField34.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField34.getTwo(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField34.getOne(); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField34.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp41 = new org.apache.commons.math3.dfp.Dfp(dfpField34, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp42 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp26, dfp29, dfp41); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray46 = dfpField44.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField44.getZero(); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField44.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp51 = new org.apache.commons.math3.dfp.Dfp(dfpField44, (int) (byte) 10); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode52 = dfpField44.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp53 = dfp29.trunc(roundingMode52); dfpField1.setRoundingMode(roundingMode52); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode55 = dfpField1.getRoundingMode(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(intArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35]"); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode31.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfpArray46); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertTrue("'" + roundingMode52 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode52.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + roundingMode55 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode55.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); }
public void test460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test460"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) -1); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp[] dfpArray8 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.getLn2(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp9.getOne(); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfpArray8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); }
public void test461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test461"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = dfpField1.getRoundingMode(); org.apache.commons.math3.dfp.Dfp dfp11 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 100, (byte) 100); dfpField1.setIEEEFlags(9900); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); }
public void test462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test462"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField8 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField8.getLn10(); int int10 = dfp9.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode11 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp12 = dfp9.trunc(roundingMode11); org.apache.commons.math3.dfp.Dfp dfp14 = dfp9.power10((int) (short) -1); dfp9.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp16 = dfp6.subtract(dfp9); org.apache.commons.math3.dfp.DfpField dfpField20 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField20.getLn10(); boolean boolean22 = dfp21.negativeOrNull(); int int23 = dfp21.log10K(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField25.getTwo(); org.apache.commons.math3.dfp.Dfp dfp28 = dfp21.add(dfp27); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfpField30.getOne(); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField30.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField30.newDfp(); org.apache.commons.math3.dfp.Dfp dfp37 = dfp28.add(dfp36); double double38 = dfp36.toDouble(); int int39 = dfp36.exp; org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getLn10(); int int43 = dfp42.log10K(); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); int int47 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode48 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp49 = dfp46.trunc(roundingMode48); java.lang.String str50 = dfp49.toString(); org.apache.commons.math3.dfp.Dfp dfp51 = dfp42.divide(dfp49); org.apache.commons.math3.dfp.Dfp dfp52 = dfp6.dotrap(100, "", dfp36, dfp51); boolean boolean53 = dfp52.positiveOrNull(); org.apache.commons.math3.dfp.DfpField dfpField55 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField55.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray57 = dfpField55.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField55.getZero(); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField55.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField62 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp63 = dfpField62.getLn10(); int int64 = dfp63.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode65 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp66 = dfp63.trunc(roundingMode65); org.apache.commons.math3.dfp.Dfp dfp68 = dfp63.power10((int) (short) -1); dfp63.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp70 = dfp60.subtract(dfp63); org.apache.commons.math3.dfp.Dfp dfp72 = dfp60.newInstance((byte) 2); org.apache.commons.math3.dfp.Dfp dfp73 = dfp52.divide(dfp72); org.apache.commons.math3.dfp.DfpField dfpField75 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp76 = dfpField75.getLn10(); int int77 = dfp76.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode78 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp79 = dfp76.trunc(roundingMode78); org.apache.commons.math3.dfp.Dfp dfp81 = dfp76.power10((int) (short) -1); dfp76.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp84 = dfp76.newInstance(1.0d); int int86 = dfp84.align(0); boolean boolean87 = dfp72.lessThan(dfp84); boolean boolean88 = dfp72.isZero(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode11.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode48.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "3." + "'", str50, "3."); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfpArray57); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp63); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertTrue("'" + roundingMode65 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode65.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp66); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0); org.junit.Assert.assertTrue("'" + roundingMode78 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode78.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp79); org.junit.Assert.assertNotNull(dfp81); org.junit.Assert.assertNotNull(dfp84); org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); }
public void test463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test463"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); int int7 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp9 = dfp6.trunc(roundingMode8); java.lang.String str10 = dfp9.toString(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(dfp9); java.lang.String str12 = dfp11.dfp2string(); double double13 = dfp11.toDouble(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp11.abs(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "3." + "'", str10, "3."); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667" + "'", str12, "0.7675283643313485613393304848947880692003671628762576586777759669891908698924508267453324016965326667"); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.7675283643313485d + "'", double13 == 0.7675283643313485d); org.junit.Assert.assertNotNull(dfp14); }
public void test464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test464"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); int int5 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getLn5(); int int7 = dfpField1.getIEEEFlags(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16); }
public void test465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test465"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray3 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (byte) 10); java.lang.String str7 = dfp6.dfp2sci(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfpArray3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e1" + "'", str7, "1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e1"); }
public void test466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test466"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getLn10(); int int8 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp[] dfpArray9 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.getE(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 25 + "'", int8 == 25); org.junit.Assert.assertNotNull(dfpArray9); org.junit.Assert.assertNotNull(dfp10); }
public void test467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test467"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); int int7 = dfp6.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode8 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp9 = dfp6.trunc(roundingMode8); java.lang.String str10 = dfp9.toString(); org.apache.commons.math3.dfp.Dfp dfp11 = dfp2.divide(dfp9); org.apache.commons.math3.dfp.DfpField dfpField13 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField13.getE(); org.apache.commons.math3.dfp.Dfp dfp15 = dfp2.multiply(dfp14); org.apache.commons.math3.dfp.DfpField dfpField16 = dfp2.getField(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode8.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "3." + "'", str10, "3."); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfpField16); }
public void test468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test468"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getZero(); int int9 = dfpField1.getRadixDigits(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.newDfp((long) 32760); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp14 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 1); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getLn10(); boolean boolean18 = dfp17.negativeOrNull(); int int19 = dfp17.log10K(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp17.add(dfp23); org.apache.commons.math3.dfp.Dfp dfp25 = dfp23.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField29 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp30 = dfpField29.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField29.getTwo(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField29.getOne(); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField29.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp35 = dfpField29.getLn10(); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField29.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getLn10(); int int40 = dfp39.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode41 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp42 = dfp39.trunc(roundingMode41); org.apache.commons.math3.dfp.Dfp dfp44 = dfp42.divide(10); org.apache.commons.math3.dfp.Dfp dfp45 = dfp44.getZero(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField29.newDfp(dfp44); org.apache.commons.math3.dfp.DfpField dfpField48 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField48.getLn10(); boolean boolean50 = dfp49.negativeOrNull(); int int51 = dfp49.log10K(); org.apache.commons.math3.dfp.DfpField dfpField53 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp54 = dfpField53.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField53.getTwo(); org.apache.commons.math3.dfp.Dfp dfp56 = dfp49.add(dfp55); org.apache.commons.math3.dfp.Dfp dfp57 = dfp55.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField59 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField59.getLn10(); boolean boolean61 = dfp60.negativeOrNull(); int int62 = dfp60.log10K(); org.apache.commons.math3.dfp.DfpField dfpField64 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp65 = dfpField64.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp66 = dfpField64.getTwo(); org.apache.commons.math3.dfp.Dfp dfp67 = dfp60.add(dfp66); org.apache.commons.math3.dfp.DfpField dfpField69 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp70 = dfpField69.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp71 = dfpField69.getTwo(); org.apache.commons.math3.dfp.Dfp dfp72 = dfpField69.getOne(); org.apache.commons.math3.dfp.Dfp dfp74 = dfpField69.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp75 = dfpField69.newDfp(); org.apache.commons.math3.dfp.Dfp dfp76 = dfp67.add(dfp75); org.apache.commons.math3.dfp.Dfp dfp77 = dfp57.nextAfter(dfp67); dfp77.exp = 0; org.apache.commons.math3.dfp.DfpField dfpField81 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp82 = dfpField81.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray83 = dfpField81.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp85 = dfpField81.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp86 = dfpField81.getOne(); org.apache.commons.math3.dfp.Dfp dfp87 = dfp77.newInstance(dfp86); org.apache.commons.math3.dfp.Dfp dfp88 = dfp23.dotrap(32768, "0.0e0", dfp44, dfp87); org.apache.commons.math3.dfp.Dfp dfp89 = dfpField1.newDfp(dfp44); java.lang.String str90 = dfp89.dfp2sci(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 25 + "'", int9 == 25); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp35); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0); org.junit.Assert.assertTrue("'" + roundingMode41 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode41.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp66); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertNotNull(dfp75); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertNotNull(dfp77); org.junit.Assert.assertNotNull(dfp82); org.junit.Assert.assertNotNull(dfpArray83); org.junit.Assert.assertNotNull(dfp85); org.junit.Assert.assertNotNull(dfp86); org.junit.Assert.assertNotNull(dfp87); org.junit.Assert.assertNotNull(dfp88); org.junit.Assert.assertNotNull(dfp89); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "3.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e-1" + "'", str90, "3.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e-1"); }
public void test469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test469"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField4 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField4.getLn10(); boolean boolean6 = dfp5.negativeOrNull(); int int7 = dfp5.log10K(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField9.getTwo(); org.apache.commons.math3.dfp.Dfp dfp12 = dfp5.add(dfp11); org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.subtract(dfp12); byte byte14 = dfp2.sign; org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField16.getOne(); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField16.getLn2(); dfpField16.setIEEEFlags((int) (short) 0); int int23 = dfpField16.getIEEEFlags(); int int24 = dfpField16.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField16.newDfp(); org.apache.commons.math3.dfp.Dfp dfp26 = dfp2.nextAfter(dfp25); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 1 + "'", byte14 == (byte) 1); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); }
public void test470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test470"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp9 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 3, (byte) 10); dfpField1.setIEEEFlagsBits((int) (byte) 100); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); }
public void test471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test471"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass3 = dfpField1.getRuntimeClass(); java.lang.Class<?> wildcardClass4 = dfpField1.getClass(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(wildcardClass3); org.junit.Assert.assertNotNull(wildcardClass4); }
public void test472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test472"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp(0); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((long) 16); org.apache.commons.math3.dfp.Dfp[] dfpArray6 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getSqr3(); org.apache.commons.math3.dfp.Dfp dfp8 = null; // The following exception was thrown during execution in test generation try { boolean boolean9 = dfp7.unequal(dfp8); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfpArray6); org.junit.Assert.assertNotNull(dfp7); }
public void test473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test473"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((byte) 10); int int7 = dfp6.intValue(); org.apache.commons.math3.dfp.DfpField dfpField9 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField9.getE(); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField9.newDfp((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField9.getOne(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getLn10(); int int17 = dfp16.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode18 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp19 = dfp16.trunc(roundingMode18); org.apache.commons.math3.dfp.Dfp dfp21 = dfp19.divide(10); org.apache.commons.math3.dfp.Dfp dfp22 = dfp21.getZero(); boolean boolean23 = dfp21.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp21.floor(); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField9.newDfp(dfp24); org.apache.commons.math3.dfp.Dfp dfp26 = dfp6.newInstance(dfp25); org.apache.commons.math3.dfp.DfpField dfpField28 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField28.getLn10(); int int30 = dfp29.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode31 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp32 = dfp29.trunc(roundingMode31); org.apache.commons.math3.dfp.Dfp dfp34 = dfp32.divide(10); org.apache.commons.math3.dfp.DfpField dfpField36 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField36.getLn10(); boolean boolean38 = dfp37.negativeOrNull(); int int39 = dfp37.log10K(); org.apache.commons.math3.dfp.DfpField dfpField41 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField41.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp43 = dfpField41.getTwo(); org.apache.commons.math3.dfp.Dfp dfp44 = dfp37.add(dfp43); org.apache.commons.math3.dfp.DfpField dfpField46 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp47 = dfpField46.getLn10(); boolean boolean48 = dfp47.negativeOrNull(); int int49 = dfp47.log10K(); org.apache.commons.math3.dfp.DfpField dfpField51 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField51.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp53 = dfpField51.getTwo(); org.apache.commons.math3.dfp.Dfp dfp54 = dfp47.add(dfp53); org.apache.commons.math3.dfp.Dfp dfp55 = dfp43.divide(dfp47); int int56 = dfp43.getRadixDigits(); int int57 = dfp43.intValue(); org.apache.commons.math3.dfp.DfpField dfpField59 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField59.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp61 = dfpField59.getTwo(); org.apache.commons.math3.dfp.Dfp dfp62 = dfpField59.getOne(); org.apache.commons.math3.dfp.Dfp dfp64 = dfpField59.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp66 = new org.apache.commons.math3.dfp.Dfp(dfpField59, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp67 = dfp43.divide(dfp66); org.apache.commons.math3.dfp.Dfp dfp68 = dfp34.nextAfter(dfp67); org.apache.commons.math3.dfp.Dfp dfp69 = dfp25.add(dfp68); org.apache.commons.math3.dfp.Dfp dfp71 = dfp69.newInstance(0); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode18.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode31.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp54); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 25 + "'", int56 == 25); org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertNotNull(dfp71); }
public void test474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test474"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); int int12 = dfp10.align(0); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); boolean boolean16 = dfp15.negativeOrNull(); int int17 = dfp15.log10K(); org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField19.getTwo(); org.apache.commons.math3.dfp.Dfp dfp22 = dfp15.add(dfp21); org.apache.commons.math3.dfp.Dfp dfp23 = dfp21.reciprocal(); org.apache.commons.math3.dfp.Dfp dfp24 = dfp10.divide(dfp21); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray28 = dfpField26.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField26.getZero(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField26.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); int int35 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode36 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp37 = dfp34.trunc(roundingMode36); org.apache.commons.math3.dfp.Dfp dfp39 = dfp34.power10((int) (short) -1); dfp34.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp31.subtract(dfp34); org.apache.commons.math3.dfp.DfpField dfpField45 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField45.getLn10(); boolean boolean47 = dfp46.negativeOrNull(); int int48 = dfp46.log10K(); org.apache.commons.math3.dfp.DfpField dfpField50 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField50.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp52 = dfpField50.getTwo(); org.apache.commons.math3.dfp.Dfp dfp53 = dfp46.add(dfp52); org.apache.commons.math3.dfp.DfpField dfpField55 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField55.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField55.getTwo(); org.apache.commons.math3.dfp.Dfp dfp58 = dfpField55.getOne(); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField55.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp61 = dfpField55.newDfp(); org.apache.commons.math3.dfp.Dfp dfp62 = dfp53.add(dfp61); double double63 = dfp61.toDouble(); int int64 = dfp61.exp; org.apache.commons.math3.dfp.DfpField dfpField66 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp67 = dfpField66.getLn10(); int int68 = dfp67.log10K(); org.apache.commons.math3.dfp.DfpField dfpField70 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp71 = dfpField70.getLn10(); int int72 = dfp71.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode73 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp74 = dfp71.trunc(roundingMode73); java.lang.String str75 = dfp74.toString(); org.apache.commons.math3.dfp.Dfp dfp76 = dfp67.divide(dfp74); org.apache.commons.math3.dfp.Dfp dfp77 = dfp31.dotrap(100, "", dfp61, dfp76); boolean boolean78 = dfp77.positiveOrNull(); org.apache.commons.math3.dfp.Dfp dfp79 = dfp77.negate(); org.apache.commons.math3.dfp.Dfp dfp80 = dfp10.newInstance(dfp77); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfpArray28); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode36.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp58); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0); org.junit.Assert.assertTrue("'" + roundingMode73 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode73.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp74); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "3." + "'", str75, "3."); org.junit.Assert.assertNotNull(dfp76); org.junit.Assert.assertNotNull(dfp77); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true); org.junit.Assert.assertNotNull(dfp79); org.junit.Assert.assertNotNull(dfp80); }
public void test475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test475"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); boolean boolean10 = dfp8.isInfinite(); java.lang.String str11 = dfp8.toString(); org.apache.commons.math3.dfp.DfpField dfpField12 = dfp8.getField(); org.apache.commons.math3.dfp.Dfp dfp13 = dfp8.getZero(); dfp13.shiftRight(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2." + "'", str11, "2."); org.junit.Assert.assertNotNull(dfpField12); org.junit.Assert.assertNotNull(dfp13); }
public void test476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test476"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((int) (short) 10); byte byte17 = dfp16.sign; org.apache.commons.math3.dfp.DfpField dfpField19 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField19.getLn10(); int int21 = dfp20.log10K(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); int int25 = dfp24.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode26 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp27 = dfp24.trunc(roundingMode26); java.lang.String str28 = dfp27.toString(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp20.divide(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = org.apache.commons.math3.dfp.DfpField.computeLn(dfp9, dfp16, dfp27); boolean boolean31 = dfp16.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); int int36 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField38.getTwo(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp34.add(dfp40); org.apache.commons.math3.dfp.DfpField dfpField43 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField43.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField43.getTwo(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField43.getOne(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField43.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField43.newDfp(); org.apache.commons.math3.dfp.Dfp dfp50 = dfp41.add(dfp49); double double51 = dfp49.toDouble(); int int52 = dfp49.exp; org.apache.commons.math3.dfp.DfpField dfpField54 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField54.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField54.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField59 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField59.getLn10(); boolean boolean61 = dfp60.negativeOrNull(); int int62 = dfp60.log10K(); org.apache.commons.math3.dfp.DfpField dfpField64 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp65 = dfpField64.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp66 = dfpField64.getTwo(); org.apache.commons.math3.dfp.Dfp dfp67 = dfp60.add(dfp66); org.apache.commons.math3.dfp.Dfp dfp69 = dfp67.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp70 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp57, dfp67); int[] intArray71 = dfp57.mant; dfp49.mant = intArray71; dfp16.mant = intArray71; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 1 + "'", byte17 == (byte) 1); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertTrue("'" + roundingMode26 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode26.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "3." + "'", str28, "3."); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp66); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertNotNull(dfp69); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(intArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35]"); }
public void test477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test477"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.newDfp((long) 0); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass4 = dfpField1.getRuntimeClass(); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(wildcardClass4); }
public void test478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test478"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); int int21 = dfp8.getRadixDigits(); int int22 = dfp8.intValue(); dfp8.nans = (byte) 1; org.apache.commons.math3.dfp.Dfp dfp25 = dfp8.abs(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2); org.junit.Assert.assertNotNull(dfp25); }
public void test479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test479"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (byte) 10); org.apache.commons.math3.dfp.Dfp[] dfpArray7 = dfpField1.getPiSplit(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getSqr3Reciprocal(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray7); org.junit.Assert.assertNotNull(dfp8); }
public void test480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test480"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp4 = dfp2.ceil(); dfp4.shiftRight(); org.apache.commons.math3.dfp.Dfp dfp6 = dfp4.reciprocal(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); }
public void test481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test481"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); double double19 = dfp17.toDouble(); int int20 = dfp17.exp; org.apache.commons.math3.dfp.DfpField dfpField22 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField22.getLn10(); boolean boolean24 = dfp23.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField26 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField26.getLn10(); boolean boolean28 = dfp27.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp23.multiply(dfp27); org.apache.commons.math3.dfp.Dfp dfp30 = dfp17.newInstance(dfp29); org.apache.commons.math3.dfp.Dfp dfp31 = dfp17.sqrt(); org.apache.commons.math3.dfp.Dfp dfp32 = new org.apache.commons.math3.dfp.Dfp(dfp17); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); }
public void test482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test482"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((long) 32768); java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.dfp.Dfp>> wildcardClass7 = dfpField1.getRuntimeClass(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((double) ' '); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField1.newDfp((byte) 0, (byte) 1); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField1.getLn2(); org.apache.commons.math3.dfp.DfpField dfpField15 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField15.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField15.getTwo(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField15.getOne(); org.apache.commons.math3.dfp.Dfp dfp20 = new org.apache.commons.math3.dfp.Dfp(dfpField15, (int) '#'); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode21 = dfpField15.getRoundingMode(); dfpField1.setRoundingMode(roundingMode21); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp25 = new org.apache.commons.math3.dfp.Dfp(dfpField1, "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598e"); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(wildcardClass7); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertTrue("'" + roundingMode21 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN + "'", roundingMode21.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_HALF_EVEN)); org.junit.Assert.assertNotNull(dfp23); }
public void test483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test483"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) ' '); org.apache.commons.math3.dfp.Dfp[] dfpArray2 = dfpField1.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp(0L); org.apache.commons.math3.dfp.Dfp dfp5 = dfp4.reciprocal(); dfp5.shiftRight(); org.junit.Assert.assertNotNull(dfpArray2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); }
public void test484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test484"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, 16); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp7 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp8 = dfp6.subtract(dfp7); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); }
public void test485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test485"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); org.apache.commons.math3.dfp.DfpField dfpField5 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField5.getLn10(); boolean boolean7 = dfp6.negativeOrNull(); org.apache.commons.math3.dfp.Dfp dfp8 = dfp2.multiply(dfp6); int int10 = dfp8.round(2); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray16 = dfpField14.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField14.getZero(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField14.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getLn10(); int int23 = dfp22.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode24 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp25 = dfp22.trunc(roundingMode24); org.apache.commons.math3.dfp.Dfp dfp27 = dfp22.power10((int) (short) -1); dfp22.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp29 = dfp19.subtract(dfp22); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); int int36 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField38.getTwo(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp34.add(dfp40); org.apache.commons.math3.dfp.DfpField dfpField43 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp44 = dfpField43.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField43.getTwo(); org.apache.commons.math3.dfp.Dfp dfp46 = dfpField43.getOne(); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField43.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp49 = dfpField43.newDfp(); org.apache.commons.math3.dfp.Dfp dfp50 = dfp41.add(dfp49); double double51 = dfp49.toDouble(); int int52 = dfp49.exp; org.apache.commons.math3.dfp.DfpField dfpField54 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField54.getLn10(); int int56 = dfp55.log10K(); org.apache.commons.math3.dfp.DfpField dfpField58 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField58.getLn10(); int int60 = dfp59.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode61 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp62 = dfp59.trunc(roundingMode61); java.lang.String str63 = dfp62.toString(); org.apache.commons.math3.dfp.Dfp dfp64 = dfp55.divide(dfp62); org.apache.commons.math3.dfp.Dfp dfp65 = dfp19.dotrap(100, "", dfp49, dfp64); org.apache.commons.math3.dfp.DfpField dfpField67 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp68 = dfpField67.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray69 = dfpField67.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp70 = dfpField67.getZero(); org.apache.commons.math3.dfp.Dfp dfp72 = dfpField67.newDfp((int) (byte) 10); org.apache.commons.math3.dfp.Dfp dfp73 = dfp8.dotrap((-1), "2.", dfp49, dfp72); org.apache.commons.math3.dfp.Dfp dfp74 = dfp73.sqrt(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.dfp.Dfp dfp76 = dfp73.newInstance(""); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0"); } catch (java.lang.StringIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfpArray16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode24.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp46); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfp49); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0); org.junit.Assert.assertTrue("'" + roundingMode61 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode61.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "3." + "'", str63, "3."); org.junit.Assert.assertNotNull(dfp64); org.junit.Assert.assertNotNull(dfp65); org.junit.Assert.assertNotNull(dfp68); org.junit.Assert.assertNotNull(dfpArray69); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertNotNull(dfp74); }
public void test486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test486"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfpField11.getOne(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField11.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField11.newDfp(); org.apache.commons.math3.dfp.Dfp dfp18 = dfp9.add(dfp17); org.apache.commons.math3.dfp.Dfp dfp19 = dfp9.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField21 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp22 = dfpField21.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp23 = dfpField21.getTwo(); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField21.getOne(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField21.newDfp((byte) 10); int int27 = dfp26.intValue(); org.apache.commons.math3.dfp.Dfp dfp28 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp9, dfp26); org.apache.commons.math3.Field<org.apache.commons.math3.dfp.Dfp> dfpField29 = dfp26.getField(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp22); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10); org.junit.Assert.assertNotNull(dfp28); org.junit.Assert.assertNotNull(dfpField29); }
public void test487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test487"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) '4'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getOne(); org.junit.Assert.assertNotNull(dfp2); }
public void test488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test488"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); dfpField1.setIEEEFlags((int) (short) 0); int int8 = dfpField1.getIEEEFlags(); int int9 = dfpField1.getIEEEFlags(); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.getPi(); org.apache.commons.math3.dfp.Dfp dfp11 = dfpField1.getSqr3(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp11); }
public void test489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test489"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField14 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp15 = dfpField14.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp16 = dfpField14.getTwo(); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField14.getOne(); org.apache.commons.math3.dfp.Dfp dfp19 = dfpField14.newDfp((byte) 10); org.apache.commons.math3.dfp.Dfp dfp20 = dfpField14.getLn10(); org.apache.commons.math3.dfp.Dfp dfp21 = dfpField14.getSqr3(); org.apache.commons.math3.dfp.DfpField dfpField23 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp24 = dfpField23.getLn10(); int int25 = dfp24.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode26 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp27 = dfp24.trunc(roundingMode26); org.apache.commons.math3.dfp.Dfp dfp29 = dfp27.divide(10); org.apache.commons.math3.dfp.Dfp dfp30 = dfp29.getZero(); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField14.newDfp(dfp29); org.apache.commons.math3.dfp.DfpField dfpField33 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp34 = dfpField33.getLn10(); boolean boolean35 = dfp34.negativeOrNull(); int int36 = dfp34.log10K(); org.apache.commons.math3.dfp.DfpField dfpField38 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp39 = dfpField38.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField38.getTwo(); org.apache.commons.math3.dfp.Dfp dfp41 = dfp34.add(dfp40); org.apache.commons.math3.dfp.Dfp dfp42 = dfp40.reciprocal(); org.apache.commons.math3.dfp.DfpField dfpField44 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp45 = dfpField44.getLn10(); boolean boolean46 = dfp45.negativeOrNull(); int int47 = dfp45.log10K(); org.apache.commons.math3.dfp.DfpField dfpField49 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp50 = dfpField49.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp51 = dfpField49.getTwo(); org.apache.commons.math3.dfp.Dfp dfp52 = dfp45.add(dfp51); org.apache.commons.math3.dfp.DfpField dfpField54 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp55 = dfpField54.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp56 = dfpField54.getTwo(); org.apache.commons.math3.dfp.Dfp dfp57 = dfpField54.getOne(); org.apache.commons.math3.dfp.Dfp dfp59 = dfpField54.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp60 = dfpField54.newDfp(); org.apache.commons.math3.dfp.Dfp dfp61 = dfp52.add(dfp60); org.apache.commons.math3.dfp.Dfp dfp62 = dfp42.nextAfter(dfp52); dfp62.exp = 0; org.apache.commons.math3.dfp.DfpField dfpField66 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp67 = dfpField66.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray68 = dfpField66.getSqr2Split(); org.apache.commons.math3.dfp.Dfp dfp70 = dfpField66.newDfp("2."); org.apache.commons.math3.dfp.Dfp dfp71 = dfpField66.getOne(); org.apache.commons.math3.dfp.Dfp dfp72 = dfp62.newInstance(dfp71); org.apache.commons.math3.dfp.Dfp dfp73 = dfp8.dotrap(32768, "0.0e0", dfp29, dfp72); byte byte74 = dfp8.sign; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp15); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertNotNull(dfp21); org.junit.Assert.assertNotNull(dfp24); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); org.junit.Assert.assertTrue("'" + roundingMode26 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode26.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp30); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0); org.junit.Assert.assertNotNull(dfp39); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0); org.junit.Assert.assertNotNull(dfp50); org.junit.Assert.assertNotNull(dfp51); org.junit.Assert.assertNotNull(dfp52); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); org.junit.Assert.assertNotNull(dfp57); org.junit.Assert.assertNotNull(dfp59); org.junit.Assert.assertNotNull(dfp60); org.junit.Assert.assertNotNull(dfp61); org.junit.Assert.assertNotNull(dfp62); org.junit.Assert.assertNotNull(dfp67); org.junit.Assert.assertNotNull(dfpArray68); org.junit.Assert.assertNotNull(dfp70); org.junit.Assert.assertNotNull(dfp71); org.junit.Assert.assertNotNull(dfp72); org.junit.Assert.assertNotNull(dfp73); org.junit.Assert.assertTrue("'" + byte74 + "' != '" + (byte) 1 + "'", byte74 == (byte) 1); }
public void test490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test490"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((int) (short) 1); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp7 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (byte) 3); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getLn5(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp8.newInstance((byte) 1); org.apache.commons.math3.dfp.Dfp dfp12 = dfp8.power10K((int) (byte) 2); int int13 = dfp8.exp; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1); }
public void test491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test491"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); int int21 = dfp8.getRadixDigits(); int int22 = dfp8.intValue(); boolean boolean23 = dfp8.isInfinite(); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp37 = dfpField35.getTwo(); org.apache.commons.math3.dfp.Dfp dfp38 = dfpField35.getOne(); org.apache.commons.math3.dfp.Dfp dfp40 = dfpField35.newDfp((long) 32768); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField35.newDfp(); org.apache.commons.math3.dfp.Dfp dfp42 = dfp33.add(dfp41); org.apache.commons.math3.dfp.Dfp dfp43 = org.apache.commons.math3.dfp.Dfp.copysign(dfp8, dfp42); double double44 = dfp42.toDouble(); int int45 = dfp42.log10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertNotNull(dfp37); org.junit.Assert.assertNotNull(dfp38); org.junit.Assert.assertNotNull(dfp40); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4.302585092994046d + "'", double44 == 4.302585092994046d); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0); }
public void test492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test492"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); boolean boolean3 = dfp2.negativeOrNull(); int int4 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField6.getTwo(); org.apache.commons.math3.dfp.Dfp dfp9 = dfp2.add(dfp8); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getLn10(); boolean boolean13 = dfp12.negativeOrNull(); int int14 = dfp12.log10K(); org.apache.commons.math3.dfp.DfpField dfpField16 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp17 = dfpField16.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp18 = dfpField16.getTwo(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp12.add(dfp18); org.apache.commons.math3.dfp.Dfp dfp20 = dfp8.divide(dfp12); int int21 = dfp8.getRadixDigits(); int int22 = dfp8.intValue(); org.apache.commons.math3.dfp.DfpField dfpField24 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp25 = dfpField24.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField24.getTwo(); org.apache.commons.math3.dfp.Dfp dfp27 = dfpField24.getOne(); org.apache.commons.math3.dfp.Dfp dfp29 = dfpField24.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp31 = new org.apache.commons.math3.dfp.Dfp(dfpField24, (int) '4'); org.apache.commons.math3.dfp.Dfp dfp32 = dfp8.divide(dfp31); org.apache.commons.math3.dfp.Dfp dfp33 = dfp31.getTwo(); byte byte34 = dfp33.nans; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp9); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertNotNull(dfp18); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertNotNull(dfp20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2); org.junit.Assert.assertNotNull(dfp25); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertNotNull(dfp27); org.junit.Assert.assertNotNull(dfp29); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) 0 + "'", byte34 == (byte) 0); }
public void test493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test493"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.getLn2(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.newDfp(0L); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.newDfp((byte) 1); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp8); org.junit.Assert.assertNotNull(dfp10); }
public void test494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test494"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getZero(); org.apache.commons.math3.dfp.Dfp dfp9 = dfpField1.newDfp((long) 9900); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp9); }
public void test495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test495"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getLn10(); int int3 = dfp2.log10K(); org.apache.commons.math3.dfp.DfpField.RoundingMode roundingMode4 = org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL; org.apache.commons.math3.dfp.Dfp dfp5 = dfp2.trunc(roundingMode4); org.apache.commons.math3.dfp.Dfp dfp7 = dfp2.power10((int) (short) -1); dfp2.shiftLeft(); org.apache.commons.math3.dfp.Dfp dfp10 = dfp2.newInstance(1.0d); dfp2.nans = (byte) 10; org.apache.commons.math3.dfp.Dfp dfp13 = dfp2.floor(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL + "'", roundingMode4.equals(org.apache.commons.math3.dfp.DfpField.RoundingMode.ROUND_CEIL)); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); org.junit.Assert.assertNotNull(dfp13); }
public void test496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test496"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.DfpField dfpField6 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField6.getLn10(); boolean boolean8 = dfp7.negativeOrNull(); int int9 = dfp7.log10K(); org.apache.commons.math3.dfp.DfpField dfpField11 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp12 = dfpField11.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp13 = dfpField11.getTwo(); org.apache.commons.math3.dfp.Dfp dfp14 = dfp7.add(dfp13); org.apache.commons.math3.dfp.Dfp dfp16 = dfp14.power10K((int) '4'); org.apache.commons.math3.dfp.Dfp dfp17 = org.apache.commons.math3.dfp.DfpField.computeExp(dfp4, dfp14); double double18 = dfp17.toDouble(); org.apache.commons.math3.dfp.Dfp dfp19 = dfp17.ceil(); int int21 = dfp17.round((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp23 = dfp17.divide(0); org.apache.commons.math3.dfp.DfpField dfpField25 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp26 = dfpField25.getLn10(); boolean boolean27 = dfp26.negativeOrNull(); int int28 = dfp26.log10K(); org.apache.commons.math3.dfp.DfpField dfpField30 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp31 = dfpField30.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp32 = dfpField30.getTwo(); org.apache.commons.math3.dfp.Dfp dfp33 = dfp26.add(dfp32); org.apache.commons.math3.dfp.DfpField dfpField35 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp36 = dfpField35.getLn10(); boolean boolean37 = dfp36.negativeOrNull(); int int38 = dfp36.log10K(); org.apache.commons.math3.dfp.DfpField dfpField40 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp41 = dfpField40.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp42 = dfpField40.getTwo(); org.apache.commons.math3.dfp.Dfp dfp43 = dfp36.add(dfp42); org.apache.commons.math3.dfp.Dfp dfp44 = dfp32.divide(dfp36); org.apache.commons.math3.dfp.Dfp dfp45 = dfp32.floor(); org.apache.commons.math3.dfp.DfpField dfpField47 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp48 = dfpField47.getLn10(); org.apache.commons.math3.dfp.Dfp[] dfpArray49 = dfpField47.getESplit(); org.apache.commons.math3.dfp.Dfp dfp51 = new org.apache.commons.math3.dfp.Dfp(dfpField47, (-32767)); org.apache.commons.math3.dfp.Dfp dfp53 = dfp51.newInstance("hi!"); boolean boolean54 = dfp32.equals((java.lang.Object) dfp51); org.apache.commons.math3.dfp.Dfp dfp55 = dfp17.divide(dfp51); org.apache.commons.math3.dfp.Dfp dfp56 = dfp51.ceil(); dfp56.sign = (byte) 100; org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertNotNull(dfp12); org.junit.Assert.assertNotNull(dfp13); org.junit.Assert.assertNotNull(dfp14); org.junit.Assert.assertNotNull(dfp16); org.junit.Assert.assertNotNull(dfp17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 14674.41072270908d + "'", double18 == 14674.41072270908d); org.junit.Assert.assertNotNull(dfp19); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16); org.junit.Assert.assertNotNull(dfp23); org.junit.Assert.assertNotNull(dfp26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); org.junit.Assert.assertNotNull(dfp31); org.junit.Assert.assertNotNull(dfp32); org.junit.Assert.assertNotNull(dfp33); org.junit.Assert.assertNotNull(dfp36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0); org.junit.Assert.assertNotNull(dfp41); org.junit.Assert.assertNotNull(dfp42); org.junit.Assert.assertNotNull(dfp43); org.junit.Assert.assertNotNull(dfp44); org.junit.Assert.assertNotNull(dfp45); org.junit.Assert.assertNotNull(dfp48); org.junit.Assert.assertNotNull(dfpArray49); org.junit.Assert.assertNotNull(dfp53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(dfp55); org.junit.Assert.assertNotNull(dfp56); }
public void test497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test497"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.newDfp((long) '#'); org.apache.commons.math3.dfp.Dfp[] dfpArray5 = dfpField1.getESplit(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.newDfp((long) (short) 0); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.getE(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfpArray5); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp8); }
public void test498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test498"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) (short) -1); org.apache.commons.math3.dfp.Dfp dfp3 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (double) 100L); org.apache.commons.math3.dfp.Dfp dfp5 = dfpField1.newDfp((byte) 100); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.getPi(); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.junit.Assert.assertNotNull(dfp5); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); }
public void test499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test499"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = dfpField1.newDfp((int) (short) 10); org.apache.commons.math3.dfp.Dfp dfp7 = dfpField1.getE(); org.apache.commons.math3.dfp.Dfp dfp9 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) (short) 100); org.apache.commons.math3.dfp.Dfp dfp10 = dfpField1.getLn10(); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp6); org.junit.Assert.assertNotNull(dfp7); org.junit.Assert.assertNotNull(dfp10); }
public void test500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test500"); org.apache.commons.math3.dfp.DfpField dfpField1 = new org.apache.commons.math3.dfp.DfpField((int) 'a'); org.apache.commons.math3.dfp.Dfp dfp2 = dfpField1.getSqr3Reciprocal(); org.apache.commons.math3.dfp.Dfp dfp3 = dfpField1.getTwo(); org.apache.commons.math3.dfp.Dfp dfp4 = dfpField1.getOne(); org.apache.commons.math3.dfp.Dfp dfp6 = new org.apache.commons.math3.dfp.Dfp(dfpField1, (int) '#'); org.apache.commons.math3.dfp.Dfp dfp8 = dfpField1.newDfp((long) (-8)); org.junit.Assert.assertNotNull(dfp2); org.junit.Assert.assertNotNull(dfp3); org.junit.Assert.assertNotNull(dfp4); org.junit.Assert.assertNotNull(dfp8); }
public void testRound() { field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); test(new DfpDec(field, "12345678901234567890"), new DfpDec(field, "12345678901234568000"), DfpField.FLAG_INEXACT, "Round #1"); test(new DfpDec(field, "0.12345678901234567890"), new DfpDec(field, "0.12345678901234568"), DfpField.FLAG_INEXACT, "Round #2"); test(new DfpDec(field, "0.12345678901234567500"), new DfpDec(field, "0.12345678901234568"), DfpField.FLAG_INEXACT, "Round #3"); test(new DfpDec(field, "0.12345678901234568500"), new DfpDec(field, "0.12345678901234568"), DfpField.FLAG_INEXACT, "Round #4"); test(new DfpDec(field, "0.12345678901234568501"), new DfpDec(field, "0.12345678901234569"), DfpField.FLAG_INEXACT, "Round #5"); test(new DfpDec(field, "0.12345678901234568499"), new DfpDec(field, "0.12345678901234568"), DfpField.FLAG_INEXACT, "Round #6"); test(new DfpDec(field, "1.2345678901234567890"), new DfpDec(field, "1.2345678901234568"), DfpField.FLAG_INEXACT, "Round #7"); test(new DfpDec(field, "1.2345678901234567500"), new DfpDec(field, "1.2345678901234568"), DfpField.FLAG_INEXACT, "Round #8"); test(new DfpDec(field, "1.2345678901234568500"), new DfpDec(field, "1.2345678901234568"), DfpField.FLAG_INEXACT, "Round #9"); test(new DfpDec(field, "1.2345678901234568000").add(new DfpDec(field, ".0000000000000000501")), new DfpDec(field, "1.2345678901234569"), DfpField.FLAG_INEXACT, "Round #10"); test(new DfpDec(field, "1.2345678901234568499"), new DfpDec(field, "1.2345678901234568"), DfpField.FLAG_INEXACT, "Round #11"); test(new DfpDec(field, "12.345678901234567890"), new DfpDec(field, "12.345678901234568"), DfpField.FLAG_INEXACT, "Round #12"); test(new DfpDec(field, "12.345678901234567500"), new DfpDec(field, "12.345678901234568"), DfpField.FLAG_INEXACT, "Round #13"); test(new DfpDec(field, "12.345678901234568500"), new DfpDec(field, "12.345678901234568"), DfpField.FLAG_INEXACT, "Round #14"); test(new DfpDec(field, "12.345678901234568").add(new DfpDec(field, ".000000000000000501")), new DfpDec(field, "12.345678901234569"), DfpField.FLAG_INEXACT, "Round #15"); test(new DfpDec(field, "12.345678901234568499"), new DfpDec(field, "12.345678901234568"), DfpField.FLAG_INEXACT, "Round #16"); test(new DfpDec(field, "123.45678901234567890"), new DfpDec(field, "123.45678901234568"), DfpField.FLAG_INEXACT, "Round #17"); test(new DfpDec(field, "123.45678901234567500"), new DfpDec(field, "123.45678901234568"), DfpField.FLAG_INEXACT, "Round #18"); test(new DfpDec(field, "123.45678901234568500"), new DfpDec(field, "123.45678901234568"), DfpField.FLAG_INEXACT, "Round #19"); test(new DfpDec(field, "123.456789012345685").add(new DfpDec(field, ".00000000000000501")), new DfpDec(field, "123.45678901234569"), DfpField.FLAG_INEXACT, "Round #20"); test(new DfpDec(field, "123.45678901234568499"), new DfpDec(field, "123.45678901234568"), DfpField.FLAG_INEXACT, "Round #21"); field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN); // Round down test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.9")), new DfpDec(field, "12345678901234567"), DfpField.FLAG_INEXACT, "Round #22"); test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.99999999")), new DfpDec(field, "12345678901234567"), DfpField.FLAG_INEXACT, "Round #23"); test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.99999999")), new DfpDec(field, "-12345678901234567"), DfpField.FLAG_INEXACT, "Round #24"); field.setRoundingMode(DfpField.RoundingMode.ROUND_UP); // Round up test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.1")), new DfpDec(field, "12345678901234568"), DfpField.FLAG_INEXACT, "Round #25"); test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.0001")), new DfpDec(field, "12345678901234568"), DfpField.FLAG_INEXACT, "Round #26"); test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.1")), new DfpDec(field, "-12345678901234568"), DfpField.FLAG_INEXACT, "Round #27"); test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.0001")), new DfpDec(field, "-12345678901234568"), DfpField.FLAG_INEXACT, "Round #28"); test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "0")), new DfpDec(field, "-12345678901234567"), 0, "Round #28.5"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP); // Round half up test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.499999999999")), new DfpDec(field, "12345678901234567"), DfpField.FLAG_INEXACT, "Round #29"); test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.50000001")), new DfpDec(field, "12345678901234568"), DfpField.FLAG_INEXACT, "Round #30"); test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.5")), new DfpDec(field, "12345678901234568"), DfpField.FLAG_INEXACT, "Round #30.5"); test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.499999999999")), new DfpDec(field, "-12345678901234567"), DfpField.FLAG_INEXACT, "Round #31"); test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.50000001")), new DfpDec(field, "-12345678901234568"), DfpField.FLAG_INEXACT, "Round #32"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN); // Round half down test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.5001")), new DfpDec(field, "12345678901234568"), DfpField.FLAG_INEXACT, "Round #33"); test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.5000")), new DfpDec(field, "12345678901234567"), DfpField.FLAG_INEXACT, "Round #34"); test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.5001")), new DfpDec(field, "-12345678901234568"), DfpField.FLAG_INEXACT, "Round #35"); test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.6")), new DfpDec(field, "-12345678901234568"), DfpField.FLAG_INEXACT, "Round #35.5"); test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.5000")), new DfpDec(field, "-12345678901234567"), DfpField.FLAG_INEXACT, "Round #36"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD); // Round half odd test(new DfpDec(field, "12345678901234568").add(new DfpDec(field, "0.5000")), new DfpDec(field, "12345678901234569"), DfpField.FLAG_INEXACT, "Round #37"); test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.5000")), new DfpDec(field, "12345678901234567"), DfpField.FLAG_INEXACT, "Round #38"); test(new DfpDec(field, "-12345678901234568").add(new DfpDec(field, "-0.5000")), new DfpDec(field, "-12345678901234569"), DfpField.FLAG_INEXACT, "Round #39"); test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.5000")), new DfpDec(field, "-12345678901234567"), DfpField.FLAG_INEXACT, "Round #40"); field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL); // Round ceil test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.0001")), new DfpDec(field, "12345678901234568"), DfpField.FLAG_INEXACT, "Round #41"); test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.9999")), new DfpDec(field, "-12345678901234567"), DfpField.FLAG_INEXACT, "Round #42"); field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR); // Round floor test(new DfpDec(field, "12345678901234567").add(new DfpDec(field, "0.9999")), new DfpDec(field, "12345678901234567"), DfpField.FLAG_INEXACT, "Round #43"); test(new DfpDec(field, "-12345678901234567").add(new DfpDec(field, "-0.0001")), new DfpDec(field, "-12345678901234568"), DfpField.FLAG_INEXACT, "Round #44"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); // reset } @Test public void testRoundDecimal10() { field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); test(new Decimal10(field, "1234567891234567890"), new Decimal10(field, "1234567891000000000"), DfpField.FLAG_INEXACT, "RoundDecimal10 #1"); test(new Decimal10(field, "0.1234567891634567890"), new Decimal10(field, "0.1234567892"), DfpField.FLAG_INEXACT, "RoundDecimal10 #2"); test(new Decimal10(field, "0.1234567891500000000"), new Decimal10(field, "0.1234567892"), DfpField.FLAG_INEXACT, "RoundDecimal10 #3"); test(new Decimal10(field, "0.1234567890500"), new Decimal10(field, "0.1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #4"); test(new Decimal10(field, "0.1234567890501"), new Decimal10(field, "0.1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #5"); test(new Decimal10(field, "0.1234567890499"), new Decimal10(field, "0.1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #6"); test(new Decimal10(field, "1.234567890890"), new Decimal10(field, "1.234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #7"); test(new Decimal10(field, "1.234567891500"), new Decimal10(field, "1.234567892"), DfpField.FLAG_INEXACT, "RoundDecimal10 #8"); test(new Decimal10(field, "1.234567890500"), new Decimal10(field, "1.234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #9"); test(new Decimal10(field, "1.234567890000").add(new Decimal10(field, ".000000000501")), new Decimal10(field, "1.234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #10"); test(new Decimal10(field, "1.234567890499"), new Decimal10(field, "1.234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #11"); test(new Decimal10(field, "12.34567890890"), new Decimal10(field, "12.34567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #12"); test(new Decimal10(field, "12.34567891500"), new Decimal10(field, "12.34567892"), DfpField.FLAG_INEXACT, "RoundDecimal10 #13"); test(new Decimal10(field, "12.34567890500"), new Decimal10(field, "12.34567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #14"); test(new Decimal10(field, "12.34567890").add(new Decimal10(field, ".00000000501")), new Decimal10(field, "12.34567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #15"); test(new Decimal10(field, "12.34567890499"), new Decimal10(field, "12.34567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #16"); test(new Decimal10(field, "123.4567890890"), new Decimal10(field, "123.4567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #17"); test(new Decimal10(field, "123.4567891500"), new Decimal10(field, "123.4567892"), DfpField.FLAG_INEXACT, "RoundDecimal10 #18"); test(new Decimal10(field, "123.4567890500"), new Decimal10(field, "123.4567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #19"); test(new Decimal10(field, "123.4567890").add(new Decimal10(field, ".0000000501")), new Decimal10(field, "123.4567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #20"); test(new Decimal10(field, "123.4567890499"), new Decimal10(field, "123.4567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #21"); field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN); // RoundDecimal10 down test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.9")), new Decimal10(field, "1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #22"); test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.99999999")), new Decimal10(field, "1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #23"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.99999999")), new Decimal10(field, "-1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #24"); field.setRoundingMode(DfpField.RoundingMode.ROUND_UP); // RoundDecimal10 up test(new Decimal10(field, 1234567890).add(new Decimal10(field, "0.1")), new Decimal10(field, 1234567891l), DfpField.FLAG_INEXACT, "RoundDecimal10 #25"); test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.0001")), new Decimal10(field, "1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #26"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.1")), new Decimal10(field, "-1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #27"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.0001")), new Decimal10(field, "-1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #28"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "0")), new Decimal10(field, "-1234567890"), 0, "RoundDecimal10 #28.5"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP); // RoundDecimal10 half up test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.4999999999")), new Decimal10(field, "1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #29"); test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.50000001")), new Decimal10(field, "1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #30"); test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.5")), new Decimal10(field, "1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #30.5"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.4999999999")), new Decimal10(field, "-1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #31"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.50000001")), new Decimal10(field, "-1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #32"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN); // RoundDecimal10 half down test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.5001")), new Decimal10(field, "1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #33"); test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.5000")), new Decimal10(field, "1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #34"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.5001")), new Decimal10(field, "-1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #35"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.6")), new Decimal10(field, "-1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #35.5"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.5000")), new Decimal10(field, "-1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #36"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD); // RoundDecimal10 half odd test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.5000")), new Decimal10(field, "1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #37"); test(new Decimal10(field, "1234567891").add(new Decimal10(field, "0.5000")), new Decimal10(field, "1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #38"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.5000")), new Decimal10(field, "-1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #39"); test(new Decimal10(field, "-1234567891").add(new Decimal10(field, "-0.5000")), new Decimal10(field, "-1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #40"); field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL); // RoundDecimal10 ceil test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.0001")), new Decimal10(field, "1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #41"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.9999")), new Decimal10(field, "-1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #42"); field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR); // RoundDecimal10 floor test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.9999")), new Decimal10(field, "1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #43"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.0001")), new Decimal10(field, "-1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #44"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); // reset } @Test public void testNextAfter() { test(new DfpDec(field, 1).nextAfter(pinf), new DfpDec(field, "1.0000000000000001"), 0, "NextAfter #1"); test(new DfpDec(field, "1.0000000000000001").nextAfter(ninf), new DfpDec(field, 1), 0, "NextAfter #1.5"); test(new DfpDec(field, 1).nextAfter(ninf), new DfpDec(field, "0.99999999999999999"), 0, "NextAfter #2"); test(new DfpDec(field, "0.99999999999999999").nextAfter(new DfpDec(field, 2)), new DfpDec(field, 1), 0, "NextAfter #3"); test(new DfpDec(field, -1).nextAfter(ninf), new DfpDec(field, "-1.0000000000000001"), 0, "NextAfter #4"); test(new DfpDec(field, -1).nextAfter(pinf), new DfpDec(field, "-0.99999999999999999"), 0, "NextAfter #5"); test(new DfpDec(field, "-0.99999999999999999").nextAfter(new DfpDec(field, -2)), new DfpDec(field, (byte) -1), 0, "NextAfter #6"); test(new DfpDec(field, (byte) 2).nextAfter(new DfpDec(field, 2)), new DfpDec(field, 2l), 0, "NextAfter #7"); test(new DfpDec(field, 0).nextAfter(new DfpDec(field, 0)), new DfpDec(field, 0), 0, "NextAfter #8"); test(new DfpDec(field, -2).nextAfter(new DfpDec(field, -2)), new DfpDec(field, -2), 0, "NextAfter #9"); test(new DfpDec(field, 0).nextAfter(new DfpDec(field, 1)), new DfpDec(field, "1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #10"); test(new DfpDec(field, 0).nextAfter(new DfpDec(field, -1)), new DfpDec(field, "-1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #11"); test(new DfpDec(field, "-1e-131092").nextAfter(pinf), new DfpDec(field, "-0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #12"); test(new DfpDec(field, "1e-131092").nextAfter(ninf), new DfpDec(field, "0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #13"); test(new DfpDec(field, "9.9999999999999999e131078").nextAfter(pinf), pinf, DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, "Next After #14"); } }
public void testRoundDecimal10() { field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); test(new Decimal10(field, "1234567891234567890"), new Decimal10(field, "1234567891000000000"), DfpField.FLAG_INEXACT, "RoundDecimal10 #1"); test(new Decimal10(field, "0.1234567891634567890"), new Decimal10(field, "0.1234567892"), DfpField.FLAG_INEXACT, "RoundDecimal10 #2"); test(new Decimal10(field, "0.1234567891500000000"), new Decimal10(field, "0.1234567892"), DfpField.FLAG_INEXACT, "RoundDecimal10 #3"); test(new Decimal10(field, "0.1234567890500"), new Decimal10(field, "0.1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #4"); test(new Decimal10(field, "0.1234567890501"), new Decimal10(field, "0.1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #5"); test(new Decimal10(field, "0.1234567890499"), new Decimal10(field, "0.1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #6"); test(new Decimal10(field, "1.234567890890"), new Decimal10(field, "1.234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #7"); test(new Decimal10(field, "1.234567891500"), new Decimal10(field, "1.234567892"), DfpField.FLAG_INEXACT, "RoundDecimal10 #8"); test(new Decimal10(field, "1.234567890500"), new Decimal10(field, "1.234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #9"); test(new Decimal10(field, "1.234567890000").add(new Decimal10(field, ".000000000501")), new Decimal10(field, "1.234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #10"); test(new Decimal10(field, "1.234567890499"), new Decimal10(field, "1.234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #11"); test(new Decimal10(field, "12.34567890890"), new Decimal10(field, "12.34567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #12"); test(new Decimal10(field, "12.34567891500"), new Decimal10(field, "12.34567892"), DfpField.FLAG_INEXACT, "RoundDecimal10 #13"); test(new Decimal10(field, "12.34567890500"), new Decimal10(field, "12.34567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #14"); test(new Decimal10(field, "12.34567890").add(new Decimal10(field, ".00000000501")), new Decimal10(field, "12.34567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #15"); test(new Decimal10(field, "12.34567890499"), new Decimal10(field, "12.34567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #16"); test(new Decimal10(field, "123.4567890890"), new Decimal10(field, "123.4567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #17"); test(new Decimal10(field, "123.4567891500"), new Decimal10(field, "123.4567892"), DfpField.FLAG_INEXACT, "RoundDecimal10 #18"); test(new Decimal10(field, "123.4567890500"), new Decimal10(field, "123.4567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #19"); test(new Decimal10(field, "123.4567890").add(new Decimal10(field, ".0000000501")), new Decimal10(field, "123.4567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #20"); test(new Decimal10(field, "123.4567890499"), new Decimal10(field, "123.4567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #21"); field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN); // RoundDecimal10 down test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.9")), new Decimal10(field, "1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #22"); test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.99999999")), new Decimal10(field, "1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #23"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.99999999")), new Decimal10(field, "-1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #24"); field.setRoundingMode(DfpField.RoundingMode.ROUND_UP); // RoundDecimal10 up test(new Decimal10(field, 1234567890).add(new Decimal10(field, "0.1")), new Decimal10(field, 1234567891l), DfpField.FLAG_INEXACT, "RoundDecimal10 #25"); test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.0001")), new Decimal10(field, "1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #26"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.1")), new Decimal10(field, "-1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #27"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.0001")), new Decimal10(field, "-1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #28"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "0")), new Decimal10(field, "-1234567890"), 0, "RoundDecimal10 #28.5"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP); // RoundDecimal10 half up test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.4999999999")), new Decimal10(field, "1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #29"); test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.50000001")), new Decimal10(field, "1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #30"); test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.5")), new Decimal10(field, "1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #30.5"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.4999999999")), new Decimal10(field, "-1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #31"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.50000001")), new Decimal10(field, "-1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #32"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN); // RoundDecimal10 half down test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.5001")), new Decimal10(field, "1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #33"); test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.5000")), new Decimal10(field, "1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #34"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.5001")), new Decimal10(field, "-1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #35"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.6")), new Decimal10(field, "-1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #35.5"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.5000")), new Decimal10(field, "-1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #36"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD); // RoundDecimal10 half odd test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.5000")), new Decimal10(field, "1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #37"); test(new Decimal10(field, "1234567891").add(new Decimal10(field, "0.5000")), new Decimal10(field, "1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #38"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.5000")), new Decimal10(field, "-1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #39"); test(new Decimal10(field, "-1234567891").add(new Decimal10(field, "-0.5000")), new Decimal10(field, "-1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #40"); field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL); // RoundDecimal10 ceil test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.0001")), new Decimal10(field, "1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #41"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.9999")), new Decimal10(field, "-1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #42"); field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR); // RoundDecimal10 floor test(new Decimal10(field, "1234567890").add(new Decimal10(field, "0.9999")), new Decimal10(field, "1234567890"), DfpField.FLAG_INEXACT, "RoundDecimal10 #43"); test(new Decimal10(field, "-1234567890").add(new Decimal10(field, "-0.0001")), new Decimal10(field, "-1234567891"), DfpField.FLAG_INEXACT, "RoundDecimal10 #44"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); // reset } @Test public void testNextAfter() { test(new DfpDec(field, 1).nextAfter(pinf), new DfpDec(field, "1.0000000000000001"), 0, "NextAfter #1"); test(new DfpDec(field, "1.0000000000000001").nextAfter(ninf), new DfpDec(field, 1), 0, "NextAfter #1.5"); test(new DfpDec(field, 1).nextAfter(ninf), new DfpDec(field, "0.99999999999999999"), 0, "NextAfter #2"); test(new DfpDec(field, "0.99999999999999999").nextAfter(new DfpDec(field, 2)), new DfpDec(field, 1), 0, "NextAfter #3"); test(new DfpDec(field, -1).nextAfter(ninf), new DfpDec(field, "-1.0000000000000001"), 0, "NextAfter #4"); test(new DfpDec(field, -1).nextAfter(pinf), new DfpDec(field, "-0.99999999999999999"), 0, "NextAfter #5"); test(new DfpDec(field, "-0.99999999999999999").nextAfter(new DfpDec(field, -2)), new DfpDec(field, (byte) -1), 0, "NextAfter #6"); test(new DfpDec(field, (byte) 2).nextAfter(new DfpDec(field, 2)), new DfpDec(field, 2l), 0, "NextAfter #7"); test(new DfpDec(field, 0).nextAfter(new DfpDec(field, 0)), new DfpDec(field, 0), 0, "NextAfter #8"); test(new DfpDec(field, -2).nextAfter(new DfpDec(field, -2)), new DfpDec(field, -2), 0, "NextAfter #9"); test(new DfpDec(field, 0).nextAfter(new DfpDec(field, 1)), new DfpDec(field, "1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #10"); test(new DfpDec(field, 0).nextAfter(new DfpDec(field, -1)), new DfpDec(field, "-1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #11"); test(new DfpDec(field, "-1e-131092").nextAfter(pinf), new DfpDec(field, "-0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #12"); test(new DfpDec(field, "1e-131092").nextAfter(ninf), new DfpDec(field, "0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #13"); test(new DfpDec(field, "9.9999999999999999e131078").nextAfter(pinf), pinf, DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, "Next After #14"); } }
public void testNextAfter() { test(new DfpDec(field, 1).nextAfter(pinf), new DfpDec(field, "1.0000000000000001"), 0, "NextAfter #1"); test(new DfpDec(field, "1.0000000000000001").nextAfter(ninf), new DfpDec(field, 1), 0, "NextAfter #1.5"); test(new DfpDec(field, 1).nextAfter(ninf), new DfpDec(field, "0.99999999999999999"), 0, "NextAfter #2"); test(new DfpDec(field, "0.99999999999999999").nextAfter(new DfpDec(field, 2)), new DfpDec(field, 1), 0, "NextAfter #3"); test(new DfpDec(field, -1).nextAfter(ninf), new DfpDec(field, "-1.0000000000000001"), 0, "NextAfter #4"); test(new DfpDec(field, -1).nextAfter(pinf), new DfpDec(field, "-0.99999999999999999"), 0, "NextAfter #5"); test(new DfpDec(field, "-0.99999999999999999").nextAfter(new DfpDec(field, -2)), new DfpDec(field, (byte) -1), 0, "NextAfter #6"); test(new DfpDec(field, (byte) 2).nextAfter(new DfpDec(field, 2)), new DfpDec(field, 2l), 0, "NextAfter #7"); test(new DfpDec(field, 0).nextAfter(new DfpDec(field, 0)), new DfpDec(field, 0), 0, "NextAfter #8"); test(new DfpDec(field, -2).nextAfter(new DfpDec(field, -2)), new DfpDec(field, -2), 0, "NextAfter #9"); test(new DfpDec(field, 0).nextAfter(new DfpDec(field, 1)), new DfpDec(field, "1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #10"); test(new DfpDec(field, 0).nextAfter(new DfpDec(field, -1)), new DfpDec(field, "-1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #11"); test(new DfpDec(field, "-1e-131092").nextAfter(pinf), new DfpDec(field, "-0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #12"); test(new DfpDec(field, "1e-131092").nextAfter(ninf), new DfpDec(field, "0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #13"); test(new DfpDec(field, "9.9999999999999999e131078").nextAfter(pinf), pinf, DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, "Next After #14"); } }
public void testPow() { // Test special cases exponent of zero test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("0")), factory.newDfp("1"), 0, "pow #1"); test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-0")), factory.newDfp("1"), 0, "pow #2"); test(DfpMath.pow(factory.newDfp("2"), factory.newDfp("0")), factory.newDfp("1"), 0, "pow #3"); test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-0")), factory.newDfp("1"), 0, "pow #4"); test(DfpMath.pow(pinf, factory.newDfp("-0")), factory.newDfp("1"), 0, "pow #5"); test(DfpMath.pow(pinf, factory.newDfp("0")), factory.newDfp("1"), 0, "pow #6"); test(DfpMath.pow(ninf, factory.newDfp("-0")), factory.newDfp("1"), 0, "pow #7"); test(DfpMath.pow(ninf, factory.newDfp("0")), factory.newDfp("1"), 0, "pow #8"); test(DfpMath.pow(qnan, factory.newDfp("0")), factory.newDfp("1"), 0, "pow #8"); // exponent of one test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1")), factory.newDfp("0"), 0, "pow #9"); test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("1")), factory.newDfp("-0"), 0, "pow #10"); test(DfpMath.pow(factory.newDfp("2"), factory.newDfp("1")), factory.newDfp("2"), 0, "pow #11"); test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("1")), factory.newDfp("-2"), 0, "pow #12"); test(DfpMath.pow(pinf, factory.newDfp("1")), pinf, 0, "pow #13"); test(DfpMath.pow(ninf, factory.newDfp("1")), ninf, 0, "pow #14"); test(DfpMath.pow(qnan, factory.newDfp("1")), qnan, DfpField.FLAG_INVALID, "pow #14.1"); // exponent of NaN test(DfpMath.pow(factory.newDfp("0"), qnan), qnan, DfpField.FLAG_INVALID, "pow #15"); test(DfpMath.pow(factory.newDfp("-0"), qnan), qnan, DfpField.FLAG_INVALID, "pow #16"); test(DfpMath.pow(factory.newDfp("2"), qnan), qnan, DfpField.FLAG_INVALID, "pow #17"); test(DfpMath.pow(factory.newDfp("-2"), qnan), qnan, DfpField.FLAG_INVALID, "pow #18"); test(DfpMath.pow(pinf, qnan), qnan, DfpField.FLAG_INVALID, "pow #19"); test(DfpMath.pow(ninf, qnan), qnan, DfpField.FLAG_INVALID, "pow #20"); test(DfpMath.pow(qnan, qnan), qnan, DfpField.FLAG_INVALID, "pow #21"); // radix of NaN test(DfpMath.pow(qnan, factory.newDfp("1")), qnan, DfpField.FLAG_INVALID, "pow #22"); test(DfpMath.pow(qnan, factory.newDfp("-1")), qnan, DfpField.FLAG_INVALID, "pow #23"); test(DfpMath.pow(qnan, pinf), qnan, DfpField.FLAG_INVALID, "pow #24"); test(DfpMath.pow(qnan, ninf), qnan, DfpField.FLAG_INVALID, "pow #25"); test(DfpMath.pow(qnan, qnan), qnan, DfpField.FLAG_INVALID, "pow #26"); // (x > 1) ^ pinf = pinf,  (x < -1) ^ pinf = pinf test(DfpMath.pow(factory.newDfp("2"), pinf), pinf, 0, "pow #27"); test(DfpMath.pow(factory.newDfp("-2"), pinf), pinf, 0, "pow #28"); test(DfpMath.pow(pinf, pinf), pinf, 0, "pow #29"); test(DfpMath.pow(ninf, pinf), pinf, 0, "pow #30"); // (x > 1) ^ ninf = +0,  (x < -1) ^ ninf = +0 test(DfpMath.pow(factory.newDfp("2"), ninf), factory.getZero(), 0, "pow #31"); test(DfpMath.pow(factory.newDfp("-2"), ninf), factory.getZero(), 0, "pow #32"); test(DfpMath.pow(pinf, ninf), factory.getZero(), 0, "pow #33"); test(DfpMath.pow(ninf, ninf), factory.getZero(), 0, "pow #34"); // (-1 < x < 1) ^ pinf = 0 test(DfpMath.pow(factory.newDfp("0.5"), pinf), factory.getZero(), 0, "pow #35"); test(DfpMath.pow(factory.newDfp("-0.5"), pinf), factory.getZero(), 0, "pow #36"); // (-1 < x < 1) ^ ninf = pinf test(DfpMath.pow(factory.newDfp("0.5"), ninf), pinf, 0, "pow #37"); test(DfpMath.pow(factory.newDfp("-0.5"), ninf), pinf, 0, "pow #38"); // +/- 1 ^ +/-inf = NaN test(DfpMath.pow(factory.getOne(), pinf), qnan, DfpField.FLAG_INVALID, "pow #39"); test(DfpMath.pow(factory.getOne(), ninf), qnan, DfpField.FLAG_INVALID, "pow #40"); test(DfpMath.pow(factory.newDfp("-1"), pinf), qnan, DfpField.FLAG_INVALID, "pow #41"); test(DfpMath.pow(factory.getOne().negate(), ninf), qnan, DfpField.FLAG_INVALID, "pow #42"); // +0 ^ +anything except 0, NAN = +0 test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1")), factory.newDfp("0"), 0, "pow #43"); test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1e30")), factory.newDfp("0"), 0, "pow #44"); test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("1e-30")), factory.newDfp("0"), 0, "pow #45"); test(DfpMath.pow(factory.newDfp("0"), pinf), factory.newDfp("0"), 0, "pow #46"); // -0 ^ +anything except 0, NAN, odd integer = +0 test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("2")), factory.newDfp("0"), 0, "pow #47"); test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("1e30")), factory.newDfp("0"), 0, "pow #48"); test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("1e-30")), factory.newDfp("0"), DfpField.FLAG_INEXACT, "pow #49"); test(DfpMath.pow(factory.newDfp("-0"), pinf), factory.newDfp("0"), 0, "pow #50"); // +0 ^ -anything except 0, NAN = +INF test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-1")), pinf, 0, "pow #51"); test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-1e30")), pinf, 0, "pow #52"); test(DfpMath.pow(factory.newDfp("0"), factory.newDfp("-1e-30")), pinf, 0, "pow #53"); test(DfpMath.pow(factory.newDfp("0"), ninf), pinf, 0, "pow #54"); // -0 ^ -anything except 0, NAN, odd integer = +INF test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-2")), pinf, 0, "pow #55"); test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-1e30")), pinf, 0, "pow #56"); test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-1e-30")), pinf, DfpField.FLAG_INEXACT, "pow #57"); test(DfpMath.pow(factory.newDfp("-0"), ninf), pinf, 0, "pow #58"); // -0 ^ -odd integer  = -INF test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-1")), ninf, DfpField.FLAG_INEXACT, "pow #59"); test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("-12345")), ninf, DfpField.FLAG_INEXACT, "pow #60"); // -0 ^ +odd integer  = -0 test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("3")), factory.newDfp("-0"), DfpField.FLAG_INEXACT, "pow #61"); test(DfpMath.pow(factory.newDfp("-0"), factory.newDfp("12345")), factory.newDfp("-0"), DfpField.FLAG_INEXACT, "pow #62"); // pinf ^ +anything  = pinf test(DfpMath.pow(pinf, factory.newDfp("3")), pinf, 0, "pow #63"); test(DfpMath.pow(pinf, factory.newDfp("1e30")), pinf, 0, "pow #64"); test(DfpMath.pow(pinf, factory.newDfp("1e-30")), pinf, 0, "pow #65"); test(DfpMath.pow(pinf, pinf), pinf, 0, "pow #66"); // pinf ^ -anything  = +0 test(DfpMath.pow(pinf, factory.newDfp("-3")), factory.getZero(), 0, "pow #67"); test(DfpMath.pow(pinf, factory.newDfp("-1e30")), factory.getZero(), 0, "pow #68"); test(DfpMath.pow(pinf, factory.newDfp("-1e-30")), factory.getZero(), 0, "pow #69"); test(DfpMath.pow(pinf, ninf), factory.getZero(), 0, "pow #70"); // ninf ^ anything  = -0 ^ -anything // ninf ^ -anything except 0, NAN, odd integer = +0 test(DfpMath.pow(ninf, factory.newDfp("-2")), factory.newDfp("0"), 0, "pow #71"); test(DfpMath.pow(ninf, factory.newDfp("-1e30")), factory.newDfp("0"), 0, "pow #72"); test(DfpMath.pow(ninf, factory.newDfp("-1e-30")), factory.newDfp("0"), DfpField.FLAG_INEXACT, "pow #73"); test(DfpMath.pow(ninf, ninf), factory.newDfp("0"), 0, "pow #74"); // ninf ^ +anything except 0, NAN, odd integer = +INF test(DfpMath.pow(ninf, factory.newDfp("2")), pinf, 0, "pow #75"); test(DfpMath.pow(ninf, factory.newDfp("1e30")), pinf, 0, "pow #76"); test(DfpMath.pow(ninf, factory.newDfp("1e-30")), pinf, DfpField.FLAG_INEXACT, "pow #77"); test(DfpMath.pow(ninf, pinf), pinf, 0, "pow #78"); // ninf ^ +odd integer  = -INF test(DfpMath.pow(ninf, factory.newDfp("3")), ninf, DfpField.FLAG_INEXACT, "pow #79"); test(DfpMath.pow(ninf, factory.newDfp("12345")), ninf, DfpField.FLAG_INEXACT, "pow #80"); // ninf ^ -odd integer  = -0 test(DfpMath.pow(ninf, factory.newDfp("-3")), factory.newDfp("-0"), DfpField.FLAG_INEXACT, "pow #81"); test(DfpMath.pow(ninf, factory.newDfp("-12345")), factory.newDfp("-0"), DfpField.FLAG_INEXACT, "pow #82"); // -anything ^ integer test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("3")), factory.newDfp("-8"), DfpField.FLAG_INEXACT, "pow #83"); test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("16")), factory.newDfp("65536"), 0, "pow #84"); test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-3")), factory.newDfp("-0.125"), DfpField.FLAG_INEXACT, "pow #85"); test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-4")), factory.newDfp("0.0625"), 0, "pow #86"); // -anything ^ noninteger = NaN test(DfpMath.pow(factory.newDfp("-2"), factory.newDfp("-4.1")), qnan, DfpField.FLAG_INVALID|DfpField.FLAG_INEXACT, "pow #87"); // Some fractional cases. test(DfpMath.pow(factory.newDfp("2"),factory.newDfp("1.5")), factory.newDfp("2.8284271247461901"), DfpField.FLAG_INEXACT, "pow #88"); } @Test public void testSin() { test(DfpMath.sin(pinf), nan, DfpField.FLAG_INVALID|DfpField.FLAG_INEXACT, "sin #1"); test(DfpMath.sin(nan), nan, DfpField.FLAG_INVALID|DfpField.FLAG_INEXACT, "sin #2"); test(DfpMath.sin(factory.getZero()), factory.getZero(), DfpField.FLAG_INEXACT, "sin #3"); test(DfpMath.sin(factory.getPi()), factory.getZero(), DfpField.FLAG_INEXACT, "sin #4"); test(DfpMath.sin(factory.getPi().negate()), factory.newDfp("-0"), DfpField.FLAG_INEXACT, "sin #5"); test(DfpMath.sin(factory.getPi().multiply(2)), factory.getZero(), DfpField.FLAG_INEXACT, "sin #6"); test(DfpMath.sin(factory.getPi().divide(2)), factory.getOne(), DfpField.FLAG_INEXACT, "sin #7"); test(DfpMath.sin(factory.getPi().divide(2).negate()), factory.getOne().negate(), DfpField.FLAG_INEXACT, "sin #8"); test(DfpMath.sin(DfpMath.atan(factory.getOne())), // pi/4 factory.newDfp("0.5").sqrt(), DfpField.FLAG_INEXACT, "sin #9"); test(DfpMath.sin(DfpMath.atan(factory.getOne())).negate(), // -pi/4 factory.newDfp("0.5").sqrt().negate(), DfpField.FLAG_INEXACT, "sin #10"); test(DfpMath.sin(DfpMath.atan(factory.getOne())).negate(), // -pi/4 factory.newDfp("0.5").sqrt().negate(), DfpField.FLAG_INEXACT, "sin #11"); test(DfpMath.sin(factory.newDfp("0.1")), factory.newDfp("0.0998334166468281523"), DfpField.FLAG_INEXACT, "sin #12"); test(DfpMath.sin(factory.newDfp("0.2")), factory.newDfp("0.19866933079506121546"), DfpField.FLAG_INEXACT, "sin #13"); test(DfpMath.sin(factory.newDfp("0.3")), factory.newDfp("0.2955202066613395751"), DfpField.FLAG_INEXACT, "sin #14"); test(DfpMath.sin(factory.newDfp("0.4")), factory.newDfp("0.38941834230865049166"), DfpField.FLAG_INEXACT, "sin #15"); test(DfpMath.sin(factory.newDfp("0.5")), factory.newDfp("0.47942553860420300026"), // off by one ULP DfpField.FLAG_INEXACT, "sin #16"); test(DfpMath.sin(factory.newDfp("0.6")), factory.newDfp("0.56464247339503535721"), // off by one ULP DfpField.FLAG_INEXACT, "sin #17"); test(DfpMath.sin(factory.newDfp("0.7")), factory.newDfp("0.64421768723769105367"), DfpField.FLAG_INEXACT, "sin #18"); test(DfpMath.sin(factory.newDfp("0.8")), factory.newDfp("0.71735609089952276163"), DfpField.FLAG_INEXACT, "sin #19"); test(DfpMath.sin(factory.newDfp("0.9")),    // off by one ULP factory.newDfp("0.78332690962748338847"), DfpField.FLAG_INEXACT, "sin #20"); test(DfpMath.sin(factory.newDfp("1.0")), factory.newDfp("0.84147098480789650666"), DfpField.FLAG_INEXACT, "sin #21"); test(DfpMath.sin(factory.newDfp("1.1")), factory.newDfp("0.89120736006143533995"), DfpField.FLAG_INEXACT, "sin #22"); test(DfpMath.sin(factory.newDfp("1.2")), factory.newDfp("0.93203908596722634968"), DfpField.FLAG_INEXACT, "sin #23"); test(DfpMath.sin(factory.newDfp("1.3")), factory.newDfp("0.9635581854171929647"), DfpField.FLAG_INEXACT, "sin #24"); test(DfpMath.sin(factory.newDfp("1.4")), factory.newDfp("0.98544972998846018066"), DfpField.FLAG_INEXACT, "sin #25"); test(DfpMath.sin(factory.newDfp("1.5")), factory.newDfp("0.99749498660405443096"), DfpField.FLAG_INEXACT, "sin #26"); test(DfpMath.sin(factory.newDfp("1.6")), factory.newDfp("0.99957360304150516323"), DfpField.FLAG_INEXACT, "sin #27"); }  }
public void testSin() { test(DfpMath.sin(pinf), nan, DfpField.FLAG_INVALID|DfpField.FLAG_INEXACT, "sin #1"); test(DfpMath.sin(nan), nan, DfpField.FLAG_INVALID|DfpField.FLAG_INEXACT, "sin #2"); test(DfpMath.sin(factory.getZero()), factory.getZero(), DfpField.FLAG_INEXACT, "sin #3"); test(DfpMath.sin(factory.getPi()), factory.getZero(), DfpField.FLAG_INEXACT, "sin #4"); test(DfpMath.sin(factory.getPi().negate()), factory.newDfp("-0"), DfpField.FLAG_INEXACT, "sin #5"); test(DfpMath.sin(factory.getPi().multiply(2)), factory.getZero(), DfpField.FLAG_INEXACT, "sin #6"); test(DfpMath.sin(factory.getPi().divide(2)), factory.getOne(), DfpField.FLAG_INEXACT, "sin #7"); test(DfpMath.sin(factory.getPi().divide(2).negate()), factory.getOne().negate(), DfpField.FLAG_INEXACT, "sin #8"); test(DfpMath.sin(DfpMath.atan(factory.getOne())), // pi/4 factory.newDfp("0.5").sqrt(), DfpField.FLAG_INEXACT, "sin #9"); test(DfpMath.sin(DfpMath.atan(factory.getOne())).negate(), // -pi/4 factory.newDfp("0.5").sqrt().negate(), DfpField.FLAG_INEXACT, "sin #10"); test(DfpMath.sin(DfpMath.atan(factory.getOne())).negate(), // -pi/4 factory.newDfp("0.5").sqrt().negate(), DfpField.FLAG_INEXACT, "sin #11"); test(DfpMath.sin(factory.newDfp("0.1")), factory.newDfp("0.0998334166468281523"), DfpField.FLAG_INEXACT, "sin #12"); test(DfpMath.sin(factory.newDfp("0.2")), factory.newDfp("0.19866933079506121546"), DfpField.FLAG_INEXACT, "sin #13"); test(DfpMath.sin(factory.newDfp("0.3")), factory.newDfp("0.2955202066613395751"), DfpField.FLAG_INEXACT, "sin #14"); test(DfpMath.sin(factory.newDfp("0.4")), factory.newDfp("0.38941834230865049166"), DfpField.FLAG_INEXACT, "sin #15"); test(DfpMath.sin(factory.newDfp("0.5")), factory.newDfp("0.47942553860420300026"), // off by one ULP DfpField.FLAG_INEXACT, "sin #16"); test(DfpMath.sin(factory.newDfp("0.6")), factory.newDfp("0.56464247339503535721"), // off by one ULP DfpField.FLAG_INEXACT, "sin #17"); test(DfpMath.sin(factory.newDfp("0.7")), factory.newDfp("0.64421768723769105367"), DfpField.FLAG_INEXACT, "sin #18"); test(DfpMath.sin(factory.newDfp("0.8")), factory.newDfp("0.71735609089952276163"), DfpField.FLAG_INEXACT, "sin #19"); test(DfpMath.sin(factory.newDfp("0.9")),    // off by one ULP factory.newDfp("0.78332690962748338847"), DfpField.FLAG_INEXACT, "sin #20"); test(DfpMath.sin(factory.newDfp("1.0")), factory.newDfp("0.84147098480789650666"), DfpField.FLAG_INEXACT, "sin #21"); test(DfpMath.sin(factory.newDfp("1.1")), factory.newDfp("0.89120736006143533995"), DfpField.FLAG_INEXACT, "sin #22"); test(DfpMath.sin(factory.newDfp("1.2")), factory.newDfp("0.93203908596722634968"), DfpField.FLAG_INEXACT, "sin #23"); test(DfpMath.sin(factory.newDfp("1.3")), factory.newDfp("0.9635581854171929647"), DfpField.FLAG_INEXACT, "sin #24"); test(DfpMath.sin(factory.newDfp("1.4")), factory.newDfp("0.98544972998846018066"), DfpField.FLAG_INEXACT, "sin #25"); test(DfpMath.sin(factory.newDfp("1.5")), factory.newDfp("0.99749498660405443096"), DfpField.FLAG_INEXACT, "sin #26"); test(DfpMath.sin(factory.newDfp("1.6")), factory.newDfp("0.99957360304150516323"), DfpField.FLAG_INEXACT, "sin #27"); }  }
public void test0() throws Throwable { Dfp dfp0 = null; try { dfp0 = new Dfp((DfpField) null, (byte)120); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.math3.dfp.Dfp", e); } }
public void test1() throws Throwable { // Undeclared exception! try { Dfp.copysign((Dfp) null, (Dfp) null); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.math3.dfp.Dfp", e); } }
public void test2() throws Throwable { DfpField dfpField0 = new DfpField((-1254)); }
public void test3() throws Throwable { Dfp dfp0 = null; try { dfp0 = new Dfp((DfpField) null, (byte)22, (byte)22); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.math3.dfp.Dfp", e); } }
public void test4() throws Throwable { Dfp dfp0 = null; try { dfp0 = new Dfp((DfpField) null); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.math3.dfp.Dfp", e); } }
public void testByteConstructor() { Assert.assertEquals("0.", new Dfp(field, (byte) 0).toString()); Assert.assertEquals("1.", new Dfp(field, (byte) 1).toString()); Assert.assertEquals("-1.", new Dfp(field, (byte) -1).toString()); Assert.assertEquals("-128.", new Dfp(field, Byte.MIN_VALUE).toString()); Assert.assertEquals("127.", new Dfp(field, Byte.MAX_VALUE).toString()); }
public void testIntConstructor() { Assert.assertEquals("0.", new Dfp(field, 0).toString()); Assert.assertEquals("1.", new Dfp(field, 1).toString()); Assert.assertEquals("-1.", new Dfp(field, -1).toString()); Assert.assertEquals("1234567890.", new Dfp(field, 1234567890).toString()); Assert.assertEquals("-1234567890.", new Dfp(field, -1234567890).toString()); Assert.assertEquals("-2147483648.", new Dfp(field, Integer.MIN_VALUE).toString()); Assert.assertEquals("2147483647.", new Dfp(field, Integer.MAX_VALUE).toString()); }
public void testLongConstructor() { Assert.assertEquals("0.", new Dfp(field, 0l).toString()); Assert.assertEquals("1.", new Dfp(field, 1l).toString()); Assert.assertEquals("-1.", new Dfp(field, -1l).toString()); Assert.assertEquals("1234567890.", new Dfp(field, 1234567890l).toString()); Assert.assertEquals("-1234567890.", new Dfp(field, -1234567890l).toString()); Assert.assertEquals("-9223372036854775808.", new Dfp(field, Long.MIN_VALUE).toString()); Assert.assertEquals("9223372036854775807.", new Dfp(field, Long.MAX_VALUE).toString()); }
public void testAdd() { test(field.newDfp("1").add(field.newDfp("1")),   // Basic tests  1+1 = 2 field.newDfp("2"), 0, "Add #1"); test(field.newDfp("1").add(field.newDfp("-1")),   // 1 + (-1) = 0 field.newDfp("0"), 0, "Add #2"); test(field.newDfp("-1").add(field.newDfp("1")),   // (-1) + 1 = 0 field.newDfp("0"), 0, "Add #3"); test(field.newDfp("-1").add(field.newDfp("-1")),   // (-1) + (-1) = -2 field.newDfp("-2"), 0, "Add #4"); // rounding mode is round half even test(field.newDfp("1").add(field.newDfp("1e-16")),   // rounding on add field.newDfp("1.0000000000000001"), 0, "Add #5"); test(field.newDfp("1").add(field.newDfp("1e-17")),   // rounding on add field.newDfp("1"), DfpField.FLAG_INEXACT, "Add #6"); test(field.newDfp("0.90999999999999999999").add(field.newDfp("0.1")),   // rounding on add field.newDfp("1.01"), DfpField.FLAG_INEXACT, "Add #7"); test(field.newDfp(".10000000000000005000").add(field.newDfp(".9")),   // rounding on add field.newDfp("1."), DfpField.FLAG_INEXACT, "Add #8"); test(field.newDfp(".10000000000000015000").add(field.newDfp(".9")),   // rounding on add field.newDfp("1.0000000000000002"), DfpField.FLAG_INEXACT, "Add #9"); test(field.newDfp(".10000000000000014999").add(field.newDfp(".9")),   // rounding on add field.newDfp("1.0000000000000001"), DfpField.FLAG_INEXACT, "Add #10"); test(field.newDfp(".10000000000000015001").add(field.newDfp(".9")),   // rounding on add field.newDfp("1.0000000000000002"), DfpField.FLAG_INEXACT, "Add #11"); test(field.newDfp(".11111111111111111111").add(field.newDfp("11.1111111111111111")), // rounding on add field.newDfp("11.22222222222222222222"), DfpField.FLAG_INEXACT, "Add #12"); test(field.newDfp(".11111111111111111111").add(field.newDfp("1111111111111111.1111")), // rounding on add field.newDfp("1111111111111111.2222"), DfpField.FLAG_INEXACT, "Add #13"); test(field.newDfp(".11111111111111111111").add(field.newDfp("11111111111111111111")), // rounding on add field.newDfp("11111111111111111111"), DfpField.FLAG_INEXACT, "Add #14"); test(field.newDfp("9.9999999999999999999e131071").add(field.newDfp("-1e131052")), // overflow on add field.newDfp("9.9999999999999999998e131071"), 0, "Add #15"); test(field.newDfp("9.9999999999999999999e131071").add(field.newDfp("1e131052")), // overflow on add pinf, DfpField.FLAG_OVERFLOW, "Add #16"); test(field.newDfp("-9.9999999999999999999e131071").add(field.newDfp("-1e131052")), // overflow on add ninf, DfpField.FLAG_OVERFLOW, "Add #17"); test(field.newDfp("-9.9999999999999999999e131071").add(field.newDfp("1e131052")), // overflow on add field.newDfp("-9.9999999999999999998e131071"), 0, "Add #18"); test(field.newDfp("1e-131072").add(field.newDfp("1e-131072")), // underflow on add field.newDfp("2e-131072"), 0, "Add #19"); test(field.newDfp("1.0000000000000001e-131057").add(field.newDfp("-1e-131057")), // underflow on add field.newDfp("1e-131073"), DfpField.FLAG_UNDERFLOW, "Add #20"); test(field.newDfp("1.1e-131072").add(field.newDfp("-1e-131072")), // underflow on add field.newDfp("1e-131073"), DfpField.FLAG_UNDERFLOW, "Add #21"); test(field.newDfp("1.0000000000000001e-131072").add(field.newDfp("-1e-131072")), // underflow on add field.newDfp("1e-131088"), DfpField.FLAG_UNDERFLOW, "Add #22"); test(field.newDfp("1.0000000000000001e-131078").add(field.newDfp("-1e-131078")), // underflow on add field.newDfp("0"), DfpField.FLAG_UNDERFLOW, "Add #23"); test(field.newDfp("1.0").add(field.newDfp("-1e-20")), // loss of precision on alignment? field.newDfp("0.99999999999999999999"), 0, "Add #23.1"); test(field.newDfp("-0.99999999999999999999").add(field.newDfp("1")), // proper normalization? field.newDfp("0.00000000000000000001"), 0, "Add #23.2"); test(field.newDfp("1").add(field.newDfp("0")), // adding zeros field.newDfp("1"), 0, "Add #24"); test(field.newDfp("0").add(field.newDfp("0")), // adding zeros field.newDfp("0"), 0, "Add #25"); test(field.newDfp("-0").add(field.newDfp("0")), // adding zeros field.newDfp("0"), 0, "Add #26"); test(field.newDfp("0").add(field.newDfp("-0")), // adding zeros field.newDfp("0"), 0, "Add #27"); test(field.newDfp("-0").add(field.newDfp("-0")), // adding zeros field.newDfp("-0"), 0, "Add #28"); test(field.newDfp("1e-20").add(field.newDfp("0")), // adding zeros field.newDfp("1e-20"), 0, "Add #29"); test(field.newDfp("1e-40").add(field.newDfp("0")), // adding zeros field.newDfp("1e-40"), 0, "Add #30"); test(pinf.add(ninf), // adding infinities nan, DfpField.FLAG_INVALID, "Add #31"); test(ninf.add(pinf), // adding infinities nan, DfpField.FLAG_INVALID, "Add #32"); test(ninf.add(ninf), // adding infinities ninf, 0, "Add #33"); test(pinf.add(pinf), // adding infinities pinf, 0, "Add #34"); test(pinf.add(field.newDfp("0")), // adding infinities pinf, 0, "Add #35"); test(pinf.add(field.newDfp("-1e131071")), // adding infinities pinf, 0, "Add #36"); test(pinf.add(field.newDfp("1e131071")), // adding infinities pinf, 0, "Add #37"); test(field.newDfp("0").add(pinf), // adding infinities pinf, 0, "Add #38"); test(field.newDfp("-1e131071").add(pinf), // adding infinities pinf, 0, "Add #39"); test(field.newDfp("1e131071").add(pinf), // adding infinities pinf, 0, "Add #40"); test(ninf.add(field.newDfp("0")), // adding infinities ninf, 0, "Add #41"); test(ninf.add(field.newDfp("-1e131071")), // adding infinities ninf, 0, "Add #42"); test(ninf.add(field.newDfp("1e131071")), // adding infinities ninf, 0, "Add #43"); test(field.newDfp("0").add(ninf), // adding infinities ninf, 0, "Add #44"); test(field.newDfp("-1e131071").add(ninf), // adding infinities ninf, 0, "Add #45"); test(field.newDfp("1e131071").add(ninf), // adding infinities ninf, 0, "Add #46"); test(field.newDfp("9.9999999999999999999e131071").add(field.newDfp("5e131051")), // overflow pinf, DfpField.FLAG_OVERFLOW, "Add #47"); test(field.newDfp("9.9999999999999999999e131071").add(field.newDfp("4.9999999999999999999e131051")), // overflow field.newDfp("9.9999999999999999999e131071"), DfpField.FLAG_INEXACT, "Add #48"); test(nan.add(field.newDfp("1")), nan, 0, "Add #49"); test(field.newDfp("1").add(nan), nan, 0, "Add #50"); test(field.newDfp("12345678123456781234").add(field.newDfp("0.12345678123456781234")), field.newDfp("12345678123456781234"), DfpField.FLAG_INEXACT, "Add #51"); test(field.newDfp("12345678123456781234").add(field.newDfp("123.45678123456781234")), field.newDfp("12345678123456781357"), DfpField.FLAG_INEXACT, "Add #52"); test(field.newDfp("123.45678123456781234").add(field.newDfp("12345678123456781234")), field.newDfp("12345678123456781357"), DfpField.FLAG_INEXACT, "Add #53"); test(field.newDfp("12345678123456781234").add(field.newDfp(".00001234567812345678")), field.newDfp("12345678123456781234"), DfpField.FLAG_INEXACT, "Add #54"); test(field.newDfp("12345678123456781234").add(field.newDfp(".00000000123456781234")), field.newDfp("12345678123456781234"), DfpField.FLAG_INEXACT, "Add #55"); test(field.newDfp("-0").add(field.newDfp("-0")), field.newDfp("-0"), 0, "Add #56"); test(field.newDfp("0").add(field.newDfp("-0")), field.newDfp("0"), 0, "Add #57"); test(field.newDfp("-0").add(field.newDfp("0")), field.newDfp("0"), 0, "Add #58"); test(field.newDfp("0").add(field.newDfp("0")), field.newDfp("0"), 0, "Add #59"); } //////////////////////////////////////////////////////////////////////////////////////////////////////// // Test comparisons // utility function to help test comparisons private void cmptst(Dfp a, Dfp b, String op, boolean result, double num) { if (op == "equal") if (a.equals(b) != result) Assert.fail("assersion failed. "+op+" compare #"+num); if (op == "unequal") if (a.unequal(b) != result) Assert.fail("assersion failed. "+op+" compare #"+num); if (op == "lessThan") if (a.lessThan(b) != result) Assert.fail("assersion failed. "+op+" compare #"+num); if (op == "greaterThan") if (a.greaterThan(b) != result) Assert.fail("assersion failed. "+op+" compare #"+num); } @Test public void testCompare() { // test equal() comparison // check zero vs. zero field.clearIEEEFlags(); cmptst(field.newDfp("0"), field.newDfp("0"), "equal", true, 1);     // 0 == 0 cmptst(field.newDfp("0"), field.newDfp("-0"), "equal", true, 2);    // 0 == -0 cmptst(field.newDfp("-0"), field.newDfp("-0"), "equal", true, 3);    // -0 == -0 cmptst(field.newDfp("-0"), field.newDfp("0"), "equal", true, 4);    // -0 == 0 // check zero vs normal numbers cmptst(field.newDfp("0"), field.newDfp("1"), "equal", false, 5);     // 0 == 1 cmptst(field.newDfp("1"), field.newDfp("0"), "equal", false, 6);     // 1 == 0 cmptst(field.newDfp("-1"), field.newDfp("0"), "equal", false, 7);    // -1 == 0 cmptst(field.newDfp("0"), field.newDfp("-1"), "equal", false, 8);    // 0 == -1 cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "equal", false, 9); // 0 == 1e-131072 // check flags if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "equal", false, 10); // 0 == 1e-131078 // check flags -- underflow should be set if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); field.clearIEEEFlags(); cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "equal", false, 11); // 0 == 1e+131071 // check zero vs infinities cmptst(field.newDfp("0"), pinf, "equal", false, 12);  // 0 == pinf cmptst(field.newDfp("0"), ninf, "equal", false, 13);  // 0 == ninf cmptst(field.newDfp("-0"), pinf, "equal", false, 14);  // -0 == pinf cmptst(field.newDfp("-0"), ninf, "equal", false, 15);  // -0 == ninf cmptst(pinf, field.newDfp("0"), "equal", false, 16);  // pinf == 0 cmptst(ninf, field.newDfp("0"), "equal", false, 17);  // ninf == 0 cmptst(pinf, field.newDfp("-0"), "equal", false, 18);  // pinf == -0 cmptst(ninf, field.newDfp("-0"), "equal", false, 19);  // ninf == -0 cmptst(ninf, pinf, "equal", false, 19.10);   // ninf == pinf cmptst(pinf, ninf, "equal", false, 19.11);   // pinf == ninf cmptst(pinf, pinf, "equal", true, 19.12);   // pinf == pinf cmptst(ninf, ninf, "equal", true, 19.13);   // ninf == ninf // check some normal numbers cmptst(field.newDfp("1"), field.newDfp("1"), "equal", true, 20);  // 1 == 1 cmptst(field.newDfp("1"), field.newDfp("-1"), "equal", false, 21);  // 1 == -1 cmptst(field.newDfp("-1"), field.newDfp("-1"), "equal", true, 22);  // -1 == -1 cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "equal", false, 23);  // 1 == 1.0000000000000001 // The tests below checks to ensure that comparisons don't set FLAG_INEXACT // 100000 == 1.0000000000000001 cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "equal", false, 24); if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "equal", true, 25); // check some nans -- nans shouldnt equal anything cmptst(snan, snan, "equal", false, 27); cmptst(qnan, qnan, "equal", false, 28); cmptst(snan, qnan, "equal", false, 29); cmptst(qnan, snan, "equal", false, 30); cmptst(qnan, field.newDfp("0"), "equal", false, 31); cmptst(snan, field.newDfp("0"), "equal", false, 32); cmptst(field.newDfp("0"), snan, "equal", false, 33); cmptst(field.newDfp("0"), qnan, "equal", false, 34); cmptst(qnan, pinf, "equal", false, 35); cmptst(snan, pinf, "equal", false, 36); cmptst(pinf, snan, "equal", false, 37); cmptst(pinf, qnan, "equal", false, 38); cmptst(qnan, ninf, "equal", false, 39); cmptst(snan, ninf, "equal", false, 40); cmptst(ninf, snan, "equal", false, 41); cmptst(ninf, qnan, "equal", false, 42); cmptst(qnan, field.newDfp("-1"), "equal", false, 43); cmptst(snan, field.newDfp("-1"), "equal", false, 44); cmptst(field.newDfp("-1"), snan, "equal", false, 45); cmptst(field.newDfp("-1"), qnan, "equal", false, 46); cmptst(qnan, field.newDfp("1"), "equal", false, 47); cmptst(snan, field.newDfp("1"), "equal", false, 48); cmptst(field.newDfp("1"), snan, "equal", false, 49); cmptst(field.newDfp("1"), qnan, "equal", false, 50); cmptst(snan.negate(), snan, "equal", false, 51); cmptst(qnan.negate(), qnan, "equal", false, 52); // // Tests for un equal -- do it all over again // cmptst(field.newDfp("0"), field.newDfp("0"), "unequal", false, 1);     // 0 == 0 cmptst(field.newDfp("0"), field.newDfp("-0"), "unequal", false, 2);    // 0 == -0 cmptst(field.newDfp("-0"), field.newDfp("-0"), "unequal", false, 3);    // -0 == -0 cmptst(field.newDfp("-0"), field.newDfp("0"), "unequal", false, 4);    // -0 == 0 // check zero vs normal numbers cmptst(field.newDfp("0"), field.newDfp("1"), "unequal", true, 5);     // 0 == 1 cmptst(field.newDfp("1"), field.newDfp("0"), "unequal", true, 6);     // 1 == 0 cmptst(field.newDfp("-1"), field.newDfp("0"), "unequal", true, 7);    // -1 == 0 cmptst(field.newDfp("0"), field.newDfp("-1"), "unequal", true, 8);    // 0 == -1 cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "unequal", true, 9); // 0 == 1e-131072 // check flags if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "unequal", true, 10); // 0 == 1e-131078 // check flags -- underflow should be set if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); field.clearIEEEFlags(); cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "unequal", true, 11); // 0 == 1e+131071 // check zero vs infinities cmptst(field.newDfp("0"), pinf, "unequal", true, 12);  // 0 == pinf cmptst(field.newDfp("0"), ninf, "unequal", true, 13);  // 0 == ninf cmptst(field.newDfp("-0"), pinf, "unequal", true, 14);  // -0 == pinf cmptst(field.newDfp("-0"), ninf, "unequal", true, 15);  // -0 == ninf cmptst(pinf, field.newDfp("0"), "unequal", true, 16);  // pinf == 0 cmptst(ninf, field.newDfp("0"), "unequal", true, 17);  // ninf == 0 cmptst(pinf, field.newDfp("-0"), "unequal", true, 18);  // pinf == -0 cmptst(ninf, field.newDfp("-0"), "unequal", true, 19);  // ninf == -0 cmptst(ninf, pinf, "unequal", true, 19.10);   // ninf == pinf cmptst(pinf, ninf, "unequal", true, 19.11);   // pinf == ninf cmptst(pinf, pinf, "unequal", false, 19.12);   // pinf == pinf cmptst(ninf, ninf, "unequal", false, 19.13);   // ninf == ninf // check some normal numbers cmptst(field.newDfp("1"), field.newDfp("1"), "unequal", false, 20);  // 1 == 1 cmptst(field.newDfp("1"), field.newDfp("-1"), "unequal", true, 21);  // 1 == -1 cmptst(field.newDfp("-1"), field.newDfp("-1"), "unequal", false, 22);  // -1 == -1 cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "unequal", true, 23);  // 1 == 1.0000000000000001 // The tests below checks to ensure that comparisons don't set FLAG_INEXACT // 100000 == 1.0000000000000001 cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "unequal", true, 24); if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "unequal", false, 25); // check some nans -- nans shouldnt be unequal to anything cmptst(snan, snan, "unequal", false, 27); cmptst(qnan, qnan, "unequal", false, 28); cmptst(snan, qnan, "unequal", false, 29); cmptst(qnan, snan, "unequal", false, 30); cmptst(qnan, field.newDfp("0"), "unequal", false, 31); cmptst(snan, field.newDfp("0"), "unequal", false, 32); cmptst(field.newDfp("0"), snan, "unequal", false, 33); cmptst(field.newDfp("0"), qnan, "unequal", false, 34); cmptst(qnan, pinf, "unequal", false, 35); cmptst(snan, pinf, "unequal", false, 36); cmptst(pinf, snan, "unequal", false, 37); cmptst(pinf, qnan, "unequal", false, 38); cmptst(qnan, ninf, "unequal", false, 39); cmptst(snan, ninf, "unequal", false, 40); cmptst(ninf, snan, "unequal", false, 41); cmptst(ninf, qnan, "unequal", false, 42); cmptst(qnan, field.newDfp("-1"), "unequal", false, 43); cmptst(snan, field.newDfp("-1"), "unequal", false, 44); cmptst(field.newDfp("-1"), snan, "unequal", false, 45); cmptst(field.newDfp("-1"), qnan, "unequal", false, 46); cmptst(qnan, field.newDfp("1"), "unequal", false, 47); cmptst(snan, field.newDfp("1"), "unequal", false, 48); cmptst(field.newDfp("1"), snan, "unequal", false, 49); cmptst(field.newDfp("1"), qnan, "unequal", false, 50); cmptst(snan.negate(), snan, "unequal", false, 51); cmptst(qnan.negate(), qnan, "unequal", false, 52); if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare unequal flags = "+field.getIEEEFlags()); // // Tests for lessThan -- do it all over again // cmptst(field.newDfp("0"), field.newDfp("0"), "lessThan", false, 1);     // 0 < 0 cmptst(field.newDfp("0"), field.newDfp("-0"), "lessThan", false, 2);    // 0 < -0 cmptst(field.newDfp("-0"), field.newDfp("-0"), "lessThan", false, 3);    // -0 < -0 cmptst(field.newDfp("-0"), field.newDfp("0"), "lessThan", false, 4);    // -0 < 0 // check zero vs normal numbers cmptst(field.newDfp("0"), field.newDfp("1"), "lessThan", true, 5);     // 0 < 1 cmptst(field.newDfp("1"), field.newDfp("0"), "lessThan", false, 6);     // 1 < 0 cmptst(field.newDfp("-1"), field.newDfp("0"), "lessThan", true, 7);    // -1 < 0 cmptst(field.newDfp("0"), field.newDfp("-1"), "lessThan", false, 8);    // 0 < -1 cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "lessThan", true, 9); // 0 < 1e-131072 // check flags if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "lessThan", true, 10); // 0 < 1e-131078 // check flags -- underflow should be set if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); field.clearIEEEFlags(); cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "lessThan", true, 11); // 0 < 1e+131071 // check zero vs infinities cmptst(field.newDfp("0"), pinf, "lessThan", true, 12);  // 0 < pinf cmptst(field.newDfp("0"), ninf, "lessThan", false, 13);  // 0 < ninf cmptst(field.newDfp("-0"), pinf, "lessThan", true, 14);  // -0 < pinf cmptst(field.newDfp("-0"), ninf, "lessThan", false, 15);  // -0 < ninf cmptst(pinf, field.newDfp("0"), "lessThan", false, 16);  // pinf < 0 cmptst(ninf, field.newDfp("0"), "lessThan", true, 17);  // ninf < 0 cmptst(pinf, field.newDfp("-0"), "lessThan", false, 18);  // pinf < -0 cmptst(ninf, field.newDfp("-0"), "lessThan", true, 19);  // ninf < -0 cmptst(ninf, pinf, "lessThan", true, 19.10);   // ninf < pinf cmptst(pinf, ninf, "lessThan", false, 19.11);   // pinf < ninf cmptst(pinf, pinf, "lessThan", false, 19.12);   // pinf < pinf cmptst(ninf, ninf, "lessThan", false, 19.13);   // ninf < ninf // check some normal numbers cmptst(field.newDfp("1"), field.newDfp("1"), "lessThan", false, 20);  // 1 < 1 cmptst(field.newDfp("1"), field.newDfp("-1"), "lessThan", false, 21);  // 1 < -1 cmptst(field.newDfp("-1"), field.newDfp("-1"), "lessThan", false, 22);  // -1 < -1 cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "lessThan", true, 23);  // 1 < 1.0000000000000001 // The tests below checks to ensure that comparisons don't set FLAG_INEXACT // 100000 < 1.0000000000000001 cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "lessThan", false, 24); if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "lessThan", false, 25); // check some nans -- nans shouldnt be lessThan to anything cmptst(snan, snan, "lessThan", false, 27); cmptst(qnan, qnan, "lessThan", false, 28); cmptst(snan, qnan, "lessThan", false, 29); cmptst(qnan, snan, "lessThan", false, 30); cmptst(qnan, field.newDfp("0"), "lessThan", false, 31); cmptst(snan, field.newDfp("0"), "lessThan", false, 32); cmptst(field.newDfp("0"), snan, "lessThan", false, 33); cmptst(field.newDfp("0"), qnan, "lessThan", false, 34); cmptst(qnan, pinf, "lessThan", false, 35); cmptst(snan, pinf, "lessThan", false, 36); cmptst(pinf, snan, "lessThan", false, 37); cmptst(pinf, qnan, "lessThan", false, 38); cmptst(qnan, ninf, "lessThan", false, 39); cmptst(snan, ninf, "lessThan", false, 40); cmptst(ninf, snan, "lessThan", false, 41); cmptst(ninf, qnan, "lessThan", false, 42); cmptst(qnan, field.newDfp("-1"), "lessThan", false, 43); cmptst(snan, field.newDfp("-1"), "lessThan", false, 44); cmptst(field.newDfp("-1"), snan, "lessThan", false, 45); cmptst(field.newDfp("-1"), qnan, "lessThan", false, 46); cmptst(qnan, field.newDfp("1"), "lessThan", false, 47); cmptst(snan, field.newDfp("1"), "lessThan", false, 48); cmptst(field.newDfp("1"), snan, "lessThan", false, 49); cmptst(field.newDfp("1"), qnan, "lessThan", false, 50); cmptst(snan.negate(), snan, "lessThan", false, 51); cmptst(qnan.negate(), qnan, "lessThan", false, 52); //lessThan compares with nans should raise FLAG_INVALID if (field.getIEEEFlags() != DfpField.FLAG_INVALID) Assert.fail("assersion failed. compare lessThan flags = "+field.getIEEEFlags()); field.clearIEEEFlags(); // // Tests for greaterThan -- do it all over again // cmptst(field.newDfp("0"), field.newDfp("0"), "greaterThan", false, 1);     // 0 > 0 cmptst(field.newDfp("0"), field.newDfp("-0"), "greaterThan", false, 2);    // 0 > -0 cmptst(field.newDfp("-0"), field.newDfp("-0"), "greaterThan", false, 3);    // -0 > -0 cmptst(field.newDfp("-0"), field.newDfp("0"), "greaterThan", false, 4);    // -0 > 0 // check zero vs normal numbers cmptst(field.newDfp("0"), field.newDfp("1"), "greaterThan", false, 5);     // 0 > 1 cmptst(field.newDfp("1"), field.newDfp("0"), "greaterThan", true, 6);     // 1 > 0 cmptst(field.newDfp("-1"), field.newDfp("0"), "greaterThan", false, 7);    // -1 > 0 cmptst(field.newDfp("0"), field.newDfp("-1"), "greaterThan", true, 8);    // 0 > -1 cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "greaterThan", false, 9); // 0 > 1e-131072 // check flags if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "greaterThan", false, 10); // 0 > 1e-131078 // check flags -- underflow should be set if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); field.clearIEEEFlags(); cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "greaterThan", false, 11); // 0 > 1e+131071 // check zero vs infinities cmptst(field.newDfp("0"), pinf, "greaterThan", false, 12);  // 0 > pinf cmptst(field.newDfp("0"), ninf, "greaterThan", true, 13);  // 0 > ninf cmptst(field.newDfp("-0"), pinf, "greaterThan", false, 14);  // -0 > pinf cmptst(field.newDfp("-0"), ninf, "greaterThan", true, 15);  // -0 > ninf cmptst(pinf, field.newDfp("0"), "greaterThan", true, 16);  // pinf > 0 cmptst(ninf, field.newDfp("0"), "greaterThan", false, 17);  // ninf > 0 cmptst(pinf, field.newDfp("-0"), "greaterThan", true, 18);  // pinf > -0 cmptst(ninf, field.newDfp("-0"), "greaterThan", false, 19);  // ninf > -0 cmptst(ninf, pinf, "greaterThan", false, 19.10);   // ninf > pinf cmptst(pinf, ninf, "greaterThan", true, 19.11);   // pinf > ninf cmptst(pinf, pinf, "greaterThan", false, 19.12);   // pinf > pinf cmptst(ninf, ninf, "greaterThan", false, 19.13);   // ninf > ninf // check some normal numbers cmptst(field.newDfp("1"), field.newDfp("1"), "greaterThan", false, 20);  // 1 > 1 cmptst(field.newDfp("1"), field.newDfp("-1"), "greaterThan", true, 21);  // 1 > -1 cmptst(field.newDfp("-1"), field.newDfp("-1"), "greaterThan", false, 22);  // -1 > -1 cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "greaterThan", false, 23);  // 1 > 1.0000000000000001 // The tests below checks to ensure that comparisons don't set FLAG_INEXACT // 100000 > 1.0000000000000001 cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "greaterThan", true, 24); if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "greaterThan", false, 25); // check some nans -- nans shouldnt be greaterThan to anything cmptst(snan, snan, "greaterThan", false, 27); cmptst(qnan, qnan, "greaterThan", false, 28); cmptst(snan, qnan, "greaterThan", false, 29); cmptst(qnan, snan, "greaterThan", false, 30); cmptst(qnan, field.newDfp("0"), "greaterThan", false, 31); cmptst(snan, field.newDfp("0"), "greaterThan", false, 32); cmptst(field.newDfp("0"), snan, "greaterThan", false, 33); cmptst(field.newDfp("0"), qnan, "greaterThan", false, 34); cmptst(qnan, pinf, "greaterThan", false, 35); cmptst(snan, pinf, "greaterThan", false, 36); cmptst(pinf, snan, "greaterThan", false, 37); cmptst(pinf, qnan, "greaterThan", false, 38); cmptst(qnan, ninf, "greaterThan", false, 39); cmptst(snan, ninf, "greaterThan", false, 40); cmptst(ninf, snan, "greaterThan", false, 41); cmptst(ninf, qnan, "greaterThan", false, 42); cmptst(qnan, field.newDfp("-1"), "greaterThan", false, 43); cmptst(snan, field.newDfp("-1"), "greaterThan", false, 44); cmptst(field.newDfp("-1"), snan, "greaterThan", false, 45); cmptst(field.newDfp("-1"), qnan, "greaterThan", false, 46); cmptst(qnan, field.newDfp("1"), "greaterThan", false, 47); cmptst(snan, field.newDfp("1"), "greaterThan", false, 48); cmptst(field.newDfp("1"), snan, "greaterThan", false, 49); cmptst(field.newDfp("1"), qnan, "greaterThan", false, 50); cmptst(snan.negate(), snan, "greaterThan", false, 51); cmptst(qnan.negate(), qnan, "greaterThan", false, 52); //greaterThan compares with nans should raise FLAG_INVALID if (field.getIEEEFlags() != DfpField.FLAG_INVALID) Assert.fail("assersion failed. compare greaterThan flags = "+field.getIEEEFlags()); field.clearIEEEFlags(); } // // Test multiplication // @Test public void testMultiply() { test(field.newDfp("1").multiply(field.newDfp("1")),   // Basic tests  1*1 = 1 field.newDfp("1"), 0, "Multiply #1"); test(field.newDfp("1").multiply(1),       // Basic tests  1*1 = 1 field.newDfp("1"), 0, "Multiply #2"); test(field.newDfp("-1").multiply(field.newDfp("1")),   // Basic tests  -1*1 = -1 field.newDfp("-1"), 0, "Multiply #3"); test(field.newDfp("-1").multiply(1),      // Basic tests  -1*1 = -1 field.newDfp("-1"), 0, "Multiply #4"); // basic tests with integers test(field.newDfp("2").multiply(field.newDfp("3")), field.newDfp("6"), 0, "Multiply #5"); test(field.newDfp("2").multiply(3), field.newDfp("6"), 0, "Multiply #6"); test(field.newDfp("-2").multiply(field.newDfp("3")), field.newDfp("-6"), 0, "Multiply #7"); test(field.newDfp("-2").multiply(3), field.newDfp("-6"), 0, "Multiply #8"); test(field.newDfp("2").multiply(field.newDfp("-3")), field.newDfp("-6"), 0, "Multiply #9"); test(field.newDfp("-2").multiply(field.newDfp("-3")), field.newDfp("6"), 0, "Multiply #10"); //multiply by zero test(field.newDfp("-2").multiply(field.newDfp("0")), field.newDfp("-0"), 0, "Multiply #11"); test(field.newDfp("-2").multiply(0), field.newDfp("-0"), 0, "Multiply #12"); test(field.newDfp("2").multiply(field.newDfp("0")), field.newDfp("0"), 0, "Multiply #13"); test(field.newDfp("2").multiply(0), field.newDfp("0"), 0, "Multiply #14"); test(field.newDfp("2").multiply(pinf), pinf, 0, "Multiply #15"); test(field.newDfp("2").multiply(ninf), ninf, 0, "Multiply #16"); test(field.newDfp("-2").multiply(pinf), ninf, 0, "Multiply #17"); test(field.newDfp("-2").multiply(ninf), pinf, 0, "Multiply #18"); test(ninf.multiply(field.newDfp("-2")), pinf, 0, "Multiply #18.1"); test(field.newDfp("5e131071").multiply(2), pinf, DfpField.FLAG_OVERFLOW, "Multiply #19"); test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")), field.newDfp("9.9999999999999950000e131071"), 0, "Multiply #20"); test(field.newDfp("-5e131071").multiply(2), ninf, DfpField.FLAG_OVERFLOW, "Multiply #22"); test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")), field.newDfp("-9.9999999999999950000e131071"), 0, "Multiply #23"); test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "Multiply #24"); test(field.newDfp("1").multiply(nan), nan, 0, "Multiply #25"); test(nan.multiply(field.newDfp("1")), nan, 0, "Multiply #26"); test(nan.multiply(pinf), nan, 0, "Multiply #27"); test(pinf.multiply(nan), nan, 0, "Multiply #27"); test(pinf.multiply(field.newDfp("0")), nan, DfpField.FLAG_INVALID, "Multiply #28"); test(field.newDfp("0").multiply(pinf), nan, DfpField.FLAG_INVALID, "Multiply #29"); test(pinf.multiply(pinf), pinf, 0, "Multiply #30"); test(ninf.multiply(pinf), ninf, 0, "Multiply #31"); test(pinf.multiply(ninf), ninf, 0, "Multiply #32"); test(ninf.multiply(ninf), pinf, 0, "Multiply #33"); test(pinf.multiply(1), pinf, 0, "Multiply #34"); test(pinf.multiply(0), nan, DfpField.FLAG_INVALID, "Multiply #35"); test(nan.multiply(1), nan, 0, "Multiply #36"); test(field.newDfp("1").multiply(10000), field.newDfp("10000"), 0, "Multiply #37"); test(field.newDfp("2").multiply(1000000), field.newDfp("2000000"), 0, "Multiply #38"); test(field.newDfp("1").multiply(-1), field.newDfp("-1"), 0, "Multiply #39"); } @Test public void testDivide() { test(field.newDfp("1").divide(nan),   // divide by NaN = NaN nan, 0, "Divide #1"); test(nan.divide(field.newDfp("1")),   // NaN / number = NaN nan, 0, "Divide #2"); test(pinf.divide(field.newDfp("1")), pinf, 0, "Divide #3"); test(pinf.divide(field.newDfp("-1")), ninf, 0, "Divide #4"); test(pinf.divide(pinf), nan, DfpField.FLAG_INVALID, "Divide #5"); test(ninf.divide(pinf), nan, DfpField.FLAG_INVALID, "Divide #6"); test(pinf.divide(ninf), nan, DfpField.FLAG_INVALID, "Divide #7"); test(ninf.divide(ninf), nan, DfpField.FLAG_INVALID, "Divide #8"); test(field.newDfp("0").divide(field.newDfp("0")), nan, DfpField.FLAG_DIV_ZERO, "Divide #9"); test(field.newDfp("1").divide(field.newDfp("0")), pinf, DfpField.FLAG_DIV_ZERO, "Divide #10"); test(field.newDfp("1").divide(field.newDfp("-0")), ninf, DfpField.FLAG_DIV_ZERO, "Divide #11"); test(field.newDfp("-1").divide(field.newDfp("0")), ninf, DfpField.FLAG_DIV_ZERO, "Divide #12"); test(field.newDfp("-1").divide(field.newDfp("-0")), pinf, DfpField.FLAG_DIV_ZERO, "Divide #13"); test(field.newDfp("1").divide(field.newDfp("3")), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "Divide #14"); test(field.newDfp("1").divide(field.newDfp("6")), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "Divide #15"); test(field.newDfp("10").divide(field.newDfp("6")), field.newDfp("1.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #16"); test(field.newDfp("100").divide(field.newDfp("6")), field.newDfp("16.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #17"); test(field.newDfp("1000").divide(field.newDfp("6")), field.newDfp("166.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #18"); test(field.newDfp("10000").divide(field.newDfp("6")), field.newDfp("1666.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #19"); test(field.newDfp("1").divide(field.newDfp("1")), field.newDfp("1"), 0, "Divide #20"); test(field.newDfp("1").divide(field.newDfp("-1")), field.newDfp("-1"), 0, "Divide #21"); test(field.newDfp("-1").divide(field.newDfp("1")), field.newDfp("-1"), 0, "Divide #22"); test(field.newDfp("-1").divide(field.newDfp("-1")), field.newDfp("1"), 0, "Divide #23"); test(field.newDfp("1e-65539").divide(field.newDfp("1e65539")), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "Divide #24"); test(field.newDfp("1e65539").divide(field.newDfp("1e-65539")), pinf, DfpField.FLAG_OVERFLOW, "Divide #24"); test(field.newDfp("2").divide(field.newDfp("1.5")),   // test trial-divisor too high field.newDfp("1.3333333333333333"), DfpField.FLAG_INEXACT, "Divide #25"); test(field.newDfp("2").divide(pinf), field.newDfp("0"), 0, "Divide #26"); test(field.newDfp("2").divide(ninf), field.newDfp("-0"), 0, "Divide #27"); test(field.newDfp("0").divide(field.newDfp("1")), field.newDfp("0"), 0, "Divide #28"); } @Test public void testReciprocal() { test(nan.reciprocal(), nan, 0, "Reciprocal #1"); test(field.newDfp("0").reciprocal(), pinf, DfpField.FLAG_DIV_ZERO, "Reciprocal #2"); test(field.newDfp("-0").reciprocal(), ninf, DfpField.FLAG_DIV_ZERO, "Reciprocal #3"); test(field.newDfp("3").reciprocal(), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "Reciprocal #4"); test(field.newDfp("6").reciprocal(), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "Reciprocal #5"); test(field.newDfp("1").reciprocal(), field.newDfp("1"), 0, "Reciprocal #6"); test(field.newDfp("-1").reciprocal(), field.newDfp("-1"), 0, "Reciprocal #7"); test(pinf.reciprocal(), field.newDfp("0"), 0, "Reciprocal #8"); test(ninf.reciprocal(), field.newDfp("-0"), 0, "Reciprocal #9"); } @Test public void testDivideInt() { test(nan.divide(1),   // NaN / number = NaN nan, 0, "DivideInt #1"); test(pinf.divide(1), pinf, 0, "DivideInt #2"); test(field.newDfp("0").divide(0), nan, DfpField.FLAG_DIV_ZERO, "DivideInt #3"); test(field.newDfp("1").divide(0), pinf, DfpField.FLAG_DIV_ZERO, "DivideInt #4"); test(field.newDfp("-1").divide(0), ninf, DfpField.FLAG_DIV_ZERO, "DivideInt #5"); test(field.newDfp("1").divide(3), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "DivideInt #6"); test(field.newDfp("1").divide(6), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #7"); test(field.newDfp("10").divide(6), field.newDfp("1.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #8"); test(field.newDfp("100").divide(6), field.newDfp("16.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #9"); test(field.newDfp("1000").divide(6), field.newDfp("166.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #10"); test(field.newDfp("10000").divide(6), field.newDfp("1666.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #20"); test(field.newDfp("1").divide(1), field.newDfp("1"), 0, "DivideInt #21"); test(field.newDfp("1e-131077").divide(10), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "DivideInt #22"); test(field.newDfp("0").divide(1), field.newDfp("0"), 0, "DivideInt #23"); test(field.newDfp("1").divide(10000), nan, DfpField.FLAG_INVALID, "DivideInt #24"); test(field.newDfp("1").divide(-1), nan, DfpField.FLAG_INVALID, "DivideInt #25"); } @Test public void testNextAfter() { test(field.newDfp("1").nextAfter(pinf), field.newDfp("1.0000000000000001"), 0, "NextAfter #1"); test(field.newDfp("1.0000000000000001").nextAfter(ninf), field.newDfp("1"), 0, "NextAfter #1.5"); test(field.newDfp("1").nextAfter(ninf), field.newDfp("0.99999999999999999999"), 0, "NextAfter #2"); test(field.newDfp("0.99999999999999999999").nextAfter(field.newDfp("2")), field.newDfp("1"), 0, "NextAfter #3"); test(field.newDfp("-1").nextAfter(ninf), field.newDfp("-1.0000000000000001"), 0, "NextAfter #4"); test(field.newDfp("-1").nextAfter(pinf), field.newDfp("-0.99999999999999999999"), 0, "NextAfter #5"); test(field.newDfp("-0.99999999999999999999").nextAfter(field.newDfp("-2")), field.newDfp("-1"), 0, "NextAfter #6"); test(field.newDfp("2").nextAfter(field.newDfp("2")), field.newDfp("2"), 0, "NextAfter #7"); test(field.newDfp("0").nextAfter(field.newDfp("0")), field.newDfp("0"), 0, "NextAfter #8"); test(field.newDfp("-2").nextAfter(field.newDfp("-2")), field.newDfp("-2"), 0, "NextAfter #9"); test(field.newDfp("0").nextAfter(field.newDfp("1")), field.newDfp("1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #10"); test(field.newDfp("0").nextAfter(field.newDfp("-1")), field.newDfp("-1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #11"); test(field.newDfp("-1e-131092").nextAfter(pinf), field.newDfp("-0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #12"); test(field.newDfp("1e-131092").nextAfter(ninf), field.newDfp("0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #13"); test(field.newDfp("9.9999999999999999999e131078").nextAfter(pinf), pinf, DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, "Next After #14"); } @Test public void testToString() { Assert.assertEquals("toString #1", "Infinity", pinf.toString()); Assert.assertEquals("toString #2", "-Infinity", ninf.toString()); Assert.assertEquals("toString #3", "NaN", nan.toString()); Assert.assertEquals("toString #4", "NaN", field.newDfp((byte) 1, Dfp.QNAN).toString()); Assert.assertEquals("toString #5", "NaN", field.newDfp((byte) 1, Dfp.SNAN).toString()); Assert.assertEquals("toString #6", "1.2300000000000000e100", field.newDfp("1.23e100").toString()); Assert.assertEquals("toString #7", "-1.2300000000000000e100", field.newDfp("-1.23e100").toString()); Assert.assertEquals("toString #8", "12345678.1234", field.newDfp("12345678.1234").toString()); Assert.assertEquals("toString #9", "0.00001234", field.newDfp("0.00001234").toString()); } @Test public void testRound() { field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN); // Round down test(field.newDfp("12345678901234567890").add(field.newDfp("0.9")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #1"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.99999999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #2"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.99999999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #3"); field.setRoundingMode(DfpField.RoundingMode.ROUND_UP); // Round up test(field.newDfp("12345678901234567890").add(field.newDfp("0.1")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #4"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #5"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.1")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #6"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #7"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP); // Round half up test(field.newDfp("12345678901234567890").add(field.newDfp("0.4999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #8"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #9"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.4999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #10"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #11"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN); // Round half down test(field.newDfp("12345678901234567890").add(field.newDfp("0.5001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #12"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #13"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #14"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #15"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD); // Round half odd test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #16"); test(field.newDfp("12345678901234567891").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #17"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #18"); test(field.newDfp("-12345678901234567891").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #19"); field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL); // Round ceil test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #20"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.9999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #21"); field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR); // Round floor test(field.newDfp("12345678901234567890").add(field.newDfp("0.9999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #22"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #23"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); // reset } @Test public void testCeil() { test(field.newDfp("1234.0000000000000001").ceil(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Ceil #1"); } @Test public void testFloor() { test(field.newDfp("1234.9999999999999999").floor(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Floor #1"); } @Test public void testRint() { test(field.newDfp("1234.50000000001").rint(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Rint #1"); test(field.newDfp("1234.5000").rint(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Rint #2"); test(field.newDfp("1235.5000").rint(), field.newDfp("1236"), DfpField.FLAG_INEXACT, "Rint #3"); } @Test public void testCopySign() { test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #1"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #2"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #3"); test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #4"); } @Test public void testIntValue() { Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); } @Test public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testCompare() { // test equal() comparison // check zero vs. zero field.clearIEEEFlags(); cmptst(field.newDfp("0"), field.newDfp("0"), "equal", true, 1);     // 0 == 0 cmptst(field.newDfp("0"), field.newDfp("-0"), "equal", true, 2);    // 0 == -0 cmptst(field.newDfp("-0"), field.newDfp("-0"), "equal", true, 3);    // -0 == -0 cmptst(field.newDfp("-0"), field.newDfp("0"), "equal", true, 4);    // -0 == 0 // check zero vs normal numbers cmptst(field.newDfp("0"), field.newDfp("1"), "equal", false, 5);     // 0 == 1 cmptst(field.newDfp("1"), field.newDfp("0"), "equal", false, 6);     // 1 == 0 cmptst(field.newDfp("-1"), field.newDfp("0"), "equal", false, 7);    // -1 == 0 cmptst(field.newDfp("0"), field.newDfp("-1"), "equal", false, 8);    // 0 == -1 cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "equal", false, 9); // 0 == 1e-131072 // check flags if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "equal", false, 10); // 0 == 1e-131078 // check flags -- underflow should be set if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); field.clearIEEEFlags(); cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "equal", false, 11); // 0 == 1e+131071 // check zero vs infinities cmptst(field.newDfp("0"), pinf, "equal", false, 12);  // 0 == pinf cmptst(field.newDfp("0"), ninf, "equal", false, 13);  // 0 == ninf cmptst(field.newDfp("-0"), pinf, "equal", false, 14);  // -0 == pinf cmptst(field.newDfp("-0"), ninf, "equal", false, 15);  // -0 == ninf cmptst(pinf, field.newDfp("0"), "equal", false, 16);  // pinf == 0 cmptst(ninf, field.newDfp("0"), "equal", false, 17);  // ninf == 0 cmptst(pinf, field.newDfp("-0"), "equal", false, 18);  // pinf == -0 cmptst(ninf, field.newDfp("-0"), "equal", false, 19);  // ninf == -0 cmptst(ninf, pinf, "equal", false, 19.10);   // ninf == pinf cmptst(pinf, ninf, "equal", false, 19.11);   // pinf == ninf cmptst(pinf, pinf, "equal", true, 19.12);   // pinf == pinf cmptst(ninf, ninf, "equal", true, 19.13);   // ninf == ninf // check some normal numbers cmptst(field.newDfp("1"), field.newDfp("1"), "equal", true, 20);  // 1 == 1 cmptst(field.newDfp("1"), field.newDfp("-1"), "equal", false, 21);  // 1 == -1 cmptst(field.newDfp("-1"), field.newDfp("-1"), "equal", true, 22);  // -1 == -1 cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "equal", false, 23);  // 1 == 1.0000000000000001 // The tests below checks to ensure that comparisons don't set FLAG_INEXACT // 100000 == 1.0000000000000001 cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "equal", false, 24); if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "equal", true, 25); // check some nans -- nans shouldnt equal anything cmptst(snan, snan, "equal", false, 27); cmptst(qnan, qnan, "equal", false, 28); cmptst(snan, qnan, "equal", false, 29); cmptst(qnan, snan, "equal", false, 30); cmptst(qnan, field.newDfp("0"), "equal", false, 31); cmptst(snan, field.newDfp("0"), "equal", false, 32); cmptst(field.newDfp("0"), snan, "equal", false, 33); cmptst(field.newDfp("0"), qnan, "equal", false, 34); cmptst(qnan, pinf, "equal", false, 35); cmptst(snan, pinf, "equal", false, 36); cmptst(pinf, snan, "equal", false, 37); cmptst(pinf, qnan, "equal", false, 38); cmptst(qnan, ninf, "equal", false, 39); cmptst(snan, ninf, "equal", false, 40); cmptst(ninf, snan, "equal", false, 41); cmptst(ninf, qnan, "equal", false, 42); cmptst(qnan, field.newDfp("-1"), "equal", false, 43); cmptst(snan, field.newDfp("-1"), "equal", false, 44); cmptst(field.newDfp("-1"), snan, "equal", false, 45); cmptst(field.newDfp("-1"), qnan, "equal", false, 46); cmptst(qnan, field.newDfp("1"), "equal", false, 47); cmptst(snan, field.newDfp("1"), "equal", false, 48); cmptst(field.newDfp("1"), snan, "equal", false, 49); cmptst(field.newDfp("1"), qnan, "equal", false, 50); cmptst(snan.negate(), snan, "equal", false, 51); cmptst(qnan.negate(), qnan, "equal", false, 52); // // Tests for un equal -- do it all over again // cmptst(field.newDfp("0"), field.newDfp("0"), "unequal", false, 1);     // 0 == 0 cmptst(field.newDfp("0"), field.newDfp("-0"), "unequal", false, 2);    // 0 == -0 cmptst(field.newDfp("-0"), field.newDfp("-0"), "unequal", false, 3);    // -0 == -0 cmptst(field.newDfp("-0"), field.newDfp("0"), "unequal", false, 4);    // -0 == 0 // check zero vs normal numbers cmptst(field.newDfp("0"), field.newDfp("1"), "unequal", true, 5);     // 0 == 1 cmptst(field.newDfp("1"), field.newDfp("0"), "unequal", true, 6);     // 1 == 0 cmptst(field.newDfp("-1"), field.newDfp("0"), "unequal", true, 7);    // -1 == 0 cmptst(field.newDfp("0"), field.newDfp("-1"), "unequal", true, 8);    // 0 == -1 cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "unequal", true, 9); // 0 == 1e-131072 // check flags if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "unequal", true, 10); // 0 == 1e-131078 // check flags -- underflow should be set if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); field.clearIEEEFlags(); cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "unequal", true, 11); // 0 == 1e+131071 // check zero vs infinities cmptst(field.newDfp("0"), pinf, "unequal", true, 12);  // 0 == pinf cmptst(field.newDfp("0"), ninf, "unequal", true, 13);  // 0 == ninf cmptst(field.newDfp("-0"), pinf, "unequal", true, 14);  // -0 == pinf cmptst(field.newDfp("-0"), ninf, "unequal", true, 15);  // -0 == ninf cmptst(pinf, field.newDfp("0"), "unequal", true, 16);  // pinf == 0 cmptst(ninf, field.newDfp("0"), "unequal", true, 17);  // ninf == 0 cmptst(pinf, field.newDfp("-0"), "unequal", true, 18);  // pinf == -0 cmptst(ninf, field.newDfp("-0"), "unequal", true, 19);  // ninf == -0 cmptst(ninf, pinf, "unequal", true, 19.10);   // ninf == pinf cmptst(pinf, ninf, "unequal", true, 19.11);   // pinf == ninf cmptst(pinf, pinf, "unequal", false, 19.12);   // pinf == pinf cmptst(ninf, ninf, "unequal", false, 19.13);   // ninf == ninf // check some normal numbers cmptst(field.newDfp("1"), field.newDfp("1"), "unequal", false, 20);  // 1 == 1 cmptst(field.newDfp("1"), field.newDfp("-1"), "unequal", true, 21);  // 1 == -1 cmptst(field.newDfp("-1"), field.newDfp("-1"), "unequal", false, 22);  // -1 == -1 cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "unequal", true, 23);  // 1 == 1.0000000000000001 // The tests below checks to ensure that comparisons don't set FLAG_INEXACT // 100000 == 1.0000000000000001 cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "unequal", true, 24); if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "unequal", false, 25); // check some nans -- nans shouldnt be unequal to anything cmptst(snan, snan, "unequal", false, 27); cmptst(qnan, qnan, "unequal", false, 28); cmptst(snan, qnan, "unequal", false, 29); cmptst(qnan, snan, "unequal", false, 30); cmptst(qnan, field.newDfp("0"), "unequal", false, 31); cmptst(snan, field.newDfp("0"), "unequal", false, 32); cmptst(field.newDfp("0"), snan, "unequal", false, 33); cmptst(field.newDfp("0"), qnan, "unequal", false, 34); cmptst(qnan, pinf, "unequal", false, 35); cmptst(snan, pinf, "unequal", false, 36); cmptst(pinf, snan, "unequal", false, 37); cmptst(pinf, qnan, "unequal", false, 38); cmptst(qnan, ninf, "unequal", false, 39); cmptst(snan, ninf, "unequal", false, 40); cmptst(ninf, snan, "unequal", false, 41); cmptst(ninf, qnan, "unequal", false, 42); cmptst(qnan, field.newDfp("-1"), "unequal", false, 43); cmptst(snan, field.newDfp("-1"), "unequal", false, 44); cmptst(field.newDfp("-1"), snan, "unequal", false, 45); cmptst(field.newDfp("-1"), qnan, "unequal", false, 46); cmptst(qnan, field.newDfp("1"), "unequal", false, 47); cmptst(snan, field.newDfp("1"), "unequal", false, 48); cmptst(field.newDfp("1"), snan, "unequal", false, 49); cmptst(field.newDfp("1"), qnan, "unequal", false, 50); cmptst(snan.negate(), snan, "unequal", false, 51); cmptst(qnan.negate(), qnan, "unequal", false, 52); if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare unequal flags = "+field.getIEEEFlags()); // // Tests for lessThan -- do it all over again // cmptst(field.newDfp("0"), field.newDfp("0"), "lessThan", false, 1);     // 0 < 0 cmptst(field.newDfp("0"), field.newDfp("-0"), "lessThan", false, 2);    // 0 < -0 cmptst(field.newDfp("-0"), field.newDfp("-0"), "lessThan", false, 3);    // -0 < -0 cmptst(field.newDfp("-0"), field.newDfp("0"), "lessThan", false, 4);    // -0 < 0 // check zero vs normal numbers cmptst(field.newDfp("0"), field.newDfp("1"), "lessThan", true, 5);     // 0 < 1 cmptst(field.newDfp("1"), field.newDfp("0"), "lessThan", false, 6);     // 1 < 0 cmptst(field.newDfp("-1"), field.newDfp("0"), "lessThan", true, 7);    // -1 < 0 cmptst(field.newDfp("0"), field.newDfp("-1"), "lessThan", false, 8);    // 0 < -1 cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "lessThan", true, 9); // 0 < 1e-131072 // check flags if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "lessThan", true, 10); // 0 < 1e-131078 // check flags -- underflow should be set if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); field.clearIEEEFlags(); cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "lessThan", true, 11); // 0 < 1e+131071 // check zero vs infinities cmptst(field.newDfp("0"), pinf, "lessThan", true, 12);  // 0 < pinf cmptst(field.newDfp("0"), ninf, "lessThan", false, 13);  // 0 < ninf cmptst(field.newDfp("-0"), pinf, "lessThan", true, 14);  // -0 < pinf cmptst(field.newDfp("-0"), ninf, "lessThan", false, 15);  // -0 < ninf cmptst(pinf, field.newDfp("0"), "lessThan", false, 16);  // pinf < 0 cmptst(ninf, field.newDfp("0"), "lessThan", true, 17);  // ninf < 0 cmptst(pinf, field.newDfp("-0"), "lessThan", false, 18);  // pinf < -0 cmptst(ninf, field.newDfp("-0"), "lessThan", true, 19);  // ninf < -0 cmptst(ninf, pinf, "lessThan", true, 19.10);   // ninf < pinf cmptst(pinf, ninf, "lessThan", false, 19.11);   // pinf < ninf cmptst(pinf, pinf, "lessThan", false, 19.12);   // pinf < pinf cmptst(ninf, ninf, "lessThan", false, 19.13);   // ninf < ninf // check some normal numbers cmptst(field.newDfp("1"), field.newDfp("1"), "lessThan", false, 20);  // 1 < 1 cmptst(field.newDfp("1"), field.newDfp("-1"), "lessThan", false, 21);  // 1 < -1 cmptst(field.newDfp("-1"), field.newDfp("-1"), "lessThan", false, 22);  // -1 < -1 cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "lessThan", true, 23);  // 1 < 1.0000000000000001 // The tests below checks to ensure that comparisons don't set FLAG_INEXACT // 100000 < 1.0000000000000001 cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "lessThan", false, 24); if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "lessThan", false, 25); // check some nans -- nans shouldnt be lessThan to anything cmptst(snan, snan, "lessThan", false, 27); cmptst(qnan, qnan, "lessThan", false, 28); cmptst(snan, qnan, "lessThan", false, 29); cmptst(qnan, snan, "lessThan", false, 30); cmptst(qnan, field.newDfp("0"), "lessThan", false, 31); cmptst(snan, field.newDfp("0"), "lessThan", false, 32); cmptst(field.newDfp("0"), snan, "lessThan", false, 33); cmptst(field.newDfp("0"), qnan, "lessThan", false, 34); cmptst(qnan, pinf, "lessThan", false, 35); cmptst(snan, pinf, "lessThan", false, 36); cmptst(pinf, snan, "lessThan", false, 37); cmptst(pinf, qnan, "lessThan", false, 38); cmptst(qnan, ninf, "lessThan", false, 39); cmptst(snan, ninf, "lessThan", false, 40); cmptst(ninf, snan, "lessThan", false, 41); cmptst(ninf, qnan, "lessThan", false, 42); cmptst(qnan, field.newDfp("-1"), "lessThan", false, 43); cmptst(snan, field.newDfp("-1"), "lessThan", false, 44); cmptst(field.newDfp("-1"), snan, "lessThan", false, 45); cmptst(field.newDfp("-1"), qnan, "lessThan", false, 46); cmptst(qnan, field.newDfp("1"), "lessThan", false, 47); cmptst(snan, field.newDfp("1"), "lessThan", false, 48); cmptst(field.newDfp("1"), snan, "lessThan", false, 49); cmptst(field.newDfp("1"), qnan, "lessThan", false, 50); cmptst(snan.negate(), snan, "lessThan", false, 51); cmptst(qnan.negate(), qnan, "lessThan", false, 52); //lessThan compares with nans should raise FLAG_INVALID if (field.getIEEEFlags() != DfpField.FLAG_INVALID) Assert.fail("assersion failed. compare lessThan flags = "+field.getIEEEFlags()); field.clearIEEEFlags(); // // Tests for greaterThan -- do it all over again // cmptst(field.newDfp("0"), field.newDfp("0"), "greaterThan", false, 1);     // 0 > 0 cmptst(field.newDfp("0"), field.newDfp("-0"), "greaterThan", false, 2);    // 0 > -0 cmptst(field.newDfp("-0"), field.newDfp("-0"), "greaterThan", false, 3);    // -0 > -0 cmptst(field.newDfp("-0"), field.newDfp("0"), "greaterThan", false, 4);    // -0 > 0 // check zero vs normal numbers cmptst(field.newDfp("0"), field.newDfp("1"), "greaterThan", false, 5);     // 0 > 1 cmptst(field.newDfp("1"), field.newDfp("0"), "greaterThan", true, 6);     // 1 > 0 cmptst(field.newDfp("-1"), field.newDfp("0"), "greaterThan", false, 7);    // -1 > 0 cmptst(field.newDfp("0"), field.newDfp("-1"), "greaterThan", true, 8);    // 0 > -1 cmptst(field.newDfp("0"), field.newDfp("1e-131072"), "greaterThan", false, 9); // 0 > 1e-131072 // check flags if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0"), field.newDfp("1e-131078"), "greaterThan", false, 10); // 0 > 1e-131078 // check flags -- underflow should be set if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); field.clearIEEEFlags(); cmptst(field.newDfp("0"), field.newDfp("1e+131071"), "greaterThan", false, 11); // 0 > 1e+131071 // check zero vs infinities cmptst(field.newDfp("0"), pinf, "greaterThan", false, 12);  // 0 > pinf cmptst(field.newDfp("0"), ninf, "greaterThan", true, 13);  // 0 > ninf cmptst(field.newDfp("-0"), pinf, "greaterThan", false, 14);  // -0 > pinf cmptst(field.newDfp("-0"), ninf, "greaterThan", true, 15);  // -0 > ninf cmptst(pinf, field.newDfp("0"), "greaterThan", true, 16);  // pinf > 0 cmptst(ninf, field.newDfp("0"), "greaterThan", false, 17);  // ninf > 0 cmptst(pinf, field.newDfp("-0"), "greaterThan", true, 18);  // pinf > -0 cmptst(ninf, field.newDfp("-0"), "greaterThan", false, 19);  // ninf > -0 cmptst(ninf, pinf, "greaterThan", false, 19.10);   // ninf > pinf cmptst(pinf, ninf, "greaterThan", true, 19.11);   // pinf > ninf cmptst(pinf, pinf, "greaterThan", false, 19.12);   // pinf > pinf cmptst(ninf, ninf, "greaterThan", false, 19.13);   // ninf > ninf // check some normal numbers cmptst(field.newDfp("1"), field.newDfp("1"), "greaterThan", false, 20);  // 1 > 1 cmptst(field.newDfp("1"), field.newDfp("-1"), "greaterThan", true, 21);  // 1 > -1 cmptst(field.newDfp("-1"), field.newDfp("-1"), "greaterThan", false, 22);  // -1 > -1 cmptst(field.newDfp("1"), field.newDfp("1.0000000000000001"), "greaterThan", false, 23);  // 1 > 1.0000000000000001 // The tests below checks to ensure that comparisons don't set FLAG_INEXACT // 100000 > 1.0000000000000001 cmptst(field.newDfp("1e20"), field.newDfp("1.0000000000000001"), "greaterThan", true, 24); if (field.getIEEEFlags() != 0) Assert.fail("assersion failed. compare flags = "+field.getIEEEFlags()); cmptst(field.newDfp("0.000001"), field.newDfp("1e-6"), "greaterThan", false, 25); // check some nans -- nans shouldnt be greaterThan to anything cmptst(snan, snan, "greaterThan", false, 27); cmptst(qnan, qnan, "greaterThan", false, 28); cmptst(snan, qnan, "greaterThan", false, 29); cmptst(qnan, snan, "greaterThan", false, 30); cmptst(qnan, field.newDfp("0"), "greaterThan", false, 31); cmptst(snan, field.newDfp("0"), "greaterThan", false, 32); cmptst(field.newDfp("0"), snan, "greaterThan", false, 33); cmptst(field.newDfp("0"), qnan, "greaterThan", false, 34); cmptst(qnan, pinf, "greaterThan", false, 35); cmptst(snan, pinf, "greaterThan", false, 36); cmptst(pinf, snan, "greaterThan", false, 37); cmptst(pinf, qnan, "greaterThan", false, 38); cmptst(qnan, ninf, "greaterThan", false, 39); cmptst(snan, ninf, "greaterThan", false, 40); cmptst(ninf, snan, "greaterThan", false, 41); cmptst(ninf, qnan, "greaterThan", false, 42); cmptst(qnan, field.newDfp("-1"), "greaterThan", false, 43); cmptst(snan, field.newDfp("-1"), "greaterThan", false, 44); cmptst(field.newDfp("-1"), snan, "greaterThan", false, 45); cmptst(field.newDfp("-1"), qnan, "greaterThan", false, 46); cmptst(qnan, field.newDfp("1"), "greaterThan", false, 47); cmptst(snan, field.newDfp("1"), "greaterThan", false, 48); cmptst(field.newDfp("1"), snan, "greaterThan", false, 49); cmptst(field.newDfp("1"), qnan, "greaterThan", false, 50); cmptst(snan.negate(), snan, "greaterThan", false, 51); cmptst(qnan.negate(), qnan, "greaterThan", false, 52); //greaterThan compares with nans should raise FLAG_INVALID if (field.getIEEEFlags() != DfpField.FLAG_INVALID) Assert.fail("assersion failed. compare greaterThan flags = "+field.getIEEEFlags()); field.clearIEEEFlags(); } // // Test multiplication // @Test public void testMultiply() { test(field.newDfp("1").multiply(field.newDfp("1")),   // Basic tests  1*1 = 1 field.newDfp("1"), 0, "Multiply #1"); test(field.newDfp("1").multiply(1),       // Basic tests  1*1 = 1 field.newDfp("1"), 0, "Multiply #2"); test(field.newDfp("-1").multiply(field.newDfp("1")),   // Basic tests  -1*1 = -1 field.newDfp("-1"), 0, "Multiply #3"); test(field.newDfp("-1").multiply(1),      // Basic tests  -1*1 = -1 field.newDfp("-1"), 0, "Multiply #4"); // basic tests with integers test(field.newDfp("2").multiply(field.newDfp("3")), field.newDfp("6"), 0, "Multiply #5"); test(field.newDfp("2").multiply(3), field.newDfp("6"), 0, "Multiply #6"); test(field.newDfp("-2").multiply(field.newDfp("3")), field.newDfp("-6"), 0, "Multiply #7"); test(field.newDfp("-2").multiply(3), field.newDfp("-6"), 0, "Multiply #8"); test(field.newDfp("2").multiply(field.newDfp("-3")), field.newDfp("-6"), 0, "Multiply #9"); test(field.newDfp("-2").multiply(field.newDfp("-3")), field.newDfp("6"), 0, "Multiply #10"); //multiply by zero test(field.newDfp("-2").multiply(field.newDfp("0")), field.newDfp("-0"), 0, "Multiply #11"); test(field.newDfp("-2").multiply(0), field.newDfp("-0"), 0, "Multiply #12"); test(field.newDfp("2").multiply(field.newDfp("0")), field.newDfp("0"), 0, "Multiply #13"); test(field.newDfp("2").multiply(0), field.newDfp("0"), 0, "Multiply #14"); test(field.newDfp("2").multiply(pinf), pinf, 0, "Multiply #15"); test(field.newDfp("2").multiply(ninf), ninf, 0, "Multiply #16"); test(field.newDfp("-2").multiply(pinf), ninf, 0, "Multiply #17"); test(field.newDfp("-2").multiply(ninf), pinf, 0, "Multiply #18"); test(ninf.multiply(field.newDfp("-2")), pinf, 0, "Multiply #18.1"); test(field.newDfp("5e131071").multiply(2), pinf, DfpField.FLAG_OVERFLOW, "Multiply #19"); test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")), field.newDfp("9.9999999999999950000e131071"), 0, "Multiply #20"); test(field.newDfp("-5e131071").multiply(2), ninf, DfpField.FLAG_OVERFLOW, "Multiply #22"); test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")), field.newDfp("-9.9999999999999950000e131071"), 0, "Multiply #23"); test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "Multiply #24"); test(field.newDfp("1").multiply(nan), nan, 0, "Multiply #25"); test(nan.multiply(field.newDfp("1")), nan, 0, "Multiply #26"); test(nan.multiply(pinf), nan, 0, "Multiply #27"); test(pinf.multiply(nan), nan, 0, "Multiply #27"); test(pinf.multiply(field.newDfp("0")), nan, DfpField.FLAG_INVALID, "Multiply #28"); test(field.newDfp("0").multiply(pinf), nan, DfpField.FLAG_INVALID, "Multiply #29"); test(pinf.multiply(pinf), pinf, 0, "Multiply #30"); test(ninf.multiply(pinf), ninf, 0, "Multiply #31"); test(pinf.multiply(ninf), ninf, 0, "Multiply #32"); test(ninf.multiply(ninf), pinf, 0, "Multiply #33"); test(pinf.multiply(1), pinf, 0, "Multiply #34"); test(pinf.multiply(0), nan, DfpField.FLAG_INVALID, "Multiply #35"); test(nan.multiply(1), nan, 0, "Multiply #36"); test(field.newDfp("1").multiply(10000), field.newDfp("10000"), 0, "Multiply #37"); test(field.newDfp("2").multiply(1000000), field.newDfp("2000000"), 0, "Multiply #38"); test(field.newDfp("1").multiply(-1), field.newDfp("-1"), 0, "Multiply #39"); } @Test public void testDivide() { test(field.newDfp("1").divide(nan),   // divide by NaN = NaN nan, 0, "Divide #1"); test(nan.divide(field.newDfp("1")),   // NaN / number = NaN nan, 0, "Divide #2"); test(pinf.divide(field.newDfp("1")), pinf, 0, "Divide #3"); test(pinf.divide(field.newDfp("-1")), ninf, 0, "Divide #4"); test(pinf.divide(pinf), nan, DfpField.FLAG_INVALID, "Divide #5"); test(ninf.divide(pinf), nan, DfpField.FLAG_INVALID, "Divide #6"); test(pinf.divide(ninf), nan, DfpField.FLAG_INVALID, "Divide #7"); test(ninf.divide(ninf), nan, DfpField.FLAG_INVALID, "Divide #8"); test(field.newDfp("0").divide(field.newDfp("0")), nan, DfpField.FLAG_DIV_ZERO, "Divide #9"); test(field.newDfp("1").divide(field.newDfp("0")), pinf, DfpField.FLAG_DIV_ZERO, "Divide #10"); test(field.newDfp("1").divide(field.newDfp("-0")), ninf, DfpField.FLAG_DIV_ZERO, "Divide #11"); test(field.newDfp("-1").divide(field.newDfp("0")), ninf, DfpField.FLAG_DIV_ZERO, "Divide #12"); test(field.newDfp("-1").divide(field.newDfp("-0")), pinf, DfpField.FLAG_DIV_ZERO, "Divide #13"); test(field.newDfp("1").divide(field.newDfp("3")), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "Divide #14"); test(field.newDfp("1").divide(field.newDfp("6")), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "Divide #15"); test(field.newDfp("10").divide(field.newDfp("6")), field.newDfp("1.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #16"); test(field.newDfp("100").divide(field.newDfp("6")), field.newDfp("16.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #17"); test(field.newDfp("1000").divide(field.newDfp("6")), field.newDfp("166.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #18"); test(field.newDfp("10000").divide(field.newDfp("6")), field.newDfp("1666.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #19"); test(field.newDfp("1").divide(field.newDfp("1")), field.newDfp("1"), 0, "Divide #20"); test(field.newDfp("1").divide(field.newDfp("-1")), field.newDfp("-1"), 0, "Divide #21"); test(field.newDfp("-1").divide(field.newDfp("1")), field.newDfp("-1"), 0, "Divide #22"); test(field.newDfp("-1").divide(field.newDfp("-1")), field.newDfp("1"), 0, "Divide #23"); test(field.newDfp("1e-65539").divide(field.newDfp("1e65539")), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "Divide #24"); test(field.newDfp("1e65539").divide(field.newDfp("1e-65539")), pinf, DfpField.FLAG_OVERFLOW, "Divide #24"); test(field.newDfp("2").divide(field.newDfp("1.5")),   // test trial-divisor too high field.newDfp("1.3333333333333333"), DfpField.FLAG_INEXACT, "Divide #25"); test(field.newDfp("2").divide(pinf), field.newDfp("0"), 0, "Divide #26"); test(field.newDfp("2").divide(ninf), field.newDfp("-0"), 0, "Divide #27"); test(field.newDfp("0").divide(field.newDfp("1")), field.newDfp("0"), 0, "Divide #28"); } @Test public void testReciprocal() { test(nan.reciprocal(), nan, 0, "Reciprocal #1"); test(field.newDfp("0").reciprocal(), pinf, DfpField.FLAG_DIV_ZERO, "Reciprocal #2"); test(field.newDfp("-0").reciprocal(), ninf, DfpField.FLAG_DIV_ZERO, "Reciprocal #3"); test(field.newDfp("3").reciprocal(), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "Reciprocal #4"); test(field.newDfp("6").reciprocal(), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "Reciprocal #5"); test(field.newDfp("1").reciprocal(), field.newDfp("1"), 0, "Reciprocal #6"); test(field.newDfp("-1").reciprocal(), field.newDfp("-1"), 0, "Reciprocal #7"); test(pinf.reciprocal(), field.newDfp("0"), 0, "Reciprocal #8"); test(ninf.reciprocal(), field.newDfp("-0"), 0, "Reciprocal #9"); } @Test public void testDivideInt() { test(nan.divide(1),   // NaN / number = NaN nan, 0, "DivideInt #1"); test(pinf.divide(1), pinf, 0, "DivideInt #2"); test(field.newDfp("0").divide(0), nan, DfpField.FLAG_DIV_ZERO, "DivideInt #3"); test(field.newDfp("1").divide(0), pinf, DfpField.FLAG_DIV_ZERO, "DivideInt #4"); test(field.newDfp("-1").divide(0), ninf, DfpField.FLAG_DIV_ZERO, "DivideInt #5"); test(field.newDfp("1").divide(3), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "DivideInt #6"); test(field.newDfp("1").divide(6), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #7"); test(field.newDfp("10").divide(6), field.newDfp("1.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #8"); test(field.newDfp("100").divide(6), field.newDfp("16.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #9"); test(field.newDfp("1000").divide(6), field.newDfp("166.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #10"); test(field.newDfp("10000").divide(6), field.newDfp("1666.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #20"); test(field.newDfp("1").divide(1), field.newDfp("1"), 0, "DivideInt #21"); test(field.newDfp("1e-131077").divide(10), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "DivideInt #22"); test(field.newDfp("0").divide(1), field.newDfp("0"), 0, "DivideInt #23"); test(field.newDfp("1").divide(10000), nan, DfpField.FLAG_INVALID, "DivideInt #24"); test(field.newDfp("1").divide(-1), nan, DfpField.FLAG_INVALID, "DivideInt #25"); } @Test public void testNextAfter() { test(field.newDfp("1").nextAfter(pinf), field.newDfp("1.0000000000000001"), 0, "NextAfter #1"); test(field.newDfp("1.0000000000000001").nextAfter(ninf), field.newDfp("1"), 0, "NextAfter #1.5"); test(field.newDfp("1").nextAfter(ninf), field.newDfp("0.99999999999999999999"), 0, "NextAfter #2"); test(field.newDfp("0.99999999999999999999").nextAfter(field.newDfp("2")), field.newDfp("1"), 0, "NextAfter #3"); test(field.newDfp("-1").nextAfter(ninf), field.newDfp("-1.0000000000000001"), 0, "NextAfter #4"); test(field.newDfp("-1").nextAfter(pinf), field.newDfp("-0.99999999999999999999"), 0, "NextAfter #5"); test(field.newDfp("-0.99999999999999999999").nextAfter(field.newDfp("-2")), field.newDfp("-1"), 0, "NextAfter #6"); test(field.newDfp("2").nextAfter(field.newDfp("2")), field.newDfp("2"), 0, "NextAfter #7"); test(field.newDfp("0").nextAfter(field.newDfp("0")), field.newDfp("0"), 0, "NextAfter #8"); test(field.newDfp("-2").nextAfter(field.newDfp("-2")), field.newDfp("-2"), 0, "NextAfter #9"); test(field.newDfp("0").nextAfter(field.newDfp("1")), field.newDfp("1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #10"); test(field.newDfp("0").nextAfter(field.newDfp("-1")), field.newDfp("-1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #11"); test(field.newDfp("-1e-131092").nextAfter(pinf), field.newDfp("-0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #12"); test(field.newDfp("1e-131092").nextAfter(ninf), field.newDfp("0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #13"); test(field.newDfp("9.9999999999999999999e131078").nextAfter(pinf), pinf, DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, "Next After #14"); } @Test public void testToString() { Assert.assertEquals("toString #1", "Infinity", pinf.toString()); Assert.assertEquals("toString #2", "-Infinity", ninf.toString()); Assert.assertEquals("toString #3", "NaN", nan.toString()); Assert.assertEquals("toString #4", "NaN", field.newDfp((byte) 1, Dfp.QNAN).toString()); Assert.assertEquals("toString #5", "NaN", field.newDfp((byte) 1, Dfp.SNAN).toString()); Assert.assertEquals("toString #6", "1.2300000000000000e100", field.newDfp("1.23e100").toString()); Assert.assertEquals("toString #7", "-1.2300000000000000e100", field.newDfp("-1.23e100").toString()); Assert.assertEquals("toString #8", "12345678.1234", field.newDfp("12345678.1234").toString()); Assert.assertEquals("toString #9", "0.00001234", field.newDfp("0.00001234").toString()); } @Test public void testRound() { field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN); // Round down test(field.newDfp("12345678901234567890").add(field.newDfp("0.9")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #1"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.99999999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #2"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.99999999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #3"); field.setRoundingMode(DfpField.RoundingMode.ROUND_UP); // Round up test(field.newDfp("12345678901234567890").add(field.newDfp("0.1")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #4"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #5"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.1")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #6"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #7"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP); // Round half up test(field.newDfp("12345678901234567890").add(field.newDfp("0.4999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #8"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #9"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.4999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #10"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #11"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN); // Round half down test(field.newDfp("12345678901234567890").add(field.newDfp("0.5001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #12"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #13"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #14"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #15"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD); // Round half odd test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #16"); test(field.newDfp("12345678901234567891").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #17"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #18"); test(field.newDfp("-12345678901234567891").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #19"); field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL); // Round ceil test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #20"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.9999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #21"); field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR); // Round floor test(field.newDfp("12345678901234567890").add(field.newDfp("0.9999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #22"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #23"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); // reset } @Test public void testCeil() { test(field.newDfp("1234.0000000000000001").ceil(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Ceil #1"); } @Test public void testFloor() { test(field.newDfp("1234.9999999999999999").floor(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Floor #1"); } @Test public void testRint() { test(field.newDfp("1234.50000000001").rint(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Rint #1"); test(field.newDfp("1234.5000").rint(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Rint #2"); test(field.newDfp("1235.5000").rint(), field.newDfp("1236"), DfpField.FLAG_INEXACT, "Rint #3"); } @Test public void testCopySign() { test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #1"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #2"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #3"); test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #4"); } @Test public void testIntValue() { Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); } @Test public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testMultiply() { test(field.newDfp("1").multiply(field.newDfp("1")),   // Basic tests  1*1 = 1 field.newDfp("1"), 0, "Multiply #1"); test(field.newDfp("1").multiply(1),       // Basic tests  1*1 = 1 field.newDfp("1"), 0, "Multiply #2"); test(field.newDfp("-1").multiply(field.newDfp("1")),   // Basic tests  -1*1 = -1 field.newDfp("-1"), 0, "Multiply #3"); test(field.newDfp("-1").multiply(1),      // Basic tests  -1*1 = -1 field.newDfp("-1"), 0, "Multiply #4"); // basic tests with integers test(field.newDfp("2").multiply(field.newDfp("3")), field.newDfp("6"), 0, "Multiply #5"); test(field.newDfp("2").multiply(3), field.newDfp("6"), 0, "Multiply #6"); test(field.newDfp("-2").multiply(field.newDfp("3")), field.newDfp("-6"), 0, "Multiply #7"); test(field.newDfp("-2").multiply(3), field.newDfp("-6"), 0, "Multiply #8"); test(field.newDfp("2").multiply(field.newDfp("-3")), field.newDfp("-6"), 0, "Multiply #9"); test(field.newDfp("-2").multiply(field.newDfp("-3")), field.newDfp("6"), 0, "Multiply #10"); //multiply by zero test(field.newDfp("-2").multiply(field.newDfp("0")), field.newDfp("-0"), 0, "Multiply #11"); test(field.newDfp("-2").multiply(0), field.newDfp("-0"), 0, "Multiply #12"); test(field.newDfp("2").multiply(field.newDfp("0")), field.newDfp("0"), 0, "Multiply #13"); test(field.newDfp("2").multiply(0), field.newDfp("0"), 0, "Multiply #14"); test(field.newDfp("2").multiply(pinf), pinf, 0, "Multiply #15"); test(field.newDfp("2").multiply(ninf), ninf, 0, "Multiply #16"); test(field.newDfp("-2").multiply(pinf), ninf, 0, "Multiply #17"); test(field.newDfp("-2").multiply(ninf), pinf, 0, "Multiply #18"); test(ninf.multiply(field.newDfp("-2")), pinf, 0, "Multiply #18.1"); test(field.newDfp("5e131071").multiply(2), pinf, DfpField.FLAG_OVERFLOW, "Multiply #19"); test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")), field.newDfp("9.9999999999999950000e131071"), 0, "Multiply #20"); test(field.newDfp("-5e131071").multiply(2), ninf, DfpField.FLAG_OVERFLOW, "Multiply #22"); test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")), field.newDfp("-9.9999999999999950000e131071"), 0, "Multiply #23"); test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "Multiply #24"); test(field.newDfp("1").multiply(nan), nan, 0, "Multiply #25"); test(nan.multiply(field.newDfp("1")), nan, 0, "Multiply #26"); test(nan.multiply(pinf), nan, 0, "Multiply #27"); test(pinf.multiply(nan), nan, 0, "Multiply #27"); test(pinf.multiply(field.newDfp("0")), nan, DfpField.FLAG_INVALID, "Multiply #28"); test(field.newDfp("0").multiply(pinf), nan, DfpField.FLAG_INVALID, "Multiply #29"); test(pinf.multiply(pinf), pinf, 0, "Multiply #30"); test(ninf.multiply(pinf), ninf, 0, "Multiply #31"); test(pinf.multiply(ninf), ninf, 0, "Multiply #32"); test(ninf.multiply(ninf), pinf, 0, "Multiply #33"); test(pinf.multiply(1), pinf, 0, "Multiply #34"); test(pinf.multiply(0), nan, DfpField.FLAG_INVALID, "Multiply #35"); test(nan.multiply(1), nan, 0, "Multiply #36"); test(field.newDfp("1").multiply(10000), field.newDfp("10000"), 0, "Multiply #37"); test(field.newDfp("2").multiply(1000000), field.newDfp("2000000"), 0, "Multiply #38"); test(field.newDfp("1").multiply(-1), field.newDfp("-1"), 0, "Multiply #39"); } @Test public void testDivide() { test(field.newDfp("1").divide(nan),   // divide by NaN = NaN nan, 0, "Divide #1"); test(nan.divide(field.newDfp("1")),   // NaN / number = NaN nan, 0, "Divide #2"); test(pinf.divide(field.newDfp("1")), pinf, 0, "Divide #3"); test(pinf.divide(field.newDfp("-1")), ninf, 0, "Divide #4"); test(pinf.divide(pinf), nan, DfpField.FLAG_INVALID, "Divide #5"); test(ninf.divide(pinf), nan, DfpField.FLAG_INVALID, "Divide #6"); test(pinf.divide(ninf), nan, DfpField.FLAG_INVALID, "Divide #7"); test(ninf.divide(ninf), nan, DfpField.FLAG_INVALID, "Divide #8"); test(field.newDfp("0").divide(field.newDfp("0")), nan, DfpField.FLAG_DIV_ZERO, "Divide #9"); test(field.newDfp("1").divide(field.newDfp("0")), pinf, DfpField.FLAG_DIV_ZERO, "Divide #10"); test(field.newDfp("1").divide(field.newDfp("-0")), ninf, DfpField.FLAG_DIV_ZERO, "Divide #11"); test(field.newDfp("-1").divide(field.newDfp("0")), ninf, DfpField.FLAG_DIV_ZERO, "Divide #12"); test(field.newDfp("-1").divide(field.newDfp("-0")), pinf, DfpField.FLAG_DIV_ZERO, "Divide #13"); test(field.newDfp("1").divide(field.newDfp("3")), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "Divide #14"); test(field.newDfp("1").divide(field.newDfp("6")), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "Divide #15"); test(field.newDfp("10").divide(field.newDfp("6")), field.newDfp("1.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #16"); test(field.newDfp("100").divide(field.newDfp("6")), field.newDfp("16.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #17"); test(field.newDfp("1000").divide(field.newDfp("6")), field.newDfp("166.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #18"); test(field.newDfp("10000").divide(field.newDfp("6")), field.newDfp("1666.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #19"); test(field.newDfp("1").divide(field.newDfp("1")), field.newDfp("1"), 0, "Divide #20"); test(field.newDfp("1").divide(field.newDfp("-1")), field.newDfp("-1"), 0, "Divide #21"); test(field.newDfp("-1").divide(field.newDfp("1")), field.newDfp("-1"), 0, "Divide #22"); test(field.newDfp("-1").divide(field.newDfp("-1")), field.newDfp("1"), 0, "Divide #23"); test(field.newDfp("1e-65539").divide(field.newDfp("1e65539")), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "Divide #24"); test(field.newDfp("1e65539").divide(field.newDfp("1e-65539")), pinf, DfpField.FLAG_OVERFLOW, "Divide #24"); test(field.newDfp("2").divide(field.newDfp("1.5")),   // test trial-divisor too high field.newDfp("1.3333333333333333"), DfpField.FLAG_INEXACT, "Divide #25"); test(field.newDfp("2").divide(pinf), field.newDfp("0"), 0, "Divide #26"); test(field.newDfp("2").divide(ninf), field.newDfp("-0"), 0, "Divide #27"); test(field.newDfp("0").divide(field.newDfp("1")), field.newDfp("0"), 0, "Divide #28"); } @Test public void testReciprocal() { test(nan.reciprocal(), nan, 0, "Reciprocal #1"); test(field.newDfp("0").reciprocal(), pinf, DfpField.FLAG_DIV_ZERO, "Reciprocal #2"); test(field.newDfp("-0").reciprocal(), ninf, DfpField.FLAG_DIV_ZERO, "Reciprocal #3"); test(field.newDfp("3").reciprocal(), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "Reciprocal #4"); test(field.newDfp("6").reciprocal(), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "Reciprocal #5"); test(field.newDfp("1").reciprocal(), field.newDfp("1"), 0, "Reciprocal #6"); test(field.newDfp("-1").reciprocal(), field.newDfp("-1"), 0, "Reciprocal #7"); test(pinf.reciprocal(), field.newDfp("0"), 0, "Reciprocal #8"); test(ninf.reciprocal(), field.newDfp("-0"), 0, "Reciprocal #9"); } @Test public void testDivideInt() { test(nan.divide(1),   // NaN / number = NaN nan, 0, "DivideInt #1"); test(pinf.divide(1), pinf, 0, "DivideInt #2"); test(field.newDfp("0").divide(0), nan, DfpField.FLAG_DIV_ZERO, "DivideInt #3"); test(field.newDfp("1").divide(0), pinf, DfpField.FLAG_DIV_ZERO, "DivideInt #4"); test(field.newDfp("-1").divide(0), ninf, DfpField.FLAG_DIV_ZERO, "DivideInt #5"); test(field.newDfp("1").divide(3), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "DivideInt #6"); test(field.newDfp("1").divide(6), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #7"); test(field.newDfp("10").divide(6), field.newDfp("1.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #8"); test(field.newDfp("100").divide(6), field.newDfp("16.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #9"); test(field.newDfp("1000").divide(6), field.newDfp("166.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #10"); test(field.newDfp("10000").divide(6), field.newDfp("1666.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #20"); test(field.newDfp("1").divide(1), field.newDfp("1"), 0, "DivideInt #21"); test(field.newDfp("1e-131077").divide(10), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "DivideInt #22"); test(field.newDfp("0").divide(1), field.newDfp("0"), 0, "DivideInt #23"); test(field.newDfp("1").divide(10000), nan, DfpField.FLAG_INVALID, "DivideInt #24"); test(field.newDfp("1").divide(-1), nan, DfpField.FLAG_INVALID, "DivideInt #25"); } @Test public void testNextAfter() { test(field.newDfp("1").nextAfter(pinf), field.newDfp("1.0000000000000001"), 0, "NextAfter #1"); test(field.newDfp("1.0000000000000001").nextAfter(ninf), field.newDfp("1"), 0, "NextAfter #1.5"); test(field.newDfp("1").nextAfter(ninf), field.newDfp("0.99999999999999999999"), 0, "NextAfter #2"); test(field.newDfp("0.99999999999999999999").nextAfter(field.newDfp("2")), field.newDfp("1"), 0, "NextAfter #3"); test(field.newDfp("-1").nextAfter(ninf), field.newDfp("-1.0000000000000001"), 0, "NextAfter #4"); test(field.newDfp("-1").nextAfter(pinf), field.newDfp("-0.99999999999999999999"), 0, "NextAfter #5"); test(field.newDfp("-0.99999999999999999999").nextAfter(field.newDfp("-2")), field.newDfp("-1"), 0, "NextAfter #6"); test(field.newDfp("2").nextAfter(field.newDfp("2")), field.newDfp("2"), 0, "NextAfter #7"); test(field.newDfp("0").nextAfter(field.newDfp("0")), field.newDfp("0"), 0, "NextAfter #8"); test(field.newDfp("-2").nextAfter(field.newDfp("-2")), field.newDfp("-2"), 0, "NextAfter #9"); test(field.newDfp("0").nextAfter(field.newDfp("1")), field.newDfp("1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #10"); test(field.newDfp("0").nextAfter(field.newDfp("-1")), field.newDfp("-1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #11"); test(field.newDfp("-1e-131092").nextAfter(pinf), field.newDfp("-0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #12"); test(field.newDfp("1e-131092").nextAfter(ninf), field.newDfp("0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #13"); test(field.newDfp("9.9999999999999999999e131078").nextAfter(pinf), pinf, DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, "Next After #14"); } @Test public void testToString() { Assert.assertEquals("toString #1", "Infinity", pinf.toString()); Assert.assertEquals("toString #2", "-Infinity", ninf.toString()); Assert.assertEquals("toString #3", "NaN", nan.toString()); Assert.assertEquals("toString #4", "NaN", field.newDfp((byte) 1, Dfp.QNAN).toString()); Assert.assertEquals("toString #5", "NaN", field.newDfp((byte) 1, Dfp.SNAN).toString()); Assert.assertEquals("toString #6", "1.2300000000000000e100", field.newDfp("1.23e100").toString()); Assert.assertEquals("toString #7", "-1.2300000000000000e100", field.newDfp("-1.23e100").toString()); Assert.assertEquals("toString #8", "12345678.1234", field.newDfp("12345678.1234").toString()); Assert.assertEquals("toString #9", "0.00001234", field.newDfp("0.00001234").toString()); } @Test public void testRound() { field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN); // Round down test(field.newDfp("12345678901234567890").add(field.newDfp("0.9")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #1"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.99999999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #2"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.99999999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #3"); field.setRoundingMode(DfpField.RoundingMode.ROUND_UP); // Round up test(field.newDfp("12345678901234567890").add(field.newDfp("0.1")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #4"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #5"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.1")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #6"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #7"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP); // Round half up test(field.newDfp("12345678901234567890").add(field.newDfp("0.4999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #8"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #9"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.4999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #10"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #11"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN); // Round half down test(field.newDfp("12345678901234567890").add(field.newDfp("0.5001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #12"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #13"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #14"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #15"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD); // Round half odd test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #16"); test(field.newDfp("12345678901234567891").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #17"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #18"); test(field.newDfp("-12345678901234567891").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #19"); field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL); // Round ceil test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #20"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.9999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #21"); field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR); // Round floor test(field.newDfp("12345678901234567890").add(field.newDfp("0.9999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #22"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #23"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); // reset } @Test public void testCeil() { test(field.newDfp("1234.0000000000000001").ceil(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Ceil #1"); } @Test public void testFloor() { test(field.newDfp("1234.9999999999999999").floor(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Floor #1"); } @Test public void testRint() { test(field.newDfp("1234.50000000001").rint(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Rint #1"); test(field.newDfp("1234.5000").rint(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Rint #2"); test(field.newDfp("1235.5000").rint(), field.newDfp("1236"), DfpField.FLAG_INEXACT, "Rint #3"); } @Test public void testCopySign() { test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #1"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #2"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #3"); test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #4"); } @Test public void testIntValue() { Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); } @Test public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testDivide() { test(field.newDfp("1").divide(nan),   // divide by NaN = NaN nan, 0, "Divide #1"); test(nan.divide(field.newDfp("1")),   // NaN / number = NaN nan, 0, "Divide #2"); test(pinf.divide(field.newDfp("1")), pinf, 0, "Divide #3"); test(pinf.divide(field.newDfp("-1")), ninf, 0, "Divide #4"); test(pinf.divide(pinf), nan, DfpField.FLAG_INVALID, "Divide #5"); test(ninf.divide(pinf), nan, DfpField.FLAG_INVALID, "Divide #6"); test(pinf.divide(ninf), nan, DfpField.FLAG_INVALID, "Divide #7"); test(ninf.divide(ninf), nan, DfpField.FLAG_INVALID, "Divide #8"); test(field.newDfp("0").divide(field.newDfp("0")), nan, DfpField.FLAG_DIV_ZERO, "Divide #9"); test(field.newDfp("1").divide(field.newDfp("0")), pinf, DfpField.FLAG_DIV_ZERO, "Divide #10"); test(field.newDfp("1").divide(field.newDfp("-0")), ninf, DfpField.FLAG_DIV_ZERO, "Divide #11"); test(field.newDfp("-1").divide(field.newDfp("0")), ninf, DfpField.FLAG_DIV_ZERO, "Divide #12"); test(field.newDfp("-1").divide(field.newDfp("-0")), pinf, DfpField.FLAG_DIV_ZERO, "Divide #13"); test(field.newDfp("1").divide(field.newDfp("3")), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "Divide #14"); test(field.newDfp("1").divide(field.newDfp("6")), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "Divide #15"); test(field.newDfp("10").divide(field.newDfp("6")), field.newDfp("1.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #16"); test(field.newDfp("100").divide(field.newDfp("6")), field.newDfp("16.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #17"); test(field.newDfp("1000").divide(field.newDfp("6")), field.newDfp("166.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #18"); test(field.newDfp("10000").divide(field.newDfp("6")), field.newDfp("1666.6666666666666667"), DfpField.FLAG_INEXACT, "Divide #19"); test(field.newDfp("1").divide(field.newDfp("1")), field.newDfp("1"), 0, "Divide #20"); test(field.newDfp("1").divide(field.newDfp("-1")), field.newDfp("-1"), 0, "Divide #21"); test(field.newDfp("-1").divide(field.newDfp("1")), field.newDfp("-1"), 0, "Divide #22"); test(field.newDfp("-1").divide(field.newDfp("-1")), field.newDfp("1"), 0, "Divide #23"); test(field.newDfp("1e-65539").divide(field.newDfp("1e65539")), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "Divide #24"); test(field.newDfp("1e65539").divide(field.newDfp("1e-65539")), pinf, DfpField.FLAG_OVERFLOW, "Divide #24"); test(field.newDfp("2").divide(field.newDfp("1.5")),   // test trial-divisor too high field.newDfp("1.3333333333333333"), DfpField.FLAG_INEXACT, "Divide #25"); test(field.newDfp("2").divide(pinf), field.newDfp("0"), 0, "Divide #26"); test(field.newDfp("2").divide(ninf), field.newDfp("-0"), 0, "Divide #27"); test(field.newDfp("0").divide(field.newDfp("1")), field.newDfp("0"), 0, "Divide #28"); } @Test public void testReciprocal() { test(nan.reciprocal(), nan, 0, "Reciprocal #1"); test(field.newDfp("0").reciprocal(), pinf, DfpField.FLAG_DIV_ZERO, "Reciprocal #2"); test(field.newDfp("-0").reciprocal(), ninf, DfpField.FLAG_DIV_ZERO, "Reciprocal #3"); test(field.newDfp("3").reciprocal(), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "Reciprocal #4"); test(field.newDfp("6").reciprocal(), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "Reciprocal #5"); test(field.newDfp("1").reciprocal(), field.newDfp("1"), 0, "Reciprocal #6"); test(field.newDfp("-1").reciprocal(), field.newDfp("-1"), 0, "Reciprocal #7"); test(pinf.reciprocal(), field.newDfp("0"), 0, "Reciprocal #8"); test(ninf.reciprocal(), field.newDfp("-0"), 0, "Reciprocal #9"); } @Test public void testDivideInt() { test(nan.divide(1),   // NaN / number = NaN nan, 0, "DivideInt #1"); test(pinf.divide(1), pinf, 0, "DivideInt #2"); test(field.newDfp("0").divide(0), nan, DfpField.FLAG_DIV_ZERO, "DivideInt #3"); test(field.newDfp("1").divide(0), pinf, DfpField.FLAG_DIV_ZERO, "DivideInt #4"); test(field.newDfp("-1").divide(0), ninf, DfpField.FLAG_DIV_ZERO, "DivideInt #5"); test(field.newDfp("1").divide(3), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "DivideInt #6"); test(field.newDfp("1").divide(6), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #7"); test(field.newDfp("10").divide(6), field.newDfp("1.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #8"); test(field.newDfp("100").divide(6), field.newDfp("16.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #9"); test(field.newDfp("1000").divide(6), field.newDfp("166.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #10"); test(field.newDfp("10000").divide(6), field.newDfp("1666.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #20"); test(field.newDfp("1").divide(1), field.newDfp("1"), 0, "DivideInt #21"); test(field.newDfp("1e-131077").divide(10), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "DivideInt #22"); test(field.newDfp("0").divide(1), field.newDfp("0"), 0, "DivideInt #23"); test(field.newDfp("1").divide(10000), nan, DfpField.FLAG_INVALID, "DivideInt #24"); test(field.newDfp("1").divide(-1), nan, DfpField.FLAG_INVALID, "DivideInt #25"); } @Test public void testNextAfter() { test(field.newDfp("1").nextAfter(pinf), field.newDfp("1.0000000000000001"), 0, "NextAfter #1"); test(field.newDfp("1.0000000000000001").nextAfter(ninf), field.newDfp("1"), 0, "NextAfter #1.5"); test(field.newDfp("1").nextAfter(ninf), field.newDfp("0.99999999999999999999"), 0, "NextAfter #2"); test(field.newDfp("0.99999999999999999999").nextAfter(field.newDfp("2")), field.newDfp("1"), 0, "NextAfter #3"); test(field.newDfp("-1").nextAfter(ninf), field.newDfp("-1.0000000000000001"), 0, "NextAfter #4"); test(field.newDfp("-1").nextAfter(pinf), field.newDfp("-0.99999999999999999999"), 0, "NextAfter #5"); test(field.newDfp("-0.99999999999999999999").nextAfter(field.newDfp("-2")), field.newDfp("-1"), 0, "NextAfter #6"); test(field.newDfp("2").nextAfter(field.newDfp("2")), field.newDfp("2"), 0, "NextAfter #7"); test(field.newDfp("0").nextAfter(field.newDfp("0")), field.newDfp("0"), 0, "NextAfter #8"); test(field.newDfp("-2").nextAfter(field.newDfp("-2")), field.newDfp("-2"), 0, "NextAfter #9"); test(field.newDfp("0").nextAfter(field.newDfp("1")), field.newDfp("1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #10"); test(field.newDfp("0").nextAfter(field.newDfp("-1")), field.newDfp("-1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #11"); test(field.newDfp("-1e-131092").nextAfter(pinf), field.newDfp("-0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #12"); test(field.newDfp("1e-131092").nextAfter(ninf), field.newDfp("0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #13"); test(field.newDfp("9.9999999999999999999e131078").nextAfter(pinf), pinf, DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, "Next After #14"); } @Test public void testToString() { Assert.assertEquals("toString #1", "Infinity", pinf.toString()); Assert.assertEquals("toString #2", "-Infinity", ninf.toString()); Assert.assertEquals("toString #3", "NaN", nan.toString()); Assert.assertEquals("toString #4", "NaN", field.newDfp((byte) 1, Dfp.QNAN).toString()); Assert.assertEquals("toString #5", "NaN", field.newDfp((byte) 1, Dfp.SNAN).toString()); Assert.assertEquals("toString #6", "1.2300000000000000e100", field.newDfp("1.23e100").toString()); Assert.assertEquals("toString #7", "-1.2300000000000000e100", field.newDfp("-1.23e100").toString()); Assert.assertEquals("toString #8", "12345678.1234", field.newDfp("12345678.1234").toString()); Assert.assertEquals("toString #9", "0.00001234", field.newDfp("0.00001234").toString()); } @Test public void testRound() { field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN); // Round down test(field.newDfp("12345678901234567890").add(field.newDfp("0.9")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #1"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.99999999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #2"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.99999999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #3"); field.setRoundingMode(DfpField.RoundingMode.ROUND_UP); // Round up test(field.newDfp("12345678901234567890").add(field.newDfp("0.1")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #4"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #5"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.1")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #6"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #7"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP); // Round half up test(field.newDfp("12345678901234567890").add(field.newDfp("0.4999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #8"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #9"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.4999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #10"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #11"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN); // Round half down test(field.newDfp("12345678901234567890").add(field.newDfp("0.5001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #12"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #13"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #14"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #15"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD); // Round half odd test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #16"); test(field.newDfp("12345678901234567891").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #17"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #18"); test(field.newDfp("-12345678901234567891").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #19"); field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL); // Round ceil test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #20"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.9999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #21"); field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR); // Round floor test(field.newDfp("12345678901234567890").add(field.newDfp("0.9999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #22"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #23"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); // reset } @Test public void testCeil() { test(field.newDfp("1234.0000000000000001").ceil(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Ceil #1"); } @Test public void testFloor() { test(field.newDfp("1234.9999999999999999").floor(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Floor #1"); } @Test public void testRint() { test(field.newDfp("1234.50000000001").rint(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Rint #1"); test(field.newDfp("1234.5000").rint(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Rint #2"); test(field.newDfp("1235.5000").rint(), field.newDfp("1236"), DfpField.FLAG_INEXACT, "Rint #3"); } @Test public void testCopySign() { test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #1"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #2"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #3"); test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #4"); } @Test public void testIntValue() { Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); } @Test public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testReciprocal() { test(nan.reciprocal(), nan, 0, "Reciprocal #1"); test(field.newDfp("0").reciprocal(), pinf, DfpField.FLAG_DIV_ZERO, "Reciprocal #2"); test(field.newDfp("-0").reciprocal(), ninf, DfpField.FLAG_DIV_ZERO, "Reciprocal #3"); test(field.newDfp("3").reciprocal(), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "Reciprocal #4"); test(field.newDfp("6").reciprocal(), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "Reciprocal #5"); test(field.newDfp("1").reciprocal(), field.newDfp("1"), 0, "Reciprocal #6"); test(field.newDfp("-1").reciprocal(), field.newDfp("-1"), 0, "Reciprocal #7"); test(pinf.reciprocal(), field.newDfp("0"), 0, "Reciprocal #8"); test(ninf.reciprocal(), field.newDfp("-0"), 0, "Reciprocal #9"); } @Test public void testDivideInt() { test(nan.divide(1),   // NaN / number = NaN nan, 0, "DivideInt #1"); test(pinf.divide(1), pinf, 0, "DivideInt #2"); test(field.newDfp("0").divide(0), nan, DfpField.FLAG_DIV_ZERO, "DivideInt #3"); test(field.newDfp("1").divide(0), pinf, DfpField.FLAG_DIV_ZERO, "DivideInt #4"); test(field.newDfp("-1").divide(0), ninf, DfpField.FLAG_DIV_ZERO, "DivideInt #5"); test(field.newDfp("1").divide(3), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "DivideInt #6"); test(field.newDfp("1").divide(6), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #7"); test(field.newDfp("10").divide(6), field.newDfp("1.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #8"); test(field.newDfp("100").divide(6), field.newDfp("16.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #9"); test(field.newDfp("1000").divide(6), field.newDfp("166.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #10"); test(field.newDfp("10000").divide(6), field.newDfp("1666.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #20"); test(field.newDfp("1").divide(1), field.newDfp("1"), 0, "DivideInt #21"); test(field.newDfp("1e-131077").divide(10), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "DivideInt #22"); test(field.newDfp("0").divide(1), field.newDfp("0"), 0, "DivideInt #23"); test(field.newDfp("1").divide(10000), nan, DfpField.FLAG_INVALID, "DivideInt #24"); test(field.newDfp("1").divide(-1), nan, DfpField.FLAG_INVALID, "DivideInt #25"); } @Test public void testNextAfter() { test(field.newDfp("1").nextAfter(pinf), field.newDfp("1.0000000000000001"), 0, "NextAfter #1"); test(field.newDfp("1.0000000000000001").nextAfter(ninf), field.newDfp("1"), 0, "NextAfter #1.5"); test(field.newDfp("1").nextAfter(ninf), field.newDfp("0.99999999999999999999"), 0, "NextAfter #2"); test(field.newDfp("0.99999999999999999999").nextAfter(field.newDfp("2")), field.newDfp("1"), 0, "NextAfter #3"); test(field.newDfp("-1").nextAfter(ninf), field.newDfp("-1.0000000000000001"), 0, "NextAfter #4"); test(field.newDfp("-1").nextAfter(pinf), field.newDfp("-0.99999999999999999999"), 0, "NextAfter #5"); test(field.newDfp("-0.99999999999999999999").nextAfter(field.newDfp("-2")), field.newDfp("-1"), 0, "NextAfter #6"); test(field.newDfp("2").nextAfter(field.newDfp("2")), field.newDfp("2"), 0, "NextAfter #7"); test(field.newDfp("0").nextAfter(field.newDfp("0")), field.newDfp("0"), 0, "NextAfter #8"); test(field.newDfp("-2").nextAfter(field.newDfp("-2")), field.newDfp("-2"), 0, "NextAfter #9"); test(field.newDfp("0").nextAfter(field.newDfp("1")), field.newDfp("1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #10"); test(field.newDfp("0").nextAfter(field.newDfp("-1")), field.newDfp("-1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #11"); test(field.newDfp("-1e-131092").nextAfter(pinf), field.newDfp("-0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #12"); test(field.newDfp("1e-131092").nextAfter(ninf), field.newDfp("0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #13"); test(field.newDfp("9.9999999999999999999e131078").nextAfter(pinf), pinf, DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, "Next After #14"); } @Test public void testToString() { Assert.assertEquals("toString #1", "Infinity", pinf.toString()); Assert.assertEquals("toString #2", "-Infinity", ninf.toString()); Assert.assertEquals("toString #3", "NaN", nan.toString()); Assert.assertEquals("toString #4", "NaN", field.newDfp((byte) 1, Dfp.QNAN).toString()); Assert.assertEquals("toString #5", "NaN", field.newDfp((byte) 1, Dfp.SNAN).toString()); Assert.assertEquals("toString #6", "1.2300000000000000e100", field.newDfp("1.23e100").toString()); Assert.assertEquals("toString #7", "-1.2300000000000000e100", field.newDfp("-1.23e100").toString()); Assert.assertEquals("toString #8", "12345678.1234", field.newDfp("12345678.1234").toString()); Assert.assertEquals("toString #9", "0.00001234", field.newDfp("0.00001234").toString()); } @Test public void testRound() { field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN); // Round down test(field.newDfp("12345678901234567890").add(field.newDfp("0.9")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #1"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.99999999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #2"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.99999999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #3"); field.setRoundingMode(DfpField.RoundingMode.ROUND_UP); // Round up test(field.newDfp("12345678901234567890").add(field.newDfp("0.1")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #4"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #5"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.1")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #6"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #7"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP); // Round half up test(field.newDfp("12345678901234567890").add(field.newDfp("0.4999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #8"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #9"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.4999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #10"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #11"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN); // Round half down test(field.newDfp("12345678901234567890").add(field.newDfp("0.5001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #12"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #13"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #14"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #15"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD); // Round half odd test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #16"); test(field.newDfp("12345678901234567891").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #17"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #18"); test(field.newDfp("-12345678901234567891").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #19"); field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL); // Round ceil test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #20"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.9999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #21"); field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR); // Round floor test(field.newDfp("12345678901234567890").add(field.newDfp("0.9999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #22"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #23"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); // reset } @Test public void testCeil() { test(field.newDfp("1234.0000000000000001").ceil(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Ceil #1"); } @Test public void testFloor() { test(field.newDfp("1234.9999999999999999").floor(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Floor #1"); } @Test public void testRint() { test(field.newDfp("1234.50000000001").rint(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Rint #1"); test(field.newDfp("1234.5000").rint(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Rint #2"); test(field.newDfp("1235.5000").rint(), field.newDfp("1236"), DfpField.FLAG_INEXACT, "Rint #3"); } @Test public void testCopySign() { test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #1"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #2"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #3"); test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #4"); } @Test public void testIntValue() { Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); } @Test public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testDivideInt() { test(nan.divide(1),   // NaN / number = NaN nan, 0, "DivideInt #1"); test(pinf.divide(1), pinf, 0, "DivideInt #2"); test(field.newDfp("0").divide(0), nan, DfpField.FLAG_DIV_ZERO, "DivideInt #3"); test(field.newDfp("1").divide(0), pinf, DfpField.FLAG_DIV_ZERO, "DivideInt #4"); test(field.newDfp("-1").divide(0), ninf, DfpField.FLAG_DIV_ZERO, "DivideInt #5"); test(field.newDfp("1").divide(3), field.newDfp("0.33333333333333333333"), DfpField.FLAG_INEXACT, "DivideInt #6"); test(field.newDfp("1").divide(6), field.newDfp("0.16666666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #7"); test(field.newDfp("10").divide(6), field.newDfp("1.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #8"); test(field.newDfp("100").divide(6), field.newDfp("16.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #9"); test(field.newDfp("1000").divide(6), field.newDfp("166.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #10"); test(field.newDfp("10000").divide(6), field.newDfp("1666.6666666666666667"), DfpField.FLAG_INEXACT, "DivideInt #20"); test(field.newDfp("1").divide(1), field.newDfp("1"), 0, "DivideInt #21"); test(field.newDfp("1e-131077").divide(10), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "DivideInt #22"); test(field.newDfp("0").divide(1), field.newDfp("0"), 0, "DivideInt #23"); test(field.newDfp("1").divide(10000), nan, DfpField.FLAG_INVALID, "DivideInt #24"); test(field.newDfp("1").divide(-1), nan, DfpField.FLAG_INVALID, "DivideInt #25"); } @Test public void testNextAfter() { test(field.newDfp("1").nextAfter(pinf), field.newDfp("1.0000000000000001"), 0, "NextAfter #1"); test(field.newDfp("1.0000000000000001").nextAfter(ninf), field.newDfp("1"), 0, "NextAfter #1.5"); test(field.newDfp("1").nextAfter(ninf), field.newDfp("0.99999999999999999999"), 0, "NextAfter #2"); test(field.newDfp("0.99999999999999999999").nextAfter(field.newDfp("2")), field.newDfp("1"), 0, "NextAfter #3"); test(field.newDfp("-1").nextAfter(ninf), field.newDfp("-1.0000000000000001"), 0, "NextAfter #4"); test(field.newDfp("-1").nextAfter(pinf), field.newDfp("-0.99999999999999999999"), 0, "NextAfter #5"); test(field.newDfp("-0.99999999999999999999").nextAfter(field.newDfp("-2")), field.newDfp("-1"), 0, "NextAfter #6"); test(field.newDfp("2").nextAfter(field.newDfp("2")), field.newDfp("2"), 0, "NextAfter #7"); test(field.newDfp("0").nextAfter(field.newDfp("0")), field.newDfp("0"), 0, "NextAfter #8"); test(field.newDfp("-2").nextAfter(field.newDfp("-2")), field.newDfp("-2"), 0, "NextAfter #9"); test(field.newDfp("0").nextAfter(field.newDfp("1")), field.newDfp("1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #10"); test(field.newDfp("0").nextAfter(field.newDfp("-1")), field.newDfp("-1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #11"); test(field.newDfp("-1e-131092").nextAfter(pinf), field.newDfp("-0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #12"); test(field.newDfp("1e-131092").nextAfter(ninf), field.newDfp("0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #13"); test(field.newDfp("9.9999999999999999999e131078").nextAfter(pinf), pinf, DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, "Next After #14"); } @Test public void testToString() { Assert.assertEquals("toString #1", "Infinity", pinf.toString()); Assert.assertEquals("toString #2", "-Infinity", ninf.toString()); Assert.assertEquals("toString #3", "NaN", nan.toString()); Assert.assertEquals("toString #4", "NaN", field.newDfp((byte) 1, Dfp.QNAN).toString()); Assert.assertEquals("toString #5", "NaN", field.newDfp((byte) 1, Dfp.SNAN).toString()); Assert.assertEquals("toString #6", "1.2300000000000000e100", field.newDfp("1.23e100").toString()); Assert.assertEquals("toString #7", "-1.2300000000000000e100", field.newDfp("-1.23e100").toString()); Assert.assertEquals("toString #8", "12345678.1234", field.newDfp("12345678.1234").toString()); Assert.assertEquals("toString #9", "0.00001234", field.newDfp("0.00001234").toString()); } @Test public void testRound() { field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN); // Round down test(field.newDfp("12345678901234567890").add(field.newDfp("0.9")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #1"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.99999999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #2"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.99999999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #3"); field.setRoundingMode(DfpField.RoundingMode.ROUND_UP); // Round up test(field.newDfp("12345678901234567890").add(field.newDfp("0.1")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #4"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #5"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.1")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #6"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #7"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP); // Round half up test(field.newDfp("12345678901234567890").add(field.newDfp("0.4999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #8"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #9"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.4999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #10"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #11"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN); // Round half down test(field.newDfp("12345678901234567890").add(field.newDfp("0.5001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #12"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #13"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #14"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #15"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD); // Round half odd test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #16"); test(field.newDfp("12345678901234567891").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #17"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #18"); test(field.newDfp("-12345678901234567891").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #19"); field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL); // Round ceil test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #20"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.9999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #21"); field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR); // Round floor test(field.newDfp("12345678901234567890").add(field.newDfp("0.9999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #22"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #23"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); // reset } @Test public void testCeil() { test(field.newDfp("1234.0000000000000001").ceil(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Ceil #1"); } @Test public void testFloor() { test(field.newDfp("1234.9999999999999999").floor(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Floor #1"); } @Test public void testRint() { test(field.newDfp("1234.50000000001").rint(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Rint #1"); test(field.newDfp("1234.5000").rint(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Rint #2"); test(field.newDfp("1235.5000").rint(), field.newDfp("1236"), DfpField.FLAG_INEXACT, "Rint #3"); } @Test public void testCopySign() { test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #1"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #2"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #3"); test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #4"); } @Test public void testIntValue() { Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); } @Test public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testNextAfter() { test(field.newDfp("1").nextAfter(pinf), field.newDfp("1.0000000000000001"), 0, "NextAfter #1"); test(field.newDfp("1.0000000000000001").nextAfter(ninf), field.newDfp("1"), 0, "NextAfter #1.5"); test(field.newDfp("1").nextAfter(ninf), field.newDfp("0.99999999999999999999"), 0, "NextAfter #2"); test(field.newDfp("0.99999999999999999999").nextAfter(field.newDfp("2")), field.newDfp("1"), 0, "NextAfter #3"); test(field.newDfp("-1").nextAfter(ninf), field.newDfp("-1.0000000000000001"), 0, "NextAfter #4"); test(field.newDfp("-1").nextAfter(pinf), field.newDfp("-0.99999999999999999999"), 0, "NextAfter #5"); test(field.newDfp("-0.99999999999999999999").nextAfter(field.newDfp("-2")), field.newDfp("-1"), 0, "NextAfter #6"); test(field.newDfp("2").nextAfter(field.newDfp("2")), field.newDfp("2"), 0, "NextAfter #7"); test(field.newDfp("0").nextAfter(field.newDfp("0")), field.newDfp("0"), 0, "NextAfter #8"); test(field.newDfp("-2").nextAfter(field.newDfp("-2")), field.newDfp("-2"), 0, "NextAfter #9"); test(field.newDfp("0").nextAfter(field.newDfp("1")), field.newDfp("1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #10"); test(field.newDfp("0").nextAfter(field.newDfp("-1")), field.newDfp("-1e-131092"), DfpField.FLAG_UNDERFLOW, "NextAfter #11"); test(field.newDfp("-1e-131092").nextAfter(pinf), field.newDfp("-0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #12"); test(field.newDfp("1e-131092").nextAfter(ninf), field.newDfp("0"), DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, "Next After #13"); test(field.newDfp("9.9999999999999999999e131078").nextAfter(pinf), pinf, DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, "Next After #14"); } @Test public void testToString() { Assert.assertEquals("toString #1", "Infinity", pinf.toString()); Assert.assertEquals("toString #2", "-Infinity", ninf.toString()); Assert.assertEquals("toString #3", "NaN", nan.toString()); Assert.assertEquals("toString #4", "NaN", field.newDfp((byte) 1, Dfp.QNAN).toString()); Assert.assertEquals("toString #5", "NaN", field.newDfp((byte) 1, Dfp.SNAN).toString()); Assert.assertEquals("toString #6", "1.2300000000000000e100", field.newDfp("1.23e100").toString()); Assert.assertEquals("toString #7", "-1.2300000000000000e100", field.newDfp("-1.23e100").toString()); Assert.assertEquals("toString #8", "12345678.1234", field.newDfp("12345678.1234").toString()); Assert.assertEquals("toString #9", "0.00001234", field.newDfp("0.00001234").toString()); } @Test public void testRound() { field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN); // Round down test(field.newDfp("12345678901234567890").add(field.newDfp("0.9")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #1"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.99999999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #2"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.99999999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #3"); field.setRoundingMode(DfpField.RoundingMode.ROUND_UP); // Round up test(field.newDfp("12345678901234567890").add(field.newDfp("0.1")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #4"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #5"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.1")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #6"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #7"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP); // Round half up test(field.newDfp("12345678901234567890").add(field.newDfp("0.4999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #8"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #9"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.4999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #10"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #11"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN); // Round half down test(field.newDfp("12345678901234567890").add(field.newDfp("0.5001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #12"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #13"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #14"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #15"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD); // Round half odd test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #16"); test(field.newDfp("12345678901234567891").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #17"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #18"); test(field.newDfp("-12345678901234567891").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #19"); field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL); // Round ceil test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #20"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.9999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #21"); field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR); // Round floor test(field.newDfp("12345678901234567890").add(field.newDfp("0.9999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #22"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #23"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); // reset } @Test public void testCeil() { test(field.newDfp("1234.0000000000000001").ceil(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Ceil #1"); } @Test public void testFloor() { test(field.newDfp("1234.9999999999999999").floor(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Floor #1"); } @Test public void testRint() { test(field.newDfp("1234.50000000001").rint(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Rint #1"); test(field.newDfp("1234.5000").rint(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Rint #2"); test(field.newDfp("1235.5000").rint(), field.newDfp("1236"), DfpField.FLAG_INEXACT, "Rint #3"); } @Test public void testCopySign() { test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #1"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #2"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #3"); test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #4"); } @Test public void testIntValue() { Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); } @Test public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testToString() { Assert.assertEquals("toString #1", "Infinity", pinf.toString()); Assert.assertEquals("toString #2", "-Infinity", ninf.toString()); Assert.assertEquals("toString #3", "NaN", nan.toString()); Assert.assertEquals("toString #4", "NaN", field.newDfp((byte) 1, Dfp.QNAN).toString()); Assert.assertEquals("toString #5", "NaN", field.newDfp((byte) 1, Dfp.SNAN).toString()); Assert.assertEquals("toString #6", "1.2300000000000000e100", field.newDfp("1.23e100").toString()); Assert.assertEquals("toString #7", "-1.2300000000000000e100", field.newDfp("-1.23e100").toString()); Assert.assertEquals("toString #8", "12345678.1234", field.newDfp("12345678.1234").toString()); Assert.assertEquals("toString #9", "0.00001234", field.newDfp("0.00001234").toString()); } @Test public void testRound() { field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN); // Round down test(field.newDfp("12345678901234567890").add(field.newDfp("0.9")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #1"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.99999999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #2"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.99999999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #3"); field.setRoundingMode(DfpField.RoundingMode.ROUND_UP); // Round up test(field.newDfp("12345678901234567890").add(field.newDfp("0.1")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #4"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #5"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.1")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #6"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #7"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP); // Round half up test(field.newDfp("12345678901234567890").add(field.newDfp("0.4999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #8"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #9"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.4999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #10"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #11"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN); // Round half down test(field.newDfp("12345678901234567890").add(field.newDfp("0.5001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #12"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #13"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #14"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #15"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD); // Round half odd test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #16"); test(field.newDfp("12345678901234567891").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #17"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #18"); test(field.newDfp("-12345678901234567891").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #19"); field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL); // Round ceil test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #20"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.9999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #21"); field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR); // Round floor test(field.newDfp("12345678901234567890").add(field.newDfp("0.9999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #22"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #23"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); // reset } @Test public void testCeil() { test(field.newDfp("1234.0000000000000001").ceil(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Ceil #1"); } @Test public void testFloor() { test(field.newDfp("1234.9999999999999999").floor(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Floor #1"); } @Test public void testRint() { test(field.newDfp("1234.50000000001").rint(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Rint #1"); test(field.newDfp("1234.5000").rint(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Rint #2"); test(field.newDfp("1235.5000").rint(), field.newDfp("1236"), DfpField.FLAG_INEXACT, "Rint #3"); } @Test public void testCopySign() { test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #1"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #2"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #3"); test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #4"); } @Test public void testIntValue() { Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); } @Test public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testRound() { field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN); // Round down test(field.newDfp("12345678901234567890").add(field.newDfp("0.9")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #1"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.99999999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #2"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.99999999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #3"); field.setRoundingMode(DfpField.RoundingMode.ROUND_UP); // Round up test(field.newDfp("12345678901234567890").add(field.newDfp("0.1")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #4"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #5"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.1")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #6"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #7"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP); // Round half up test(field.newDfp("12345678901234567890").add(field.newDfp("0.4999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #8"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #9"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.4999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #10"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #11"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN); // Round half down test(field.newDfp("12345678901234567890").add(field.newDfp("0.5001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #12"); test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #13"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #14"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #15"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD); // Round half odd test(field.newDfp("12345678901234567890").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #16"); test(field.newDfp("12345678901234567891").add(field.newDfp("0.5000")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #17"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #18"); test(field.newDfp("-12345678901234567891").add(field.newDfp("-0.5000")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #19"); field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL); // Round ceil test(field.newDfp("12345678901234567890").add(field.newDfp("0.0001")), field.newDfp("12345678901234567891"), DfpField.FLAG_INEXACT, "Round #20"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.9999")), field.newDfp("-12345678901234567890"), DfpField.FLAG_INEXACT, "Round #21"); field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR); // Round floor test(field.newDfp("12345678901234567890").add(field.newDfp("0.9999")), field.newDfp("12345678901234567890"), DfpField.FLAG_INEXACT, "Round #22"); test(field.newDfp("-12345678901234567890").add(field.newDfp("-0.0001")), field.newDfp("-12345678901234567891"), DfpField.FLAG_INEXACT, "Round #23"); field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN); // reset } @Test public void testCeil() { test(field.newDfp("1234.0000000000000001").ceil(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Ceil #1"); } @Test public void testFloor() { test(field.newDfp("1234.9999999999999999").floor(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Floor #1"); } @Test public void testRint() { test(field.newDfp("1234.50000000001").rint(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Rint #1"); test(field.newDfp("1234.5000").rint(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Rint #2"); test(field.newDfp("1235.5000").rint(), field.newDfp("1236"), DfpField.FLAG_INEXACT, "Rint #3"); } @Test public void testCopySign() { test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #1"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #2"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #3"); test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #4"); } @Test public void testIntValue() { Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); } @Test public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testCeil() { test(field.newDfp("1234.0000000000000001").ceil(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Ceil #1"); } @Test public void testFloor() { test(field.newDfp("1234.9999999999999999").floor(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Floor #1"); } @Test public void testRint() { test(field.newDfp("1234.50000000001").rint(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Rint #1"); test(field.newDfp("1234.5000").rint(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Rint #2"); test(field.newDfp("1235.5000").rint(), field.newDfp("1236"), DfpField.FLAG_INEXACT, "Rint #3"); } @Test public void testCopySign() { test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #1"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #2"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #3"); test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #4"); } @Test public void testIntValue() { Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); } @Test public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testFloor() { test(field.newDfp("1234.9999999999999999").floor(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Floor #1"); } @Test public void testRint() { test(field.newDfp("1234.50000000001").rint(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Rint #1"); test(field.newDfp("1234.5000").rint(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Rint #2"); test(field.newDfp("1235.5000").rint(), field.newDfp("1236"), DfpField.FLAG_INEXACT, "Rint #3"); } @Test public void testCopySign() { test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #1"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #2"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #3"); test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #4"); } @Test public void testIntValue() { Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); } @Test public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testRint() { test(field.newDfp("1234.50000000001").rint(), field.newDfp("1235"), DfpField.FLAG_INEXACT, "Rint #1"); test(field.newDfp("1234.5000").rint(), field.newDfp("1234"), DfpField.FLAG_INEXACT, "Rint #2"); test(field.newDfp("1235.5000").rint(), field.newDfp("1236"), DfpField.FLAG_INEXACT, "Rint #3"); } @Test public void testCopySign() { test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #1"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #2"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #3"); test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #4"); } @Test public void testIntValue() { Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); } @Test public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testCopySign() { test(Dfp.copysign(field.newDfp("1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #1"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("-1")), field.newDfp("-1234"), 0, "CopySign #2"); test(Dfp.copysign(field.newDfp("-1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #3"); test(Dfp.copysign(field.newDfp("1234."), field.newDfp("1")), field.newDfp("1234"), 0, "CopySign #4"); } @Test public void testIntValue() { Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); } @Test public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testIntValue() { Assert.assertEquals("intValue #1", 1234, field.newDfp("1234").intValue()); Assert.assertEquals("intValue #2", -1234, field.newDfp("-1234").intValue()); Assert.assertEquals("intValue #3", 1234, field.newDfp("1234.5").intValue()); Assert.assertEquals("intValue #4", 1235, field.newDfp("1234.500001").intValue()); Assert.assertEquals("intValue #5", 2147483647, field.newDfp("1e1000").intValue()); Assert.assertEquals("intValue #6", -2147483648, field.newDfp("-1e1000").intValue()); } @Test public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testLog10K() { Assert.assertEquals("log10K #1", 1, field.newDfp("123456").log10K()); Assert.assertEquals("log10K #2", 2, field.newDfp("123456789").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("2").log10K()); Assert.assertEquals("log10K #3", 0, field.newDfp("1").log10K()); Assert.assertEquals("log10K #4", -1, field.newDfp("0.1").log10K()); } @Test public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testPower10K() { Dfp d = field.newDfp(); test(d.power10K(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10K(1), field.newDfp("10000"), 0, "Power10 #2"); test(d.power10K(2), field.newDfp("100000000"), 0, "Power10 #3"); test(d.power10K(-1), field.newDfp("0.0001"), 0, "Power10 #4"); test(d.power10K(-2), field.newDfp("0.00000001"), 0, "Power10 #5"); test(d.power10K(-3), field.newDfp("0.000000000001"), 0, "Power10 #6"); } @Test public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testLog10() { Assert.assertEquals("log10 #1", 1, field.newDfp("12").log10()); Assert.assertEquals("log10 #2", 2, field.newDfp("123").log10()); Assert.assertEquals("log10 #3", 3, field.newDfp("1234").log10()); Assert.assertEquals("log10 #4", 4, field.newDfp("12345").log10()); Assert.assertEquals("log10 #5", 5, field.newDfp("123456").log10()); Assert.assertEquals("log10 #6", 6, field.newDfp("1234567").log10()); Assert.assertEquals("log10 #6", 7, field.newDfp("12345678").log10()); Assert.assertEquals("log10 #7", 8, field.newDfp("123456789").log10()); Assert.assertEquals("log10 #8", 9, field.newDfp("1234567890").log10()); Assert.assertEquals("log10 #9", 10, field.newDfp("12345678901").log10()); Assert.assertEquals("log10 #10", 11, field.newDfp("123456789012").log10()); Assert.assertEquals("log10 #11", 12, field.newDfp("1234567890123").log10()); Assert.assertEquals("log10 #12", 0, field.newDfp("2").log10()); Assert.assertEquals("log10 #13", 0, field.newDfp("1").log10()); Assert.assertEquals("log10 #14", -1, field.newDfp("0.12").log10()); Assert.assertEquals("log10 #15", -2, field.newDfp("0.012").log10()); } @Test public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testPower10() { Dfp d = field.newDfp(); test(d.power10(0), field.newDfp("1"), 0, "Power10 #1"); test(d.power10(1), field.newDfp("10"), 0, "Power10 #2"); test(d.power10(2), field.newDfp("100"), 0, "Power10 #3"); test(d.power10(3), field.newDfp("1000"), 0, "Power10 #4"); test(d.power10(4), field.newDfp("10000"), 0, "Power10 #5"); test(d.power10(5), field.newDfp("100000"), 0, "Power10 #6"); test(d.power10(6), field.newDfp("1000000"), 0, "Power10 #7"); test(d.power10(7), field.newDfp("10000000"), 0, "Power10 #8"); test(d.power10(8), field.newDfp("100000000"), 0, "Power10 #9"); test(d.power10(9), field.newDfp("1000000000"), 0, "Power10 #10"); test(d.power10(-1), field.newDfp(".1"), 0, "Power10 #11"); test(d.power10(-2), field.newDfp(".01"), 0, "Power10 #12"); test(d.power10(-3), field.newDfp(".001"), 0, "Power10 #13"); test(d.power10(-4), field.newDfp(".0001"), 0, "Power10 #14"); test(d.power10(-5), field.newDfp(".00001"), 0, "Power10 #15"); test(d.power10(-6), field.newDfp(".000001"), 0, "Power10 #16"); test(d.power10(-7), field.newDfp(".0000001"), 0, "Power10 #17"); test(d.power10(-8), field.newDfp(".00000001"), 0, "Power10 #18"); test(d.power10(-9), field.newDfp(".000000001"), 0, "Power10 #19"); test(d.power10(-10), field.newDfp(".0000000001"), 0, "Power10 #20"); } @Test public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testRemainder() { test(field.newDfp("10").remainder(field.newDfp("3")), field.newDfp("1"), DfpField.FLAG_INEXACT, "Remainder #1"); test(field.newDfp("9").remainder(field.newDfp("3")), field.newDfp("0"), 0, "Remainder #2"); test(field.newDfp("-9").remainder(field.newDfp("3")), field.newDfp("-0"), 0, "Remainder #3"); } @Test public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testSqrt() { test(field.newDfp("0").sqrt(), field.newDfp("0"), 0, "Sqrt #1"); test(field.newDfp("-0").sqrt(), field.newDfp("-0"), 0, "Sqrt #2"); test(field.newDfp("1").sqrt(), field.newDfp("1"), 0, "Sqrt #3"); test(field.newDfp("2").sqrt(), field.newDfp("1.4142135623730950"), DfpField.FLAG_INEXACT, "Sqrt #4"); test(field.newDfp("3").sqrt(), field.newDfp("1.7320508075688773"), DfpField.FLAG_INEXACT, "Sqrt #5"); test(field.newDfp("5").sqrt(), field.newDfp("2.2360679774997897"), DfpField.FLAG_INEXACT, "Sqrt #6"); test(field.newDfp("500").sqrt(), field.newDfp("22.3606797749978970"), DfpField.FLAG_INEXACT, "Sqrt #6.2"); test(field.newDfp("50000").sqrt(), field.newDfp("223.6067977499789696"), DfpField.FLAG_INEXACT, "Sqrt #6.3"); test(field.newDfp("-1").sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #7"); test(pinf.sqrt(), pinf, 0, "Sqrt #8"); test(field.newDfp((byte) 1, Dfp.QNAN).sqrt(), nan, 0, "Sqrt #9"); test(field.newDfp((byte) 1, Dfp.SNAN).sqrt(), nan, DfpField.FLAG_INVALID, "Sqrt #9"); } @Test public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); } @Test public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); } @Test public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); } }
public void testIssue567() { DfpField field = new DfpField(100); Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN); Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN); Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON); Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON); }
public void testIsZero() { Assert.assertTrue(field.getZero().isZero()); Assert.assertTrue(field.getZero().negate().isZero()); Assert.assertTrue(field.newDfp(+0.0).isZero()); Assert.assertTrue(field.newDfp(-0.0).isZero()); Assert.assertFalse(field.newDfp(1.0e-90).isZero()); Assert.assertFalse(nan.isZero()); Assert.assertFalse(nan.negate().isZero()); Assert.assertFalse(pinf.isZero()); Assert.assertFalse(pinf.negate().isZero()); Assert.assertFalse(ninf.isZero()); Assert.assertFalse(ninf.negate().isZero()); }
public void testSignPredicates() { Assert.assertTrue(field.getZero().negativeOrNull()); Assert.assertTrue(field.getZero().positiveOrNull()); Assert.assertFalse(field.getZero().strictlyNegative()); Assert.assertFalse(field.getZero().strictlyPositive()); Assert.assertTrue(field.getZero().negate().negativeOrNull()); Assert.assertTrue(field.getZero().negate().positiveOrNull()); Assert.assertFalse(field.getZero().negate().strictlyNegative()); Assert.assertFalse(field.getZero().negate().strictlyPositive()); Assert.assertFalse(field.getOne().negativeOrNull()); Assert.assertTrue(field.getOne().positiveOrNull()); Assert.assertFalse(field.getOne().strictlyNegative()); Assert.assertTrue(field.getOne().strictlyPositive()); Assert.assertTrue(field.getOne().negate().negativeOrNull()); Assert.assertFalse(field.getOne().negate().positiveOrNull()); Assert.assertTrue(field.getOne().negate().strictlyNegative()); Assert.assertFalse(field.getOne().negate().strictlyPositive()); Assert.assertFalse(nan.negativeOrNull()); Assert.assertFalse(nan.positiveOrNull()); Assert.assertFalse(nan.strictlyNegative()); Assert.assertFalse(nan.strictlyPositive()); Assert.assertFalse(nan.negate().negativeOrNull()); Assert.assertFalse(nan.negate().positiveOrNull()); Assert.assertFalse(nan.negate().strictlyNegative()); Assert.assertFalse(nan.negate().strictlyPositive()); Assert.assertFalse(pinf.negativeOrNull()); Assert.assertTrue(pinf.positiveOrNull()); Assert.assertFalse(pinf.strictlyNegative()); Assert.assertTrue(pinf.strictlyPositive()); Assert.assertTrue(pinf.negate().negativeOrNull()); Assert.assertFalse(pinf.negate().positiveOrNull()); Assert.assertTrue(pinf.negate().strictlyNegative()); Assert.assertFalse(pinf.negate().strictlyPositive()); Assert.assertTrue(ninf.negativeOrNull()); Assert.assertFalse(ninf.positiveOrNull()); Assert.assertTrue(ninf.strictlyNegative()); Assert.assertFalse(ninf.strictlyPositive()); Assert.assertFalse(ninf.negate().negativeOrNull()); Assert.assertTrue(ninf.negate().positiveOrNull()); Assert.assertFalse(ninf.negate().strictlyNegative()); Assert.assertTrue(ninf.negate().strictlyPositive()); }
