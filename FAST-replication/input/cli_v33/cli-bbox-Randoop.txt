public void test501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test501"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); int int14 = helpFormatter0.getDescPadding(); java.lang.String str15 = helpFormatter0.getLongOptSeparator(); int int16 = helpFormatter0.defaultDescPad; java.lang.String str18 = helpFormatter0.createPadding((int) '4'); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertEquals("'" + str15 + "' != '" + " " + "'", str15, " "); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "                          " + "'", str18, "                          "); }
public void test502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test502"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.getArgName(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); }
public void test503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test503"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setArgName(""); org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option24 = options22.getOption(" "); java.util.List list26 = options22.getMatchingOptions("hi!"); boolean boolean28 = options22.hasShortOption("arg"); java.lang.String str29 = options22.toString(); helpFormatter0.printHelp(" ", "usage:", options22, "[ Options: [ short {} ] [ long {} ]"); org.apache.commons.cli.Option option32 = null; try { org.apache.commons.cli.Options options33 = options22.addOption(option32); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertNull(option24); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str29, "[ Options: [ short {} ] [ long {} ]"); }
public void test504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test504"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); int int8 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test505"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultOptPrefix = "usage:"; java.lang.String str12 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = "-"; org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); helpFormatter17.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter31 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options(); java.lang.String str34 = options33.toString(); helpFormatter31.printHelp("-", options33, true); org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option42 = options40.getOption(" "); java.util.List list44 = options40.getMatchingOptions("hi!"); boolean boolean46 = options40.hasOption(" "); org.apache.commons.cli.Option option48 = options40.getOption("hi!"); helpFormatter31.printHelp((int) '4', "\n", "                                                 ", options40, "usage:"); helpFormatter17.printHelp("[ Options: [ short {} ] [ long {} ]", options40); helpFormatter0.printHelp(" ", "[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]", options40, "-"); java.util.List list54 = options40.getRequiredOptions(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str34, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option42); org.junit.Assert.assertNotNull(list44); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNull(option48); org.junit.Assert.assertNotNull(list54); }
public void test506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test506"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); boolean boolean12 = options4.hasLongOption("usage: "); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test507"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option11 = options9.getOption(" "); java.util.List list13 = options9.getMatchingOptions("hi!"); boolean boolean15 = options9.hasOption(" "); org.apache.commons.cli.Option option17 = options9.getOption("hi!"); helpFormatter0.printHelp((int) '4', "\n", "                                                 ", options9, "usage:"); java.lang.Class<?> wildcardClass20 = options9.getClass(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option11); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(wildcardClass20); }
public void test508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test508"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); int int14 = helpFormatter0.getDescPadding(); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); helpFormatter18.defaultNewLine = " "; org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); helpFormatter18.printHelp("arg", options22); boolean boolean25 = options22.hasShortOption(""); helpFormatter0.printHelp((-1), "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "usage: ", options22, "-", false); try { org.apache.commons.cli.Options options32 = options22.addOption("                ", false, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '                ' contains an illegal character : ' '"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); }
public void test509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test509"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getWidth(); java.lang.String str2 = helpFormatter0.getNewLine(); org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); boolean boolean10 = options4.hasOption(" "); org.apache.commons.cli.Options options15 = options4.addOption("", " ", false, "  "); java.lang.String str16 = options4.toString(); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options4, false); try { org.apache.commons.cli.Options options23 = options4.addOption("[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]", "[ Options: [ short {} ] [ long {} ]", false, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]' contains an illegal character : '['"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 74 + "'", int1 == 74); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(options15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]" + "'", str16, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); }
public void test510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test510"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option15 = options13.getOption(" "); java.util.List list17 = options13.getMatchingOptions("hi!"); boolean boolean19 = options13.hasOption(" "); java.util.List list20 = options13.getRequiredOptions(); java.util.List list21 = options13.helpOptions(); java.util.Collection collection22 = options13.getOptionGroups(); java.util.List list24 = options13.getMatchingOptions("arg"); java.lang.String str25 = options13.toString(); org.apache.commons.cli.Option option27 = options13.getOption("--"); java.util.Collection collection28 = options13.getOptionGroups(); org.apache.commons.cli.Options options32 = options13.addOption("", true, "usage: "); helpFormatter0.printHelp("\n", options13); helpFormatter0.defaultLeftPad = (short) 10; helpFormatter0.defaultOptPrefix = "                                                 "; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(comparator11); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(list17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(collection28); org.junit.Assert.assertNotNull(options32); }
public void test511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test511"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); helpFormatter0.setNewLine(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); }
public void test512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test512"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultNewLine = ""; helpFormatter0.setSyntaxPrefix("-"); java.lang.String str17 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); helpFormatter18.defaultDescPad = 10; org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option24 = options22.getOption(" "); java.util.List list26 = options22.getMatchingOptions("hi!"); helpFormatter18.printHelp("usage: ", options22, false); java.lang.String str29 = helpFormatter18.defaultOptPrefix; java.lang.String str30 = helpFormatter18.defaultLongOptPrefix; java.lang.String str31 = helpFormatter18.getLongOptSeparator(); helpFormatter18.defaultNewLine = "  "; java.util.Comparator comparator34 = helpFormatter18.optionComparator; helpFormatter0.optionComparator = comparator34; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-" + "'", str17, "-"); org.junit.Assert.assertNull(option24); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-" + "'", str29, "-"); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "--" + "'", str30, "--"); org.junit.Assert.assertEquals("'" + str31 + "' != '" + " " + "'", str31, " "); org.junit.Assert.assertNotNull(comparator34); }
public void test513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test513"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); java.lang.String str14 = helpFormatter0.defaultOptPrefix; helpFormatter0.defaultSyntaxPrefix = ""; org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-" + "'", str14, "-"); }
public void test514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test514"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setDescPadding((-1)); org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); int int17 = helpFormatter13.findWrapPos("", (int) '#', 1); java.lang.String str18 = helpFormatter13.getSyntaxPrefix(); int int19 = helpFormatter13.defaultLeftPad; java.util.Comparator comparator20 = helpFormatter13.getOptionComparator(); helpFormatter13.defaultArgName = "                                     "; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option26 = options24.getOption(" "); java.util.List list28 = options24.getMatchingOptions("hi!"); boolean boolean30 = options24.hasOption(" "); java.util.List list31 = options24.getRequiredOptions(); org.apache.commons.cli.Option option33 = options24.getOption("[ Options: [ short {} ] [ long {} ]"); helpFormatter13.printHelp("usage:", options24); try { helpFormatter0.printHelp("-", options24, true); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "usage: " + "'", str18, "usage: "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertNotNull(comparator20); org.junit.Assert.assertNull(option26); org.junit.Assert.assertNotNull(list28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(list31); org.junit.Assert.assertNull(option33); }
public void test515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test515"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = ""; java.lang.String str14 = helpFormatter0.getLongOptSeparator(); java.lang.String str15 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultOptPrefix = "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + " " + "'", str14, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "usage: " + "'", str15, "usage: "); }
public void test516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test516"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); helpFormatter0.setLeftPadding(74); int int10 = helpFormatter0.getWidth(); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); int int15 = helpFormatter11.findWrapPos("", (int) '#', 1); helpFormatter11.defaultWidth = (byte) 10; java.lang.String str18 = helpFormatter11.getNewLine(); helpFormatter11.defaultOptPrefix = " "; int int21 = helpFormatter11.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); int int26 = helpFormatter22.findWrapPos("", (int) '#', 1); helpFormatter22.defaultWidth = (byte) 10; java.lang.String str29 = helpFormatter22.getNewLine(); java.util.Comparator comparator30 = helpFormatter22.getOptionComparator(); java.util.Comparator comparator31 = helpFormatter22.getOptionComparator(); helpFormatter11.optionComparator = comparator31; helpFormatter0.setOptionComparator(comparator31); java.lang.String str34 = helpFormatter0.defaultOptPrefix; org.apache.commons.cli.HelpFormatter helpFormatter35 = new org.apache.commons.cli.HelpFormatter(); int int39 = helpFormatter35.findWrapPos("", (int) '#', 1); int int40 = helpFormatter35.defaultLeftPad; int int41 = helpFormatter35.getLeftPadding(); java.lang.String str42 = helpFormatter35.getArgName(); helpFormatter35.setOptPrefix("  "); org.apache.commons.cli.HelpFormatter helpFormatter45 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator46 = null; helpFormatter45.optionComparator = comparator46; org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options(); helpFormatter45.printHelp("--", options49); java.lang.String str52 = helpFormatter45.createPadding((int) 'a'); helpFormatter45.setNewLine(" "); org.apache.commons.cli.HelpFormatter helpFormatter55 = new org.apache.commons.cli.HelpFormatter(); helpFormatter55.defaultDescPad = 10; org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option61 = options59.getOption(" "); java.util.List list63 = options59.getMatchingOptions("hi!"); helpFormatter55.printHelp("usage: ", options59, false); java.lang.String str66 = helpFormatter55.defaultOptPrefix; java.lang.String str67 = helpFormatter55.getNewLine(); java.lang.String str68 = helpFormatter55.defaultArgName; helpFormatter55.setDescPadding((int) '#'); java.util.Comparator comparator71 = helpFormatter55.optionComparator; helpFormatter45.setOptionComparator(comparator71); helpFormatter35.optionComparator = comparator71; helpFormatter0.optionComparator = comparator71; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 74 + "'", int10 == 74); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n" + "'", str18, "\n"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1)); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\n" + "'", str29, "\n"); org.junit.Assert.assertNotNull(comparator30); org.junit.Assert.assertNotNull(comparator31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-" + "'", str34, "-"); org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1)); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1); org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg"); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "                                                 " + "'", str52, "                                                 "); org.junit.Assert.assertNull(option61); org.junit.Assert.assertNotNull(list63); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-" + "'", str66, "-"); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\n" + "'", str67, "\n"); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "arg" + "'", str68, "arg"); org.junit.Assert.assertNotNull(comparator71); }
public void test517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test517"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); java.lang.String str9 = helpFormatter0.rtrim("\n"); helpFormatter0.defaultDescPad = 74; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); }
public void test518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test518"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(" "); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); java.lang.String str10 = options9.toString(); org.apache.commons.cli.Option option12 = options9.getOption("arg"); helpFormatter0.printHelp("usage:", options9); org.apache.commons.cli.Option option15 = options9.getOption("                                                 "); java.util.List list16 = options9.getRequiredOptions(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option12); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(list16); }
public void test519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test519"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasShortOption(" "); java.lang.String str29 = options17.toString(); java.util.List list30 = options17.helpOptions(); java.util.Collection collection31 = options17.getOptions(); org.apache.commons.cli.Option option33 = options17.getOption("                                     "); org.apache.commons.cli.Option option35 = options17.getOption("                                     "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str29, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list30); org.junit.Assert.assertNotNull(collection31); org.junit.Assert.assertNull(option33); org.junit.Assert.assertNull(option35); }
public void test520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test520"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; java.lang.String str7 = helpFormatter0.getLongOptSeparator(); int int8 = helpFormatter0.getWidth(); java.io.PrintWriter printWriter9 = null; try { helpFormatter0.printUsage(printWriter9, 74, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); }
public void test521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test521"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); helpFormatter0.printHelp("\n", options15); helpFormatter0.defaultDescPad = (short) 0; org.apache.commons.cli.HelpFormatter helpFormatter26 = new org.apache.commons.cli.HelpFormatter(); int int30 = helpFormatter26.findWrapPos("", (int) '#', 1); helpFormatter26.defaultWidth = (byte) 10; java.lang.String str33 = helpFormatter26.getNewLine(); helpFormatter26.defaultOptPrefix = " "; int int36 = helpFormatter26.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter39 = new org.apache.commons.cli.HelpFormatter(); helpFormatter39.defaultDescPad = 10; org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option45 = options43.getOption(" "); java.util.List list47 = options43.getMatchingOptions("hi!"); helpFormatter39.printHelp("usage: ", options43, false); java.util.Collection collection50 = options43.getOptionGroups(); helpFormatter26.printHelp("hi!", "", options43, "arg"); boolean boolean54 = options43.hasShortOption(" "); java.lang.String str55 = options43.toString(); java.util.List list56 = options43.helpOptions(); java.util.Collection collection57 = options43.getOptions(); helpFormatter0.printHelp("[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]", options43); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1)); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\n" + "'", str33, "\n"); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1); org.junit.Assert.assertNull(option45); org.junit.Assert.assertNotNull(list47); org.junit.Assert.assertNotNull(collection50); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str55, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list56); org.junit.Assert.assertNotNull(collection57); }
public void test522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test522"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); helpFormatter10.defaultDescPad = 10; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); helpFormatter10.printHelp("usage: ", options14, false); java.lang.String str21 = helpFormatter10.defaultOptPrefix; java.lang.String str22 = helpFormatter10.defaultLongOptPrefix; java.lang.String str23 = helpFormatter10.getLongOptSeparator(); helpFormatter10.defaultNewLine = "  "; java.util.Comparator comparator26 = helpFormatter10.optionComparator; helpFormatter0.setOptionComparator(comparator26); java.util.Comparator comparator28 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-" + "'", str21, "-"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "--" + "'", str22, "--"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + " " + "'", str23, " "); org.junit.Assert.assertNotNull(comparator26); org.junit.Assert.assertNotNull(comparator28); }
public void test523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test523"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 3; helpFormatter0.defaultLeftPad = ' '; helpFormatter0.defaultLeftPad = (byte) 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.Collection collection24 = options21.getOptions(); java.util.Collection collection25 = options21.getOptions(); java.lang.String str26 = options21.toString(); java.lang.String str27 = options21.toString(); helpFormatter0.printHelp(" ", "                                                  ", options21, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertNotNull(collection25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str26, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str27, "[ Options: [ short {} ] [ long {} ]"); }
public void test524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test524"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); helpFormatter0.printHelp("\n", options15); boolean boolean24 = options15.hasShortOption("[ Options: [ short {} ] [ long {} ]"); org.apache.commons.cli.Option option26 = options15.getOption("                "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNull(option26); }
public void test525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test525"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); java.util.Collection collection14 = options7.getOptionGroups(); boolean boolean16 = options7.hasLongOption("usage: "); try { org.apache.commons.cli.Options options21 = options7.addOption(" ", "                                                  ", true, "-"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal option name ' '"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test526"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); int int33 = helpFormatter0.findWrapPos("", (-1), (int) (short) 10); helpFormatter0.defaultLeftPad = ' '; int int39 = helpFormatter0.findWrapPos("\n", (int) (byte) -1, (int) '4'); java.util.Comparator comparator40 = helpFormatter0.optionComparator; helpFormatter0.setNewLine("[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1)); org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1)); org.junit.Assert.assertNotNull(comparator40); }
public void test527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test527"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; helpFormatter0.setArgName(" "); helpFormatter0.defaultSyntaxPrefix = ""; java.lang.Class<?> wildcardClass7 = helpFormatter0.getClass(); org.junit.Assert.assertNotNull(wildcardClass7); }
public void test528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test528"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding((int) (short) 100); java.lang.String str12 = helpFormatter0.rtrim("                                     "); org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.lang.String str24 = helpFormatter13.defaultOptPrefix; helpFormatter13.setSyntaxPrefix(" "); java.util.Comparator comparator27 = helpFormatter13.optionComparator; helpFormatter0.optionComparator = comparator27; helpFormatter0.setWidth((int) (byte) 0); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-" + "'", str24, "-"); org.junit.Assert.assertNotNull(comparator27); }
public void test529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test529"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.defaultArgName; helpFormatter0.setDescPadding((int) '#'); java.util.Comparator comparator16 = helpFormatter0.optionComparator; helpFormatter0.defaultArgName = ""; helpFormatter0.defaultDescPad = 0; java.lang.String str21 = helpFormatter0.getArgName(); java.lang.String str22 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg"); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, ""); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-" + "'", str22, "-"); }
public void test530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test530"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator15 = null; helpFormatter14.optionComparator = comparator15; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); helpFormatter14.printHelp("--", options18); java.lang.String str21 = helpFormatter14.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); helpFormatter22.defaultDescPad = 10; org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option28 = options26.getOption(" "); java.util.List list30 = options26.getMatchingOptions("hi!"); helpFormatter22.printHelp("usage: ", options26, false); java.util.Comparator comparator33 = helpFormatter22.getOptionComparator(); helpFormatter14.setOptionComparator(comparator33); helpFormatter0.optionComparator = comparator33; helpFormatter0.setOptPrefix("  "); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "arg" + "'", str21, "arg"); org.junit.Assert.assertNull(option28); org.junit.Assert.assertNotNull(list30); org.junit.Assert.assertNotNull(comparator33); }
public void test531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test531"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.Collection collection7 = options2.getOptions(); java.util.List list9 = options2.getMatchingOptions(""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertNotNull(list9); }
public void test532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test532"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; helpFormatter0.defaultWidth = 1; org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); helpFormatter18.defaultDescPad = 10; org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option24 = options22.getOption(" "); java.util.List list26 = options22.getMatchingOptions("hi!"); helpFormatter18.printHelp("usage: ", options22, false); java.util.Collection collection29 = options22.getOptionGroups(); java.util.Collection collection30 = options22.getOptions(); helpFormatter0.printHelp((int) (short) 100, "arg", "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", options22, "                                                 "); java.lang.String str34 = helpFormatter0.createPadding(100); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNull(option24); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertNotNull(collection29); org.junit.Assert.assertNotNull(collection30); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "                                                  " + "'", str34, "                                                  "); }
public void test533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test533"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); org.apache.commons.cli.OptionGroup optionGroup6 = null; try { org.apache.commons.cli.Options options7 = options4.addOptionGroup(optionGroup6); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test534"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option15 = options13.getOption(" "); java.util.List list17 = options13.getMatchingOptions("hi!"); boolean boolean19 = options13.hasOption(" "); java.util.List list20 = options13.getRequiredOptions(); java.util.List list21 = options13.helpOptions(); java.util.Collection collection22 = options13.getOptionGroups(); java.util.List list24 = options13.getMatchingOptions("arg"); java.lang.String str25 = options13.toString(); org.apache.commons.cli.Option option27 = options13.getOption("--"); java.util.Collection collection28 = options13.getOptionGroups(); org.apache.commons.cli.Options options32 = options13.addOption("", true, "usage: "); helpFormatter0.printHelp("\n", options13); int int34 = helpFormatter0.defaultLeftPad; java.lang.String str36 = helpFormatter0.rtrim(""); helpFormatter0.defaultNewLine = "[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]"; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(comparator11); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(list17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(collection28); org.junit.Assert.assertNotNull(options32); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); }
public void test535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test535"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); helpFormatter0.defaultArgName = "-"; java.io.PrintWriter printWriter16 = null; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option20 = options18.getOption(" "); java.util.List list22 = options18.getMatchingOptions("hi!"); boolean boolean24 = options18.hasLongOption("\n"); boolean boolean26 = options18.hasOption("hi!"); try { helpFormatter0.printOptions(printWriter16, (int) (short) 100, options18, 1, (int) 'a'); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option20); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); }
public void test536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test536"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.defaultArgName; helpFormatter0.setDescPadding((int) '#'); java.util.Comparator comparator16 = helpFormatter0.optionComparator; helpFormatter0.defaultArgName = ""; helpFormatter0.defaultDescPad = 0; java.lang.String str21 = helpFormatter0.getArgName(); helpFormatter0.defaultDescPad = '#'; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg"); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, ""); }
public void test537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test537"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultLeftPad = (short) 0; int int14 = helpFormatter0.getWidth(); java.lang.StringBuffer stringBuffer15 = null; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); boolean boolean23 = options17.hasOption(" "); boolean boolean25 = options17.hasShortOption("usage: "); java.lang.StringBuffer stringBuffer28 = helpFormatter0.renderOptions(stringBuffer15, (int) (short) -1, options17, (int) '4', (int) '4'); helpFormatter0.setLeftPadding((int) (short) 0); helpFormatter0.setSyntaxPrefix(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNull(stringBuffer28); }
public void test538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test538"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); java.lang.String str22 = helpFormatter0.createPadding(3); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator26 = null; helpFormatter25.optionComparator = comparator26; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); helpFormatter25.printHelp("--", options29); java.lang.String str32 = helpFormatter25.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter33 = new org.apache.commons.cli.HelpFormatter(); helpFormatter33.defaultDescPad = 10; org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option39 = options37.getOption(" "); java.util.List list41 = options37.getMatchingOptions("hi!"); helpFormatter33.printHelp("usage: ", options37, false); java.util.Comparator comparator44 = helpFormatter33.getOptionComparator(); helpFormatter25.setOptionComparator(comparator44); org.apache.commons.cli.HelpFormatter helpFormatter47 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator48 = null; helpFormatter47.optionComparator = comparator48; org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); helpFormatter47.printHelp("--", options51); helpFormatter25.printHelp("[ Options: [ short {} ] [ long {} ]", options51); java.lang.String str54 = options51.toString(); helpFormatter0.printHelp("-", "-", options51, "-", false); org.apache.commons.cli.HelpFormatter helpFormatter60 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator61 = null; helpFormatter60.optionComparator = comparator61; org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options(); helpFormatter60.printHelp("--", options64); java.lang.String str66 = helpFormatter60.getNewLine(); java.lang.String str67 = helpFormatter60.defaultSyntaxPrefix; org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option72 = options70.getOption(" "); java.util.Collection collection73 = options70.getOptions(); java.util.Collection collection74 = options70.getOptions(); java.lang.String str75 = options70.toString(); java.lang.String str76 = options70.toString(); helpFormatter60.printHelp("  ", "", options70, ""); helpFormatter0.printHelp("\n", "                                                  ", options70, "                                     "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "  " + "'", str22, "  "); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg"); org.junit.Assert.assertNull(option39); org.junit.Assert.assertNotNull(list41); org.junit.Assert.assertNotNull(comparator44); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str54, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\n" + "'", str66, "\n"); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "usage: " + "'", str67, "usage: "); org.junit.Assert.assertNull(option72); org.junit.Assert.assertNotNull(collection73); org.junit.Assert.assertNotNull(collection74); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str75, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str76, "[ Options: [ short {} ] [ long {} ]"); }
public void test539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test539"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.defaultNewLine = "usage:"; java.lang.String str5 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); }
public void test540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test540"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); java.lang.String str17 = options16.toString(); helpFormatter14.printHelp("-", options16, true); org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option25 = options23.getOption(" "); java.util.List list27 = options23.getMatchingOptions("hi!"); boolean boolean29 = options23.hasOption(" "); org.apache.commons.cli.Option option31 = options23.getOption("hi!"); helpFormatter14.printHelp((int) '4', "\n", "                                                 ", options23, "usage:"); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options23); java.util.Collection collection35 = options23.getOptions(); java.util.List list37 = options23.getMatchingOptions("[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option25); org.junit.Assert.assertNotNull(list27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNull(option31); org.junit.Assert.assertNotNull(collection35); org.junit.Assert.assertNotNull(list37); }
public void test541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test541"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); int int14 = helpFormatter0.getDescPadding(); java.lang.String str15 = helpFormatter0.getLongOptSeparator(); java.io.PrintWriter printWriter16 = null; try { helpFormatter0.printUsage(printWriter16, 10, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertEquals("'" + str15 + "' != '" + " " + "'", str15, " "); }
public void test542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test542"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); java.lang.String str8 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setLeftPadding(0); java.lang.String str12 = helpFormatter0.rtrim("-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); }
public void test543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test543"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = "  "; java.lang.String str3 = helpFormatter0.defaultArgName; helpFormatter0.setArgName("--"); org.apache.commons.cli.HelpFormatter helpFormatter7 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter7.findWrapPos("", (int) '#', 1); java.lang.String str12 = helpFormatter7.getSyntaxPrefix(); helpFormatter7.defaultNewLine = "usage: "; helpFormatter7.defaultArgName = "usage: "; java.lang.String str18 = helpFormatter7.rtrim("usage: "); java.lang.String str19 = helpFormatter7.defaultSyntaxPrefix; org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option25 = options23.getOption(" "); java.util.List list27 = options23.getMatchingOptions("hi!"); boolean boolean29 = options23.hasOption(" "); java.util.List list30 = options23.getRequiredOptions(); java.lang.String str31 = options23.toString(); java.util.List list32 = options23.helpOptions(); helpFormatter7.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options23, "usage: "); helpFormatter0.printHelp(" ", options23, true); org.apache.commons.cli.HelpFormatter helpFormatter37 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator38 = null; helpFormatter37.optionComparator = comparator38; org.apache.commons.cli.HelpFormatter helpFormatter40 = new org.apache.commons.cli.HelpFormatter(); helpFormatter40.defaultArgName = "hi!"; java.lang.StringBuffer stringBuffer43 = null; org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option47 = options45.getOption(" "); java.util.Collection collection48 = options45.getOptions(); java.util.Collection collection49 = options45.getOptions(); java.lang.String str50 = options45.toString(); java.lang.String str51 = options45.toString(); java.lang.StringBuffer stringBuffer54 = helpFormatter40.renderOptions(stringBuffer43, (int) (short) 10, options45, (int) ' ', (int) (byte) 10); java.util.Comparator comparator55 = helpFormatter40.optionComparator; helpFormatter37.setOptionComparator(comparator55); helpFormatter0.optionComparator = comparator55; helpFormatter0.setWidth((int) (byte) 100); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "usage:" + "'", str18, "usage:"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "usage: " + "'", str19, "usage: "); org.junit.Assert.assertNull(option25); org.junit.Assert.assertNotNull(list27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(list30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str31, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list32); org.junit.Assert.assertNull(option47); org.junit.Assert.assertNotNull(collection48); org.junit.Assert.assertNotNull(collection49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str50, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(stringBuffer54); org.junit.Assert.assertNotNull(comparator55); }
public void test544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test544"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth(10); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultArgName = "usage: "; java.io.PrintWriter printWriter15 = null; try { helpFormatter0.printWrapped(printWriter15, (int) (byte) 10, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test545"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultLeftPad = (short) 0; int int14 = helpFormatter0.getWidth(); java.lang.Class<?> wildcardClass15 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10); org.junit.Assert.assertNotNull(wildcardClass15); }
public void test546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test546"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth(10); int int12 = helpFormatter0.defaultDescPad; java.lang.String str13 = helpFormatter0.defaultOptPrefix; int int14 = helpFormatter0.getDescPadding(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); }
public void test547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test547"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(" "); java.lang.String str8 = helpFormatter0.defaultLongOptPrefix; java.io.PrintWriter printWriter9 = null; org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator12 = null; helpFormatter11.optionComparator = comparator12; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); helpFormatter11.printHelp("--", options15); java.lang.String str18 = helpFormatter11.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter19 = new org.apache.commons.cli.HelpFormatter(); helpFormatter19.defaultDescPad = 10; org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option25 = options23.getOption(" "); java.util.List list27 = options23.getMatchingOptions("hi!"); helpFormatter19.printHelp("usage: ", options23, false); java.util.Comparator comparator30 = helpFormatter19.getOptionComparator(); helpFormatter11.setOptionComparator(comparator30); org.apache.commons.cli.HelpFormatter helpFormatter33 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator34 = null; helpFormatter33.optionComparator = comparator34; org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); helpFormatter33.printHelp("--", options37); helpFormatter11.printHelp("[ Options: [ short {} ] [ long {} ]", options37); java.util.List list40 = options37.helpOptions(); try { helpFormatter0.printOptions(printWriter9, (int) (short) 100, options37, (int) (short) -1, (int) '4'); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "arg" + "'", str18, "arg"); org.junit.Assert.assertNull(option25); org.junit.Assert.assertNotNull(list27); org.junit.Assert.assertNotNull(comparator30); org.junit.Assert.assertNotNull(list40); }
public void test548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test548"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; helpFormatter0.defaultNewLine = "  "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator6 = null; helpFormatter5.optionComparator = comparator6; org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); helpFormatter5.printHelp("--", options9); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); java.lang.String str22 = helpFormatter11.defaultOptPrefix; java.lang.String str23 = helpFormatter11.defaultLongOptPrefix; java.lang.String str24 = helpFormatter11.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator26 = null; helpFormatter25.optionComparator = comparator26; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); helpFormatter25.printHelp("--", options29); java.lang.String str32 = helpFormatter25.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter33 = new org.apache.commons.cli.HelpFormatter(); helpFormatter33.defaultDescPad = 10; org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option39 = options37.getOption(" "); java.util.List list41 = options37.getMatchingOptions("hi!"); helpFormatter33.printHelp("usage: ", options37, false); java.util.Comparator comparator44 = helpFormatter33.getOptionComparator(); helpFormatter25.setOptionComparator(comparator44); helpFormatter11.optionComparator = comparator44; helpFormatter5.optionComparator = comparator44; helpFormatter0.setOptionComparator(comparator44); helpFormatter0.setDescPadding((int) (byte) 0); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-" + "'", str22, "-"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "--" + "'", str23, "--"); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\n" + "'", str24, "\n"); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg"); org.junit.Assert.assertNull(option39); org.junit.Assert.assertNotNull(list41); org.junit.Assert.assertNotNull(comparator44); }
public void test549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test549"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str11 = helpFormatter0.rtrim("usage: "); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option18 = options16.getOption(" "); java.util.List list20 = options16.getMatchingOptions("hi!"); boolean boolean22 = options16.hasOption(" "); java.util.List list23 = options16.getRequiredOptions(); java.lang.String str24 = options16.toString(); java.util.List list25 = options16.helpOptions(); helpFormatter0.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options16, "usage: "); java.util.Collection collection28 = options16.getOptionGroups(); boolean boolean30 = options16.hasOption(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage:" + "'", str11, "usage:"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertNull(option18); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(list23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str24, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(collection28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); }
public void test550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test550"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; java.lang.String str18 = helpFormatter0.getArgName(); java.lang.String str19 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptPrefix("hi!"); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); java.lang.String str28 = options27.toString(); helpFormatter25.printHelp("-", options27, true); java.util.Collection collection31 = options27.getOptions(); java.util.Collection collection32 = options27.getOptions(); org.apache.commons.cli.Options options36 = options27.addOption("arg", false, ""); helpFormatter0.printHelp((int) (short) 10, "hi!", "--", options36, "                "); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "arg" + "'", str18, "arg"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "usage: " + "'", str19, "usage: "); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection31); org.junit.Assert.assertNotNull(collection32); org.junit.Assert.assertNotNull(options36); }
public void test551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test551"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 3; java.io.PrintWriter printWriter15 = null; org.apache.commons.cli.HelpFormatter helpFormatter19 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); java.lang.String str22 = options21.toString(); helpFormatter19.printHelp("-", options21, true); java.util.Collection collection25 = options21.getOptions(); java.util.Collection collection26 = options21.getOptions(); org.apache.commons.cli.Options options30 = options21.addOption("arg", false, ""); try { helpFormatter0.printHelp(printWriter15, (-2), "[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]", "                                     ", options21, 10, (int) ' ', " "); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection25); org.junit.Assert.assertNotNull(collection26); org.junit.Assert.assertNotNull(options30); }
public void test552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test552"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); java.lang.String str20 = helpFormatter15.getSyntaxPrefix(); helpFormatter15.defaultNewLine = "usage: "; helpFormatter15.defaultArgName = "usage: "; java.lang.String str26 = helpFormatter15.rtrim("usage: "); java.lang.String str27 = helpFormatter15.defaultSyntaxPrefix; org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option33 = options31.getOption(" "); java.util.List list35 = options31.getMatchingOptions("hi!"); boolean boolean37 = options31.hasOption(" "); java.util.List list38 = options31.getRequiredOptions(); java.lang.String str39 = options31.toString(); java.util.List list40 = options31.helpOptions(); helpFormatter15.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options31, "usage: "); helpFormatter0.printHelp((-1), "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "hi!", options31, "--"); org.apache.commons.cli.Options options48 = options31.addOption("", true, "[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "usage: " + "'", str20, "usage: "); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "usage:" + "'", str26, "usage:"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "usage: " + "'", str27, "usage: "); org.junit.Assert.assertNull(option33); org.junit.Assert.assertNotNull(list35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(list38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str39, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(options48); }
public void test553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test553"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setWidth(1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test554"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasShortOption(" "); java.lang.String str29 = options17.toString(); boolean boolean31 = options17.hasOption("hi!"); org.apache.commons.cli.Option option32 = null; try { org.apache.commons.cli.Options options33 = options17.addOption(option32); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str29, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); }
public void test555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test555"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.StringBuffer stringBuffer9 = null; try { java.lang.StringBuffer stringBuffer13 = helpFormatter0.renderWrappedText(stringBuffer9, (int) (short) 10, (-2), "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); }
public void test556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test556"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; java.lang.String str18 = helpFormatter0.getArgName(); java.io.PrintWriter printWriter19 = null; org.apache.commons.cli.HelpFormatter helpFormatter23 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options(); java.lang.String str26 = options25.toString(); helpFormatter23.printHelp("-", options25, true); java.util.Collection collection29 = options25.getOptions(); java.util.Collection collection30 = options25.getOptions(); org.apache.commons.cli.Options options34 = options25.addOption("arg", false, ""); try { helpFormatter0.printHelp(printWriter19, (int) (short) -1, "  ", "[ Options: [ short {} ] [ long {} ]", options34, (int) (byte) -1, (-2), "arg", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "arg" + "'", str18, "arg"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str26, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection29); org.junit.Assert.assertNotNull(collection30); org.junit.Assert.assertNotNull(options34); }
public void test557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test557"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); java.util.Comparator comparator30 = null; helpFormatter0.optionComparator = comparator30; java.lang.String str32 = helpFormatter0.defaultArgName; java.lang.String str33 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "--" + "'", str33, "--"); }
public void test558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test558"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); java.lang.String str14 = helpFormatter0.defaultOptPrefix; int int15 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-" + "'", str14, "-"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); }
public void test559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test559"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); helpFormatter15.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter26 = new org.apache.commons.cli.HelpFormatter(); helpFormatter26.defaultDescPad = 10; org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option32 = options30.getOption(" "); java.util.List list34 = options30.getMatchingOptions("hi!"); helpFormatter26.printHelp("usage: ", options30, false); helpFormatter15.printHelp("\n", options30); boolean boolean39 = options30.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.List list40 = options30.getRequiredOptions(); helpFormatter0.printHelp("                                                 ", options30, false); boolean boolean44 = options30.hasOption(" "); java.util.Collection collection45 = options30.getOptions(); boolean boolean47 = options30.hasOption(""); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertNull(option32); org.junit.Assert.assertNotNull(list34); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(collection45); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); }
public void test560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test560"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); helpFormatter0.printHelp("\n", options15); helpFormatter0.setLongOptPrefix(" "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); }
public void test561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test561"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultDescPad = (-1); java.lang.String str13 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--" + "'", str13, "--"); }
public void test562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test562"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth(10); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultSyntaxPrefix = "[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test563"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth(10); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setSyntaxPrefix(""); int int15 = helpFormatter0.defaultWidth; helpFormatter0.defaultArgName = "                "; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10); }
public void test564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test564"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultNewLine = ""; int int14 = helpFormatter0.getDescPadding(); helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.defaultLeftPad = 0; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); }
public void test565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test565"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setArgName("-"); java.io.PrintWriter printWriter10 = null; org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); int int18 = helpFormatter14.findWrapPos("", (int) '#', 1); helpFormatter14.defaultWidth = (byte) 10; java.lang.String str21 = helpFormatter14.getNewLine(); java.util.Comparator comparator22 = helpFormatter14.getOptionComparator(); org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option26 = options24.getOption(" "); java.util.List list28 = options24.getMatchingOptions("hi!"); boolean boolean30 = options24.hasShortOption("arg"); helpFormatter14.printHelp("arg", options24); try { helpFormatter0.printHelp(printWriter10, (int) (byte) -1, "[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]", "                                                 ", options24, (int) (short) -1, (int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\n" + "'", str21, "\n"); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertNull(option26); org.junit.Assert.assertNotNull(list28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); }
public void test566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test566"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); boolean boolean7 = options4.hasShortOption("                                                 "); org.apache.commons.cli.Option option8 = null; try { org.apache.commons.cli.OptionGroup optionGroup9 = options4.getOptionGroup(option8); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test567"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); helpFormatter0.setOptPrefix("arg"); int int16 = helpFormatter0.defaultLeftPad; helpFormatter0.setWidth(0); org.apache.commons.cli.HelpFormatter helpFormatter21 = new org.apache.commons.cli.HelpFormatter(); helpFormatter21.defaultNewLine = " "; helpFormatter21.defaultNewLine = "  "; org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option29 = options27.getOption(" "); java.util.List list31 = options27.getMatchingOptions("hi!"); boolean boolean33 = options27.hasShortOption("arg"); java.lang.String str34 = options27.toString(); helpFormatter21.printHelp("usage:", options27, true); java.util.Collection collection37 = options27.getOptionGroups(); try { helpFormatter0.printHelp("", "", options27, "[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); org.junit.Assert.assertNull(option29); org.junit.Assert.assertNotNull(list31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str34, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection37); }
public void test568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test568"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultDescPad = 0; helpFormatter0.defaultOptPrefix = "usage:"; java.lang.String str10 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--" + "'", str10, "--"); }
public void test569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test569"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); int int16 = helpFormatter12.findWrapPos("", (int) '#', 1); helpFormatter12.defaultWidth = (byte) 10; java.lang.String str19 = helpFormatter12.getNewLine(); helpFormatter12.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter23 = new org.apache.commons.cli.HelpFormatter(); helpFormatter23.defaultDescPad = 10; org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option29 = options27.getOption(" "); java.util.List list31 = options27.getMatchingOptions("hi!"); helpFormatter23.printHelp("usage: ", options27, false); helpFormatter12.printHelp("\n", options27); boolean boolean36 = options27.hasShortOption("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.printHelp("usage:", "", options27, "                                                 "); java.lang.String str40 = helpFormatter0.rtrim("                                                 "); org.apache.commons.cli.Options options42 = null; try { helpFormatter0.printHelp("hi!", options42, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n" + "'", str19, "\n"); org.junit.Assert.assertNull(option29); org.junit.Assert.assertNotNull(list31); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); }
public void test570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test570"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding((int) (short) 100); helpFormatter0.defaultDescPad = 10; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); }
public void test571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test571"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultNewLine = "usage: "; int int8 = helpFormatter0.getDescPadding(); helpFormatter0.defaultArgName = "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10); }
public void test572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test572"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator10 = null; helpFormatter9.optionComparator = comparator10; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); helpFormatter9.printHelp("--", options13); java.lang.String str16 = helpFormatter9.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); java.util.Comparator comparator28 = helpFormatter17.getOptionComparator(); helpFormatter9.setOptionComparator(comparator28); helpFormatter0.optionComparator = comparator28; org.apache.commons.cli.HelpFormatter helpFormatter34 = new org.apache.commons.cli.HelpFormatter(); int int38 = helpFormatter34.findWrapPos("", (int) '#', 1); helpFormatter34.defaultWidth = (byte) 10; java.lang.String str41 = helpFormatter34.getNewLine(); helpFormatter34.defaultOptPrefix = " "; int int44 = helpFormatter34.defaultLeftPad; java.lang.String str45 = helpFormatter34.getSyntaxPrefix(); helpFormatter34.defaultLeftPad = (short) 0; int int48 = helpFormatter34.getWidth(); java.lang.StringBuffer stringBuffer49 = null; org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option53 = options51.getOption(" "); java.util.List list55 = options51.getMatchingOptions("hi!"); boolean boolean57 = options51.hasOption(" "); boolean boolean59 = options51.hasShortOption("usage: "); java.lang.StringBuffer stringBuffer62 = helpFormatter34.renderOptions(stringBuffer49, (int) (short) -1, options51, (int) '4', (int) '4'); boolean boolean64 = options51.hasOption("--"); helpFormatter0.printHelp((int) (byte) 100, "  ", "", options51, "hi!"); org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option70 = options68.getOption(" "); helpFormatter0.printHelp("hi!", options68, true); java.util.List list74 = options68.getMatchingOptions("[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(comparator28); org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1)); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\n" + "'", str41, "\n"); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "usage: " + "'", str45, "usage: "); org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10); org.junit.Assert.assertNull(option53); org.junit.Assert.assertNotNull(list55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNull(stringBuffer62); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNull(option70); org.junit.Assert.assertNotNull(list74); }
public void test573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test573"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.defaultNewLine = "[ Options: [ short {} ] [ long {} ]"; org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator23 = null; helpFormatter22.optionComparator = comparator23; org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options(); helpFormatter22.printHelp("--", options26); java.lang.String str29 = helpFormatter22.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); helpFormatter30.defaultDescPad = 10; org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option36 = options34.getOption(" "); java.util.List list38 = options34.getMatchingOptions("hi!"); helpFormatter30.printHelp("usage: ", options34, false); java.util.Comparator comparator41 = helpFormatter30.getOptionComparator(); helpFormatter22.setOptionComparator(comparator41); org.apache.commons.cli.HelpFormatter helpFormatter44 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator45 = null; helpFormatter44.optionComparator = comparator45; org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options(); helpFormatter44.printHelp("--", options48); helpFormatter22.printHelp("[ Options: [ short {} ] [ long {} ]", options48); java.lang.String str51 = options48.toString(); boolean boolean53 = options48.hasOption("[ Options: [ short {} ] [ long {} ]"); java.util.List list54 = options48.getRequiredOptions(); try { helpFormatter0.printHelp((int) (short) 10, "[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]", options48, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg"); org.junit.Assert.assertNull(option36); org.junit.Assert.assertNotNull(list38); org.junit.Assert.assertNotNull(comparator41); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(list54); }
public void test574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test574"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setLeftPadding((int) '#'); java.lang.String str10 = helpFormatter0.getOptPrefix(); helpFormatter0.setDescPadding(10); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); java.lang.String str20 = helpFormatter15.defaultArgName; helpFormatter15.defaultOptPrefix = ""; org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator26 = null; helpFormatter25.optionComparator = comparator26; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); helpFormatter25.printHelp("--", options29); java.lang.String str32 = helpFormatter25.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter33 = new org.apache.commons.cli.HelpFormatter(); helpFormatter33.defaultDescPad = 10; org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option39 = options37.getOption(" "); java.util.List list41 = options37.getMatchingOptions("hi!"); helpFormatter33.printHelp("usage: ", options37, false); java.util.Comparator comparator44 = helpFormatter33.getOptionComparator(); helpFormatter25.setOptionComparator(comparator44); org.apache.commons.cli.HelpFormatter helpFormatter47 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator48 = null; helpFormatter47.optionComparator = comparator48; org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); helpFormatter47.printHelp("--", options51); helpFormatter25.printHelp("[ Options: [ short {} ] [ long {} ]", options51); java.util.Collection collection54 = options51.getOptionGroups(); helpFormatter15.printHelp("--", "", options51, "                                                 "); try { helpFormatter0.printHelp("", "usage:", options51, "[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]", true); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg"); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg"); org.junit.Assert.assertNull(option39); org.junit.Assert.assertNotNull(list41); org.junit.Assert.assertNotNull(comparator44); org.junit.Assert.assertNotNull(collection54); }
public void test575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test575"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator10 = null; helpFormatter9.optionComparator = comparator10; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); helpFormatter9.printHelp("--", options13); java.lang.String str16 = helpFormatter9.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); java.util.Comparator comparator28 = helpFormatter17.getOptionComparator(); helpFormatter9.setOptionComparator(comparator28); helpFormatter0.optionComparator = comparator28; helpFormatter0.setNewLine("usage:"); int int36 = helpFormatter0.findWrapPos("", 3, 74); org.apache.commons.cli.HelpFormatter helpFormatter37 = new org.apache.commons.cli.HelpFormatter(); int int41 = helpFormatter37.findWrapPos("", (int) '#', 1); java.lang.String str42 = helpFormatter37.defaultArgName; helpFormatter37.defaultOptPrefix = ""; helpFormatter37.defaultNewLine = "usage:"; int int50 = helpFormatter37.findWrapPos("arg", (-1), 10); org.apache.commons.cli.HelpFormatter helpFormatter51 = new org.apache.commons.cli.HelpFormatter(); int int55 = helpFormatter51.findWrapPos("", (int) '#', 1); int int56 = helpFormatter51.defaultLeftPad; int int57 = helpFormatter51.getLeftPadding(); helpFormatter51.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator60 = helpFormatter51.getOptionComparator(); helpFormatter37.setOptionComparator(comparator60); helpFormatter0.setOptionComparator(comparator60); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(comparator28); org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1)); org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1)); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg"); org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1)); org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1)); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1); org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1); org.junit.Assert.assertNotNull(comparator60); }
public void test576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test576"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); int int27 = helpFormatter0.defaultLeftPad; java.io.PrintWriter printWriter28 = null; try { helpFormatter0.printWrapped(printWriter28, (int) ' ', (int) '#', ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1); }
public void test577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test577"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setWidth(0); org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); boolean boolean20 = options14.hasOption(" "); java.util.List list21 = options14.getRequiredOptions(); java.util.List list22 = options14.helpOptions(); boolean boolean24 = options14.hasOption("-"); org.apache.commons.cli.Option option26 = options14.getOption("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.apache.commons.cli.Option option28 = options14.getOption("arg"); try { helpFormatter0.printHelp((int) (byte) 0, "", "hi!", options14, "[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNull(option26); org.junit.Assert.assertNull(option28); }
public void test578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test578"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getArgName(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); }
public void test579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test579"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); java.lang.String str8 = helpFormatter0.getLongOptSeparator(); int int9 = helpFormatter0.getDescPadding(); java.lang.String str10 = helpFormatter0.defaultArgName; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); }
public void test580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test580"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultArgName; java.lang.String str2 = helpFormatter0.defaultArgName; org.junit.Assert.assertEquals("'" + str1 + "' != '" + "arg" + "'", str1, "arg"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); }
public void test581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test581"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; java.lang.String str7 = helpFormatter0.getLongOptSeparator(); int int8 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultSyntaxPrefix = "-"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test582"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setLongOptPrefix("usage:"); int int13 = helpFormatter0.findWrapPos("                                                  ", (int) (short) -1, (int) (byte) 0); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1)); }
public void test583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test583"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str11 = helpFormatter0.rtrim("usage: "); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option18 = options16.getOption(" "); java.util.List list20 = options16.getMatchingOptions("hi!"); boolean boolean22 = options16.hasOption(" "); java.util.List list23 = options16.getRequiredOptions(); java.lang.String str24 = options16.toString(); java.util.List list25 = options16.helpOptions(); helpFormatter0.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options16, "usage: "); boolean boolean29 = options16.hasShortOption("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); boolean boolean31 = options16.hasLongOption("[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"); try { org.apache.commons.cli.Options options35 = options16.addOption("[ Options: [ short {} ] [ long {} ]", true, "                                     "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {} ] [ long {} ]' contains an illegal character : '['"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage:" + "'", str11, "usage:"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertNull(option18); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(list23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str24, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); }
public void test584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test584"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); java.util.Comparator comparator30 = null; helpFormatter0.optionComparator = comparator30; helpFormatter0.defaultLongOptPrefix = "--"; java.io.PrintWriter printWriter34 = null; org.apache.commons.cli.HelpFormatter helpFormatter37 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator38 = null; helpFormatter37.optionComparator = comparator38; org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options(); helpFormatter37.printHelp("--", options41); java.lang.String str44 = helpFormatter37.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter45 = new org.apache.commons.cli.HelpFormatter(); helpFormatter45.defaultDescPad = 10; org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option51 = options49.getOption(" "); java.util.List list53 = options49.getMatchingOptions("hi!"); helpFormatter45.printHelp("usage: ", options49, false); java.util.Comparator comparator56 = helpFormatter45.getOptionComparator(); helpFormatter37.setOptionComparator(comparator56); org.apache.commons.cli.HelpFormatter helpFormatter59 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator60 = null; helpFormatter59.optionComparator = comparator60; org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options(); helpFormatter59.printHelp("--", options63); helpFormatter37.printHelp("[ Options: [ short {} ] [ long {} ]", options63); java.lang.String str66 = options63.toString(); try { helpFormatter0.printUsage(printWriter34, 35, "", options63); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "arg" + "'", str44, "arg"); org.junit.Assert.assertNull(option51); org.junit.Assert.assertNotNull(list53); org.junit.Assert.assertNotNull(comparator56); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str66, "[ Options: [ short {} ] [ long {} ]"); }
public void test585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test585"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); helpFormatter0.printHelp("\n", options15); boolean boolean24 = options15.hasShortOption("[ Options: [ short {} ] [ long {} ]"); try { org.apache.commons.cli.Options options29 = options15.addOption("\n", "  ", false, "[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal option name '?'"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); }
public void test586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test586"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultNewLine = ""; int int15 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); }
public void test587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test587"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); java.lang.Class<?> wildcardClass6 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test588"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.Collection collection7 = options2.getOptions(); org.apache.commons.cli.Options options11 = options2.addOption("arg", false, ""); org.apache.commons.cli.Option option13 = options11.getOption("\n"); org.apache.commons.cli.Option option15 = options11.getOption("-"); boolean boolean17 = options11.hasShortOption("\n"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertNotNull(options11); org.junit.Assert.assertNull(option13); org.junit.Assert.assertNull(option15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test589"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = "  "; java.lang.String str3 = helpFormatter0.defaultArgName; helpFormatter0.setArgName("--"); org.apache.commons.cli.HelpFormatter helpFormatter7 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter7.findWrapPos("", (int) '#', 1); java.lang.String str12 = helpFormatter7.getSyntaxPrefix(); helpFormatter7.defaultNewLine = "usage: "; helpFormatter7.defaultArgName = "usage: "; java.lang.String str18 = helpFormatter7.rtrim("usage: "); java.lang.String str19 = helpFormatter7.defaultSyntaxPrefix; org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option25 = options23.getOption(" "); java.util.List list27 = options23.getMatchingOptions("hi!"); boolean boolean29 = options23.hasOption(" "); java.util.List list30 = options23.getRequiredOptions(); java.lang.String str31 = options23.toString(); java.util.List list32 = options23.helpOptions(); helpFormatter7.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options23, "usage: "); helpFormatter0.printHelp(" ", options23, true); java.lang.String str38 = helpFormatter0.rtrim("                          "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "usage:" + "'", str18, "usage:"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "usage: " + "'", str19, "usage: "); org.junit.Assert.assertNull(option25); org.junit.Assert.assertNotNull(list27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(list30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str31, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list32); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, ""); }
public void test590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test590"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); java.lang.String str20 = helpFormatter15.getSyntaxPrefix(); int int21 = helpFormatter15.defaultLeftPad; int int25 = helpFormatter15.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.util.Comparator comparator26 = helpFormatter15.optionComparator; helpFormatter0.setOptionComparator(comparator26); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "usage: " + "'", str20, "usage: "); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1)); org.junit.Assert.assertNotNull(comparator26); }
public void test591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test591"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; java.lang.String str10 = helpFormatter0.getNewLine(); helpFormatter0.setDescPadding((int) '4'); helpFormatter0.setLeftPadding((int) (short) 100); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n" + "'", str10, "\n"); }
public void test592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test592"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setDescPadding((int) (short) -1); java.lang.String str12 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setNewLine("                "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); }
public void test593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test593"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); helpFormatter0.setLeftPadding(74); int int10 = helpFormatter0.getWidth(); java.lang.String str11 = helpFormatter0.getOptPrefix(); java.lang.String str12 = helpFormatter0.getOptPrefix(); helpFormatter0.defaultNewLine = ""; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 74 + "'", int10 == 74); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); }
public void test594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test594"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; java.lang.String str7 = helpFormatter0.getLongOptSeparator(); int int8 = helpFormatter0.getWidth(); helpFormatter0.setDescPadding((int) 'a'); java.lang.String str11 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); }
public void test595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test595"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.HelpFormatter helpFormatter3 = new org.apache.commons.cli.HelpFormatter(); helpFormatter3.defaultArgName = "hi!"; java.lang.StringBuffer stringBuffer6 = null; org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option10 = options8.getOption(" "); java.util.Collection collection11 = options8.getOptions(); java.util.Collection collection12 = options8.getOptions(); java.lang.String str13 = options8.toString(); java.lang.String str14 = options8.toString(); java.lang.StringBuffer stringBuffer17 = helpFormatter3.renderOptions(stringBuffer6, (int) (short) 10, options8, (int) ' ', (int) (byte) 10); java.util.Comparator comparator18 = helpFormatter3.optionComparator; helpFormatter0.setOptionComparator(comparator18); java.io.PrintWriter printWriter20 = null; org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); int int28 = helpFormatter24.findWrapPos("", (int) '#', 1); java.lang.String str29 = helpFormatter24.getSyntaxPrefix(); helpFormatter24.defaultNewLine = "usage: "; helpFormatter24.defaultArgName = "usage: "; helpFormatter24.setWidth(10); int int36 = helpFormatter24.defaultDescPad; helpFormatter24.defaultArgName = "usage: "; org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options(); java.lang.String str41 = options40.toString(); org.apache.commons.cli.Option option43 = options40.getOption("arg"); java.util.List list44 = options40.helpOptions(); helpFormatter24.printHelp(" ", options40, false); boolean boolean48 = options40.hasOption("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); try { helpFormatter0.printHelp(printWriter20, (int) (short) 10, "  ", "                          ", options40, (int) '#', (int) '#', "[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertNotNull(collection12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str13, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str14, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(stringBuffer17); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1)); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "usage: " + "'", str29, "usage: "); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str41, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option43); org.junit.Assert.assertNotNull(list44); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); }
public void test596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test596"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.List list8 = options2.getMatchingOptions("-"); org.apache.commons.cli.Option option9 = null; try { org.apache.commons.cli.Options options10 = options2.addOption(option9); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(list8); }
public void test597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test597"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.List list6 = options2.getRequiredOptions(); java.util.Collection collection7 = options2.getOptionGroups(); org.apache.commons.cli.Option option9 = options2.getOption(""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertNull(option9); }
public void test598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test598"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.setWidth((int) '4'); helpFormatter0.setSyntaxPrefix("--"); java.util.Comparator comparator21 = helpFormatter0.optionComparator; int int25 = helpFormatter0.findWrapPos("  ", 100, (int) (byte) 10); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertNotNull(comparator21); org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1)); }
public void test599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test599"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setDescPadding((int) (short) 1); helpFormatter0.setLeftPadding((int) '#'); helpFormatter0.setWidth(3); helpFormatter0.defaultDescPad = 0; java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertNotNull(comparator9); }
public void test600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test600"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultSyntaxPrefix = "[ Options: [ short {} ] [ long {} ]"; java.lang.String str8 = helpFormatter0.defaultArgName; int int9 = helpFormatter0.defaultLeftPad; helpFormatter0.setLeftPadding((int) (byte) 10); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); }
public void test601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test601"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); java.lang.String str56 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultWidth = 74; java.lang.String str59 = helpFormatter0.defaultLongOptPrefix; java.io.PrintWriter printWriter60 = null; try { helpFormatter0.printWrapped(printWriter60, (int) '#', ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "--" + "'", str56, "--"); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "--" + "'", str59, "--"); }
public void test602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test602"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; helpFormatter0.setSyntaxPrefix(" "); helpFormatter0.setArgName("arg"); java.lang.String str16 = helpFormatter0.getOptPrefix(); helpFormatter0.setArgName(""); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-" + "'", str16, "-"); }
public void test603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test603"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultArgName = "hi!"; helpFormatter0.setDescPadding(1); }
public void test604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test604"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); int int15 = helpFormatter11.findWrapPos("", (int) '#', 1); helpFormatter11.defaultWidth = (byte) 10; java.lang.String str18 = helpFormatter11.getNewLine(); java.util.Comparator comparator19 = helpFormatter11.getOptionComparator(); java.util.Comparator comparator20 = helpFormatter11.getOptionComparator(); helpFormatter0.optionComparator = comparator20; org.apache.commons.cli.HelpFormatter helpFormatter23 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator24 = null; helpFormatter23.optionComparator = comparator24; org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); helpFormatter23.printHelp("--", options27); java.lang.String str30 = helpFormatter23.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter31 = new org.apache.commons.cli.HelpFormatter(); helpFormatter31.defaultDescPad = 10; org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option37 = options35.getOption(" "); java.util.List list39 = options35.getMatchingOptions("hi!"); helpFormatter31.printHelp("usage: ", options35, false); java.util.Comparator comparator42 = helpFormatter31.getOptionComparator(); helpFormatter23.setOptionComparator(comparator42); org.apache.commons.cli.HelpFormatter helpFormatter47 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator48 = null; helpFormatter47.optionComparator = comparator48; org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); helpFormatter47.printHelp("--", options51); java.lang.String str54 = helpFormatter47.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter55 = new org.apache.commons.cli.HelpFormatter(); helpFormatter55.defaultDescPad = 10; org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option61 = options59.getOption(" "); java.util.List list63 = options59.getMatchingOptions("hi!"); helpFormatter55.printHelp("usage: ", options59, false); java.util.Comparator comparator66 = helpFormatter55.getOptionComparator(); helpFormatter47.setOptionComparator(comparator66); org.apache.commons.cli.HelpFormatter helpFormatter69 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator70 = null; helpFormatter69.optionComparator = comparator70; org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options(); helpFormatter69.printHelp("--", options73); helpFormatter47.printHelp("[ Options: [ short {} ] [ long {} ]", options73); helpFormatter23.printHelp(100, "\n", "", options73, "\n", true); helpFormatter0.printHelp("  ", options73); int int80 = helpFormatter0.defaultWidth; java.util.Comparator comparator81 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n" + "'", str18, "\n"); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertNotNull(comparator20); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg"); org.junit.Assert.assertNull(option37); org.junit.Assert.assertNotNull(list39); org.junit.Assert.assertNotNull(comparator42); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg"); org.junit.Assert.assertNull(option61); org.junit.Assert.assertNotNull(list63); org.junit.Assert.assertNotNull(comparator66); org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10); org.junit.Assert.assertNotNull(comparator81); }
public void test605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test605"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.setLongOptPrefix(""); }
public void test606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test606"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultArgName = " "; helpFormatter0.setArgName("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); helpFormatter0.defaultArgName = "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); }
public void test607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test607"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); int int14 = helpFormatter0.getDescPadding(); java.lang.String str15 = helpFormatter0.getLongOptSeparator(); java.lang.String str16 = helpFormatter0.getArgName(); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertEquals("'" + str15 + "' != '" + " " + "'", str15, " "); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); }
public void test608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test608"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); java.io.PrintWriter printWriter8 = null; try { helpFormatter0.printUsage(printWriter8, 74, "usage:"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); }
public void test609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test609"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); helpFormatter10.defaultDescPad = 10; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); helpFormatter10.printHelp("usage: ", options14, false); java.lang.String str21 = helpFormatter10.defaultOptPrefix; java.lang.String str22 = helpFormatter10.defaultLongOptPrefix; java.lang.String str23 = helpFormatter10.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); helpFormatter10.optionComparator = comparator43; helpFormatter0.setOptionComparator(comparator43); helpFormatter0.setNewLine("hi!"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-" + "'", str21, "-"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "--" + "'", str22, "--"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n"); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); }
public void test610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test610"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getArgName(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int12 = helpFormatter8.findWrapPos("", (int) '#', 1); helpFormatter8.defaultWidth = (byte) 10; java.lang.String str15 = helpFormatter8.getNewLine(); java.util.Comparator comparator16 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator16); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); helpFormatter18.defaultDescPad = 10; org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option24 = options22.getOption(" "); java.util.List list26 = options22.getMatchingOptions("hi!"); helpFormatter18.printHelp("usage: ", options22, false); java.lang.String str29 = helpFormatter18.defaultOptPrefix; java.lang.String str30 = helpFormatter18.getNewLine(); java.lang.String str31 = helpFormatter18.getSyntaxPrefix(); helpFormatter18.setDescPadding((int) '#'); helpFormatter18.defaultSyntaxPrefix = "usage: "; helpFormatter18.setArgName(""); helpFormatter18.defaultSyntaxPrefix = ""; java.util.Comparator comparator40 = helpFormatter18.getOptionComparator(); helpFormatter0.optionComparator = comparator40; helpFormatter0.setNewLine("\n"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\n" + "'", str15, "\n"); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertNull(option24); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-" + "'", str29, "-"); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\n" + "'", str30, "\n"); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "usage: " + "'", str31, "usage: "); org.junit.Assert.assertNotNull(comparator40); }
public void test611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test611"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); int int18 = helpFormatter0.findWrapPos("                                                 ", (int) (short) 0, (int) '4'); java.lang.String str19 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setNewLine(" "); java.lang.String str23 = helpFormatter0.rtrim("-"); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); int int29 = helpFormatter25.findWrapPos("", (int) '#', 1); helpFormatter25.defaultWidth = (byte) 10; java.lang.String str32 = helpFormatter25.getNewLine(); java.util.Comparator comparator33 = helpFormatter25.getOptionComparator(); org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option37 = options35.getOption(" "); java.util.List list39 = options35.getMatchingOptions("hi!"); boolean boolean41 = options35.hasShortOption("arg"); helpFormatter25.printHelp("arg", options35); java.util.List list44 = options35.getMatchingOptions("usage: "); helpFormatter0.printHelp("usage:", options35); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "--" + "'", str19, "--"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-" + "'", str23, "-"); org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1)); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\n" + "'", str32, "\n"); org.junit.Assert.assertNotNull(comparator33); org.junit.Assert.assertNull(option37); org.junit.Assert.assertNotNull(list39); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(list44); }
public void test612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test612"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); helpFormatter0.setLeftPadding(74); int int10 = helpFormatter0.getWidth(); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); int int15 = helpFormatter11.findWrapPos("", (int) '#', 1); helpFormatter11.defaultWidth = (byte) 10; java.lang.String str18 = helpFormatter11.getNewLine(); helpFormatter11.defaultOptPrefix = " "; int int21 = helpFormatter11.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); int int26 = helpFormatter22.findWrapPos("", (int) '#', 1); helpFormatter22.defaultWidth = (byte) 10; java.lang.String str29 = helpFormatter22.getNewLine(); java.util.Comparator comparator30 = helpFormatter22.getOptionComparator(); java.util.Comparator comparator31 = helpFormatter22.getOptionComparator(); helpFormatter11.optionComparator = comparator31; helpFormatter0.setOptionComparator(comparator31); java.lang.String str34 = helpFormatter0.defaultOptPrefix; helpFormatter0.defaultNewLine = "-"; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 74 + "'", int10 == 74); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n" + "'", str18, "\n"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1)); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\n" + "'", str29, "\n"); org.junit.Assert.assertNotNull(comparator30); org.junit.Assert.assertNotNull(comparator31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-" + "'", str34, "-"); }
public void test613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test613"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; java.lang.String str18 = helpFormatter0.getArgName(); helpFormatter0.setOptPrefix("usage:"); helpFormatter0.defaultOptPrefix = "                                     "; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "arg" + "'", str18, "arg"); }
public void test614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test614"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str11 = helpFormatter0.rtrim("usage: "); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultWidth = (byte) -1; org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); java.lang.String str21 = options20.toString(); helpFormatter18.printHelp("-", options20, true); helpFormatter0.printHelp((int) (byte) 10, "[ Options: [ short {} ] [ long {} ]", "usage: ", options20, "\n", true); org.apache.commons.cli.Option option28 = options20.getOption("usage: "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage:" + "'", str11, "usage:"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str21, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option28); }
public void test615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test615"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getLongOptSeparator(); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); java.lang.String str16 = helpFormatter0.rtrim(""); java.lang.StringBuffer stringBuffer17 = null; org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option21 = options19.getOption(" "); java.util.List list23 = options19.getMatchingOptions("hi!"); boolean boolean25 = options19.hasOption(" "); java.util.List list26 = options19.getRequiredOptions(); java.util.List list27 = options19.helpOptions(); boolean boolean29 = options19.hasOption("hi!"); org.apache.commons.cli.Options options33 = options19.addOption("arg", true, "--"); try { java.lang.StringBuffer stringBuffer36 = helpFormatter0.renderOptions(stringBuffer17, (int) (short) -1, options19, (int) (short) 100, (int) (byte) 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNull(option21); org.junit.Assert.assertNotNull(list23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertNotNull(list27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(options33); }
public void test616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test616"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.setLeftPadding((int) (byte) -1); java.lang.String str22 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.HelpFormatter helpFormatter26 = new org.apache.commons.cli.HelpFormatter(); int int30 = helpFormatter26.findWrapPos("", (int) '#', 1); java.lang.String str31 = helpFormatter26.getSyntaxPrefix(); helpFormatter26.defaultNewLine = "usage: "; helpFormatter26.defaultArgName = "usage: "; java.lang.String str37 = helpFormatter26.rtrim("usage: "); java.lang.String str38 = helpFormatter26.defaultSyntaxPrefix; org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option44 = options42.getOption(" "); java.util.List list46 = options42.getMatchingOptions("hi!"); boolean boolean48 = options42.hasOption(" "); java.util.List list49 = options42.getRequiredOptions(); java.lang.String str50 = options42.toString(); java.util.List list51 = options42.helpOptions(); helpFormatter26.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options42, "usage: "); boolean boolean55 = options42.hasShortOption("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); try { helpFormatter0.printHelp((int) ' ', "                          ", "                                                 ", options42, "", false); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "usage: " + "'", str22, "usage: "); org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1)); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "usage: " + "'", str31, "usage: "); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "usage:" + "'", str37, "usage:"); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "usage: " + "'", str38, "usage: "); org.junit.Assert.assertNull(option44); org.junit.Assert.assertNotNull(list46); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(list49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str50, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list51); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); }
public void test617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test617"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultOptPrefix = "usage:"; java.lang.StringBuffer stringBuffer12 = null; org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator15 = null; helpFormatter14.optionComparator = comparator15; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); helpFormatter14.printHelp("--", options18); helpFormatter14.setOptPrefix("usage:"); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); java.lang.String str28 = options27.toString(); helpFormatter25.printHelp("-", options27, true); java.util.List list31 = options27.getRequiredOptions(); helpFormatter14.printHelp((int) (byte) 100, "usage: ", "--", options27, "-"); boolean boolean35 = options27.hasOption("usage:"); java.lang.StringBuffer stringBuffer38 = helpFormatter0.renderOptions(stringBuffer12, 3, options27, (int) (byte) 100, (int) (byte) 1); helpFormatter0.defaultSyntaxPrefix = ""; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list31); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNull(stringBuffer38); }
public void test618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test618"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; helpFormatter0.setSyntaxPrefix(" "); java.util.Comparator comparator14 = helpFormatter0.optionComparator; java.lang.String str15 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setOptPrefix("-"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + " " + "'", str15, " "); }
public void test619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test619"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.defaultSyntaxPrefix = "arg"; java.io.PrintWriter printWriter9 = null; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator14 = null; helpFormatter13.optionComparator = comparator14; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); helpFormatter13.printHelp("--", options17); java.lang.String str19 = helpFormatter13.getNewLine(); java.lang.String str20 = helpFormatter13.defaultSyntaxPrefix; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); java.lang.String str25 = options24.toString(); org.apache.commons.cli.Option option27 = options24.getOption("arg"); java.util.List list29 = options24.getMatchingOptions("hi!"); helpFormatter13.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "-", options24, " ", false); org.apache.commons.cli.Option option34 = options24.getOption(""); try { helpFormatter0.printHelp(printWriter9, 100, "", "", options24, 0, 74, "usage:", true); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n" + "'", str19, "\n"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "usage: " + "'", str20, "usage: "); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(list29); org.junit.Assert.assertNull(option34); }
public void test620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test620"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasLongOption("  "); java.util.List list29 = options17.helpOptions(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(list29); }
public void test621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test621"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultNewLine = ""; int int14 = helpFormatter0.getDescPadding(); helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.setLongOptSeparator(" "); java.lang.String str19 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultLeftPad = 0; java.lang.String str22 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertEquals("'" + str19 + "' != '" + " " + "'", str19, " "); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); }
public void test622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test622"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.HelpFormatter helpFormatter3 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator4 = null; helpFormatter3.optionComparator = comparator4; org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); helpFormatter3.printHelp("--", options7); java.lang.String str10 = helpFormatter3.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); java.util.Comparator comparator22 = helpFormatter11.getOptionComparator(); helpFormatter3.setOptionComparator(comparator22); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator26 = null; helpFormatter25.optionComparator = comparator26; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); helpFormatter25.printHelp("--", options29); helpFormatter3.printHelp("[ Options: [ short {} ] [ long {} ]", options29); java.lang.String str32 = options29.toString(); helpFormatter0.printHelp("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "", options29, "                                                 "); org.apache.commons.cli.HelpFormatter helpFormatter37 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator38 = null; helpFormatter37.optionComparator = comparator38; org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options(); helpFormatter37.printHelp("--", options41); helpFormatter37.setOptPrefix("usage:"); org.apache.commons.cli.HelpFormatter helpFormatter48 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); java.lang.String str51 = options50.toString(); helpFormatter48.printHelp("-", options50, true); java.util.List list54 = options50.getRequiredOptions(); helpFormatter37.printHelp((int) (byte) 100, "usage: ", "--", options50, "-"); java.util.List list57 = options50.getRequiredOptions(); helpFormatter0.printHelp("arg", "", options50, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", true); java.io.PrintWriter printWriter61 = null; org.apache.commons.cli.HelpFormatter helpFormatter63 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator64 = null; helpFormatter63.optionComparator = comparator64; org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options(); helpFormatter63.printHelp("--", options67); java.lang.String str70 = helpFormatter63.rtrim("arg"); java.lang.String str72 = helpFormatter63.rtrim("\n"); org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options(); java.lang.String str76 = options75.toString(); org.apache.commons.cli.Option option78 = options75.getOption("arg"); java.util.List list80 = options75.getMatchingOptions("hi!"); boolean boolean82 = options75.hasLongOption("-"); helpFormatter63.printHelp(" ", "\n", options75, "hi!"); try { helpFormatter0.printOptions(printWriter61, 0, options75, 0, (int) (byte) 10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str32, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list54); org.junit.Assert.assertNotNull(list57); org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg"); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, ""); org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str76, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option78); org.junit.Assert.assertNotNull(list80); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); }
public void test623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test623"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); int int14 = helpFormatter0.getDescPadding(); java.lang.String str15 = helpFormatter0.getLongOptSeparator(); java.lang.String str17 = helpFormatter0.createPadding(0); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertEquals("'" + str15 + "' != '" + " " + "'", str15, " "); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); }
public void test624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test624"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); helpFormatter0.setOptPrefix("usage: "); helpFormatter0.defaultWidth = 0; helpFormatter0.defaultOptPrefix = "usage: "; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); }
public void test625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test625"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setNewLine("usage: "); java.lang.String str11 = helpFormatter0.defaultArgName; java.io.PrintWriter printWriter12 = null; try { helpFormatter0.printWrapped(printWriter12, (int) '4', 0, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str11, "[ Options: [ short {} ] [ long {} ]"); }
public void test626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test626"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option12 = options10.getOption(" "); java.util.List list14 = options10.getMatchingOptions("hi!"); boolean boolean16 = options10.hasShortOption("arg"); helpFormatter0.printHelp("arg", options10); org.apache.commons.cli.Option option19 = options10.getOption(""); java.util.List list20 = options10.getRequiredOptions(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(list14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list20); }
public void test627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test627"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); int int16 = helpFormatter12.findWrapPos("", (int) '#', 1); helpFormatter12.defaultWidth = (byte) 10; java.lang.String str19 = helpFormatter12.getNewLine(); helpFormatter12.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter23 = new org.apache.commons.cli.HelpFormatter(); helpFormatter23.defaultDescPad = 10; org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option29 = options27.getOption(" "); java.util.List list31 = options27.getMatchingOptions("hi!"); helpFormatter23.printHelp("usage: ", options27, false); helpFormatter12.printHelp("\n", options27); boolean boolean36 = options27.hasShortOption("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.printHelp("usage:", "", options27, "                                                 "); helpFormatter0.setLongOptPrefix(""); int int41 = helpFormatter0.defaultDescPad; helpFormatter0.setDescPadding(100); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n" + "'", str19, "\n"); org.junit.Assert.assertNull(option29); org.junit.Assert.assertNotNull(list31); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3); }
public void test628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test628"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); helpFormatter0.defaultDescPad = 0; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); java.lang.String str19 = options18.toString(); org.apache.commons.cli.Option option21 = options18.getOption("arg"); boolean boolean23 = options18.hasLongOption("hi!"); helpFormatter0.printHelp("\n", "arg", options18, "usage: "); helpFormatter0.setNewLine("[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str19, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option21); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); }
public void test629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test629"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultLeftPad = (short) 0; java.lang.String str14 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "usage: " + "'", str14, "usage: "); }
public void test630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test630"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth(10); java.io.PrintWriter printWriter12 = null; try { helpFormatter0.printWrapped(printWriter12, (int) (byte) 0, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test631"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); helpFormatter0.setSyntaxPrefix("usage:"); helpFormatter0.defaultSyntaxPrefix = "--"; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); }
public void test632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test632"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); helpFormatter0.setOptPrefix("usage: "); helpFormatter0.setWidth((int) (short) 10); helpFormatter0.setWidth((int) (byte) -1); helpFormatter0.defaultLongOptPrefix = "[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]"; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); }
public void test633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test633"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); org.apache.commons.cli.HelpFormatter helpFormatter7 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter7.findWrapPos("", (int) '#', 1); helpFormatter7.defaultWidth = (byte) 10; java.lang.String str14 = helpFormatter7.getNewLine(); helpFormatter7.defaultOptPrefix = " "; int int17 = helpFormatter7.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); helpFormatter20.defaultDescPad = 10; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option26 = options24.getOption(" "); java.util.List list28 = options24.getMatchingOptions("hi!"); helpFormatter20.printHelp("usage: ", options24, false); java.util.Collection collection31 = options24.getOptionGroups(); helpFormatter7.printHelp("hi!", "", options24, "arg"); boolean boolean35 = options24.hasShortOption(" "); java.lang.String str36 = options24.toString(); helpFormatter0.printHelp("hi!", options24, true); java.lang.String str39 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); org.junit.Assert.assertNull(option26); org.junit.Assert.assertNotNull(list28); org.junit.Assert.assertNotNull(collection31); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str36, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "--" + "'", str39, "--"); }
public void test634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test634"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultArgName = ""; java.io.PrintWriter printWriter8 = null; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator13 = null; helpFormatter12.optionComparator = comparator13; org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); helpFormatter12.printHelp("--", options16); java.lang.String str19 = helpFormatter12.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); helpFormatter20.defaultDescPad = 10; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option26 = options24.getOption(" "); java.util.List list28 = options24.getMatchingOptions("hi!"); helpFormatter20.printHelp("usage: ", options24, false); java.util.Comparator comparator31 = helpFormatter20.getOptionComparator(); helpFormatter12.setOptionComparator(comparator31); org.apache.commons.cli.HelpFormatter helpFormatter34 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator35 = null; helpFormatter34.optionComparator = comparator35; org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options(); helpFormatter34.printHelp("--", options38); helpFormatter12.printHelp("[ Options: [ short {} ] [ long {} ]", options38); java.lang.String str41 = options38.toString(); boolean boolean43 = options38.hasOption("[ Options: [ short {} ] [ long {} ]"); boolean boolean45 = options38.hasLongOption("                                     "); try { helpFormatter0.printHelp(printWriter8, (int) (byte) 100, "[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]", "usage:", options38, (-2), 0, "                "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "arg" + "'", str19, "arg"); org.junit.Assert.assertNull(option26); org.junit.Assert.assertNotNull(list28); org.junit.Assert.assertNotNull(comparator31); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str41, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); }
public void test635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test635"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int14 = helpFormatter10.findWrapPos("", (int) '#', 1); java.lang.String str15 = helpFormatter10.defaultArgName; helpFormatter10.defaultOptPrefix = ""; org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator21 = null; helpFormatter20.optionComparator = comparator21; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); helpFormatter20.printHelp("--", options24); java.lang.String str27 = helpFormatter20.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter28 = new org.apache.commons.cli.HelpFormatter(); helpFormatter28.defaultDescPad = 10; org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option34 = options32.getOption(" "); java.util.List list36 = options32.getMatchingOptions("hi!"); helpFormatter28.printHelp("usage: ", options32, false); java.util.Comparator comparator39 = helpFormatter28.getOptionComparator(); helpFormatter20.setOptionComparator(comparator39); org.apache.commons.cli.HelpFormatter helpFormatter42 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator43 = null; helpFormatter42.optionComparator = comparator43; org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options(); helpFormatter42.printHelp("--", options46); helpFormatter20.printHelp("[ Options: [ short {} ] [ long {} ]", options46); java.util.Collection collection49 = options46.getOptionGroups(); helpFormatter10.printHelp("--", "", options46, "                                                 "); helpFormatter0.printHelp("usage:", "", options46, "-"); helpFormatter0.setLongOptPrefix("--"); helpFormatter0.setNewLine("-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg"); org.junit.Assert.assertNull(option34); org.junit.Assert.assertNotNull(list36); org.junit.Assert.assertNotNull(comparator39); org.junit.Assert.assertNotNull(collection49); }
public void test636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test636"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setNewLine("usage: "); int int11 = helpFormatter0.getWidth(); helpFormatter0.defaultOptPrefix = "[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); }
public void test637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test637"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setSyntaxPrefix("--"); helpFormatter0.defaultLeftPad = (short) 0; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); }
public void test638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test638"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); int int17 = helpFormatter13.findWrapPos("", (int) '#', 1); int int18 = helpFormatter13.defaultLeftPad; int int19 = helpFormatter13.getLeftPadding(); helpFormatter13.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator22 = helpFormatter13.getOptionComparator(); helpFormatter0.setOptionComparator(comparator22); helpFormatter0.defaultOptPrefix = "  "; java.lang.String str26 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "usage: " + "'", str26, "usage: "); }
public void test639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test639"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; java.lang.String str18 = helpFormatter0.getArgName(); helpFormatter0.defaultArgName = "                                                 "; int int21 = helpFormatter0.defaultWidth; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "arg" + "'", str18, "arg"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 74 + "'", int21 == 74); }
public void test640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test640"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.setWidth((int) '4'); java.lang.String str19 = helpFormatter0.getNewLine(); helpFormatter0.setOptPrefix("[ Options: [ short {} ] [ long {} ]"); java.io.PrintWriter printWriter22 = null; try { helpFormatter0.printUsage(printWriter22, 35, "                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n" + "'", str19, "\n"); }
public void test641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test641"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.List list6 = options2.getRequiredOptions(); java.util.Collection collection7 = options2.getOptionGroups(); boolean boolean9 = options2.hasLongOption("--"); java.util.List list11 = options2.getMatchingOptions(""); try { org.apache.commons.cli.Options options15 = options2.addOption("  ", false, "--"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '  ' contains an illegal character : ' '"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(list11); }
public void test642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test642"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = ""; helpFormatter0.setArgName("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); int int20 = helpFormatter16.findWrapPos("", (int) '#', 1); helpFormatter16.defaultWidth = (byte) 10; java.lang.String str23 = helpFormatter16.getNewLine(); java.util.Comparator comparator24 = helpFormatter16.optionComparator; helpFormatter0.setOptionComparator(comparator24); java.io.PrintWriter printWriter26 = null; org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); helpFormatter30.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter35 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); java.lang.String str38 = options37.toString(); helpFormatter35.printHelp("-", options37, true); helpFormatter30.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options37, "usage: ", true); helpFormatter30.defaultDescPad = 0; org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options(); java.lang.String str49 = options48.toString(); org.apache.commons.cli.Option option51 = options48.getOption("arg"); boolean boolean53 = options48.hasLongOption("hi!"); helpFormatter30.printHelp("\n", "arg", options48, "usage: "); try { helpFormatter0.printHelp(printWriter26, 100, "", "[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]", options48, 0, 100, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n"); org.junit.Assert.assertNotNull(comparator24); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str38, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); }
public void test643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test643"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setOptPrefix(""); helpFormatter0.setLeftPadding(10); int int13 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultDescPad = (short) -1; org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); int int21 = helpFormatter17.findWrapPos("", (int) '#', 1); helpFormatter17.defaultWidth = (byte) 10; java.lang.String str24 = helpFormatter17.getNewLine(); helpFormatter17.defaultOptPrefix = " "; int int27 = helpFormatter17.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); helpFormatter30.defaultDescPad = 10; org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option36 = options34.getOption(" "); java.util.List list38 = options34.getMatchingOptions("hi!"); helpFormatter30.printHelp("usage: ", options34, false); java.util.Collection collection41 = options34.getOptionGroups(); helpFormatter17.printHelp("hi!", "", options34, "arg"); boolean boolean45 = options34.hasShortOption(" "); java.lang.String str46 = options34.toString(); try { helpFormatter0.printHelp("[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]", options34); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\n" + "'", str24, "\n"); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1); org.junit.Assert.assertNull(option36); org.junit.Assert.assertNotNull(list38); org.junit.Assert.assertNotNull(collection41); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str46, "[ Options: [ short {} ] [ long {} ]"); }
public void test644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test644"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option11 = options9.getOption(" "); java.util.List list13 = options9.getMatchingOptions("hi!"); boolean boolean15 = options9.hasOption(" "); org.apache.commons.cli.Option option17 = options9.getOption("hi!"); helpFormatter0.printHelp((int) '4', "\n", "                                                 ", options9, "usage:"); java.lang.String str20 = options9.toString(); java.util.List list21 = options9.helpOptions(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option11); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNull(option17); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str20, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list21); }
public void test645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test645"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); helpFormatter0.setOptPrefix("usage: "); helpFormatter0.setWidth((int) (short) 10); java.lang.String str60 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setDescPadding((int) (short) 10); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertEquals("'" + str60 + "' != '" + " " + "'", str60, " "); }
public void test646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test646"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultArgName; java.lang.StringBuffer stringBuffer2 = null; org.apache.commons.cli.Options options4 = null; try { java.lang.StringBuffer stringBuffer7 = helpFormatter0.renderOptions(stringBuffer2, (int) ' ', options4, 3, (int) (byte) 10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "arg" + "'", str1, "arg"); }
public void test647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test647"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); int int16 = helpFormatter12.findWrapPos("", (int) '#', 1); helpFormatter12.defaultWidth = (byte) 10; java.lang.String str19 = helpFormatter12.getNewLine(); helpFormatter12.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter23 = new org.apache.commons.cli.HelpFormatter(); helpFormatter23.defaultDescPad = 10; org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option29 = options27.getOption(" "); java.util.List list31 = options27.getMatchingOptions("hi!"); helpFormatter23.printHelp("usage: ", options27, false); helpFormatter12.printHelp("\n", options27); boolean boolean36 = options27.hasShortOption("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.printHelp("usage:", "", options27, "                                                 "); int int39 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultArgName = "[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n" + "'", str19, "\n"); org.junit.Assert.assertNull(option29); org.junit.Assert.assertNotNull(list31); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1); }
public void test648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test648"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultDescPad = 0; helpFormatter0.defaultOptPrefix = "usage:"; java.lang.Class<?> wildcardClass10 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertNotNull(wildcardClass10); }
public void test649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test649"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); java.lang.String str17 = options16.toString(); helpFormatter14.printHelp("-", options16, true); org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option25 = options23.getOption(" "); java.util.List list27 = options23.getMatchingOptions("hi!"); boolean boolean29 = options23.hasOption(" "); org.apache.commons.cli.Option option31 = options23.getOption("hi!"); helpFormatter14.printHelp((int) '4', "\n", "                                                 ", options23, "usage:"); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options23); java.lang.Class<?> wildcardClass35 = helpFormatter0.getClass(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option25); org.junit.Assert.assertNotNull(list27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNull(option31); org.junit.Assert.assertNotNull(wildcardClass35); }
public void test650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test650"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.defaultArgName; helpFormatter0.setDescPadding((int) '#'); java.util.Comparator comparator16 = helpFormatter0.optionComparator; int int17 = helpFormatter0.defaultWidth; java.lang.String str19 = helpFormatter0.rtrim(" "); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg"); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74 + "'", int17 == 74); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); }
public void test651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test651"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setNewLine("usage: "); int int11 = helpFormatter0.getWidth(); helpFormatter0.setOptPrefix("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); java.io.PrintWriter printWriter14 = null; try { helpFormatter0.printWrapped(printWriter14, 3, "                          "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); }
public void test652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test652"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.util.Comparator comparator6 = helpFormatter0.optionComparator; org.junit.Assert.assertNull(comparator6); }
public void test653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test653"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = ""; helpFormatter0.setSyntaxPrefix(""); java.lang.String str17 = helpFormatter0.rtrim("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator18 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(comparator18); }
public void test654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test654"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.defaultNewLine = "[ Options: [ short {} ] [ long {} ]"; int int19 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3); }
public void test655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test655"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.setNewLine("-"); helpFormatter0.setLongOptSeparator(" "); }
public void test656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test656"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.defaultArgName; helpFormatter0.setDescPadding((int) '#'); java.util.Comparator comparator16 = helpFormatter0.optionComparator; int int17 = helpFormatter0.defaultWidth; helpFormatter0.defaultNewLine = "hi!"; java.lang.String str21 = helpFormatter0.rtrim(" "); java.lang.String str23 = helpFormatter0.rtrim("--"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg"); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74 + "'", int17 == 74); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, ""); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "--" + "'", str23, "--"); }
public void test657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test657"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); int int12 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("arg"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); }
public void test658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test658"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); int int18 = helpFormatter0.findWrapPos("                                                 ", (int) (short) 0, (int) '4'); helpFormatter0.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter23 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options(); java.lang.String str26 = options25.toString(); helpFormatter23.printHelp("-", options25, true); java.util.Collection collection29 = options25.getOptions(); java.util.List list31 = options25.getMatchingOptions("usage: "); helpFormatter0.printHelp("                          ", "                                                  ", options25, "hi!", true); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str26, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection29); org.junit.Assert.assertNotNull(list31); }
public void test659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test659"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); int int8 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test660"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); java.lang.String str22 = helpFormatter0.createPadding(3); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator26 = null; helpFormatter25.optionComparator = comparator26; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); helpFormatter25.printHelp("--", options29); java.lang.String str32 = helpFormatter25.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter33 = new org.apache.commons.cli.HelpFormatter(); helpFormatter33.defaultDescPad = 10; org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option39 = options37.getOption(" "); java.util.List list41 = options37.getMatchingOptions("hi!"); helpFormatter33.printHelp("usage: ", options37, false); java.util.Comparator comparator44 = helpFormatter33.getOptionComparator(); helpFormatter25.setOptionComparator(comparator44); org.apache.commons.cli.HelpFormatter helpFormatter47 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator48 = null; helpFormatter47.optionComparator = comparator48; org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); helpFormatter47.printHelp("--", options51); helpFormatter25.printHelp("[ Options: [ short {} ] [ long {} ]", options51); java.lang.String str54 = options51.toString(); helpFormatter0.printHelp("-", "-", options51, "-", false); helpFormatter0.setWidth((int) '4'); helpFormatter0.setArgName("usage:"); helpFormatter0.setSyntaxPrefix("[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "  " + "'", str22, "  "); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg"); org.junit.Assert.assertNull(option39); org.junit.Assert.assertNotNull(list41); org.junit.Assert.assertNotNull(comparator44); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str54, "[ Options: [ short {} ] [ long {} ]"); }
public void test661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test661"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getLongOptSeparator(); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); int int22 = helpFormatter18.findWrapPos("", (int) '#', 1); helpFormatter18.defaultWidth = (byte) 10; java.lang.String str25 = helpFormatter18.getNewLine(); helpFormatter18.defaultOptPrefix = " "; int int28 = helpFormatter18.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter31 = new org.apache.commons.cli.HelpFormatter(); helpFormatter31.defaultDescPad = 10; org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option37 = options35.getOption(" "); java.util.List list39 = options35.getMatchingOptions("hi!"); helpFormatter31.printHelp("usage: ", options35, false); java.util.Collection collection42 = options35.getOptionGroups(); helpFormatter18.printHelp("hi!", "", options35, "arg"); helpFormatter0.printHelp((int) (short) -1, "\n", " ", options35, "--"); try { org.apache.commons.cli.Options options51 = options35.addOption("                                     ", "                                     ", true, "                          "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '                                     ' contains an illegal character : ' '"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1)); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\n" + "'", str25, "\n"); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1); org.junit.Assert.assertNull(option37); org.junit.Assert.assertNotNull(list39); org.junit.Assert.assertNotNull(collection42); }
public void test662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test662"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); java.lang.String str20 = helpFormatter15.getSyntaxPrefix(); helpFormatter15.defaultNewLine = "usage: "; helpFormatter15.defaultArgName = "usage: "; java.lang.String str26 = helpFormatter15.rtrim("usage: "); java.lang.String str27 = helpFormatter15.defaultSyntaxPrefix; org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option33 = options31.getOption(" "); java.util.List list35 = options31.getMatchingOptions("hi!"); boolean boolean37 = options31.hasOption(" "); java.util.List list38 = options31.getRequiredOptions(); java.lang.String str39 = options31.toString(); java.util.List list40 = options31.helpOptions(); helpFormatter15.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options31, "usage: "); helpFormatter0.printHelp((-1), "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "hi!", options31, "--"); java.util.Collection collection45 = options31.getOptions(); java.util.List list47 = options31.getMatchingOptions(" "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "usage: " + "'", str20, "usage: "); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "usage:" + "'", str26, "usage:"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "usage: " + "'", str27, "usage: "); org.junit.Assert.assertNull(option33); org.junit.Assert.assertNotNull(list35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(list38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str39, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(collection45); org.junit.Assert.assertNotNull(list47); }
public void test663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test663"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); helpFormatter0.defaultLeftPad = (byte) 10; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); }
public void test664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test664"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); int int8 = helpFormatter0.defaultLeftPad; java.lang.String str10 = helpFormatter0.rtrim("[ Options: [ short {} ] [ long {} ]"); int int11 = helpFormatter0.getLeftPadding(); int int12 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); }
public void test665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test665"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; helpFormatter0.defaultNewLine = "  "; org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option8 = options6.getOption(" "); java.util.List list10 = options6.getMatchingOptions("hi!"); boolean boolean12 = options6.hasShortOption("arg"); java.lang.String str13 = options6.toString(); helpFormatter0.printHelp("usage:", options6, true); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); int int22 = helpFormatter18.findWrapPos("", (int) '#', 1); java.lang.String str23 = helpFormatter18.defaultArgName; helpFormatter18.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter28 = new org.apache.commons.cli.HelpFormatter(); int int32 = helpFormatter28.findWrapPos("", (int) '#', 1); java.lang.String str33 = helpFormatter28.defaultArgName; helpFormatter28.defaultOptPrefix = ""; org.apache.commons.cli.HelpFormatter helpFormatter38 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator39 = null; helpFormatter38.optionComparator = comparator39; org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options(); helpFormatter38.printHelp("--", options42); java.lang.String str45 = helpFormatter38.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); helpFormatter46.defaultDescPad = 10; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option52 = options50.getOption(" "); java.util.List list54 = options50.getMatchingOptions("hi!"); helpFormatter46.printHelp("usage: ", options50, false); java.util.Comparator comparator57 = helpFormatter46.getOptionComparator(); helpFormatter38.setOptionComparator(comparator57); org.apache.commons.cli.HelpFormatter helpFormatter60 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator61 = null; helpFormatter60.optionComparator = comparator61; org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options(); helpFormatter60.printHelp("--", options64); helpFormatter38.printHelp("[ Options: [ short {} ] [ long {} ]", options64); java.util.Collection collection67 = options64.getOptionGroups(); helpFormatter28.printHelp("--", "", options64, "                                                 "); helpFormatter18.printHelp("usage:", "", options64, "-"); helpFormatter0.printHelp("[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]", " ", options64, "usage: ", true); org.junit.Assert.assertNull(option8); org.junit.Assert.assertNotNull(list10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str13, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1)); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg"); org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1)); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "arg" + "'", str33, "arg"); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg"); org.junit.Assert.assertNull(option52); org.junit.Assert.assertNotNull(list54); org.junit.Assert.assertNotNull(comparator57); org.junit.Assert.assertNotNull(collection67); }
public void test666() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test666"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); helpFormatter0.setOptPrefix("usage:"); java.lang.String str8 = helpFormatter0.getLongOptSeparator(); int int9 = helpFormatter0.defaultWidth; int int10 = helpFormatter0.defaultDescPad; helpFormatter0.setNewLine(" "); helpFormatter0.defaultWidth = (byte) 0; org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 74 + "'", int9 == 74); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3); }
public void test667() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test667"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Collection collection11 = options4.getOptionGroups(); java.util.Collection collection12 = options4.getOptions(); boolean boolean14 = options4.hasLongOption("arg"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertNotNull(collection12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test668() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test668"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth(10); helpFormatter0.defaultWidth = 1; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test669() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test669"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); java.lang.String str10 = helpFormatter0.getArgName(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); }
public void test670() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test670"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = ""; java.io.PrintWriter printWriter14 = null; org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator18 = null; helpFormatter17.optionComparator = comparator18; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); helpFormatter17.printHelp("--", options21); java.lang.String str24 = helpFormatter17.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); helpFormatter25.defaultDescPad = 10; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option31 = options29.getOption(" "); java.util.List list33 = options29.getMatchingOptions("hi!"); helpFormatter25.printHelp("usage: ", options29, false); java.util.Comparator comparator36 = helpFormatter25.getOptionComparator(); helpFormatter17.setOptionComparator(comparator36); java.lang.String str39 = helpFormatter17.createPadding(3); org.apache.commons.cli.HelpFormatter helpFormatter42 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator43 = null; helpFormatter42.optionComparator = comparator43; org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options(); helpFormatter42.printHelp("--", options46); java.lang.String str49 = helpFormatter42.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter50 = new org.apache.commons.cli.HelpFormatter(); helpFormatter50.defaultDescPad = 10; org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option56 = options54.getOption(" "); java.util.List list58 = options54.getMatchingOptions("hi!"); helpFormatter50.printHelp("usage: ", options54, false); java.util.Comparator comparator61 = helpFormatter50.getOptionComparator(); helpFormatter42.setOptionComparator(comparator61); org.apache.commons.cli.HelpFormatter helpFormatter64 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator65 = null; helpFormatter64.optionComparator = comparator65; org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options(); helpFormatter64.printHelp("--", options68); helpFormatter42.printHelp("[ Options: [ short {} ] [ long {} ]", options68); java.lang.String str71 = options68.toString(); helpFormatter17.printHelp("-", "-", options68, "-", false); java.lang.StringBuffer stringBuffer75 = null; org.apache.commons.cli.HelpFormatter helpFormatter77 = new org.apache.commons.cli.HelpFormatter(); helpFormatter77.defaultNewLine = " "; int int80 = helpFormatter77.defaultLeftPad; org.apache.commons.cli.Options options83 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option85 = options83.getOption(" "); java.util.Collection collection86 = options83.getOptions(); java.util.Collection collection87 = options83.getOptions(); java.lang.String str88 = options83.toString(); java.lang.String str89 = options83.toString(); helpFormatter77.printHelp("                                                 ", "\n", options83, "usage: ", false); java.lang.StringBuffer stringBuffer95 = helpFormatter17.renderOptions(stringBuffer75, (int) (byte) 100, options83, (int) (byte) 10, (int) (byte) 1); try { helpFormatter0.printUsage(printWriter14, 10, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", options83); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "arg" + "'", str24, "arg"); org.junit.Assert.assertNull(option31); org.junit.Assert.assertNotNull(list33); org.junit.Assert.assertNotNull(comparator36); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "  " + "'", str39, "  "); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg"); org.junit.Assert.assertNull(option56); org.junit.Assert.assertNotNull(list58); org.junit.Assert.assertNotNull(comparator61); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1); org.junit.Assert.assertNull(option85); org.junit.Assert.assertNotNull(collection86); org.junit.Assert.assertNotNull(collection87); org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str88, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str89, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(stringBuffer95); }
public void test671() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test671"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); java.util.Comparator comparator23 = helpFormatter15.getOptionComparator(); java.lang.String str24 = helpFormatter15.defaultArgName; java.lang.String str25 = helpFormatter15.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter28 = new org.apache.commons.cli.HelpFormatter(); int int32 = helpFormatter28.findWrapPos("", (int) '#', 1); helpFormatter28.defaultWidth = (byte) 10; java.lang.String str35 = helpFormatter28.getArgName(); org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option39 = options37.getOption(" "); java.util.List list41 = options37.getMatchingOptions("hi!"); boolean boolean43 = options37.hasShortOption("arg"); helpFormatter28.printHelp("  ", options37); helpFormatter15.printHelp("-", "                                                 ", options37, "usage: ", false); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options37); org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); boolean boolean52 = options50.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.List list53 = options50.helpOptions(); helpFormatter0.printHelp("hi!", options50, false); int int56 = helpFormatter0.getDescPadding(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertNotNull(comparator23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "arg" + "'", str24, "arg"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\n" + "'", str25, "\n"); org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1)); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "arg" + "'", str35, "arg"); org.junit.Assert.assertNull(option39); org.junit.Assert.assertNotNull(list41); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(list53); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10); }
public void test672() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test672"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultLongOptPrefix = " "; org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); int int21 = helpFormatter17.findWrapPos("", (int) '#', 1); helpFormatter17.defaultWidth = (byte) 10; java.lang.String str24 = helpFormatter17.getNewLine(); helpFormatter17.defaultOptPrefix = " "; int int27 = helpFormatter17.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); helpFormatter30.defaultDescPad = 10; org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option36 = options34.getOption(" "); java.util.List list38 = options34.getMatchingOptions("hi!"); helpFormatter30.printHelp("usage: ", options34, false); java.util.Collection collection41 = options34.getOptionGroups(); helpFormatter17.printHelp("hi!", "", options34, "arg"); boolean boolean45 = options34.hasShortOption(" "); helpFormatter0.printHelp("\n", "-", options34, "", false); helpFormatter0.defaultLeftPad = 0; helpFormatter0.setNewLine("--"); java.lang.String str53 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\n" + "'", str24, "\n"); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1); org.junit.Assert.assertNull(option36); org.junit.Assert.assertNotNull(list38); org.junit.Assert.assertNotNull(collection41); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-" + "'", str53, "-"); }
public void test673() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test673"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); int int17 = helpFormatter13.findWrapPos("", (int) '#', 1); int int18 = helpFormatter13.defaultLeftPad; int int19 = helpFormatter13.getLeftPadding(); helpFormatter13.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator22 = helpFormatter13.getOptionComparator(); helpFormatter0.setOptionComparator(comparator22); helpFormatter0.defaultDescPad = (byte) 100; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertNotNull(comparator22); }
public void test674() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test674"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; java.lang.String str6 = helpFormatter0.getSyntaxPrefix(); int int7 = helpFormatter0.defaultLeftPad; java.lang.String str8 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n"); }
public void test675() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test675"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); java.lang.String str7 = helpFormatter0.getArgName(); helpFormatter0.setOptPrefix("  "); helpFormatter0.defaultDescPad = ' '; java.lang.StringBuffer stringBuffer12 = null; try { java.lang.StringBuffer stringBuffer16 = helpFormatter0.renderWrappedText(stringBuffer12, 74, (int) (byte) 0, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); }
public void test676() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test676"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); org.apache.commons.cli.HelpFormatter helpFormatter7 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); java.lang.String str10 = options9.toString(); helpFormatter7.printHelp("-", options9, true); java.util.List list13 = options9.getRequiredOptions(); java.util.Collection collection14 = options9.getOptionGroups(); java.lang.String str15 = options9.toString(); helpFormatter0.printHelp("arg", options9, true); org.apache.commons.cli.OptionGroup optionGroup18 = null; try { org.apache.commons.cli.Options options19 = options9.addOptionGroup(optionGroup18); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertNotNull(collection14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str15, "[ Options: [ short {} ] [ long {} ]"); }
public void test677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test677"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); java.util.Collection collection14 = options7.getOptionGroups(); boolean boolean16 = options7.hasLongOption("usage: "); org.apache.commons.cli.OptionGroup optionGroup17 = null; try { org.apache.commons.cli.Options options18 = options7.addOptionGroup(optionGroup17); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test678() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test678"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator10 = null; helpFormatter9.optionComparator = comparator10; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); helpFormatter9.printHelp("--", options13); java.lang.String str16 = helpFormatter9.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); java.util.Comparator comparator28 = helpFormatter17.getOptionComparator(); helpFormatter9.setOptionComparator(comparator28); helpFormatter0.optionComparator = comparator28; java.lang.String str31 = helpFormatter0.getOptPrefix(); java.lang.String str32 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(comparator28); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-" + "'", str31, "-"); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\n" + "'", str32, "\n"); }
public void test679() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test679"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setLongOptSeparator("hi!"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); }
public void test680() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test680"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); int int33 = helpFormatter0.findWrapPos("", (-1), (int) (short) 10); helpFormatter0.defaultWidth = (-1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1)); }
public void test681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test681"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasLongOption("  "); java.util.List list29 = options17.getRequiredOptions(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(list29); }
public void test682() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test682"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; int int3 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.Options options5 = null; try { helpFormatter0.printHelp("usage: ", options5); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test683() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test683"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultArgName = "hi!"; java.lang.StringBuffer stringBuffer3 = null; org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option7 = options5.getOption(" "); java.util.Collection collection8 = options5.getOptions(); java.util.Collection collection9 = options5.getOptions(); java.lang.String str10 = options5.toString(); java.lang.String str11 = options5.toString(); java.lang.StringBuffer stringBuffer14 = helpFormatter0.renderOptions(stringBuffer3, (int) (short) 10, options5, (int) ' ', (int) (byte) 10); helpFormatter0.setLeftPadding((int) (byte) -1); org.junit.Assert.assertNull(option7); org.junit.Assert.assertNotNull(collection8); org.junit.Assert.assertNotNull(collection9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str11, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(stringBuffer14); }
public void test684() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test684"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.lang.String str15 = helpFormatter0.rtrim("                                                 "); java.lang.String str16 = helpFormatter0.defaultNewLine; helpFormatter0.defaultSyntaxPrefix = " "; helpFormatter0.defaultLeftPad = 0; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); }
public void test685() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test685"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultSyntaxPrefix = "arg"; helpFormatter0.setArgName(" "); helpFormatter0.setOptPrefix("hi!"); helpFormatter0.setLongOptPrefix(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test686() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test686"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.optionComparator; org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator12 = null; helpFormatter11.optionComparator = comparator12; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); helpFormatter11.printHelp("--", options15); boolean boolean18 = options15.hasShortOption("                                                 "); helpFormatter0.printHelp("arg", "                                                  ", options15, "                                     "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test687() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test687"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.defaultSyntaxPrefix = ""; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter5.findWrapPos("", (int) '#', 1); helpFormatter5.defaultWidth = (byte) 10; java.lang.String str12 = helpFormatter5.getNewLine(); java.util.Comparator comparator13 = helpFormatter5.optionComparator; helpFormatter0.optionComparator = comparator13; java.lang.String str15 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertNotNull(comparator13); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-" + "'", str15, "-"); }
public void test688() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test688"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; java.lang.String str10 = helpFormatter0.getArgName(); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); helpFormatter0.setArgName(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertNotNull(comparator11); }
public void test689() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test689"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); org.apache.commons.cli.HelpFormatter helpFormatter27 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator28 = null; helpFormatter27.optionComparator = comparator28; org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options(); helpFormatter27.printHelp("--", options31); java.lang.String str34 = helpFormatter27.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter35 = new org.apache.commons.cli.HelpFormatter(); helpFormatter35.defaultDescPad = 10; org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option41 = options39.getOption(" "); java.util.List list43 = options39.getMatchingOptions("hi!"); helpFormatter35.printHelp("usage: ", options39, false); java.util.Comparator comparator46 = helpFormatter35.getOptionComparator(); helpFormatter27.setOptionComparator(comparator46); helpFormatter0.setOptionComparator(comparator46); java.util.Comparator comparator49 = helpFormatter0.optionComparator; int int50 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "arg" + "'", str34, "arg"); org.junit.Assert.assertNull(option41); org.junit.Assert.assertNotNull(list43); org.junit.Assert.assertNotNull(comparator46); org.junit.Assert.assertNotNull(comparator49); org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10); }
public void test690() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test690"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator10 = null; helpFormatter9.optionComparator = comparator10; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); helpFormatter9.printHelp("--", options13); java.lang.String str16 = helpFormatter9.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); java.util.Comparator comparator28 = helpFormatter17.getOptionComparator(); helpFormatter9.setOptionComparator(comparator28); helpFormatter0.optionComparator = comparator28; java.lang.String str31 = helpFormatter0.getOptPrefix(); java.lang.String str32 = helpFormatter0.getOptPrefix(); helpFormatter0.setNewLine("[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(comparator28); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-" + "'", str31, "-"); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-" + "'", str32, "-"); }
public void test691() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test691"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); java.util.Comparator comparator23 = helpFormatter15.getOptionComparator(); java.lang.String str24 = helpFormatter15.defaultArgName; java.lang.String str25 = helpFormatter15.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter28 = new org.apache.commons.cli.HelpFormatter(); int int32 = helpFormatter28.findWrapPos("", (int) '#', 1); helpFormatter28.defaultWidth = (byte) 10; java.lang.String str35 = helpFormatter28.getArgName(); org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option39 = options37.getOption(" "); java.util.List list41 = options37.getMatchingOptions("hi!"); boolean boolean43 = options37.hasShortOption("arg"); helpFormatter28.printHelp("  ", options37); helpFormatter15.printHelp("-", "                                                 ", options37, "usage: ", false); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options37); org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); boolean boolean52 = options50.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.List list53 = options50.helpOptions(); helpFormatter0.printHelp("hi!", options50, false); boolean boolean57 = options50.hasOption("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertNotNull(comparator23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "arg" + "'", str24, "arg"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\n" + "'", str25, "\n"); org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1)); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "arg" + "'", str35, "arg"); org.junit.Assert.assertNull(option39); org.junit.Assert.assertNotNull(list41); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(list53); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); }
public void test692() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test692"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option12 = options10.getOption(" "); java.util.Collection collection13 = options10.getOptions(); java.util.Collection collection14 = options10.getOptions(); java.lang.String str15 = options10.toString(); java.lang.String str16 = options10.toString(); helpFormatter0.printHelp("  ", "", options10, ""); java.io.PrintWriter printWriter19 = null; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); boolean boolean27 = options21.hasOption(" "); java.util.List list28 = options21.getRequiredOptions(); java.util.List list29 = options21.helpOptions(); java.util.Collection collection30 = options21.getOptionGroups(); java.util.List list32 = options21.getMatchingOptions("arg"); java.lang.String str33 = options21.toString(); org.apache.commons.cli.Option option35 = options21.getOption("--"); java.util.Collection collection36 = options21.getOptionGroups(); org.apache.commons.cli.Options options40 = options21.addOption("", true, "usage: "); try { helpFormatter0.printOptions(printWriter19, (int) (byte) -1, options40, 3, (int) '4'); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "usage: " + "'", str7, "usage: "); org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(collection13); org.junit.Assert.assertNotNull(collection14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str15, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str16, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(list28); org.junit.Assert.assertNotNull(list29); org.junit.Assert.assertNotNull(collection30); org.junit.Assert.assertNotNull(list32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str33, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option35); org.junit.Assert.assertNotNull(collection36); org.junit.Assert.assertNotNull(options40); }
public void test693() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test693"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(" "); java.lang.String str8 = helpFormatter0.defaultLongOptPrefix; java.util.Comparator comparator9 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertNotNull(comparator9); }
public void test694() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test694"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); helpFormatter0.setOptPrefix("usage:"); java.lang.String str8 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setWidth((int) (short) 10); int int11 = helpFormatter0.getLeftPadding(); java.lang.String str12 = helpFormatter0.defaultOptPrefix; try { java.lang.String str14 = helpFormatter0.createPadding((-1)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage:" + "'", str12, "usage:"); }
public void test695() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test695"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultNewLine = ""; int int14 = helpFormatter0.getDescPadding(); helpFormatter0.setLongOptPrefix(""); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator19 = null; helpFormatter18.optionComparator = comparator19; org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); helpFormatter18.printHelp("--", options22); helpFormatter18.setOptPrefix("usage:"); org.apache.commons.cli.HelpFormatter helpFormatter29 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options(); java.lang.String str32 = options31.toString(); helpFormatter29.printHelp("-", options31, true); java.util.List list35 = options31.getRequiredOptions(); helpFormatter18.printHelp((int) (byte) 100, "usage: ", "--", options31, "-"); helpFormatter0.printHelp("                                                 ", options31); boolean boolean40 = options31.hasShortOption("hi!"); java.lang.String str41 = options31.toString(); org.apache.commons.cli.Options options46 = options31.addOption("arg", "usage:", false, "                                                 "); java.util.Collection collection47 = options46.getOptions(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str32, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list35); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str41, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(options46); org.junit.Assert.assertNotNull(collection47); }
public void test696() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test696"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); helpFormatter5.defaultDescPad = 10; org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int12 = helpFormatter8.findWrapPos("", (int) '#', 1); java.lang.String str13 = helpFormatter8.getSyntaxPrefix(); int int14 = helpFormatter8.defaultLeftPad; int int18 = helpFormatter8.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.util.Comparator comparator19 = helpFormatter8.optionComparator; helpFormatter5.optionComparator = comparator19; helpFormatter0.optionComparator = comparator19; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.setSyntaxPrefix("hi!"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); org.junit.Assert.assertNotNull(comparator19); }
public void test697() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test697"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultOptPrefix = "usage:"; java.lang.String str12 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = "-"; org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); helpFormatter17.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter31 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options(); java.lang.String str34 = options33.toString(); helpFormatter31.printHelp("-", options33, true); org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option42 = options40.getOption(" "); java.util.List list44 = options40.getMatchingOptions("hi!"); boolean boolean46 = options40.hasOption(" "); org.apache.commons.cli.Option option48 = options40.getOption("hi!"); helpFormatter31.printHelp((int) '4', "\n", "                                                 ", options40, "usage:"); helpFormatter17.printHelp("[ Options: [ short {} ] [ long {} ]", options40); helpFormatter0.printHelp(" ", "[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]", options40, "-"); java.lang.String str54 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str34, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option42); org.junit.Assert.assertNotNull(list44); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNull(option48); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\n" + "'", str54, "\n"); }
public void test698() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test698"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); int int33 = helpFormatter0.findWrapPos("", (-1), (int) (short) 10); helpFormatter0.defaultLeftPad = ' '; int int39 = helpFormatter0.findWrapPos("\n", (int) (byte) -1, (int) '4'); java.lang.String str40 = helpFormatter0.defaultLongOptPrefix; int int44 = helpFormatter0.findWrapPos("                          ", (int) (byte) -1, 52); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1)); org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1)); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "--" + "'", str40, "--"); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 51 + "'", int44 == 51); }
public void test699() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test699"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(" "); java.lang.String str8 = helpFormatter0.defaultLongOptPrefix; java.lang.String str9 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); boolean boolean18 = options12.hasOption(" "); org.apache.commons.cli.Options options23 = options12.addOption("", " ", false, "  "); helpFormatter0.printHelp("arg", "  ", options12, "-"); org.apache.commons.cli.OptionGroup optionGroup26 = null; try { org.apache.commons.cli.Options options27 = options12.addOptionGroup(optionGroup26); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "--" + "'", str9, "--"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(options23); }
public void test700() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test700"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); helpFormatter0.setOptPrefix("arg"); int int16 = helpFormatter0.defaultLeftPad; java.io.PrintWriter printWriter17 = null; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); boolean boolean27 = options21.hasOption(" "); java.util.List list28 = options21.getRequiredOptions(); org.apache.commons.cli.Option option30 = options21.getOption("[ Options: [ short {} ] [ long {} ]"); try { helpFormatter0.printHelp(printWriter17, (int) (short) 10, "usage: ", "", options21, (-2), (int) (byte) 0, "                ", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(list28); org.junit.Assert.assertNull(option30); }
public void test701() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test701"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); org.apache.commons.cli.Option option56 = null; try { org.apache.commons.cli.OptionGroup optionGroup57 = options50.getOptionGroup(option56); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); }
public void test702() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test702"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); helpFormatter0.setOptPrefix("usage: "); java.lang.String str58 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter59 = new org.apache.commons.cli.HelpFormatter(); helpFormatter59.defaultNewLine = " "; org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options(); helpFormatter59.printHelp("arg", options63); org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option68 = options66.getOption(" "); java.util.Collection collection69 = options66.getOptions(); java.util.Collection collection70 = options66.getOptions(); java.lang.String str71 = options66.toString(); helpFormatter59.printHelp("--", options66); int int73 = helpFormatter59.getDescPadding(); org.apache.commons.cli.HelpFormatter helpFormatter74 = new org.apache.commons.cli.HelpFormatter(); int int78 = helpFormatter74.findWrapPos("", (int) '#', 1); helpFormatter74.defaultWidth = (byte) 10; java.lang.String str81 = helpFormatter74.getNewLine(); helpFormatter74.defaultOptPrefix = " "; int int84 = helpFormatter74.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter85 = new org.apache.commons.cli.HelpFormatter(); int int89 = helpFormatter85.findWrapPos("", (int) '#', 1); helpFormatter85.defaultWidth = (byte) 10; java.lang.String str92 = helpFormatter85.getNewLine(); java.util.Comparator comparator93 = helpFormatter85.getOptionComparator(); java.util.Comparator comparator94 = helpFormatter85.getOptionComparator(); helpFormatter74.optionComparator = comparator94; helpFormatter59.optionComparator = comparator94; helpFormatter0.setOptionComparator(comparator94); helpFormatter0.defaultDescPad = (short) 1; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertEquals("'" + str58 + "' != '" + "--" + "'", str58, "--"); org.junit.Assert.assertNull(option68); org.junit.Assert.assertNotNull(collection69); org.junit.Assert.assertNotNull(collection70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3); org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1)); org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\n" + "'", str81, "\n"); org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1); org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1)); org.junit.Assert.assertEquals("'" + str92 + "' != '" + "\n" + "'", str92, "\n"); org.junit.Assert.assertNotNull(comparator93); org.junit.Assert.assertNotNull(comparator94); }
public void test703() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test703"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasShortOption(" "); java.lang.String str29 = options17.toString(); java.util.List list30 = options17.helpOptions(); try { org.apache.commons.cli.Options options35 = options17.addOption("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "arg", true, "arg"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]' contains an illegal character : '['"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str29, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list30); }
public void test704() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test704"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator10 = null; helpFormatter9.optionComparator = comparator10; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); helpFormatter9.printHelp("--", options13); java.lang.String str16 = helpFormatter9.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); java.util.Comparator comparator28 = helpFormatter17.getOptionComparator(); helpFormatter9.setOptionComparator(comparator28); helpFormatter0.optionComparator = comparator28; org.apache.commons.cli.HelpFormatter helpFormatter34 = new org.apache.commons.cli.HelpFormatter(); int int38 = helpFormatter34.findWrapPos("", (int) '#', 1); helpFormatter34.defaultWidth = (byte) 10; java.lang.String str41 = helpFormatter34.getNewLine(); helpFormatter34.defaultOptPrefix = " "; int int44 = helpFormatter34.defaultLeftPad; java.lang.String str45 = helpFormatter34.getSyntaxPrefix(); helpFormatter34.defaultLeftPad = (short) 0; int int48 = helpFormatter34.getWidth(); java.lang.StringBuffer stringBuffer49 = null; org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option53 = options51.getOption(" "); java.util.List list55 = options51.getMatchingOptions("hi!"); boolean boolean57 = options51.hasOption(" "); boolean boolean59 = options51.hasShortOption("usage: "); java.lang.StringBuffer stringBuffer62 = helpFormatter34.renderOptions(stringBuffer49, (int) (short) -1, options51, (int) '4', (int) '4'); boolean boolean64 = options51.hasOption("--"); helpFormatter0.printHelp((int) (byte) 100, "  ", "", options51, "hi!"); try { org.apache.commons.cli.Options options70 = options51.addOption("                          ", true, ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '                          ' contains an illegal character : ' '"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(comparator28); org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1)); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\n" + "'", str41, "\n"); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "usage: " + "'", str45, "usage: "); org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10); org.junit.Assert.assertNull(option53); org.junit.Assert.assertNotNull(list55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNull(stringBuffer62); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); }
public void test705() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test705"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator23 = null; helpFormatter22.optionComparator = comparator23; org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options(); helpFormatter22.printHelp("--", options26); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options26); java.util.List list29 = options26.helpOptions(); boolean boolean31 = options26.hasOption("                                     "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertNotNull(list29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); }
public void test706() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test706"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); java.lang.String str12 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + " " + "'", str12, " "); }
public void test707() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test707"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option12 = options10.getOption(" "); java.util.List list14 = options10.getMatchingOptions("hi!"); boolean boolean16 = options10.hasShortOption("arg"); helpFormatter0.printHelp("arg", options10); boolean boolean19 = options10.hasShortOption("arg"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(list14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test708() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test708"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); helpFormatter0.setOptPrefix("usage:"); java.lang.String str8 = helpFormatter0.getLongOptSeparator(); int int9 = helpFormatter0.defaultWidth; int int10 = helpFormatter0.defaultDescPad; helpFormatter0.setNewLine(" "); helpFormatter0.setSyntaxPrefix("\n"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 74 + "'", int9 == 74); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3); }
public void test709() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test709"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = ""; java.lang.String str14 = helpFormatter0.getLongOptSeparator(); java.lang.String str15 = helpFormatter0.defaultSyntaxPrefix; java.lang.StringBuffer stringBuffer16 = null; org.apache.commons.cli.Options options18 = null; try { java.lang.StringBuffer stringBuffer21 = helpFormatter0.renderOptions(stringBuffer16, (int) '#', options18, 51, (int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + " " + "'", str14, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "usage: " + "'", str15, "usage: "); }
public void test710() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test710"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.lang.String str15 = helpFormatter0.rtrim("                                                 "); java.lang.String str16 = helpFormatter0.defaultNewLine; helpFormatter0.defaultSyntaxPrefix = " "; java.lang.String str19 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); }
public void test711() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test711"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10); }
public void test712() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test712"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.Collection collection7 = options2.getOptions(); boolean boolean9 = options2.hasShortOption("usage:"); boolean boolean11 = options2.hasShortOption("-"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test713() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test713"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option12 = options10.getOption(" "); java.util.List list14 = options10.getMatchingOptions("hi!"); boolean boolean16 = options10.hasShortOption("arg"); helpFormatter0.printHelp("arg", options10); org.apache.commons.cli.Option option19 = options10.getOption(""); java.util.List list21 = options10.getMatchingOptions(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(list14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); }
public void test714() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test714"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultNewLine = ""; int int14 = helpFormatter0.getDescPadding(); helpFormatter0.setLongOptPrefix(""); helpFormatter0.setWidth(0); java.lang.String str19 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "usage: " + "'", str19, "usage: "); }
public void test715() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test715"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultNewLine = "  "; java.lang.String str16 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "usage: " + "'", str16, "usage: "); }
public void test716() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test716"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setNewLine(" "); java.lang.String str10 = helpFormatter0.defaultLongOptPrefix; int int11 = helpFormatter0.getDescPadding(); int int12 = helpFormatter0.defaultDescPad; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--" + "'", str10, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test717() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test717"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultNewLine = ""; int int14 = helpFormatter0.getDescPadding(); helpFormatter0.setLongOptPrefix(""); helpFormatter0.setWidth(0); helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix("  "); java.lang.String str23 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setArgName(" "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertEquals("'" + str23 + "' != '" + " " + "'", str23, " "); }
public void test718() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test718"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; java.lang.StringBuffer stringBuffer8 = null; org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); boolean boolean12 = options10.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.Collection collection13 = options10.getOptions(); java.lang.StringBuffer stringBuffer16 = helpFormatter0.renderOptions(stringBuffer8, (int) '4', options10, 74, (int) (short) 10); java.lang.Class<?> wildcardClass17 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(collection13); org.junit.Assert.assertNull(stringBuffer16); org.junit.Assert.assertNotNull(wildcardClass17); }
public void test719() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test719"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option20 = options18.getOption(" "); java.util.List list22 = options18.getMatchingOptions("hi!"); boolean boolean24 = options18.hasOption(" "); java.util.List list25 = options18.getRequiredOptions(); java.util.List list26 = options18.helpOptions(); helpFormatter0.printHelp((int) (short) -1, "\n", "usage:", options18, "", true); helpFormatter0.defaultLeftPad = (short) 100; int int32 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultDescPad = (-1); int int35 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertNull(option20); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10); }
public void test720() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test720"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); helpFormatter0.setOptPrefix("usage: "); helpFormatter0.setWidth((int) (short) 10); helpFormatter0.setArgName("--"); org.apache.commons.cli.HelpFormatter helpFormatter65 = new org.apache.commons.cli.HelpFormatter(); int int69 = helpFormatter65.findWrapPos("", (int) '#', 1); helpFormatter65.defaultWidth = (byte) 10; java.lang.String str72 = helpFormatter65.getNewLine(); helpFormatter65.defaultOptPrefix = " "; int int75 = helpFormatter65.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter78 = new org.apache.commons.cli.HelpFormatter(); helpFormatter78.defaultDescPad = 10; org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option84 = options82.getOption(" "); java.util.List list86 = options82.getMatchingOptions("hi!"); helpFormatter78.printHelp("usage: ", options82, false); java.util.Collection collection89 = options82.getOptionGroups(); helpFormatter65.printHelp("hi!", "", options82, "arg"); helpFormatter0.printHelp(74, "  ", "--", options82, "arg", false); java.util.Collection collection95 = options82.getOptions(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1)); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\n" + "'", str72, "\n"); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1); org.junit.Assert.assertNull(option84); org.junit.Assert.assertNotNull(list86); org.junit.Assert.assertNotNull(collection89); org.junit.Assert.assertNotNull(collection95); }
public void test721() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test721"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; int int9 = helpFormatter0.findWrapPos("hi!", 0, 74); java.io.PrintWriter printWriter10 = null; try { helpFormatter0.printUsage(printWriter10, (int) '4', "usage:"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); }
public void test722() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test722"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.Collection collection7 = options2.getOptions(); org.apache.commons.cli.Options options11 = options2.addOption("arg", false, ""); org.apache.commons.cli.Option option13 = options11.getOption("\n"); org.apache.commons.cli.Option option15 = options11.getOption("-"); java.util.Collection collection16 = options11.getOptionGroups(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertNotNull(options11); org.junit.Assert.assertNull(option13); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(collection16); }
public void test723() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test723"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator23 = null; helpFormatter22.optionComparator = comparator23; org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options(); helpFormatter22.printHelp("--", options26); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options26); java.lang.String str29 = options26.toString(); boolean boolean31 = options26.hasOption("[ Options: [ short {} ] [ long {} ]"); boolean boolean33 = options26.hasLongOption("                                     "); org.apache.commons.cli.Options options38 = options26.addOption("", "hi!", false, "[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"); boolean boolean40 = options38.hasLongOption("  "); java.lang.String str41 = options38.toString(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str29, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(options38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option: hi! :: [ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ] ]} ] [ long {hi!=[ option: hi! :: [ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ] ]} ]" + "'", str41, "[ Options: [ short {=[ option: hi! :: [ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ] ]} ] [ long {hi!=[ option: hi! :: [ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ] ]} ]"); }
public void test724() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test724"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option20 = options18.getOption(" "); java.util.List list22 = options18.getMatchingOptions("hi!"); boolean boolean24 = options18.hasOption(" "); java.util.List list25 = options18.getRequiredOptions(); java.util.List list26 = options18.helpOptions(); helpFormatter0.printHelp((int) (short) -1, "\n", "usage:", options18, "", true); java.lang.String str30 = helpFormatter0.getNewLine(); helpFormatter0.setArgName("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); java.lang.String str33 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultWidth = (byte) 0; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertNull(option20); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\n" + "'", str30, "\n"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "usage: " + "'", str33, "usage: "); }
public void test725() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test725"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasShortOption(" "); java.lang.String str29 = options17.toString(); boolean boolean31 = options17.hasOption("hi!"); boolean boolean33 = options17.hasShortOption("[ Options: [ short {} ] [ long {} ]"); boolean boolean35 = options17.hasLongOption("usage: "); org.apache.commons.cli.Option option36 = null; try { org.apache.commons.cli.OptionGroup optionGroup37 = options17.getOptionGroup(option36); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str29, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); }
public void test726() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test726"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); helpFormatter15.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter26 = new org.apache.commons.cli.HelpFormatter(); helpFormatter26.defaultDescPad = 10; org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option32 = options30.getOption(" "); java.util.List list34 = options30.getMatchingOptions("hi!"); helpFormatter26.printHelp("usage: ", options30, false); helpFormatter15.printHelp("\n", options30); boolean boolean39 = options30.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.List list40 = options30.getRequiredOptions(); helpFormatter0.printHelp("                                                 ", options30, false); boolean boolean44 = options30.hasOption(" "); java.util.Collection collection45 = options30.getOptions(); boolean boolean47 = options30.hasOption("                                                 "); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertNull(option32); org.junit.Assert.assertNotNull(list34); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(collection45); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); }
public void test727() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test727"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator10 = helpFormatter0.optionComparator; java.lang.String str11 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n"); }
public void test728() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test728"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); helpFormatter0.setOptPrefix("usage:"); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); java.lang.String str14 = options13.toString(); helpFormatter11.printHelp("-", options13, true); java.util.List list17 = options13.getRequiredOptions(); helpFormatter0.printHelp((int) (byte) 100, "usage: ", "--", options13, "-"); java.lang.String str21 = helpFormatter0.rtrim(" "); java.util.Comparator comparator22 = helpFormatter0.optionComparator; java.lang.String str23 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultArgName = "[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]"; org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str14, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list17); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, ""); org.junit.Assert.assertNull(comparator22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "usage: " + "'", str23, "usage: "); }
public void test729() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test729"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultLeftPad = (-1); int int11 = helpFormatter0.getDescPadding(); java.lang.String str12 = helpFormatter0.getOptPrefix(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); }
public void test730() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test730"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; java.lang.String str7 = helpFormatter0.getLongOptSeparator(); java.lang.String str8 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "usage: " + "'", str8, "usage: "); }
public void test731() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test731"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); helpFormatter15.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter26 = new org.apache.commons.cli.HelpFormatter(); helpFormatter26.defaultDescPad = 10; org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option32 = options30.getOption(" "); java.util.List list34 = options30.getMatchingOptions("hi!"); helpFormatter26.printHelp("usage: ", options30, false); helpFormatter15.printHelp("\n", options30); boolean boolean39 = options30.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.List list40 = options30.getRequiredOptions(); helpFormatter0.printHelp("                                                 ", options30, false); boolean boolean44 = options30.hasOption(" "); java.lang.String str45 = options30.toString(); java.util.Collection collection46 = options30.getOptionGroups(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertNull(option32); org.junit.Assert.assertNotNull(list34); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str45, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection46); }
public void test732() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test732"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str11 = helpFormatter0.rtrim("usage: "); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option18 = options16.getOption(" "); java.util.List list20 = options16.getMatchingOptions("hi!"); boolean boolean22 = options16.hasOption(" "); java.util.List list23 = options16.getRequiredOptions(); java.lang.String str24 = options16.toString(); java.util.List list25 = options16.helpOptions(); helpFormatter0.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options16, "usage: "); java.lang.String str29 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setLongOptSeparator("arg"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage:" + "'", str11, "usage:"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertNull(option18); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(list23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str24, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                 " + "'", str29, "                                                 "); }
public void test733() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test733"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultLeftPad = (short) 0; java.lang.String str14 = helpFormatter0.defaultArgName; helpFormatter0.setLongOptSeparator(" "); helpFormatter0.defaultLeftPad = 10; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); }
public void test734() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test734"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); java.lang.String str9 = helpFormatter0.rtrim("\n"); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); helpFormatter10.defaultDescPad = 10; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); helpFormatter10.printHelp("usage: ", options14, false); java.lang.String str21 = helpFormatter10.defaultOptPrefix; helpFormatter10.setSyntaxPrefix(" "); helpFormatter10.setArgName("arg"); java.lang.String str26 = helpFormatter10.getOptPrefix(); java.util.Comparator comparator27 = helpFormatter10.getOptionComparator(); helpFormatter0.setOptionComparator(comparator27); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-" + "'", str21, "-"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-" + "'", str26, "-"); org.junit.Assert.assertNotNull(comparator27); }
public void test735() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test735"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultLeftPad = ' '; int int10 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3); }
public void test736() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test736"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultOptPrefix = "usage:"; java.lang.String str12 = helpFormatter0.defaultArgName; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); int int17 = helpFormatter13.findWrapPos("", (int) '#', 1); java.lang.String str18 = helpFormatter13.getSyntaxPrefix(); java.util.Comparator comparator19 = helpFormatter13.optionComparator; helpFormatter0.setOptionComparator(comparator19); int int21 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "usage: " + "'", str18, "usage: "); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 74 + "'", int21 == 74); }
public void test737() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test737"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); int int15 = helpFormatter11.findWrapPos("", (int) '#', 1); helpFormatter11.defaultWidth = (byte) 10; java.lang.String str18 = helpFormatter11.getNewLine(); java.util.Comparator comparator19 = helpFormatter11.getOptionComparator(); java.util.Comparator comparator20 = helpFormatter11.getOptionComparator(); helpFormatter0.optionComparator = comparator20; int int22 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n" + "'", str18, "\n"); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertNotNull(comparator20); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3); }
public void test738() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test738"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasShortOption(" "); java.lang.String str29 = options17.toString(); java.util.List list30 = options17.helpOptions(); java.util.Collection collection31 = options17.getOptions(); boolean boolean33 = options17.hasOption(" "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str29, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list30); org.junit.Assert.assertNotNull(collection31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); }
public void test739() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test739"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding((int) (short) 100); java.lang.String str11 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultOptPrefix = "[ Options: [ short {} ] [ long {} ]"; java.lang.String str14 = helpFormatter0.defaultSyntaxPrefix; int int15 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "usage: " + "'", str14, "usage: "); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); }
public void test740() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test740"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = "[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]"; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); }
public void test741() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test741"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setDescPadding((int) (short) 1); java.lang.String str3 = helpFormatter0.defaultArgName; int int4 = helpFormatter0.getDescPadding(); int int5 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); }
public void test742() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test742"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option12 = options10.getOption(" "); java.util.List list14 = options10.getMatchingOptions("hi!"); boolean boolean16 = options10.hasShortOption("arg"); helpFormatter0.printHelp("arg", options10); int int18 = helpFormatter0.defaultWidth; java.lang.StringBuffer stringBuffer19 = null; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); boolean boolean27 = options21.hasShortOption("arg"); java.lang.String str28 = options21.toString(); try { java.lang.StringBuffer stringBuffer31 = helpFormatter0.renderOptions(stringBuffer19, (int) '4', options21, 35, (-2)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(list14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]"); }
public void test743() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test743"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding((int) (short) 100); java.lang.String str11 = helpFormatter0.getLongOptSeparator(); java.util.Comparator comparator12 = helpFormatter0.optionComparator; int int13 = helpFormatter0.getDescPadding(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertNotNull(comparator12); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100); }
public void test744() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test744"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultSyntaxPrefix = "[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); }
public void test745() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test745"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); int int8 = helpFormatter0.defaultLeftPad; java.lang.String str10 = helpFormatter0.rtrim("[ Options: [ short {} ] [ long {} ]"); java.lang.String str11 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str13 = helpFormatter0.rtrim("-"); java.lang.StringBuffer stringBuffer14 = null; try { java.lang.StringBuffer stringBuffer18 = helpFormatter0.renderWrappedText(stringBuffer14, (int) (short) 1, (int) (byte) 1, "                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); }
public void test746() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test746"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); java.lang.String str56 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultWidth = 74; helpFormatter0.setLongOptPrefix("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator61 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "--" + "'", str56, "--"); org.junit.Assert.assertNotNull(comparator61); }
public void test747() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test747"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getWidth(); java.lang.String str2 = helpFormatter0.getNewLine(); org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); boolean boolean10 = options4.hasOption(" "); org.apache.commons.cli.Options options15 = options4.addOption("", " ", false, "  "); java.lang.String str16 = options4.toString(); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options4, false); boolean boolean20 = options4.hasLongOption("\n"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 74 + "'", int1 == 74); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(options15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]" + "'", str16, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test748() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test748"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setNewLine(" "); java.lang.String str10 = helpFormatter0.defaultLongOptPrefix; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); java.lang.String str12 = helpFormatter0.getArgName(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--" + "'", str10, "--"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); }
public void test749() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test749"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultNewLine = ""; int int14 = helpFormatter0.getDescPadding(); helpFormatter0.setLongOptPrefix(""); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator19 = null; helpFormatter18.optionComparator = comparator19; org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); helpFormatter18.printHelp("--", options22); helpFormatter18.setOptPrefix("usage:"); org.apache.commons.cli.HelpFormatter helpFormatter29 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options(); java.lang.String str32 = options31.toString(); helpFormatter29.printHelp("-", options31, true); java.util.List list35 = options31.getRequiredOptions(); helpFormatter18.printHelp((int) (byte) 100, "usage: ", "--", options31, "-"); helpFormatter0.printHelp("                                                 ", options31); org.apache.commons.cli.OptionGroup optionGroup39 = null; try { org.apache.commons.cli.Options options40 = options31.addOptionGroup(optionGroup39); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str32, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list35); }
public void test750() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test750"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setDescPadding((int) (short) 1); helpFormatter0.defaultOptPrefix = ""; }
public void test751() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test751"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = "  "; java.lang.String str3 = helpFormatter0.defaultArgName; int int4 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultSyntaxPrefix = "[ Options: [ short {} ] [ long {} ]"; org.apache.commons.cli.HelpFormatter helpFormatter7 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter7.findWrapPos("", (int) '#', 1); java.lang.String str12 = helpFormatter7.getSyntaxPrefix(); int int13 = helpFormatter7.defaultLeftPad; int int17 = helpFormatter7.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str18 = helpFormatter7.defaultArgName; helpFormatter7.defaultNewLine = ""; int int21 = helpFormatter7.getDescPadding(); helpFormatter7.setLongOptPrefix(""); java.util.Comparator comparator24 = helpFormatter7.getOptionComparator(); helpFormatter0.setOptionComparator(comparator24); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "arg" + "'", str18, "arg"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3); org.junit.Assert.assertNotNull(comparator24); }
public void test752() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test752"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.defaultNewLine = "  "; helpFormatter0.setLeftPadding((int) (byte) 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test753() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test753"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasShortOption(" "); java.lang.String str29 = options17.toString(); boolean boolean31 = options17.hasOption("hi!"); org.apache.commons.cli.Option option33 = options17.getOption(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str29, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNull(option33); }
public void test754() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test754"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = "  "; java.lang.String str3 = helpFormatter0.defaultArgName; helpFormatter0.defaultOptPrefix = "[ Options: [ short {} ] [ long {} ]"; java.util.Comparator comparator6 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertNotNull(comparator6); }
public void test755() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test755"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setOptPrefix(""); helpFormatter0.setLeftPadding(10); int int13 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultDescPad = (short) -1; java.io.PrintWriter printWriter16 = null; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); boolean boolean26 = options20.hasOption(" "); org.apache.commons.cli.Option option28 = options20.getOption("hi!"); java.util.Collection collection29 = options20.getOptions(); try { helpFormatter0.printHelp(printWriter16, (-2), "[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]", "", options20, 0, (int) '4', "-"); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNull(option28); org.junit.Assert.assertNotNull(collection29); }
public void test756() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test756"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator10 = null; helpFormatter9.optionComparator = comparator10; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); helpFormatter9.printHelp("--", options13); java.lang.String str16 = helpFormatter9.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); java.util.Comparator comparator28 = helpFormatter17.getOptionComparator(); helpFormatter9.setOptionComparator(comparator28); helpFormatter0.optionComparator = comparator28; helpFormatter0.setNewLine("usage:"); org.apache.commons.cli.HelpFormatter helpFormatter36 = new org.apache.commons.cli.HelpFormatter(); int int40 = helpFormatter36.findWrapPos("", (int) '#', 1); helpFormatter36.defaultWidth = (byte) 10; java.lang.String str43 = helpFormatter36.getNewLine(); helpFormatter36.defaultOptPrefix = " "; int int46 = helpFormatter36.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter49 = new org.apache.commons.cli.HelpFormatter(); helpFormatter49.defaultDescPad = 10; org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option55 = options53.getOption(" "); java.util.List list57 = options53.getMatchingOptions("hi!"); helpFormatter49.printHelp("usage: ", options53, false); java.util.Collection collection60 = options53.getOptionGroups(); helpFormatter36.printHelp("hi!", "", options53, "arg"); boolean boolean64 = options53.hasLongOption("  "); java.util.Collection collection65 = options53.getOptionGroups(); helpFormatter0.printHelp(3, "[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]", "", options53, "", true); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(comparator28); org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1)); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\n" + "'", str43, "\n"); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1); org.junit.Assert.assertNull(option55); org.junit.Assert.assertNotNull(list57); org.junit.Assert.assertNotNull(collection60); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(collection65); }
public void test757() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test757"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); java.lang.String str14 = helpFormatter0.getArgName(); helpFormatter0.defaultLongOptPrefix = ""; int int17 = helpFormatter0.getDescPadding(); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); int int22 = helpFormatter18.findWrapPos("", (int) '#', 1); java.lang.String str23 = helpFormatter18.getSyntaxPrefix(); java.util.Comparator comparator24 = helpFormatter18.optionComparator; helpFormatter0.optionComparator = comparator24; helpFormatter0.defaultNewLine = "                                                  "; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10); org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1)); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "usage: " + "'", str23, "usage: "); org.junit.Assert.assertNotNull(comparator24); }
public void test758() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test758"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); int int8 = helpFormatter0.defaultLeftPad; helpFormatter0.setLongOptPrefix("[ Options: [ short {=[ option: hi! :: [ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ] ]} ] [ long {hi!=[ option: hi! :: [ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ] ]} ]"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test759() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test759"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); helpFormatter0.defaultDescPad = 0; helpFormatter0.defaultSyntaxPrefix = "\n"; org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); }
public void test760() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test760"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasShortOption(" "); boolean boolean30 = options17.hasOption("-"); boolean boolean32 = options17.hasOption(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); }
public void test761() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test761"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); int int18 = helpFormatter14.findWrapPos("", (int) '#', 1); helpFormatter14.defaultWidth = (byte) 10; java.lang.String str21 = helpFormatter14.getNewLine(); java.util.Comparator comparator22 = helpFormatter14.getOptionComparator(); java.util.Comparator comparator23 = helpFormatter14.getOptionComparator(); helpFormatter0.optionComparator = comparator23; java.lang.String str25 = helpFormatter0.defaultArgName; helpFormatter0.setLongOptPrefix(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\n" + "'", str21, "\n"); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertNotNull(comparator23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg"); }
public void test762() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test762"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultOptPrefix = ""; helpFormatter0.defaultNewLine = "usage:"; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); helpFormatter10.defaultDescPad = 10; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); helpFormatter10.printHelp("usage: ", options14, false); java.lang.String str21 = helpFormatter10.defaultOptPrefix; java.lang.String str22 = helpFormatter10.getNewLine(); java.lang.String str23 = helpFormatter10.getSyntaxPrefix(); helpFormatter10.setDescPadding((int) '#'); helpFormatter10.defaultSyntaxPrefix = "usage: "; helpFormatter10.setArgName(""); helpFormatter10.defaultSyntaxPrefix = ""; java.util.Comparator comparator32 = helpFormatter10.getOptionComparator(); helpFormatter0.setOptionComparator(comparator32); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-" + "'", str21, "-"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "usage: " + "'", str23, "usage: "); org.junit.Assert.assertNotNull(comparator32); }
public void test763() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test763"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultOptPrefix = " "; int int11 = helpFormatter0.findWrapPos(" ", (int) (short) 100, (int) (byte) 0); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); }
public void test764() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test764"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultLeftPad = ' '; helpFormatter0.defaultLeftPad = 3; helpFormatter0.setLeftPadding(0); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test765() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test765"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(" "); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); java.lang.String str10 = options9.toString(); org.apache.commons.cli.Option option12 = options9.getOption("arg"); helpFormatter0.printHelp("usage:", options9); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); helpFormatter15.defaultOptPrefix = " "; int int25 = helpFormatter15.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter26 = new org.apache.commons.cli.HelpFormatter(); int int30 = helpFormatter26.findWrapPos("", (int) '#', 1); helpFormatter26.defaultWidth = (byte) 10; java.lang.String str33 = helpFormatter26.getNewLine(); java.util.Comparator comparator34 = helpFormatter26.getOptionComparator(); java.util.Comparator comparator35 = helpFormatter26.getOptionComparator(); helpFormatter15.optionComparator = comparator35; org.apache.commons.cli.HelpFormatter helpFormatter38 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator39 = null; helpFormatter38.optionComparator = comparator39; org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options(); helpFormatter38.printHelp("--", options42); java.lang.String str45 = helpFormatter38.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); helpFormatter46.defaultDescPad = 10; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option52 = options50.getOption(" "); java.util.List list54 = options50.getMatchingOptions("hi!"); helpFormatter46.printHelp("usage: ", options50, false); java.util.Comparator comparator57 = helpFormatter46.getOptionComparator(); helpFormatter38.setOptionComparator(comparator57); org.apache.commons.cli.HelpFormatter helpFormatter62 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator63 = null; helpFormatter62.optionComparator = comparator63; org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options(); helpFormatter62.printHelp("--", options66); java.lang.String str69 = helpFormatter62.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter70 = new org.apache.commons.cli.HelpFormatter(); helpFormatter70.defaultDescPad = 10; org.apache.commons.cli.Options options74 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option76 = options74.getOption(" "); java.util.List list78 = options74.getMatchingOptions("hi!"); helpFormatter70.printHelp("usage: ", options74, false); java.util.Comparator comparator81 = helpFormatter70.getOptionComparator(); helpFormatter62.setOptionComparator(comparator81); org.apache.commons.cli.HelpFormatter helpFormatter84 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator85 = null; helpFormatter84.optionComparator = comparator85; org.apache.commons.cli.Options options88 = new org.apache.commons.cli.Options(); helpFormatter84.printHelp("--", options88); helpFormatter62.printHelp("[ Options: [ short {} ] [ long {} ]", options88); helpFormatter38.printHelp(100, "\n", "", options88, "\n", true); helpFormatter15.printHelp("  ", options88); helpFormatter0.printHelp("                                                 ", options88, true); java.util.List list97 = options88.getRequiredOptions(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option12); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1); org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1)); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\n" + "'", str33, "\n"); org.junit.Assert.assertNotNull(comparator34); org.junit.Assert.assertNotNull(comparator35); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg"); org.junit.Assert.assertNull(option52); org.junit.Assert.assertNotNull(list54); org.junit.Assert.assertNotNull(comparator57); org.junit.Assert.assertEquals("'" + str69 + "' != '" + "arg" + "'", str69, "arg"); org.junit.Assert.assertNull(option76); org.junit.Assert.assertNotNull(list78); org.junit.Assert.assertNotNull(comparator81); org.junit.Assert.assertNotNull(list97); }
public void test766() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test766"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); helpFormatter0.setOptPrefix("usage:"); int int8 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); }
public void test767() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test767"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setLeftPadding((int) '#'); java.lang.String str10 = helpFormatter0.defaultArgName; java.lang.String str11 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultArgName = "[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"; org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options(); java.lang.String str20 = options19.toString(); helpFormatter17.printHelp("-", options19, true); java.util.Collection collection23 = options19.getOptions(); java.util.Collection collection24 = options19.getOptions(); org.apache.commons.cli.Options options28 = options19.addOption("arg", false, ""); java.lang.String str29 = options28.toString(); try { helpFormatter0.printHelp((-2), " ", "                                                 ", options28, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--" + "'", str11, "--"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str20, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection23); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertNotNull(options28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]" + "'", str29, "[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]"); }
public void test768() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test768"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); helpFormatter0.setOptPrefix("usage:"); helpFormatter0.defaultWidth = (short) -1; java.lang.String str10 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); }
public void test769() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test769"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; helpFormatter0.setSyntaxPrefix(" "); java.util.Comparator comparator14 = helpFormatter0.optionComparator; int int15 = helpFormatter0.getWidth(); helpFormatter0.defaultLeftPad = 100; java.io.PrintWriter printWriter18 = null; try { helpFormatter0.printWrapped(printWriter18, (int) (byte) 100, (int) '4', "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 74 + "'", int15 == 74); }
public void test770() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test770"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasShortOption(" "); java.lang.String str29 = options17.toString(); java.util.List list30 = options17.helpOptions(); java.util.Collection collection31 = options17.getOptions(); org.apache.commons.cli.Option option33 = options17.getOption("                                     "); try { org.apache.commons.cli.Options options38 = options17.addOption("[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]", "hi!", false, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]' contains an illegal character : '['"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str29, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list30); org.junit.Assert.assertNotNull(collection31); org.junit.Assert.assertNull(option33); }
public void test771() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test771"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); int int14 = helpFormatter0.getDescPadding(); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); helpFormatter18.defaultNewLine = " "; org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); helpFormatter18.printHelp("arg", options22); boolean boolean25 = options22.hasShortOption(""); helpFormatter0.printHelp((-1), "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "usage: ", options22, "-", false); java.lang.String str29 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "--" + "'", str29, "--"); }
public void test772() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test772"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); java.lang.String str22 = helpFormatter0.createPadding(3); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator26 = null; helpFormatter25.optionComparator = comparator26; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); helpFormatter25.printHelp("--", options29); java.lang.String str32 = helpFormatter25.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter33 = new org.apache.commons.cli.HelpFormatter(); helpFormatter33.defaultDescPad = 10; org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option39 = options37.getOption(" "); java.util.List list41 = options37.getMatchingOptions("hi!"); helpFormatter33.printHelp("usage: ", options37, false); java.util.Comparator comparator44 = helpFormatter33.getOptionComparator(); helpFormatter25.setOptionComparator(comparator44); org.apache.commons.cli.HelpFormatter helpFormatter47 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator48 = null; helpFormatter47.optionComparator = comparator48; org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); helpFormatter47.printHelp("--", options51); helpFormatter25.printHelp("[ Options: [ short {} ] [ long {} ]", options51); java.lang.String str54 = options51.toString(); helpFormatter0.printHelp("-", "-", options51, "-", false); helpFormatter0.setWidth((int) '4'); java.lang.String str60 = helpFormatter0.getNewLine(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "  " + "'", str22, "  "); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg"); org.junit.Assert.assertNull(option39); org.junit.Assert.assertNotNull(list41); org.junit.Assert.assertNotNull(comparator44); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str54, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\n" + "'", str60, "\n"); }
public void test773() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test773"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.HelpFormatter helpFormatter3 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator4 = null; helpFormatter3.optionComparator = comparator4; org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); helpFormatter3.printHelp("--", options7); java.lang.String str10 = helpFormatter3.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); java.util.Comparator comparator22 = helpFormatter11.getOptionComparator(); helpFormatter3.setOptionComparator(comparator22); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator26 = null; helpFormatter25.optionComparator = comparator26; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); helpFormatter25.printHelp("--", options29); helpFormatter3.printHelp("[ Options: [ short {} ] [ long {} ]", options29); java.lang.String str32 = options29.toString(); helpFormatter0.printHelp("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "", options29, "                                                 "); java.lang.Class<?> wildcardClass35 = options29.getClass(); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str32, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(wildcardClass35); }
public void test774() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test774"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultOptPrefix = "usage:"; java.lang.String str12 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = "-"; org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); helpFormatter17.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter31 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options(); java.lang.String str34 = options33.toString(); helpFormatter31.printHelp("-", options33, true); org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option42 = options40.getOption(" "); java.util.List list44 = options40.getMatchingOptions("hi!"); boolean boolean46 = options40.hasOption(" "); org.apache.commons.cli.Option option48 = options40.getOption("hi!"); helpFormatter31.printHelp((int) '4', "\n", "                                                 ", options40, "usage:"); helpFormatter17.printHelp("[ Options: [ short {} ] [ long {} ]", options40); helpFormatter0.printHelp(" ", "[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]", options40, "-"); org.apache.commons.cli.OptionGroup optionGroup54 = null; try { org.apache.commons.cli.Options options55 = options40.addOptionGroup(optionGroup54); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str34, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option42); org.junit.Assert.assertNotNull(list44); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNull(option48); }
public void test775() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test775"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); java.util.Comparator comparator30 = null; helpFormatter0.optionComparator = comparator30; helpFormatter0.setWidth(3); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); }
public void test776() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test776"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); helpFormatter0.setOptPrefix("arg"); int int16 = helpFormatter0.defaultLeftPad; helpFormatter0.setWidth(0); java.lang.String str19 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); org.junit.Assert.assertEquals("'" + str19 + "' != '" + " " + "'", str19, " "); }
public void test777() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test777"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); helpFormatter0.setLeftPadding(74); int int10 = helpFormatter0.getWidth(); java.lang.String str11 = helpFormatter0.getOptPrefix(); helpFormatter0.setArgName("[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 74 + "'", int10 == 74); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); }
public void test778() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test778"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultOptPrefix = ""; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator11 = null; helpFormatter10.optionComparator = comparator11; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); helpFormatter10.printHelp("--", options14); java.lang.String str17 = helpFormatter10.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); helpFormatter18.defaultDescPad = 10; org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option24 = options22.getOption(" "); java.util.List list26 = options22.getMatchingOptions("hi!"); helpFormatter18.printHelp("usage: ", options22, false); java.util.Comparator comparator29 = helpFormatter18.getOptionComparator(); helpFormatter10.setOptionComparator(comparator29); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator33 = null; helpFormatter32.optionComparator = comparator33; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); helpFormatter32.printHelp("--", options36); helpFormatter10.printHelp("[ Options: [ short {} ] [ long {} ]", options36); java.util.Collection collection39 = options36.getOptionGroups(); helpFormatter0.printHelp("--", "", options36, "                                                 "); org.apache.commons.cli.Option option42 = null; try { org.apache.commons.cli.OptionGroup optionGroup43 = options36.getOptionGroup(option42); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNull(option24); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertNotNull(comparator29); org.junit.Assert.assertNotNull(collection39); }
public void test779() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test779"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); java.lang.String str8 = helpFormatter0.getNewLine(); java.io.PrintWriter printWriter9 = null; org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option13 = options11.getOption(" "); java.util.List list15 = options11.getMatchingOptions("hi!"); boolean boolean17 = options11.hasOption(" "); org.apache.commons.cli.Options options22 = options11.addOption("", " ", false, "  "); try { helpFormatter0.printOptions(printWriter9, 10, options11, (int) (byte) 0, (int) ' '); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n"); org.junit.Assert.assertNull(option13); org.junit.Assert.assertNotNull(list15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(options22); }
public void test780() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test780"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option20 = options18.getOption(" "); java.util.List list22 = options18.getMatchingOptions("hi!"); boolean boolean24 = options18.hasOption(" "); java.util.List list25 = options18.getRequiredOptions(); java.util.List list26 = options18.helpOptions(); helpFormatter0.printHelp((int) (short) -1, "\n", "usage:", options18, "", true); java.util.Comparator comparator30 = helpFormatter0.optionComparator; java.lang.String str31 = helpFormatter0.getLongOptSeparator(); int int32 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertNull(option20); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertNotNull(comparator30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + " " + "'", str31, " "); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3); }
public void test781() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test781"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; helpFormatter0.setSyntaxPrefix(" "); helpFormatter0.setArgName("arg"); helpFormatter0.defaultNewLine = "hi!"; java.lang.String str18 = helpFormatter0.getArgName(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "arg" + "'", str18, "arg"); }
public void test782() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test782"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; java.lang.StringBuffer stringBuffer8 = null; org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); boolean boolean12 = options10.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.Collection collection13 = options10.getOptions(); java.lang.StringBuffer stringBuffer16 = helpFormatter0.renderOptions(stringBuffer8, (int) '4', options10, 74, (int) (short) 10); helpFormatter0.defaultOptPrefix = "\n"; helpFormatter0.setSyntaxPrefix("arg"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(collection13); org.junit.Assert.assertNull(stringBuffer16); }
public void test783() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test783"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultNewLine = "  "; java.lang.String str16 = helpFormatter0.defaultNewLine; helpFormatter0.setNewLine(" "); helpFormatter0.defaultLeftPad = 10; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "  " + "'", str16, "  "); }
public void test784() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test784"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setDescPadding((int) (short) 1); java.lang.String str3 = helpFormatter0.defaultArgName; helpFormatter0.setWidth((int) ' '); java.lang.String str7 = helpFormatter0.createPadding(35); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                  " + "'", str7, "                  "); }
public void test785() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test785"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option8 = options6.getOption(" "); java.util.List list10 = options6.getMatchingOptions("hi!"); boolean boolean12 = options6.hasOption(" "); java.util.List list13 = options6.getRequiredOptions(); java.util.List list14 = options6.helpOptions(); java.util.Collection collection15 = options6.getOptionGroups(); helpFormatter0.printHelp(10, "--", "--", options6, "[ Options: [ short {=[ option: hi! :: [ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ] ]} ] [ long {hi!=[ option: hi! :: [ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ] ]} ]", true); org.junit.Assert.assertNull(option8); org.junit.Assert.assertNotNull(list10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertNotNull(list14); org.junit.Assert.assertNotNull(collection15); }
public void test786() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test786"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setOptPrefix(""); helpFormatter0.setLeftPadding(10); helpFormatter0.defaultLongOptPrefix = "[ Options: [ short {} ] [ long {} ]"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test787() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test787"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setNewLine(" "); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); helpFormatter10.defaultDescPad = 10; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); helpFormatter10.printHelp("usage: ", options14, false); java.lang.String str21 = helpFormatter10.defaultOptPrefix; java.lang.String str22 = helpFormatter10.getNewLine(); java.lang.String str23 = helpFormatter10.defaultArgName; helpFormatter10.setDescPadding((int) '#'); java.util.Comparator comparator26 = helpFormatter10.optionComparator; helpFormatter0.setOptionComparator(comparator26); java.lang.String str28 = helpFormatter0.defaultOptPrefix; helpFormatter0.defaultLongOptPrefix = "                          "; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-" + "'", str21, "-"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg"); org.junit.Assert.assertNotNull(comparator26); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-" + "'", str28, "-"); }
public void test788() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test788"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setArgName(""); helpFormatter0.defaultSyntaxPrefix = ""; java.util.Comparator comparator22 = helpFormatter0.getOptionComparator(); helpFormatter0.setSyntaxPrefix("                  "); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertNotNull(comparator22); }
public void test789() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test789"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; helpFormatter0.setSyntaxPrefix(" "); java.util.Comparator comparator14 = helpFormatter0.optionComparator; java.lang.String str15 = helpFormatter0.defaultSyntaxPrefix; int int16 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + " " + "'", str15, " "); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); }
public void test790() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test790"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setNewLine("usage: "); java.lang.String str11 = helpFormatter0.defaultArgName; java.io.PrintWriter printWriter12 = null; try { helpFormatter0.printWrapped(printWriter12, (-2), 10, "--"); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str11, "[ Options: [ short {} ] [ long {} ]"); }
public void test791() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test791"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); helpFormatter15.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter26 = new org.apache.commons.cli.HelpFormatter(); helpFormatter26.defaultDescPad = 10; org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option32 = options30.getOption(" "); java.util.List list34 = options30.getMatchingOptions("hi!"); helpFormatter26.printHelp("usage: ", options30, false); helpFormatter15.printHelp("\n", options30); boolean boolean39 = options30.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.List list40 = options30.getRequiredOptions(); helpFormatter0.printHelp("                                                 ", options30, false); helpFormatter0.defaultWidth = '4'; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertNull(option32); org.junit.Assert.assertNotNull(list34); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(list40); }
public void test792() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test792"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setNewLine(" "); java.lang.String str10 = helpFormatter0.defaultLongOptPrefix; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); int int12 = helpFormatter0.defaultDescPad; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--" + "'", str10, "--"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test793() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test793"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); helpFormatter0.setNewLine("usage:"); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); helpFormatter15.defaultOptPrefix = " "; int int25 = helpFormatter15.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter28 = new org.apache.commons.cli.HelpFormatter(); helpFormatter28.defaultDescPad = 10; org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option34 = options32.getOption(" "); java.util.List list36 = options32.getMatchingOptions("hi!"); helpFormatter28.printHelp("usage: ", options32, false); java.util.Collection collection39 = options32.getOptionGroups(); helpFormatter15.printHelp("hi!", "", options32, "arg"); boolean boolean43 = options32.hasLongOption("  "); java.util.Collection collection44 = options32.getOptionGroups(); helpFormatter0.printHelp((int) '#', "  ", " ", options32, " "); boolean boolean48 = options32.hasShortOption(""); org.apache.commons.cli.HelpFormatter helpFormatter49 = new org.apache.commons.cli.HelpFormatter(); int int53 = helpFormatter49.findWrapPos("", (int) '#', 1); helpFormatter49.defaultWidth = (byte) 10; java.lang.String str56 = helpFormatter49.getNewLine(); java.util.Comparator comparator57 = helpFormatter49.getOptionComparator(); org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option61 = options59.getOption(" "); java.util.List list63 = options59.getMatchingOptions("hi!"); boolean boolean65 = options59.hasShortOption("arg"); helpFormatter49.printHelp("arg", options59); org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option72 = options70.getOption(" "); java.util.List list74 = options70.getMatchingOptions("hi!"); boolean boolean76 = options70.hasOption(" "); org.apache.commons.cli.Options options81 = options70.addOption("", " ", false, "  "); boolean boolean83 = options81.hasOption("\n"); org.apache.commons.cli.Options options88 = options81.addOption("", "                                                 ", true, "--"); helpFormatter49.printHelp(74, "arg", "", options81, "                                                  "); org.apache.commons.cli.Option option92 = options81.getOption(""); org.apache.commons.cli.OptionGroup optionGroup93 = options32.getOptionGroup(option92); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1); org.junit.Assert.assertNull(option34); org.junit.Assert.assertNotNull(list36); org.junit.Assert.assertNotNull(collection39); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(collection44); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1)); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\n" + "'", str56, "\n"); org.junit.Assert.assertNotNull(comparator57); org.junit.Assert.assertNull(option61); org.junit.Assert.assertNotNull(list63); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNull(option72); org.junit.Assert.assertNotNull(list74); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertNotNull(options81); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertNotNull(options88); org.junit.Assert.assertNotNull(option92); org.junit.Assert.assertNull(optionGroup93); }
public void test794() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test794"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); helpFormatter15.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter26 = new org.apache.commons.cli.HelpFormatter(); helpFormatter26.defaultDescPad = 10; org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option32 = options30.getOption(" "); java.util.List list34 = options30.getMatchingOptions("hi!"); helpFormatter26.printHelp("usage: ", options30, false); helpFormatter15.printHelp("\n", options30); boolean boolean39 = options30.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.List list40 = options30.getRequiredOptions(); helpFormatter0.printHelp("                                                 ", options30, false); boolean boolean44 = options30.hasOption(" "); java.util.List list45 = options30.helpOptions(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertNull(option32); org.junit.Assert.assertNotNull(list34); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(list45); }
public void test795() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test795"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultOptPrefix = ""; helpFormatter0.defaultNewLine = "usage:"; int int13 = helpFormatter0.findWrapPos("arg", (-1), 10); org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); int int18 = helpFormatter14.findWrapPos("", (int) '#', 1); int int19 = helpFormatter14.defaultLeftPad; int int20 = helpFormatter14.getLeftPadding(); helpFormatter14.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator23 = helpFormatter14.getOptionComparator(); helpFormatter0.setOptionComparator(comparator23); java.lang.String str25 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setWidth((int) (short) 0); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1)); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1); org.junit.Assert.assertNotNull(comparator23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--" + "'", str25, "--"); }
public void test796() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test796"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setLeftPadding((int) '#'); java.lang.String str10 = helpFormatter0.defaultArgName; helpFormatter0.defaultDescPad = 0; java.lang.String str13 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); }
public void test797() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test797"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int7 = helpFormatter0.defaultWidth; int int8 = helpFormatter0.defaultDescPad; int int9 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74 + "'", int7 == 74); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 74 + "'", int9 == 74); }
public void test798() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test798"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); java.lang.String str20 = helpFormatter15.getSyntaxPrefix(); helpFormatter15.defaultNewLine = "usage: "; helpFormatter15.defaultArgName = "usage: "; java.lang.String str26 = helpFormatter15.rtrim("usage: "); java.lang.String str27 = helpFormatter15.defaultSyntaxPrefix; org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option33 = options31.getOption(" "); java.util.List list35 = options31.getMatchingOptions("hi!"); boolean boolean37 = options31.hasOption(" "); java.util.List list38 = options31.getRequiredOptions(); java.lang.String str39 = options31.toString(); java.util.List list40 = options31.helpOptions(); helpFormatter15.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options31, "usage: "); helpFormatter0.printHelp((-1), "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "hi!", options31, "--"); org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option49 = options47.getOption(" "); java.util.List list51 = options47.getMatchingOptions("hi!"); boolean boolean53 = options47.hasOption(" "); java.util.List list54 = options47.getRequiredOptions(); java.util.List list55 = options47.helpOptions(); boolean boolean57 = options47.hasOption("-"); helpFormatter0.printHelp("usage: ", "--", options47, "[ Options: [ short {} ] [ long {} ]"); org.apache.commons.cli.OptionGroup optionGroup60 = null; try { org.apache.commons.cli.Options options61 = options47.addOptionGroup(optionGroup60); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "usage: " + "'", str20, "usage: "); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "usage:" + "'", str26, "usage:"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "usage: " + "'", str27, "usage: "); org.junit.Assert.assertNull(option33); org.junit.Assert.assertNotNull(list35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(list38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str39, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNull(option49); org.junit.Assert.assertNotNull(list51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(list54); org.junit.Assert.assertNotNull(list55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); }
public void test799() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test799"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); helpFormatter0.setOptPrefix("arg"); int int16 = helpFormatter0.defaultLeftPad; helpFormatter0.setOptPrefix("                          "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); }
public void test800() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test800"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = "  "; java.lang.String str3 = helpFormatter0.defaultArgName; helpFormatter0.defaultOptPrefix = "                                                 "; org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); }
public void test801() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test801"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); java.lang.String str14 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultLeftPad = (byte) 0; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); }
public void test802() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test802"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); int int18 = helpFormatter0.findWrapPos("                                                 ", (int) (short) 0, (int) '4'); java.lang.String str19 = helpFormatter0.defaultLongOptPrefix; int int20 = helpFormatter0.getDescPadding(); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "--" + "'", str19, "--"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3); }
public void test803() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test803"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getArgName(); java.lang.String str8 = helpFormatter0.defaultNewLine; java.lang.String str9 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test804() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test804"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); helpFormatter0.setOptPrefix("usage:"); java.lang.String str8 = helpFormatter0.getLongOptSeparator(); int int9 = helpFormatter0.defaultWidth; int int10 = helpFormatter0.defaultDescPad; int int11 = helpFormatter0.defaultDescPad; helpFormatter0.defaultWidth = 100; helpFormatter0.defaultSyntaxPrefix = "[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"; org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 74 + "'", int9 == 74); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3); }
public void test805() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test805"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); int int18 = helpFormatter0.findWrapPos("                ", 74, 0); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); }
public void test806() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test806"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); int int33 = helpFormatter0.findWrapPos("", (-1), (int) (short) 10); helpFormatter0.setArgName("                                                 "); java.io.PrintWriter printWriter36 = null; org.apache.commons.cli.HelpFormatter helpFormatter39 = new org.apache.commons.cli.HelpFormatter(); helpFormatter39.defaultDescPad = 10; org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option45 = options43.getOption(" "); java.util.List list47 = options43.getMatchingOptions("hi!"); helpFormatter39.printHelp("usage: ", options43, false); helpFormatter39.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter53 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options(); java.lang.String str56 = options55.toString(); helpFormatter53.printHelp("-", options55, true); org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option64 = options62.getOption(" "); java.util.List list66 = options62.getMatchingOptions("hi!"); boolean boolean68 = options62.hasOption(" "); org.apache.commons.cli.Option option70 = options62.getOption("hi!"); helpFormatter53.printHelp((int) '4', "\n", "                                                 ", options62, "usage:"); helpFormatter39.printHelp("[ Options: [ short {} ] [ long {} ]", options62); java.util.List list74 = options62.getRequiredOptions(); try { helpFormatter0.printUsage(printWriter36, (int) (short) 10, "                                     ", options62); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1)); org.junit.Assert.assertNull(option45); org.junit.Assert.assertNotNull(list47); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str56, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option64); org.junit.Assert.assertNotNull(list66); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertNull(option70); org.junit.Assert.assertNotNull(list74); }
public void test807() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test807"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.Collection collection7 = options2.getOptions(); java.util.List list8 = options2.helpOptions(); java.util.Collection collection9 = options2.getOptions(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(collection9); }
public void test808() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test808"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); java.util.Comparator comparator23 = helpFormatter15.getOptionComparator(); java.util.Comparator comparator24 = helpFormatter15.getOptionComparator(); helpFormatter15.setNewLine("usage:"); org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); int int34 = helpFormatter30.findWrapPos("", (int) '#', 1); helpFormatter30.defaultWidth = (byte) 10; java.lang.String str37 = helpFormatter30.getNewLine(); helpFormatter30.defaultOptPrefix = " "; int int40 = helpFormatter30.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter43 = new org.apache.commons.cli.HelpFormatter(); helpFormatter43.defaultDescPad = 10; org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option49 = options47.getOption(" "); java.util.List list51 = options47.getMatchingOptions("hi!"); helpFormatter43.printHelp("usage: ", options47, false); java.util.Collection collection54 = options47.getOptionGroups(); helpFormatter30.printHelp("hi!", "", options47, "arg"); boolean boolean58 = options47.hasLongOption("  "); java.util.Collection collection59 = options47.getOptionGroups(); helpFormatter15.printHelp((int) '#', "  ", " ", options47, " "); helpFormatter0.printHelp("arg", "  ", options47, "usage:"); java.lang.String str65 = helpFormatter0.createPadding(100); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertNotNull(comparator23); org.junit.Assert.assertNotNull(comparator24); org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1)); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\n" + "'", str37, "\n"); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1); org.junit.Assert.assertNull(option49); org.junit.Assert.assertNotNull(list51); org.junit.Assert.assertNotNull(collection54); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(collection59); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "                                                  " + "'", str65, "                                                  "); }
public void test809() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test809"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); helpFormatter0.setOptPrefix("usage:"); java.lang.String str8 = helpFormatter0.defaultArgName; org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg"); }
public void test810() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test810"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); int int16 = helpFormatter12.findWrapPos("", (int) '#', 1); helpFormatter12.defaultWidth = (byte) 10; java.lang.String str19 = helpFormatter12.getNewLine(); helpFormatter12.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter23 = new org.apache.commons.cli.HelpFormatter(); helpFormatter23.defaultDescPad = 10; org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option29 = options27.getOption(" "); java.util.List list31 = options27.getMatchingOptions("hi!"); helpFormatter23.printHelp("usage: ", options27, false); helpFormatter12.printHelp("\n", options27); boolean boolean36 = options27.hasShortOption("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.printHelp("usage:", "", options27, "                                                 "); java.lang.StringBuffer stringBuffer39 = null; try { java.lang.StringBuffer stringBuffer43 = helpFormatter0.renderWrappedText(stringBuffer39, 74, 3, "[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n" + "'", str19, "\n"); org.junit.Assert.assertNull(option29); org.junit.Assert.assertNotNull(list31); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); }
public void test811() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test811"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); helpFormatter15.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter26 = new org.apache.commons.cli.HelpFormatter(); helpFormatter26.defaultDescPad = 10; org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option32 = options30.getOption(" "); java.util.List list34 = options30.getMatchingOptions("hi!"); helpFormatter26.printHelp("usage: ", options30, false); helpFormatter15.printHelp("\n", options30); boolean boolean39 = options30.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.List list40 = options30.getRequiredOptions(); helpFormatter0.printHelp("                                                 ", options30, false); boolean boolean44 = options30.hasOption(" "); java.util.Collection collection45 = options30.getOptions(); org.apache.commons.cli.Options options49 = options30.addOption("arg", false, "usage: "); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertNull(option32); org.junit.Assert.assertNotNull(list34); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(collection45); org.junit.Assert.assertNotNull(options49); }
public void test812() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test812"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setLeftPadding((int) (byte) -1); int int20 = helpFormatter0.getWidth(); java.lang.String str21 = helpFormatter0.getLongOptPrefix(); int int22 = helpFormatter0.getDescPadding(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 74 + "'", int20 == 74); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "--" + "'", str21, "--"); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35); }
public void test813() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test813"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = ""; helpFormatter0.setSyntaxPrefix(""); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); int int20 = helpFormatter16.findWrapPos("", (int) '#', 1); helpFormatter16.defaultWidth = (byte) 10; java.lang.String str23 = helpFormatter16.getNewLine(); helpFormatter16.defaultOptPrefix = " "; int int26 = helpFormatter16.defaultLeftPad; java.lang.String str27 = helpFormatter16.getArgName(); int int28 = helpFormatter16.defaultDescPad; helpFormatter16.defaultLongOptPrefix = "\n"; org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option36 = options34.getOption(" "); java.util.List list38 = options34.getMatchingOptions("hi!"); boolean boolean40 = options34.hasOption(" "); java.util.List list41 = options34.getRequiredOptions(); java.util.List list42 = options34.helpOptions(); helpFormatter16.printHelp((int) (short) -1, "\n", "usage:", options34, "", true); java.util.Comparator comparator46 = helpFormatter16.optionComparator; int int50 = helpFormatter16.findWrapPos("hi!", 52, 52); org.apache.commons.cli.HelpFormatter helpFormatter51 = new org.apache.commons.cli.HelpFormatter(); int int55 = helpFormatter51.findWrapPos("", (int) '#', 1); int int56 = helpFormatter51.defaultLeftPad; int int57 = helpFormatter51.getLeftPadding(); helpFormatter51.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter51.setOptPrefix(""); java.util.Comparator comparator62 = helpFormatter51.getOptionComparator(); helpFormatter16.optionComparator = comparator62; helpFormatter0.optionComparator = comparator62; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg"); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3); org.junit.Assert.assertNull(option36); org.junit.Assert.assertNotNull(list38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(list41); org.junit.Assert.assertNotNull(list42); org.junit.Assert.assertNotNull(comparator46); org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1)); org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1)); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1); org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1); org.junit.Assert.assertNotNull(comparator62); }
public void test814() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test814"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; java.lang.String str3 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setNewLine("[ Options: [ short {} ] [ long {} ]"); java.io.PrintWriter printWriter6 = null; try { helpFormatter0.printUsage(printWriter6, 10, "                  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "usage: " + "'", str3, "usage: "); }
public void test815() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test815"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; helpFormatter0.defaultWidth = 1; org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); helpFormatter18.defaultDescPad = 10; org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option24 = options22.getOption(" "); java.util.List list26 = options22.getMatchingOptions("hi!"); helpFormatter18.printHelp("usage: ", options22, false); java.util.Collection collection29 = options22.getOptionGroups(); java.util.Collection collection30 = options22.getOptions(); helpFormatter0.printHelp((int) (short) 100, "arg", "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", options22, "                                                 "); java.util.Comparator comparator33 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNull(option24); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertNotNull(collection29); org.junit.Assert.assertNotNull(collection30); org.junit.Assert.assertNotNull(comparator33); }
public void test816() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test816"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.io.PrintWriter printWriter11 = null; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option15 = options13.getOption(" "); java.util.List list17 = options13.getMatchingOptions("hi!"); boolean boolean19 = options13.hasOption(" "); java.util.List list20 = options13.getRequiredOptions(); java.util.List list21 = options13.helpOptions(); java.util.Collection collection22 = options13.getOptionGroups(); java.util.List list24 = options13.getMatchingOptions("arg"); java.lang.String str25 = options13.toString(); try { helpFormatter0.printOptions(printWriter11, 35, options13, (int) '4', 10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(list17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); }
public void test817() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test817"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.setNewLine("-"); helpFormatter0.setDescPadding((int) (short) -1); }
public void test818() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test818"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setSyntaxPrefix("--"); int int15 = helpFormatter0.getLeftPadding(); helpFormatter0.setDescPadding((int) '#'); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); }
public void test819() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test819"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultArgName = ""; helpFormatter0.setWidth(35); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test820() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test820"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); helpFormatter0.printHelp("\n", options15); int int23 = helpFormatter0.getWidth(); java.io.PrintWriter printWriter24 = null; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option30 = options28.getOption(" "); java.util.List list32 = options28.getMatchingOptions("hi!"); boolean boolean34 = options28.hasOption(" "); org.apache.commons.cli.Options options39 = options28.addOption("", " ", false, "  "); try { helpFormatter0.printHelp(printWriter24, 74, "", "--", options28, 35, 0, "                  "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10); org.junit.Assert.assertNull(option30); org.junit.Assert.assertNotNull(list32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(options39); }
public void test821() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test821"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultNewLine = "usage: "; java.lang.String str8 = helpFormatter0.getSyntaxPrefix(); int int9 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "usage: " + "'", str8, "usage: "); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 74 + "'", int9 == 74); }
public void test822() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test822"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = ""; int int14 = helpFormatter0.getDescPadding(); java.lang.String str15 = helpFormatter0.getNewLine(); helpFormatter0.setLongOptSeparator("-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\n" + "'", str15, "\n"); }
public void test823() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test823"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option12 = options10.getOption(" "); java.util.List list14 = options10.getMatchingOptions("hi!"); boolean boolean16 = options10.hasShortOption("arg"); helpFormatter0.printHelp("arg", options10); org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); boolean boolean27 = options21.hasOption(" "); org.apache.commons.cli.Options options32 = options21.addOption("", " ", false, "  "); boolean boolean34 = options32.hasOption("\n"); org.apache.commons.cli.Options options39 = options32.addOption("", "                                                 ", true, "--"); helpFormatter0.printHelp(74, "arg", "", options32, "                                                  "); java.lang.String str42 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(list14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(options32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(options39); org.junit.Assert.assertEquals("'" + str42 + "' != '" + " " + "'", str42, " "); }
public void test824() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test824"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; java.lang.String str10 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); int int17 = helpFormatter13.findWrapPos("", (int) '#', 1); helpFormatter13.defaultWidth = (byte) 10; java.lang.String str20 = helpFormatter13.getArgName(); org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option24 = options22.getOption(" "); java.util.List list26 = options22.getMatchingOptions("hi!"); boolean boolean28 = options22.hasShortOption("arg"); helpFormatter13.printHelp("  ", options22); helpFormatter0.printHelp("-", "                                                 ", options22, "usage: ", false); helpFormatter0.defaultOptPrefix = "                                     "; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n" + "'", str10, "\n"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg"); org.junit.Assert.assertNull(option24); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); }
public void test825() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test825"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; int int6 = helpFormatter0.defaultLeftPad; java.lang.String str7 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); }
public void test826() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test826"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = ""; java.lang.String str14 = helpFormatter0.getLongOptSeparator(); java.lang.String str15 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setOptPrefix("--"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + " " + "'", str14, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "usage: " + "'", str15, "usage: "); }
public void test827() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test827"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); helpFormatter0.printHelp("\n", options15); boolean boolean24 = options15.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.lang.String str25 = options15.toString(); java.util.Collection collection26 = options15.getOptionGroups(); org.apache.commons.cli.OptionGroup optionGroup27 = null; try { org.apache.commons.cli.Options options28 = options15.addOptionGroup(optionGroup27); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection26); }
public void test828() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test828"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setOptPrefix(""); helpFormatter0.setLeftPadding(10); helpFormatter0.setDescPadding((int) (short) 0); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); java.lang.String str21 = options20.toString(); helpFormatter18.printHelp("-", options20, true); java.util.List list24 = options20.getRequiredOptions(); java.util.Collection collection25 = options20.getOptionGroups(); boolean boolean27 = options20.hasLongOption("--"); java.util.List list28 = options20.helpOptions(); helpFormatter0.printHelp((int) 'a', "                                                 ", "usage:", options20, "[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]"); java.lang.Class<?> wildcardClass31 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str21, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(collection25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(list28); org.junit.Assert.assertNotNull(wildcardClass31); }
public void test829() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test829"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str11 = helpFormatter0.rtrim("usage: "); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setArgName(" "); helpFormatter0.defaultLeftPad = (-2); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage:" + "'", str11, "usage:"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); }
public void test830() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test830"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str11 = helpFormatter0.rtrim("usage: "); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setArgName(" "); java.lang.String str15 = helpFormatter0.getOptPrefix(); java.io.PrintWriter printWriter16 = null; try { helpFormatter0.printWrapped(printWriter16, 3, (int) (byte) 10, "[ Options: [ short {arg=[ option: arg :: ]} ] [ long {} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage:" + "'", str11, "usage:"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-" + "'", str15, "-"); }
public void test831() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test831"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); helpFormatter0.printHelp("\n", options15); boolean boolean24 = options15.hasShortOption("[ Options: [ short {} ] [ long {} ]"); boolean boolean26 = options15.hasOption(""); boolean boolean28 = options15.hasOption(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); }
public void test832() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test832"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); java.lang.String str22 = helpFormatter0.createPadding(3); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator26 = null; helpFormatter25.optionComparator = comparator26; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); helpFormatter25.printHelp("--", options29); java.lang.String str32 = helpFormatter25.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter33 = new org.apache.commons.cli.HelpFormatter(); helpFormatter33.defaultDescPad = 10; org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option39 = options37.getOption(" "); java.util.List list41 = options37.getMatchingOptions("hi!"); helpFormatter33.printHelp("usage: ", options37, false); java.util.Comparator comparator44 = helpFormatter33.getOptionComparator(); helpFormatter25.setOptionComparator(comparator44); org.apache.commons.cli.HelpFormatter helpFormatter47 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator48 = null; helpFormatter47.optionComparator = comparator48; org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); helpFormatter47.printHelp("--", options51); helpFormatter25.printHelp("[ Options: [ short {} ] [ long {} ]", options51); java.lang.String str54 = options51.toString(); helpFormatter0.printHelp("-", "-", options51, "-", false); java.lang.StringBuffer stringBuffer58 = null; org.apache.commons.cli.HelpFormatter helpFormatter60 = new org.apache.commons.cli.HelpFormatter(); helpFormatter60.defaultNewLine = " "; int int63 = helpFormatter60.defaultLeftPad; org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option68 = options66.getOption(" "); java.util.Collection collection69 = options66.getOptions(); java.util.Collection collection70 = options66.getOptions(); java.lang.String str71 = options66.toString(); java.lang.String str72 = options66.toString(); helpFormatter60.printHelp("                                                 ", "\n", options66, "usage: ", false); java.lang.StringBuffer stringBuffer78 = helpFormatter0.renderOptions(stringBuffer58, (int) (byte) 100, options66, (int) (byte) 10, (int) (byte) 1); java.util.Comparator comparator79 = helpFormatter0.optionComparator; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "  " + "'", str22, "  "); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg"); org.junit.Assert.assertNull(option39); org.junit.Assert.assertNotNull(list41); org.junit.Assert.assertNotNull(comparator44); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str54, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1); org.junit.Assert.assertNull(option68); org.junit.Assert.assertNotNull(collection69); org.junit.Assert.assertNotNull(collection70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str72, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(stringBuffer78); org.junit.Assert.assertNotNull(comparator79); }
public void test833() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test833"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(" "); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); java.lang.String str10 = options9.toString(); org.apache.commons.cli.Option option12 = options9.getOption("arg"); helpFormatter0.printHelp("usage:", options9); java.util.Collection collection14 = options9.getOptionGroups(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(collection14); }
public void test834() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test834"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultSyntaxPrefix = "arg"; helpFormatter0.setArgName(" "); helpFormatter0.defaultLongOptPrefix = "hi!"; helpFormatter0.setLongOptSeparator("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); java.io.PrintWriter printWriter17 = null; org.apache.commons.cli.HelpFormatter helpFormatter19 = new org.apache.commons.cli.HelpFormatter(); helpFormatter19.defaultNewLine = " "; helpFormatter19.defaultNewLine = "  "; org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option27 = options25.getOption(" "); java.util.List list29 = options25.getMatchingOptions("hi!"); boolean boolean31 = options25.hasShortOption("arg"); java.lang.String str32 = options25.toString(); helpFormatter19.printHelp("usage:", options25, true); java.util.Collection collection35 = options25.getOptionGroups(); try { helpFormatter0.printOptions(printWriter17, 0, options25, (int) (short) -1, (int) (short) 100); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(list29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str32, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection35); }
public void test835() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test835"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultSyntaxPrefix = "arg"; helpFormatter0.setArgName(" "); helpFormatter0.setOptPrefix("hi!"); java.io.PrintWriter printWriter15 = null; try { helpFormatter0.printWrapped(printWriter15, (int) ' ', 35, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test836() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test836"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option15 = options13.getOption(" "); java.util.List list17 = options13.getMatchingOptions("hi!"); boolean boolean19 = options13.hasOption(" "); java.util.List list20 = options13.getRequiredOptions(); java.util.List list21 = options13.helpOptions(); java.util.Collection collection22 = options13.getOptionGroups(); java.util.List list24 = options13.getMatchingOptions("arg"); java.lang.String str25 = options13.toString(); org.apache.commons.cli.Option option27 = options13.getOption("--"); java.util.Collection collection28 = options13.getOptionGroups(); org.apache.commons.cli.Options options32 = options13.addOption("", true, "usage: "); helpFormatter0.printHelp("\n", options13); int int34 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultNewLine = "  "; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(comparator11); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(list17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(collection28); org.junit.Assert.assertNotNull(options32); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1); }
public void test837() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test837"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultArgName = "hi!"; java.lang.StringBuffer stringBuffer3 = null; org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option7 = options5.getOption(" "); java.util.Collection collection8 = options5.getOptions(); java.util.Collection collection9 = options5.getOptions(); java.lang.String str10 = options5.toString(); java.lang.String str11 = options5.toString(); java.lang.StringBuffer stringBuffer14 = helpFormatter0.renderOptions(stringBuffer3, (int) (short) 10, options5, (int) ' ', (int) (byte) 10); java.lang.String str15 = helpFormatter0.defaultArgName; org.junit.Assert.assertNull(option7); org.junit.Assert.assertNotNull(collection8); org.junit.Assert.assertNotNull(collection9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str11, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(stringBuffer14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!"); }
public void test838() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test838"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; int int3 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option7 = options5.getOption(" "); java.util.Collection collection8 = options5.getOptions(); java.util.List list9 = options5.helpOptions(); helpFormatter0.printHelp("  ", options5); java.lang.String str11 = helpFormatter0.getOptPrefix(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertNull(option7); org.junit.Assert.assertNotNull(collection8); org.junit.Assert.assertNotNull(list9); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); }
public void test839() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test839"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option15 = options13.getOption(" "); java.util.List list17 = options13.getMatchingOptions("hi!"); boolean boolean19 = options13.hasOption(" "); java.util.List list20 = options13.getRequiredOptions(); java.util.List list21 = options13.helpOptions(); java.util.Collection collection22 = options13.getOptionGroups(); java.util.List list24 = options13.getMatchingOptions("arg"); java.lang.String str25 = options13.toString(); org.apache.commons.cli.Option option27 = options13.getOption("--"); java.util.Collection collection28 = options13.getOptionGroups(); org.apache.commons.cli.Options options32 = options13.addOption("", true, "usage: "); helpFormatter0.printHelp("\n", options13); java.lang.String str34 = options13.toString(); java.util.List list35 = options13.helpOptions(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(comparator11); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(list17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(collection28); org.junit.Assert.assertNotNull(options32); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]" + "'", str34, "[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]"); org.junit.Assert.assertNotNull(list35); }
public void test840() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test840"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); helpFormatter0.printHelp("\n", options15); boolean boolean24 = options15.hasShortOption("[ Options: [ short {} ] [ long {} ]"); boolean boolean26 = options15.hasOption(""); boolean boolean28 = options15.hasShortOption("[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]"); org.apache.commons.cli.Options options33 = options15.addOption("arg", "  ", false, "usage: "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(options33); }
public void test841() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test841"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; int int3 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option8 = options6.getOption(" "); java.util.Collection collection9 = options6.getOptions(); java.util.Collection collection10 = options6.getOptions(); java.lang.String str11 = options6.toString(); java.lang.String str12 = options6.toString(); helpFormatter0.printHelp("                                                 ", "\n", options6, "usage: ", false); org.apache.commons.cli.Option option17 = options6.getOption("arg"); java.util.List list19 = options6.getMatchingOptions("                "); java.lang.Class<?> wildcardClass20 = options6.getClass(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertNull(option8); org.junit.Assert.assertNotNull(collection9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str11, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertNotNull(wildcardClass20); }
public void test842() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test842"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); java.lang.String str20 = helpFormatter15.getSyntaxPrefix(); helpFormatter15.defaultNewLine = "usage: "; helpFormatter15.defaultArgName = "usage: "; java.lang.String str26 = helpFormatter15.rtrim("usage: "); java.lang.String str27 = helpFormatter15.defaultSyntaxPrefix; org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option33 = options31.getOption(" "); java.util.List list35 = options31.getMatchingOptions("hi!"); boolean boolean37 = options31.hasOption(" "); java.util.List list38 = options31.getRequiredOptions(); java.lang.String str39 = options31.toString(); java.util.List list40 = options31.helpOptions(); helpFormatter15.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options31, "usage: "); helpFormatter0.printHelp((-1), "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "hi!", options31, "--"); org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option49 = options47.getOption(" "); java.util.List list51 = options47.getMatchingOptions("hi!"); boolean boolean53 = options47.hasOption(" "); java.util.List list54 = options47.getRequiredOptions(); java.util.List list55 = options47.helpOptions(); boolean boolean57 = options47.hasOption("-"); helpFormatter0.printHelp("usage: ", "--", options47, "[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setWidth((int) (byte) 10); java.lang.String str62 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultWidth = 0; helpFormatter0.defaultLongOptPrefix = "[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "usage: " + "'", str20, "usage: "); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "usage:" + "'", str26, "usage:"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "usage: " + "'", str27, "usage: "); org.junit.Assert.assertNull(option33); org.junit.Assert.assertNotNull(list35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(list38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str39, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNull(option49); org.junit.Assert.assertNotNull(list51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(list54); org.junit.Assert.assertNotNull(list55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "usage: " + "'", str62, "usage: "); }
public void test843() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test843"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator23 = null; helpFormatter22.optionComparator = comparator23; org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options(); helpFormatter22.printHelp("--", options26); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options26); java.util.List list29 = options26.helpOptions(); boolean boolean31 = options26.hasOption(""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertNotNull(list29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); }
public void test844() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test844"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.lang.String str15 = helpFormatter0.rtrim("                                                 "); java.lang.String str16 = helpFormatter0.defaultNewLine; int int17 = helpFormatter0.defaultLeftPad; java.lang.String str18 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); }
public void test845() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test845"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.lang.String str15 = helpFormatter0.rtrim("                                                 "); java.lang.String str16 = helpFormatter0.defaultNewLine; org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator18 = null; helpFormatter17.optionComparator = comparator18; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); helpFormatter17.printHelp("--", options21); java.lang.String str24 = helpFormatter17.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); helpFormatter25.defaultDescPad = 10; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option31 = options29.getOption(" "); java.util.List list33 = options29.getMatchingOptions("hi!"); helpFormatter25.printHelp("usage: ", options29, false); java.util.Comparator comparator36 = helpFormatter25.getOptionComparator(); helpFormatter17.setOptionComparator(comparator36); helpFormatter0.setOptionComparator(comparator36); java.lang.String str39 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "arg" + "'", str24, "arg"); org.junit.Assert.assertNull(option31); org.junit.Assert.assertNotNull(list33); org.junit.Assert.assertNotNull(comparator36); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, ""); }
public void test846() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test846"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultArgName = "                                     "; java.io.PrintWriter printWriter10 = null; org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); helpFormatter14.defaultDescPad = 10; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option20 = options18.getOption(" "); java.util.List list22 = options18.getMatchingOptions("hi!"); helpFormatter14.printHelp("usage: ", options18, false); java.lang.String str25 = helpFormatter14.defaultOptPrefix; helpFormatter14.setSyntaxPrefix(" "); org.apache.commons.cli.HelpFormatter helpFormatter29 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options(); java.lang.String str32 = options31.toString(); helpFormatter29.printHelp("-", options31, true); helpFormatter14.printHelp("[ Options: [ short {} ] [ long {} ]", options31, false); try { helpFormatter0.printHelp(printWriter10, 0, "", "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", options31, 1, (int) (byte) -1, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertNull(option20); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-" + "'", str25, "-"); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str32, "[ Options: [ short {} ] [ long {} ]"); }
public void test847() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test847"); org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option2 = options0.getOption(" "); java.util.List list4 = options0.getMatchingOptions("hi!"); boolean boolean6 = options0.hasOption(" "); org.apache.commons.cli.Options options11 = options0.addOption("", " ", false, "  "); java.lang.String str12 = options0.toString(); java.util.List list13 = options0.helpOptions(); org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); helpFormatter14.defaultNewLine = " "; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); helpFormatter14.printHelp("arg", options18); org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.Collection collection24 = options21.getOptions(); java.util.Collection collection25 = options21.getOptions(); java.lang.String str26 = options21.toString(); helpFormatter14.printHelp("--", options21); int int28 = helpFormatter14.getDescPadding(); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultNewLine = " "; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); helpFormatter32.printHelp("arg", options36); boolean boolean39 = options36.hasShortOption(""); helpFormatter14.printHelp((-1), "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "usage: ", options36, "-", false); org.apache.commons.cli.HelpFormatter helpFormatter43 = new org.apache.commons.cli.HelpFormatter(); int int47 = helpFormatter43.findWrapPos("", (int) '#', 1); helpFormatter43.defaultWidth = (byte) 10; java.lang.String str50 = helpFormatter43.getNewLine(); java.util.Comparator comparator51 = helpFormatter43.getOptionComparator(); org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option55 = options53.getOption(" "); java.util.List list57 = options53.getMatchingOptions("hi!"); boolean boolean59 = options53.hasShortOption("arg"); helpFormatter43.printHelp("arg", options53); org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option66 = options64.getOption(" "); java.util.List list68 = options64.getMatchingOptions("hi!"); boolean boolean70 = options64.hasOption(" "); org.apache.commons.cli.Options options75 = options64.addOption("", " ", false, "  "); boolean boolean77 = options75.hasOption("\n"); org.apache.commons.cli.Options options82 = options75.addOption("", "                                                 ", true, "--"); helpFormatter43.printHelp(74, "arg", "", options75, "                                                  "); org.apache.commons.cli.Option option86 = options75.getOption(""); org.apache.commons.cli.OptionGroup optionGroup87 = options36.getOptionGroup(option86); org.apache.commons.cli.Options options88 = options0.addOption(option86); org.junit.Assert.assertNull(option2); org.junit.Assert.assertNotNull(list4); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(options11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]" + "'", str12, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertNotNull(collection25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str26, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1)); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\n" + "'", str50, "\n"); org.junit.Assert.assertNotNull(comparator51); org.junit.Assert.assertNull(option55); org.junit.Assert.assertNotNull(list57); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNull(option66); org.junit.Assert.assertNotNull(list68); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertNotNull(options75); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertNotNull(options82); org.junit.Assert.assertNotNull(option86); org.junit.Assert.assertNull(optionGroup87); org.junit.Assert.assertNotNull(options88); }
public void test848() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test848"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; java.lang.StringBuffer stringBuffer8 = null; org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); boolean boolean12 = options10.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.Collection collection13 = options10.getOptions(); java.lang.StringBuffer stringBuffer16 = helpFormatter0.renderOptions(stringBuffer8, (int) '4', options10, 74, (int) (short) 10); helpFormatter0.defaultOptPrefix = "\n"; int int22 = helpFormatter0.findWrapPos("usage: ", (int) (short) 0, (int) (byte) 100); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(collection13); org.junit.Assert.assertNull(stringBuffer16); org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1)); }
public void test849() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test849"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); java.lang.String str20 = helpFormatter15.getSyntaxPrefix(); helpFormatter15.defaultNewLine = "usage: "; helpFormatter15.defaultArgName = "usage: "; java.lang.String str26 = helpFormatter15.rtrim("usage: "); java.lang.String str27 = helpFormatter15.defaultSyntaxPrefix; org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option33 = options31.getOption(" "); java.util.List list35 = options31.getMatchingOptions("hi!"); boolean boolean37 = options31.hasOption(" "); java.util.List list38 = options31.getRequiredOptions(); java.lang.String str39 = options31.toString(); java.util.List list40 = options31.helpOptions(); helpFormatter15.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options31, "usage: "); helpFormatter0.printHelp((-1), "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "hi!", options31, "--"); java.util.List list45 = options31.helpOptions(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "usage: " + "'", str20, "usage: "); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "usage:" + "'", str26, "usage:"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "usage: " + "'", str27, "usage: "); org.junit.Assert.assertNull(option33); org.junit.Assert.assertNotNull(list35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(list38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str39, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(list45); }
public void test850() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test850"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setLeftPadding(3); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); int int26 = helpFormatter22.findWrapPos("", (int) '#', 1); helpFormatter22.defaultWidth = (byte) 10; java.lang.String str29 = helpFormatter22.getNewLine(); helpFormatter22.defaultOptPrefix = " "; int int32 = helpFormatter22.defaultLeftPad; java.lang.String str33 = helpFormatter22.getSyntaxPrefix(); helpFormatter22.defaultLeftPad = (short) 0; int int36 = helpFormatter22.getWidth(); java.lang.StringBuffer stringBuffer37 = null; org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option41 = options39.getOption(" "); java.util.List list43 = options39.getMatchingOptions("hi!"); boolean boolean45 = options39.hasOption(" "); boolean boolean47 = options39.hasShortOption("usage: "); java.lang.StringBuffer stringBuffer50 = helpFormatter22.renderOptions(stringBuffer37, (int) (short) -1, options39, (int) '4', (int) '4'); boolean boolean52 = options39.hasOption("--"); org.apache.commons.cli.Option option54 = options39.getOption("[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"); boolean boolean56 = options39.hasShortOption("                                                  "); helpFormatter0.printHelp("                                     ", "", options39, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1)); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\n" + "'", str29, "\n"); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "usage: " + "'", str33, "usage: "); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10); org.junit.Assert.assertNull(option41); org.junit.Assert.assertNotNull(list43); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNull(stringBuffer50); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNull(option54); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); }
public void test851() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test851"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.optionComparator; java.io.PrintWriter printWriter9 = null; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); boolean boolean18 = options12.hasOption(" "); java.util.List list19 = options12.getRequiredOptions(); java.lang.String str20 = options12.toString(); java.util.List list21 = options12.helpOptions(); try { helpFormatter0.printUsage(printWriter9, (int) '#', "", options12); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str20, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list21); }
public void test852() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test852"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; int int3 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option8 = options6.getOption(" "); java.util.Collection collection9 = options6.getOptions(); java.util.Collection collection10 = options6.getOptions(); java.lang.String str11 = options6.toString(); java.lang.String str12 = options6.toString(); helpFormatter0.printHelp("                                                 ", "\n", options6, "usage: ", false); org.apache.commons.cli.Option option17 = options6.getOption("arg"); org.apache.commons.cli.OptionGroup optionGroup18 = null; try { org.apache.commons.cli.Options options19 = options6.addOptionGroup(optionGroup18); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertNull(option8); org.junit.Assert.assertNotNull(collection9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str11, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option17); }
public void test853() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test853"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setNewLine(" "); java.lang.String str10 = helpFormatter0.defaultLongOptPrefix; org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp("", "[ Options: [ short {=[ option:  [ARG] :: usage: ]} ] [ long {} ]", options13, "                  ", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--" + "'", str10, "--"); }
public void test854() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test854"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.lang.String str15 = helpFormatter0.rtrim("                                                 "); helpFormatter0.setNewLine(" "); java.lang.String str18 = helpFormatter0.getLongOptSeparator(); int int19 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str18 + "' != '" + " " + "'", str18, " "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); }
public void test855() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test855"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultNewLine = ""; helpFormatter0.setWidth((-2)); helpFormatter0.defaultLongOptPrefix = "arg"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); }
public void test856() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test856"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.HelpFormatter helpFormatter3 = new org.apache.commons.cli.HelpFormatter(); helpFormatter3.defaultArgName = "hi!"; java.lang.StringBuffer stringBuffer6 = null; org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option10 = options8.getOption(" "); java.util.Collection collection11 = options8.getOptions(); java.util.Collection collection12 = options8.getOptions(); java.lang.String str13 = options8.toString(); java.lang.String str14 = options8.toString(); java.lang.StringBuffer stringBuffer17 = helpFormatter3.renderOptions(stringBuffer6, (int) (short) 10, options8, (int) ' ', (int) (byte) 10); java.util.Comparator comparator18 = helpFormatter3.optionComparator; helpFormatter0.setOptionComparator(comparator18); java.lang.String str20 = helpFormatter0.defaultNewLine; org.junit.Assert.assertNull(option10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertNotNull(collection12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str13, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str14, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(stringBuffer17); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n" + "'", str20, "\n"); }
public void test857() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test857"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultNewLine = "usage: "; java.lang.String str8 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultArgName = "\n"; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "usage: " + "'", str8, "usage: "); }
public void test858() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test858"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Collection collection11 = options4.getOptionGroups(); boolean boolean13 = options4.hasShortOption("  "); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test859() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test859"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setLongOptSeparator("  "); int int15 = helpFormatter0.defaultWidth; org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); helpFormatter18.defaultDescPad = 10; org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option24 = options22.getOption(" "); java.util.List list26 = options22.getMatchingOptions("hi!"); helpFormatter18.printHelp("usage: ", options22, false); java.util.Collection collection29 = options22.getOptionGroups(); java.util.Collection collection30 = options22.getOptions(); boolean boolean32 = options22.hasOption("hi!"); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "", options22, "-"); java.util.List list35 = options22.helpOptions(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 74 + "'", int15 == 74); org.junit.Assert.assertNull(option24); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertNotNull(collection29); org.junit.Assert.assertNotNull(collection30); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(list35); }
public void test860() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test860"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); java.lang.String str14 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str15 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "usage: " + "'", str14, "usage: "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-" + "'", str15, "-"); }
public void test861() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test861"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str7 = helpFormatter0.defaultNewLine; java.lang.String str8 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg"); }
public void test862() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test862"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.HelpFormatter helpFormatter3 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator4 = null; helpFormatter3.optionComparator = comparator4; org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); helpFormatter3.printHelp("--", options7); java.lang.String str10 = helpFormatter3.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); java.util.Comparator comparator22 = helpFormatter11.getOptionComparator(); helpFormatter3.setOptionComparator(comparator22); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator26 = null; helpFormatter25.optionComparator = comparator26; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); helpFormatter25.printHelp("--", options29); helpFormatter3.printHelp("[ Options: [ short {} ] [ long {} ]", options29); java.lang.String str32 = options29.toString(); helpFormatter0.printHelp("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "", options29, "                                                 "); org.apache.commons.cli.HelpFormatter helpFormatter37 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator38 = null; helpFormatter37.optionComparator = comparator38; org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options(); helpFormatter37.printHelp("--", options41); helpFormatter37.setOptPrefix("usage:"); org.apache.commons.cli.HelpFormatter helpFormatter48 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); java.lang.String str51 = options50.toString(); helpFormatter48.printHelp("-", options50, true); java.util.List list54 = options50.getRequiredOptions(); helpFormatter37.printHelp((int) (byte) 100, "usage: ", "--", options50, "-"); java.util.List list57 = options50.getRequiredOptions(); helpFormatter0.printHelp("arg", "", options50, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", true); try { org.apache.commons.cli.Options options65 = options50.addOption("usage: ", " ", false, " "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'usage: ' contains an illegal character : ':'"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str32, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str51, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list54); org.junit.Assert.assertNotNull(list57); }
public void test863() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test863"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); java.lang.String str14 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultNewLine = ""; java.lang.String str19 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); }
public void test864() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test864"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); org.apache.commons.cli.Option option15 = options7.getOption("[ Options: [ short {} ] [ long {} ]"); try { org.apache.commons.cli.Options options19 = options7.addOption("                                                 ", true, "                          "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '                                                 ' contains an illegal character : ' '"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option15); }
public void test865() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test865"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option15 = options13.getOption(" "); java.util.List list17 = options13.getMatchingOptions("hi!"); boolean boolean19 = options13.hasOption(" "); java.util.List list20 = options13.getRequiredOptions(); java.util.List list21 = options13.helpOptions(); java.util.Collection collection22 = options13.getOptionGroups(); java.util.List list24 = options13.getMatchingOptions("arg"); java.lang.String str25 = options13.toString(); org.apache.commons.cli.Option option27 = options13.getOption("--"); java.util.Collection collection28 = options13.getOptionGroups(); org.apache.commons.cli.Options options32 = options13.addOption("", true, "usage: "); helpFormatter0.printHelp("\n", options13); java.util.Collection collection34 = options13.getOptions(); java.lang.Class<?> wildcardClass35 = options13.getClass(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(comparator11); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(list17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(collection28); org.junit.Assert.assertNotNull(options32); org.junit.Assert.assertNotNull(collection34); org.junit.Assert.assertNotNull(wildcardClass35); }
public void test866() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test866"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultArgName = "hi!"; java.lang.StringBuffer stringBuffer3 = null; org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option7 = options5.getOption(" "); java.util.Collection collection8 = options5.getOptions(); java.util.Collection collection9 = options5.getOptions(); java.lang.String str10 = options5.toString(); java.lang.String str11 = options5.toString(); java.lang.StringBuffer stringBuffer14 = helpFormatter0.renderOptions(stringBuffer3, (int) (short) 10, options5, (int) ' ', (int) (byte) 10); java.util.Comparator comparator15 = helpFormatter0.optionComparator; java.lang.String str16 = helpFormatter0.getLongOptPrefix(); java.lang.String str17 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertNull(option7); org.junit.Assert.assertNotNull(collection8); org.junit.Assert.assertNotNull(collection9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str11, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(stringBuffer14); org.junit.Assert.assertNotNull(comparator15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "--" + "'", str16, "--"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "--" + "'", str17, "--"); }
public void test867() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test867"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option20 = options18.getOption(" "); java.util.List list22 = options18.getMatchingOptions("hi!"); boolean boolean24 = options18.hasOption(" "); java.util.List list25 = options18.getRequiredOptions(); java.util.List list26 = options18.helpOptions(); helpFormatter0.printHelp((int) (short) -1, "\n", "usage:", options18, "", true); java.util.Comparator comparator30 = helpFormatter0.optionComparator; int int34 = helpFormatter0.findWrapPos("hi!", 52, 52); helpFormatter0.defaultLeftPad = 3; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertNull(option20); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertNotNull(comparator30); org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1)); }
public void test868() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test868"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultLeftPad = (short) 0; int int14 = helpFormatter0.getWidth(); helpFormatter0.defaultLeftPad = (byte) 1; helpFormatter0.defaultArgName = " "; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10); }
public void test869() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test869"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.lang.String str15 = helpFormatter0.rtrim("                                                 "); helpFormatter0.setNewLine(" "); helpFormatter0.defaultLeftPad = (short) -1; int int20 = helpFormatter0.getDescPadding(); helpFormatter0.setNewLine("hi!"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3); }
public void test870() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test870"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str11 = helpFormatter0.rtrim("usage: "); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option18 = options16.getOption(" "); java.util.List list20 = options16.getMatchingOptions("hi!"); boolean boolean22 = options16.hasOption(" "); java.util.List list23 = options16.getRequiredOptions(); java.lang.String str24 = options16.toString(); java.util.List list25 = options16.helpOptions(); helpFormatter0.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options16, "usage: "); java.lang.String str29 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.defaultLongOptPrefix = "--"; java.lang.StringBuffer stringBuffer32 = null; org.apache.commons.cli.Options options34 = null; try { java.lang.StringBuffer stringBuffer37 = helpFormatter0.renderOptions(stringBuffer32, 100, options34, 74, 0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage:" + "'", str11, "usage:"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertNull(option18); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(list23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str24, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                 " + "'", str29, "                                                 "); }
public void test871() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test871"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setNewLine("usage: "); int int11 = helpFormatter0.getWidth(); helpFormatter0.setOptPrefix("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); }
public void test872() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test872"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); int int14 = helpFormatter0.getDescPadding(); java.lang.String str15 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); java.util.Collection collection28 = options21.getOptionGroups(); helpFormatter0.printHelp(" ", options21, false); try { org.apache.commons.cli.Options options34 = options21.addOption("                  ", true, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '                  ' contains an illegal character : ' '"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertEquals("'" + str15 + "' != '" + " " + "'", str15, " "); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(collection28); }
public void test873() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test873"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = ""; helpFormatter0.setSyntaxPrefix(""); java.lang.String str17 = helpFormatter0.rtrim("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator18 = null; helpFormatter0.setOptionComparator(comparator18); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]"); }
public void test874() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test874"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultNewLine = "[ Options: [ short {} ] [ long {} ]"; helpFormatter0.setNewLine("-"); helpFormatter0.setLongOptPrefix("[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"); java.util.Comparator comparator12 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertNotNull(comparator12); }
public void test875() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test875"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; helpFormatter0.setOptPrefix(""); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); helpFormatter6.defaultDescPad = 10; org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option12 = options10.getOption(" "); java.util.List list14 = options10.getMatchingOptions("hi!"); helpFormatter6.printHelp("usage: ", options10, false); java.lang.String str17 = helpFormatter6.defaultOptPrefix; java.lang.String str18 = helpFormatter6.getNewLine(); java.lang.String str19 = helpFormatter6.getLongOptSeparator(); java.lang.String str20 = helpFormatter6.getLongOptPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); int int28 = helpFormatter24.findWrapPos("", (int) '#', 1); helpFormatter24.defaultWidth = (byte) 10; java.lang.String str31 = helpFormatter24.getNewLine(); helpFormatter24.defaultOptPrefix = " "; int int34 = helpFormatter24.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter37 = new org.apache.commons.cli.HelpFormatter(); helpFormatter37.defaultDescPad = 10; org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option43 = options41.getOption(" "); java.util.List list45 = options41.getMatchingOptions("hi!"); helpFormatter37.printHelp("usage: ", options41, false); java.util.Collection collection48 = options41.getOptionGroups(); helpFormatter24.printHelp("hi!", "", options41, "arg"); helpFormatter6.printHelp((int) (short) -1, "\n", " ", options41, "--"); helpFormatter0.printHelp("  ", options41); org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(list14); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-" + "'", str17, "-"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n" + "'", str18, "\n"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + " " + "'", str19, " "); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "--" + "'", str20, "--"); org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1)); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n"); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1); org.junit.Assert.assertNull(option43); org.junit.Assert.assertNotNull(list45); org.junit.Assert.assertNotNull(collection48); }
public void test876() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test876"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Comparator comparator6 = helpFormatter0.optionComparator; helpFormatter0.defaultOptPrefix = " "; org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(comparator6); }
public void test877() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test877"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); org.apache.commons.cli.HelpFormatter helpFormatter27 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator28 = null; helpFormatter27.optionComparator = comparator28; org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options(); helpFormatter27.printHelp("--", options31); java.lang.String str34 = helpFormatter27.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter35 = new org.apache.commons.cli.HelpFormatter(); helpFormatter35.defaultDescPad = 10; org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option41 = options39.getOption(" "); java.util.List list43 = options39.getMatchingOptions("hi!"); helpFormatter35.printHelp("usage: ", options39, false); java.util.Comparator comparator46 = helpFormatter35.getOptionComparator(); helpFormatter27.setOptionComparator(comparator46); helpFormatter0.setOptionComparator(comparator46); helpFormatter0.setDescPadding((int) (byte) 0); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "arg" + "'", str34, "arg"); org.junit.Assert.assertNull(option41); org.junit.Assert.assertNotNull(list43); org.junit.Assert.assertNotNull(comparator46); }
public void test878() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test878"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int14 = helpFormatter10.findWrapPos("", (int) '#', 1); helpFormatter10.defaultWidth = (byte) 10; java.lang.String str17 = helpFormatter10.getNewLine(); helpFormatter10.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter21 = new org.apache.commons.cli.HelpFormatter(); helpFormatter21.defaultDescPad = 10; org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option27 = options25.getOption(" "); java.util.List list29 = options25.getMatchingOptions("hi!"); helpFormatter21.printHelp("usage: ", options25, false); helpFormatter10.printHelp("\n", options25); helpFormatter0.printHelp("usage: ", "-", options25, "arg", false); java.util.Collection collection36 = options25.getOptionGroups(); java.util.Collection collection37 = options25.getOptions(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\n" + "'", str17, "\n"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(list29); org.junit.Assert.assertNotNull(collection36); org.junit.Assert.assertNotNull(collection37); }
public void test879() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test879"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setSyntaxPrefix("--"); helpFormatter0.defaultLongOptPrefix = "[ Options: [ short {} ] [ long {} ]"; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); }
public void test880() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test880"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setSyntaxPrefix("-"); helpFormatter0.defaultArgName = "hi!"; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); }
public void test881() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test881"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int14 = helpFormatter10.findWrapPos("", (int) '#', 1); helpFormatter10.defaultWidth = (byte) 10; java.lang.String str17 = helpFormatter10.getNewLine(); java.util.Comparator comparator18 = helpFormatter10.getOptionComparator(); java.util.Comparator comparator19 = helpFormatter10.getOptionComparator(); helpFormatter0.optionComparator = comparator19; java.io.PrintWriter printWriter21 = null; try { helpFormatter0.printWrapped(printWriter21, (int) (short) 100, "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\n" + "'", str17, "\n"); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertNotNull(comparator19); }
public void test882() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test882"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasShortOption(" "); java.lang.String str29 = options17.toString(); java.util.List list30 = options17.helpOptions(); java.util.Collection collection31 = options17.getOptions(); org.apache.commons.cli.Option option33 = options17.getOption("                                     "); org.apache.commons.cli.OptionGroup optionGroup34 = null; try { org.apache.commons.cli.Options options35 = options17.addOptionGroup(optionGroup34); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str29, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list30); org.junit.Assert.assertNotNull(collection31); org.junit.Assert.assertNull(option33); }
public void test001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test001"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.io.PrintWriter printWriter7 = null; try { helpFormatter0.printUsage(printWriter7, (int) (byte) -1, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); }
public void test002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test002"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option8 = options6.getOption(" "); try { helpFormatter0.printHelp("", options6, false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNull(option8); }
public void test003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test003"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; java.io.PrintWriter printWriter10 = null; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.Collection collection17 = options14.getOptions(); try { helpFormatter0.printHelp(printWriter10, 100, "arg", "", options14, 0, (int) (byte) 100, "-"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(collection17); }
public void test004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test004"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; java.lang.StringBuffer stringBuffer3 = null; org.apache.commons.cli.Options options5 = null; try { java.lang.StringBuffer stringBuffer8 = helpFormatter0.renderOptions(stringBuffer3, (int) (byte) 100, options5, (int) (short) 100, (int) (short) 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test005"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.StringBuffer stringBuffer5 = null; try { java.lang.StringBuffer stringBuffer9 = helpFormatter0.renderWrappedText(stringBuffer5, 0, 10, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); }
public void test006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test006"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.StringBuffer stringBuffer12 = null; org.apache.commons.cli.Options options14 = null; try { java.lang.StringBuffer stringBuffer17 = helpFormatter0.renderOptions(stringBuffer12, (int) (short) 1, options14, (int) (byte) -1, (int) (byte) 10); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); }
public void test007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test007"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); try { helpFormatter0.printHelp("", options7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); }
public void test008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test008"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Collection collection11 = options4.getOptionGroups(); java.util.Collection collection12 = options4.getOptions(); org.apache.commons.cli.Option option13 = null; try { org.apache.commons.cli.Options options14 = options4.addOption(option13); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertNotNull(collection12); }
public void test009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test009"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; java.io.PrintWriter printWriter3 = null; try { helpFormatter0.printUsage(printWriter3, (int) 'a', " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test010"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option12 = options10.getOption(" "); java.util.Collection collection13 = options10.getOptions(); java.util.Collection collection14 = options10.getOptions(); java.lang.String str15 = options10.toString(); try { helpFormatter0.printHelp((int) (byte) 1, "", "\n", options10, "usage: ", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(collection13); org.junit.Assert.assertNotNull(collection14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str15, "[ Options: [ short {} ] [ long {} ]"); }
public void test011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test011"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth(10); org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); try { helpFormatter0.printHelp("", options17, true); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); }
public void test012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test012"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; java.io.PrintWriter printWriter7 = null; try { helpFormatter0.printWrapped(printWriter7, (int) (short) 0, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test013"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultArgName = ""; java.io.PrintWriter printWriter8 = null; org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); java.util.List list11 = options10.getRequiredOptions(); try { helpFormatter0.printOptions(printWriter8, (int) (short) 1, options10, 100, (int) (byte) 10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertNotNull(list11); }
public void test014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test014"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); int int11 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); }
public void test015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test015"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLongOptPrefix("usage:"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test016"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); try { org.apache.commons.cli.Options options18 = options7.addOption("\n", " ", false, "-"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal option name '?'"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); }
public void test017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test017"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; java.io.PrintWriter printWriter13 = null; try { helpFormatter0.printWrapped(printWriter13, (int) (byte) -1, 1, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test018"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getWidth(); java.lang.StringBuffer stringBuffer2 = null; try { java.lang.StringBuffer stringBuffer6 = helpFormatter0.renderWrappedText(stringBuffer2, (int) (short) 0, 3, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 74 + "'", int1 == 74); }
public void test019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test019"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setLongOptSeparator(""); }
public void test020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test020"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.io.PrintWriter printWriter6 = null; try { helpFormatter0.printUsage(printWriter6, 10, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test021"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); java.lang.String str15 = helpFormatter0.rtrim("--"); java.io.PrintWriter printWriter16 = null; try { helpFormatter0.printWrapped(printWriter16, (int) (byte) 1, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "--" + "'", str15, "--"); }
public void test022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test022"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getWidth(); java.io.PrintWriter printWriter2 = null; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions(""); try { helpFormatter0.printOptions(printWriter2, (int) (byte) 10, options4, 1, (int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 74 + "'", int1 == 74); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); }
public void test023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test023"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; java.lang.StringBuffer stringBuffer10 = null; try { java.lang.StringBuffer stringBuffer14 = helpFormatter0.renderWrappedText(stringBuffer10, (int) (byte) 0, (-1), "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test024"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); org.apache.commons.cli.HelpFormatter helpFormatter7 = new org.apache.commons.cli.HelpFormatter(); helpFormatter7.defaultNewLine = " "; org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options(); helpFormatter7.printHelp("arg", options11); org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.Collection collection17 = options14.getOptions(); java.util.Collection collection18 = options14.getOptions(); java.lang.String str19 = options14.toString(); helpFormatter7.printHelp("--", options14); try { helpFormatter0.printHelp("", options14, true); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(collection17); org.junit.Assert.assertNotNull(collection18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str19, "[ Options: [ short {} ] [ long {} ]"); }
public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.io.PrintWriter printWriter6 = null; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); helpFormatter10.defaultDescPad = 10; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); helpFormatter10.printHelp("usage: ", options14, false); java.util.Collection collection21 = options14.getOptionGroups(); try { helpFormatter0.printHelp(printWriter6, (int) ' ', "\n", "arg", options14, (int) (short) 10, 0, "[ Options: [ short {} ] [ long {} ]", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertNotNull(collection21); }
public void test026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test026"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultArgName = " "; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp("", options11, false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); }
public void test027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test027"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp("usage: ", options14, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); }
public void test028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test028"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); java.lang.String str15 = helpFormatter0.rtrim("--"); java.io.PrintWriter printWriter16 = null; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); try { helpFormatter0.printHelp(printWriter16, 100, "", " ", options20, (int) (byte) -1, (int) (short) -1, "usage:"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "--" + "'", str15, "--"); }
public void test029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test029"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); java.lang.Class<?> wildcardClass10 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(wildcardClass10); }
public void test030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test030"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; java.lang.StringBuffer stringBuffer10 = null; try { java.lang.StringBuffer stringBuffer14 = helpFormatter0.renderWrappedText(stringBuffer10, (int) (byte) 1, (int) (byte) -1, "usage:"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test031"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultSyntaxPrefix = "[ Options: [ short {} ] [ long {} ]"; java.lang.String str8 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); }
public void test032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test032"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setNewLine(" "); helpFormatter0.setLeftPadding((int) '#'); }
public void test033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test033"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); java.io.PrintWriter printWriter10 = null; try { helpFormatter0.printWrapped(printWriter10, (int) 'a', "usage:"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(comparator9); }
public void test034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test034"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 3; java.lang.Class<?> wildcardClass15 = helpFormatter0.getClass(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertNotNull(wildcardClass15); }
public void test035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test035"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.Collection collection7 = options2.getOptions(); java.util.List list8 = options2.helpOptions(); java.lang.Class<?> wildcardClass9 = options2.getClass(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test036"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; java.lang.StringBuffer stringBuffer10 = null; try { java.lang.StringBuffer stringBuffer14 = helpFormatter0.renderWrappedText(stringBuffer10, (int) '4', 1, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test037"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; java.io.PrintWriter printWriter12 = null; try { helpFormatter0.printWrapped(printWriter12, (int) 'a', ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); }
public void test038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test038"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; helpFormatter0.setSyntaxPrefix(" "); helpFormatter0.setArgName("arg"); java.lang.Class<?> wildcardClass16 = helpFormatter0.getClass(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertNotNull(wildcardClass16); }
public void test039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test039"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; java.lang.String str7 = helpFormatter0.getLongOptSeparator(); java.lang.StringBuffer stringBuffer8 = null; try { java.lang.StringBuffer stringBuffer12 = helpFormatter0.renderWrappedText(stringBuffer8, 74, (int) '4', ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); }
public void test040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test040"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Collection collection11 = options4.getOptionGroups(); java.util.Collection collection12 = options4.getOptions(); org.apache.commons.cli.Option option14 = options4.getOption("usage: "); org.apache.commons.cli.Option option15 = null; try { org.apache.commons.cli.Options options16 = options4.addOption(option15); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertNotNull(collection12); org.junit.Assert.assertNull(option14); }
public void test041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test041"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.Class<?> wildcardClass5 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(wildcardClass5); }
public void test042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test042"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator23 = null; helpFormatter22.optionComparator = comparator23; org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options(); helpFormatter22.printHelp("--", options26); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options26); org.apache.commons.cli.Option option29 = null; try { org.apache.commons.cli.Options options30 = options26.addOption(option29); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); }
public void test043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test043"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.List list6 = options2.getRequiredOptions(); org.apache.commons.cli.Option option7 = null; try { org.apache.commons.cli.Options options8 = options2.addOption(option7); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list6); }
public void test044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test044"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); java.lang.StringBuffer stringBuffer6 = null; org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option10 = options8.getOption(" "); java.util.List list12 = options8.getMatchingOptions(""); try { java.lang.StringBuffer stringBuffer15 = helpFormatter0.renderOptions(stringBuffer6, (int) (short) -1, options8, (int) (byte) 1, (-1)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertNull(option10); org.junit.Assert.assertNotNull(list12); }
public void test045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test045"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultLeftPad = 0; java.io.PrintWriter printWriter14 = null; try { helpFormatter0.printWrapped(printWriter14, (-1), ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); }
public void test046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test046"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.List list6 = options2.getRequiredOptions(); try { org.apache.commons.cli.Options options10 = options2.addOption("-", false, "usage:"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal option name '-'"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list6); }
public void test047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test047"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option13 = options11.getOption(" "); java.util.List list15 = options11.getMatchingOptions("hi!"); boolean boolean17 = options11.hasOption(" "); java.util.List list18 = options11.getRequiredOptions(); java.lang.String str19 = options11.toString(); try { helpFormatter0.printHelp((int) (short) 10, "", "  ", options11, "[ Options: [ short {} ] [ long {} ]", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertNull(option13); org.junit.Assert.assertNotNull(list15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str19, "[ Options: [ short {} ] [ long {} ]"); }
public void test048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test048"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator15 = null; helpFormatter14.optionComparator = comparator15; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); helpFormatter14.printHelp("--", options18); java.lang.String str21 = helpFormatter14.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); helpFormatter22.defaultDescPad = 10; org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option28 = options26.getOption(" "); java.util.List list30 = options26.getMatchingOptions("hi!"); helpFormatter22.printHelp("usage: ", options26, false); java.util.Comparator comparator33 = helpFormatter22.getOptionComparator(); helpFormatter14.setOptionComparator(comparator33); helpFormatter0.optionComparator = comparator33; java.lang.StringBuffer stringBuffer36 = null; try { java.lang.StringBuffer stringBuffer40 = helpFormatter0.renderWrappedText(stringBuffer36, (int) (short) 10, 3, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "arg" + "'", str21, "arg"); org.junit.Assert.assertNull(option28); org.junit.Assert.assertNotNull(list30); org.junit.Assert.assertNotNull(comparator33); }
public void test049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test049"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; java.lang.String str3 = helpFormatter0.defaultNewLine; java.io.PrintWriter printWriter4 = null; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printUsage(printWriter4, (int) (short) -1, "                                                 ", options7); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); }
public void test050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test050"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasShortOption(" "); java.util.Collection collection29 = options17.getOptionGroups(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(collection29); }
public void test051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test051"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.setLongOptSeparator("  "); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); helpFormatter20.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); java.lang.String str28 = options27.toString(); helpFormatter25.printHelp("-", options27, true); helpFormatter20.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options27, "usage: ", true); boolean boolean35 = options27.hasLongOption("[ Options: [ short {} ] [ long {} ]"); try { helpFormatter0.printHelp("usage:", options27, false); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); }
public void test052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test052"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; helpFormatter0.defaultNewLine = "  "; java.io.PrintWriter printWriter5 = null; try { helpFormatter0.printWrapped(printWriter5, 10, 10, "-"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test053"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setArgName("-"); int int10 = helpFormatter0.defaultDescPad; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3); }
public void test054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test054"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; java.io.PrintWriter printWriter10 = null; try { helpFormatter0.printUsage(printWriter10, (int) (short) -1, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); }
public void test055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test055"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setLeftPadding((int) (byte) -1); int int20 = helpFormatter0.getWidth(); int int24 = helpFormatter0.findWrapPos("hi!", (int) ' ', (int) '#'); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 74 + "'", int20 == 74); org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1)); }
public void test056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test056"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); org.apache.commons.cli.Option option15 = options7.getOption("[ Options: [ short {} ] [ long {} ]"); try { org.apache.commons.cli.Options options19 = options7.addOption("hi!", false, ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'hi!' contains an illegal character : '!'"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option15); }
public void test057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test057"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.io.PrintWriter printWriter1 = null; try { helpFormatter0.printWrapped(printWriter1, (int) (short) 10, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test058"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.util.Comparator comparator11 = helpFormatter0.optionComparator; helpFormatter0.setDescPadding((int) (short) 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertNotNull(comparator11); }
public void test059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test059"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.io.PrintWriter printWriter7 = null; try { helpFormatter0.printWrapped(printWriter7, (int) (short) 10, (int) ' ', ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); }
public void test060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test060"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.defaultNewLine = "[ Options: [ short {} ] [ long {} ]"; helpFormatter0.setLeftPadding(52); helpFormatter0.defaultDescPad = 0; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test061"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultLeftPad = (short) 0; org.apache.commons.cli.Options options17 = null; try { helpFormatter0.printHelp((int) (byte) -1, " ", "-", options17, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); }
public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp("--", options8); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test063"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.Collection collection7 = options2.getOptions(); org.apache.commons.cli.Options options11 = options2.addOption("arg", false, ""); org.apache.commons.cli.Option option12 = null; try { org.apache.commons.cli.Options options13 = options2.addOption(option12); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertNotNull(options11); }
public void test064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test064"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Collection collection11 = options4.getOptionGroups(); java.util.Collection collection12 = options4.getOptions(); org.apache.commons.cli.Option option14 = options4.getOption("usage: "); org.apache.commons.cli.Option option15 = null; try { org.apache.commons.cli.OptionGroup optionGroup16 = options4.getOptionGroup(option15); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertNotNull(collection12); org.junit.Assert.assertNull(option14); }
public void test065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test065"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option18 = options16.getOption(" "); java.util.List list20 = options16.getMatchingOptions("hi!"); boolean boolean22 = options16.hasOption(" "); org.apache.commons.cli.Options options27 = options16.addOption("", " ", false, "  "); boolean boolean29 = options27.hasShortOption("                                                 "); try { helpFormatter0.printHelp(printWriter12, (int) 'a', "                                                 ", "", options27, 10, (-1), "\n", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertNull(option18); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(options27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); }
public void test066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test066"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setWidth((int) (byte) 100); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); }
public void test067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test067"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; java.lang.String str7 = helpFormatter0.getLongOptSeparator(); java.io.PrintWriter printWriter8 = null; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); java.lang.String str13 = options12.toString(); helpFormatter10.printHelp("-", options12, true); try { helpFormatter0.printOptions(printWriter8, (int) 'a', options12, 52, 0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str13, "[ Options: [ short {} ] [ long {} ]"); }
public void test068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test068"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding((int) (short) 100); java.io.PrintWriter printWriter11 = null; try { helpFormatter0.printWrapped(printWriter11, (int) (byte) -1, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); }
public void test069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test069"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); java.lang.String str22 = helpFormatter0.createPadding(3); java.io.PrintWriter printWriter23 = null; try { helpFormatter0.printWrapped(printWriter23, (int) ' ', "usage:"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "  " + "'", str22, "  "); }
public void test070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test070"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); java.lang.String str10 = options9.toString(); org.apache.commons.cli.Option option12 = options9.getOption("arg"); boolean boolean14 = options9.hasLongOption("hi!"); helpFormatter0.printHelp("                                                 ", "", options9, "                                                 ", false); org.apache.commons.cli.Option option18 = null; try { org.apache.commons.cli.OptionGroup optionGroup19 = options9.getOptionGroup(option18); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test071"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setArgName(""); org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option25 = options23.getOption(" "); java.util.List list27 = options23.getMatchingOptions("hi!"); boolean boolean29 = options23.hasShortOption("arg"); org.apache.commons.cli.Option option31 = options23.getOption("arg"); try { helpFormatter0.printHelp((-1), "", "                                                 ", options23, ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertNull(option25); org.junit.Assert.assertNotNull(list27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNull(option31); }
public void test072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test072"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); java.lang.String str14 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setArgName(" "); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "usage: " + "'", str14, "usage: "); }
public void test073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test073"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultDescPad = 0; java.lang.String str8 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); }
public void test074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test074"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.List list6 = options2.getRequiredOptions(); try { org.apache.commons.cli.Options options11 = options2.addOption("usage:", "\n", false, ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'usage:' contains an illegal character : ':'"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list6); }
public void test075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test075"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); int int8 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test076"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; helpFormatter0.defaultNewLine = "  "; java.io.PrintWriter printWriter5 = null; org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); try { helpFormatter0.printHelp(printWriter5, 1, "", "-", options9, 0, (int) (short) -1, ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } }
public void test077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test077"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.Collection collection7 = options2.getOptions(); org.apache.commons.cli.Options options11 = options2.addOption("arg", false, ""); org.apache.commons.cli.OptionGroup optionGroup12 = null; try { org.apache.commons.cli.Options options13 = options2.addOptionGroup(optionGroup12); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertNotNull(options11); }
public void test078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test078"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.io.PrintWriter printWriter14 = null; org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultNewLine = " "; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); helpFormatter16.printHelp("arg", options20); try { helpFormatter0.printOptions(printWriter14, (int) (byte) -1, options20, (int) (byte) 100, 100); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); }
public void test079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test079"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; helpFormatter0.defaultLeftPad = (short) 0; }
public void test080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test080"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth(10); org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); java.lang.String str15 = options14.toString(); org.apache.commons.cli.Option option17 = options14.getOption("arg"); java.lang.String str18 = options14.toString(); java.util.List list19 = options14.helpOptions(); try { helpFormatter0.printHelp("", "--", options14, "arg", true); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str15, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str18, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list19); }
public void test081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test081"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); java.lang.String str10 = helpFormatter0.getArgName(); int int11 = helpFormatter0.defaultWidth; helpFormatter0.defaultLongOptPrefix = "usage:"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); }
public void test082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test082"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getLongOptSeparator(); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); java.io.PrintWriter printWriter15 = null; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option20 = options18.getOption(" "); java.util.List list22 = options18.getMatchingOptions("hi!"); boolean boolean24 = options18.hasOption(" "); java.util.List list25 = options18.getRequiredOptions(); try { helpFormatter0.printUsage(printWriter15, 100, "\n", options18); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); org.junit.Assert.assertNull(option20); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(list25); }
public void test083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test083"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasShortOption(" "); java.util.List list29 = options17.helpOptions(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(list29); }
public void test084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test084"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); java.lang.String str10 = options9.toString(); org.apache.commons.cli.Option option12 = options9.getOption("arg"); boolean boolean14 = options9.hasLongOption("hi!"); helpFormatter0.printHelp("                                                 ", "", options9, "                                                 ", false); helpFormatter0.setLongOptPrefix("hi!"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test085"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); helpFormatter0.printHelp("\n", options15); try { org.apache.commons.cli.Options options26 = options15.addOption(" ", false, "-"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal option name ' '"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); }
public void test086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test086"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); java.lang.String str10 = helpFormatter0.getArgName(); int int11 = helpFormatter0.defaultWidth; java.lang.String str12 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); }
public void test087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test087"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultDescPad = (byte) -1; java.io.PrintWriter printWriter13 = null; org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultNewLine = " "; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); helpFormatter17.printHelp("arg", options21); try { helpFormatter0.printHelp(printWriter13, (int) (byte) -1, "usage:", "--", options21, (-1), (int) (byte) 10, "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); }
public void test088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test088"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(" "); java.lang.String str8 = helpFormatter0.defaultLongOptPrefix; java.lang.String str9 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-" + "'", str9, "-"); }
public void test089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test089"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); helpFormatter0.setOptPrefix("usage: "); helpFormatter0.setDescPadding(0); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); }
public void test090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test090"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setLeftPadding((int) '#'); java.lang.String str10 = helpFormatter0.defaultArgName; java.lang.String str11 = helpFormatter0.getLongOptPrefix(); try { java.lang.String str13 = helpFormatter0.createPadding((-1)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--" + "'", str11, "--"); }
public void test091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test091"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultOptPrefix = "usage:"; java.lang.String str9 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n"); }
public void test092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test092"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); java.lang.String str10 = helpFormatter0.defaultArgName; java.io.PrintWriter printWriter11 = null; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); int int17 = helpFormatter13.findWrapPos("", (int) '#', 1); java.lang.String str18 = helpFormatter13.getSyntaxPrefix(); helpFormatter13.setLongOptSeparator(" "); org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); java.lang.String str23 = options22.toString(); org.apache.commons.cli.Option option25 = options22.getOption("arg"); helpFormatter13.printHelp("usage:", options22); try { helpFormatter0.printOptions(printWriter11, (int) '4', options22, 0, 10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "usage: " + "'", str18, "usage: "); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str23, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option25); }
public void test093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test093"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setArgName(""); java.io.PrintWriter printWriter20 = null; try { helpFormatter0.printUsage(printWriter20, (int) 'a', "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); }
public void test094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test094"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getLongOptSeparator(); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.Options options17 = null; try { helpFormatter0.printHelp("--", "                                                 ", options17, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); }
public void test095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test095"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setDescPadding((int) (short) -1); java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.Collection collection17 = options14.getOptions(); java.util.List list18 = options14.helpOptions(); try { helpFormatter0.printOptions(printWriter12, (int) (byte) -1, options14, 0, (int) (short) 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(collection17); org.junit.Assert.assertNotNull(list18); }
public void test096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test096"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); }
public void test097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test097"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setWidth(0); org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); boolean boolean18 = options12.hasOption(" "); org.apache.commons.cli.Options options23 = options12.addOption("", " ", false, "  "); boolean boolean25 = options23.hasOption("\n"); java.lang.String str26 = options23.toString(); try { helpFormatter0.printHelp("", options23); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(options23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]" + "'", str26, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); }
public void test098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test098"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; int int18 = helpFormatter0.defaultWidth; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 74 + "'", int18 == 74); }
public void test099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test099"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); java.lang.StringBuffer stringBuffer10 = null; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator13 = null; helpFormatter12.optionComparator = comparator13; org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); helpFormatter12.printHelp("--", options16); java.lang.String str19 = helpFormatter12.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); helpFormatter20.defaultDescPad = 10; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option26 = options24.getOption(" "); java.util.List list28 = options24.getMatchingOptions("hi!"); helpFormatter20.printHelp("usage: ", options24, false); java.util.Comparator comparator31 = helpFormatter20.getOptionComparator(); helpFormatter12.setOptionComparator(comparator31); org.apache.commons.cli.HelpFormatter helpFormatter34 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator35 = null; helpFormatter34.optionComparator = comparator35; org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options(); helpFormatter34.printHelp("--", options38); helpFormatter12.printHelp("[ Options: [ short {} ] [ long {} ]", options38); try { java.lang.StringBuffer stringBuffer43 = helpFormatter0.renderOptions(stringBuffer10, (int) (byte) 100, options38, (int) (byte) -1, (int) (byte) 10); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "arg" + "'", str19, "arg"); org.junit.Assert.assertNull(option26); org.junit.Assert.assertNotNull(list28); org.junit.Assert.assertNotNull(comparator31); }
public void test100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test100"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); org.apache.commons.cli.Option option14 = null; try { org.apache.commons.cli.OptionGroup optionGroup15 = options7.getOptionGroup(option14); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); }
public void test101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test101"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setOptPrefix(""); helpFormatter0.setLeftPadding(10); java.io.PrintWriter printWriter13 = null; try { helpFormatter0.printUsage(printWriter13, (int) (short) -1, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test102"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); java.lang.String str27 = helpFormatter0.getOptPrefix(); helpFormatter0.defaultLongOptPrefix = ""; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertEquals("'" + str27 + "' != '" + " " + "'", str27, " "); }
public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str11 = helpFormatter0.rtrim("usage: "); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setArgName(" "); java.lang.String str15 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage:" + "'", str11, "usage:"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "--" + "'", str15, "--"); }
public void test104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test104"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.setLeftPadding((int) '#'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); }
public void test105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test105"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setWidth(0); java.lang.String str11 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setArgName(""); int int14 = helpFormatter0.defaultDescPad; java.util.Comparator comparator15 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--" + "'", str11, "--"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertNotNull(comparator15); }
public void test106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test106"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); int int56 = helpFormatter0.getWidth(); java.io.PrintWriter printWriter57 = null; try { helpFormatter0.printWrapped(printWriter57, (int) (byte) -1, (int) (byte) -1, "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 74 + "'", int56 == 74); }
public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultArgName = ""; java.io.PrintWriter printWriter8 = null; try { helpFormatter0.printWrapped(printWriter8, (int) (byte) 1, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test108"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.HelpFormatter helpFormatter3 = new org.apache.commons.cli.HelpFormatter(); helpFormatter3.defaultDescPad = 10; org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.List list11 = options7.getMatchingOptions("hi!"); helpFormatter3.printHelp("usage: ", options7, false); java.lang.String str14 = helpFormatter3.defaultOptPrefix; helpFormatter3.setSyntaxPrefix(" "); java.util.Comparator comparator17 = helpFormatter3.optionComparator; helpFormatter0.setOptionComparator(comparator17); java.io.PrintWriter printWriter19 = null; try { helpFormatter0.printUsage(printWriter19, (-1), "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(list11); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-" + "'", str14, "-"); org.junit.Assert.assertNotNull(comparator17); }
public void test109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test109"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); java.lang.String str16 = options15.toString(); org.apache.commons.cli.Option option18 = options15.getOption("arg"); java.util.List list20 = options15.getMatchingOptions("hi!"); helpFormatter0.printHelp((-1), "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", options15, "arg", true); java.lang.Class<?> wildcardClass24 = options15.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str16, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option18); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertNotNull(wildcardClass24); }
public void test110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test110"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; helpFormatter0.setSyntaxPrefix(" "); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultLeftPad = 3; helpFormatter0.defaultArgName = "hi!"; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); }
public void test111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test111"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); java.lang.Class<?> wildcardClass21 = comparator19.getClass(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertNotNull(wildcardClass21); }
public void test112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test112"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); java.lang.String str10 = helpFormatter0.defaultArgName; int int11 = helpFormatter0.getDescPadding(); java.lang.String str13 = helpFormatter0.createPadding(0); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); }
public void test113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test113"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.defaultSyntaxPrefix = ""; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter5.findWrapPos("", (int) '#', 1); helpFormatter5.defaultWidth = (byte) 10; java.lang.String str12 = helpFormatter5.getNewLine(); java.util.Comparator comparator13 = helpFormatter5.optionComparator; helpFormatter0.optionComparator = comparator13; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); boolean boolean23 = options17.hasOption(" "); boolean boolean25 = options17.hasShortOption("usage: "); try { helpFormatter0.printHelp("", "\n", options17, "  "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertNotNull(comparator13); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); }
public void test114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test114"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.defaultWidth = (short) 0; int int5 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3); }
public void test115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test115"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.optionComparator; java.lang.String str9 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n"); }
public void test116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test116"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(" "); java.lang.String str8 = helpFormatter0.defaultLongOptPrefix; java.lang.String str9 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); boolean boolean18 = options12.hasOption(" "); org.apache.commons.cli.Options options23 = options12.addOption("", " ", false, "  "); helpFormatter0.printHelp("arg", "  ", options12, "-"); java.lang.Class<?> wildcardClass26 = options12.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "--" + "'", str9, "--"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(options23); org.junit.Assert.assertNotNull(wildcardClass26); }
public void test117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test117"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); int int17 = helpFormatter13.findWrapPos("", (int) '#', 1); int int18 = helpFormatter13.defaultLeftPad; int int19 = helpFormatter13.getLeftPadding(); helpFormatter13.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator22 = helpFormatter13.getOptionComparator(); helpFormatter0.setOptionComparator(comparator22); java.lang.String str24 = helpFormatter0.defaultNewLine; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\n" + "'", str24, "\n"); }
public void test118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test118"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.StringBuffer stringBuffer11 = null; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option15 = options13.getOption(" "); java.util.Collection collection16 = options13.getOptions(); java.util.Collection collection17 = options13.getOptions(); try { java.lang.StringBuffer stringBuffer20 = helpFormatter0.renderOptions(stringBuffer11, 10, options13, (int) (short) 1, (int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(collection16); org.junit.Assert.assertNotNull(collection17); }
public void test119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test119"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.Collection collection7 = options2.getOptions(); java.util.List list8 = options2.helpOptions(); org.apache.commons.cli.Option option10 = options2.getOption("-"); try { org.apache.commons.cli.Options options14 = options2.addOption(" ", true, ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal option name ' '"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNull(option10); }
public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultSyntaxPrefix = "arg"; helpFormatter0.setArgName(" "); java.io.PrintWriter printWriter13 = null; org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); helpFormatter15.defaultOptPrefix = " "; int int25 = helpFormatter15.defaultLeftPad; java.lang.String str26 = helpFormatter15.getArgName(); int int27 = helpFormatter15.defaultDescPad; helpFormatter15.defaultLongOptPrefix = "\n"; org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option35 = options33.getOption(" "); java.util.List list37 = options33.getMatchingOptions("hi!"); boolean boolean39 = options33.hasOption(" "); java.util.List list40 = options33.getRequiredOptions(); java.util.List list41 = options33.helpOptions(); helpFormatter15.printHelp((int) (short) -1, "\n", "usage:", options33, "", true); try { helpFormatter0.printOptions(printWriter13, (int) (short) 10, options33, (int) '#', 0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg"); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3); org.junit.Assert.assertNull(option35); org.junit.Assert.assertNotNull(list37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(list41); }
public void test121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test121"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); helpFormatter0.defaultDescPad = 0; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); java.lang.String str19 = options18.toString(); org.apache.commons.cli.Option option21 = options18.getOption("arg"); boolean boolean23 = options18.hasLongOption("hi!"); helpFormatter0.printHelp("\n", "arg", options18, "usage: "); org.apache.commons.cli.Option option26 = null; try { org.apache.commons.cli.Options options27 = options18.addOption(option26); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str19, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option21); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); }
public void test122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test122"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.Collection collection7 = options2.getOptions(); java.util.List list8 = options2.helpOptions(); org.apache.commons.cli.Option option10 = options2.getOption("-"); try { org.apache.commons.cli.Options options14 = options2.addOption("  ", true, ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '  ' contains an illegal character : ' '"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNull(option10); }
public void test123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test123"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); java.lang.String str27 = helpFormatter0.getOptPrefix(); helpFormatter0.defaultWidth = '4'; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertEquals("'" + str27 + "' != '" + " " + "'", str27, " "); }
public void test124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test124"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setNewLine(" "); java.lang.String str10 = helpFormatter0.defaultLongOptPrefix; java.io.PrintWriter printWriter11 = null; try { helpFormatter0.printWrapped(printWriter11, (int) (byte) -1, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--" + "'", str10, "--"); }
public void test125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test125"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; helpFormatter0.defaultNewLine = "  "; helpFormatter0.defaultDescPad = (short) -1; }
public void test126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test126"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option20 = options18.getOption(" "); java.util.List list22 = options18.getMatchingOptions("hi!"); boolean boolean24 = options18.hasOption(" "); java.util.List list25 = options18.getRequiredOptions(); java.util.List list26 = options18.helpOptions(); helpFormatter0.printHelp((int) (short) -1, "\n", "usage:", options18, "", true); java.lang.String str30 = helpFormatter0.getNewLine(); org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option36 = options34.getOption(" "); java.util.List list38 = options34.getMatchingOptions("hi!"); boolean boolean40 = options34.hasOption(" "); java.util.List list41 = options34.getRequiredOptions(); java.lang.String str42 = options34.toString(); try { helpFormatter0.printHelp(0, "", "", options34, "  "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertNull(option20); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\n" + "'", str30, "\n"); org.junit.Assert.assertNull(option36); org.junit.Assert.assertNotNull(list38); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(list41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str42, "[ Options: [ short {} ] [ long {} ]"); }
public void test127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test127"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); int int15 = helpFormatter11.findWrapPos("", (int) '#', 1); helpFormatter11.defaultWidth = (byte) 10; java.lang.String str18 = helpFormatter11.getNewLine(); java.util.Comparator comparator19 = helpFormatter11.getOptionComparator(); java.util.Comparator comparator20 = helpFormatter11.getOptionComparator(); helpFormatter0.optionComparator = comparator20; org.apache.commons.cli.HelpFormatter helpFormatter23 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator24 = null; helpFormatter23.optionComparator = comparator24; org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); helpFormatter23.printHelp("--", options27); java.lang.String str30 = helpFormatter23.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter31 = new org.apache.commons.cli.HelpFormatter(); helpFormatter31.defaultDescPad = 10; org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option37 = options35.getOption(" "); java.util.List list39 = options35.getMatchingOptions("hi!"); helpFormatter31.printHelp("usage: ", options35, false); java.util.Comparator comparator42 = helpFormatter31.getOptionComparator(); helpFormatter23.setOptionComparator(comparator42); org.apache.commons.cli.HelpFormatter helpFormatter47 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator48 = null; helpFormatter47.optionComparator = comparator48; org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); helpFormatter47.printHelp("--", options51); java.lang.String str54 = helpFormatter47.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter55 = new org.apache.commons.cli.HelpFormatter(); helpFormatter55.defaultDescPad = 10; org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option61 = options59.getOption(" "); java.util.List list63 = options59.getMatchingOptions("hi!"); helpFormatter55.printHelp("usage: ", options59, false); java.util.Comparator comparator66 = helpFormatter55.getOptionComparator(); helpFormatter47.setOptionComparator(comparator66); org.apache.commons.cli.HelpFormatter helpFormatter69 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator70 = null; helpFormatter69.optionComparator = comparator70; org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options(); helpFormatter69.printHelp("--", options73); helpFormatter47.printHelp("[ Options: [ short {} ] [ long {} ]", options73); helpFormatter23.printHelp(100, "\n", "", options73, "\n", true); helpFormatter0.printHelp("  ", options73); org.apache.commons.cli.OptionGroup optionGroup80 = null; try { org.apache.commons.cli.Options options81 = options73.addOptionGroup(optionGroup80); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n" + "'", str18, "\n"); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertNotNull(comparator20); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg"); org.junit.Assert.assertNull(option37); org.junit.Assert.assertNotNull(list39); org.junit.Assert.assertNotNull(comparator42); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg"); org.junit.Assert.assertNull(option61); org.junit.Assert.assertNotNull(list63); org.junit.Assert.assertNotNull(comparator66); }
public void test128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test128"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setLongOptSeparator("usage:"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); }
public void test129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test129"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); helpFormatter0.defaultDescPad = 0; java.io.PrintWriter printWriter16 = null; org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); java.lang.String str23 = options22.toString(); helpFormatter20.printHelp("-", options22, true); java.util.Collection collection26 = options22.getOptions(); java.util.Collection collection27 = options22.getOptions(); org.apache.commons.cli.Options options31 = options22.addOption("arg", false, ""); try { helpFormatter0.printHelp(printWriter16, (int) ' ', "arg", "\n", options22, 100, (int) '4', "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str23, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection26); org.junit.Assert.assertNotNull(collection27); org.junit.Assert.assertNotNull(options31); }
public void test130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test130"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultLongOptPrefix = " "; org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); int int21 = helpFormatter17.findWrapPos("", (int) '#', 1); helpFormatter17.defaultWidth = (byte) 10; java.lang.String str24 = helpFormatter17.getNewLine(); helpFormatter17.defaultOptPrefix = " "; int int27 = helpFormatter17.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); helpFormatter30.defaultDescPad = 10; org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option36 = options34.getOption(" "); java.util.List list38 = options34.getMatchingOptions("hi!"); helpFormatter30.printHelp("usage: ", options34, false); java.util.Collection collection41 = options34.getOptionGroups(); helpFormatter17.printHelp("hi!", "", options34, "arg"); boolean boolean45 = options34.hasShortOption(" "); helpFormatter0.printHelp("\n", "-", options34, "", false); boolean boolean50 = options34.hasShortOption("usage:"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\n" + "'", str24, "\n"); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1); org.junit.Assert.assertNull(option36); org.junit.Assert.assertNotNull(list38); org.junit.Assert.assertNotNull(collection41); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); }
public void test131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test131"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultArgName = "hi!"; java.lang.StringBuffer stringBuffer3 = null; org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option7 = options5.getOption(" "); java.util.Collection collection8 = options5.getOptions(); java.util.Collection collection9 = options5.getOptions(); java.lang.String str10 = options5.toString(); java.lang.String str11 = options5.toString(); java.lang.StringBuffer stringBuffer14 = helpFormatter0.renderOptions(stringBuffer3, (int) (short) 10, options5, (int) ' ', (int) (byte) 10); java.util.Comparator comparator15 = helpFormatter0.optionComparator; helpFormatter0.defaultWidth = '#'; org.junit.Assert.assertNull(option7); org.junit.Assert.assertNotNull(collection8); org.junit.Assert.assertNotNull(collection9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str11, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(stringBuffer14); org.junit.Assert.assertNotNull(comparator15); }
public void test132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test132"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; int int14 = helpFormatter0.getDescPadding(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); helpFormatter15.defaultOptPrefix = " "; int int25 = helpFormatter15.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter28 = new org.apache.commons.cli.HelpFormatter(); helpFormatter28.defaultDescPad = 10; org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option34 = options32.getOption(" "); java.util.List list36 = options32.getMatchingOptions("hi!"); helpFormatter28.printHelp("usage: ", options32, false); java.util.Collection collection39 = options32.getOptionGroups(); helpFormatter15.printHelp("hi!", "", options32, "arg"); org.apache.commons.cli.HelpFormatter helpFormatter42 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator43 = null; helpFormatter42.optionComparator = comparator43; org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options(); helpFormatter42.printHelp("--", options46); java.lang.String str49 = helpFormatter42.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter50 = new org.apache.commons.cli.HelpFormatter(); helpFormatter50.defaultDescPad = 10; org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option56 = options54.getOption(" "); java.util.List list58 = options54.getMatchingOptions("hi!"); helpFormatter50.printHelp("usage: ", options54, false); java.util.Comparator comparator61 = helpFormatter50.getOptionComparator(); helpFormatter42.setOptionComparator(comparator61); helpFormatter15.setOptionComparator(comparator61); helpFormatter0.optionComparator = comparator61; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1); org.junit.Assert.assertNull(option34); org.junit.Assert.assertNotNull(list36); org.junit.Assert.assertNotNull(collection39); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg"); org.junit.Assert.assertNull(option56); org.junit.Assert.assertNotNull(list58); org.junit.Assert.assertNotNull(comparator61); }
public void test133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test133"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.lang.String str15 = helpFormatter0.rtrim("                                                 "); java.lang.String str16 = helpFormatter0.defaultNewLine; java.io.PrintWriter printWriter17 = null; try { helpFormatter0.printWrapped(printWriter17, 10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); }
public void test134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test134"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); int int15 = helpFormatter11.findWrapPos("", (int) '#', 1); helpFormatter11.defaultWidth = (byte) 10; java.lang.String str18 = helpFormatter11.getNewLine(); java.util.Comparator comparator19 = helpFormatter11.getOptionComparator(); java.util.Comparator comparator20 = helpFormatter11.getOptionComparator(); helpFormatter0.optionComparator = comparator20; org.apache.commons.cli.HelpFormatter helpFormatter23 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator24 = null; helpFormatter23.optionComparator = comparator24; org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); helpFormatter23.printHelp("--", options27); java.lang.String str30 = helpFormatter23.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter31 = new org.apache.commons.cli.HelpFormatter(); helpFormatter31.defaultDescPad = 10; org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option37 = options35.getOption(" "); java.util.List list39 = options35.getMatchingOptions("hi!"); helpFormatter31.printHelp("usage: ", options35, false); java.util.Comparator comparator42 = helpFormatter31.getOptionComparator(); helpFormatter23.setOptionComparator(comparator42); org.apache.commons.cli.HelpFormatter helpFormatter47 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator48 = null; helpFormatter47.optionComparator = comparator48; org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); helpFormatter47.printHelp("--", options51); java.lang.String str54 = helpFormatter47.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter55 = new org.apache.commons.cli.HelpFormatter(); helpFormatter55.defaultDescPad = 10; org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option61 = options59.getOption(" "); java.util.List list63 = options59.getMatchingOptions("hi!"); helpFormatter55.printHelp("usage: ", options59, false); java.util.Comparator comparator66 = helpFormatter55.getOptionComparator(); helpFormatter47.setOptionComparator(comparator66); org.apache.commons.cli.HelpFormatter helpFormatter69 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator70 = null; helpFormatter69.optionComparator = comparator70; org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options(); helpFormatter69.printHelp("--", options73); helpFormatter47.printHelp("[ Options: [ short {} ] [ long {} ]", options73); helpFormatter23.printHelp(100, "\n", "", options73, "\n", true); helpFormatter0.printHelp("  ", options73); java.util.Collection collection80 = options73.getOptions(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n" + "'", str18, "\n"); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertNotNull(comparator20); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg"); org.junit.Assert.assertNull(option37); org.junit.Assert.assertNotNull(list39); org.junit.Assert.assertNotNull(comparator42); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg"); org.junit.Assert.assertNull(option61); org.junit.Assert.assertNotNull(list63); org.junit.Assert.assertNotNull(comparator66); org.junit.Assert.assertNotNull(collection80); }
public void test135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test135"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultDescPad = (byte) -1; helpFormatter0.setLeftPadding((int) (short) 1); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); }
public void test136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test136"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getLongOptSeparator(); java.io.PrintWriter printWriter14 = null; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printOptions(printWriter14, (int) (byte) 1, options16, (int) '#', (-1)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); }
public void test137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test137"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultLeftPad = (-1); int int11 = helpFormatter0.getDescPadding(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option15 = options13.getOption(" "); java.util.List list17 = options13.getMatchingOptions("hi!"); boolean boolean19 = options13.hasOption(" "); org.apache.commons.cli.Options options24 = options13.addOption("", " ", false, "  "); boolean boolean26 = options24.hasOption("\n"); try { helpFormatter0.printHelp("-", options24, true); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(list17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(options24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); }
public void test138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test138"); org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options(); java.lang.String str1 = options0.toString(); org.apache.commons.cli.Option option3 = options0.getOption("arg"); java.lang.String str4 = options0.toString(); java.util.List list5 = options0.helpOptions(); java.lang.Class<?> wildcardClass6 = list5.getClass(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str1, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str4, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list5); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test139"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.setLongOptPrefix(" "); java.io.PrintWriter printWriter10 = null; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.Collection collection15 = options12.getOptions(); java.util.Collection collection16 = options12.getOptions(); org.apache.commons.cli.Options options20 = options12.addOption("", false, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); try { helpFormatter0.printOptions(printWriter10, (-1), options12, (int) 'a', 3); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(collection15); org.junit.Assert.assertNotNull(collection16); org.junit.Assert.assertNotNull(options20); }
public void test140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test140"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Collection collection11 = options4.getOptionGroups(); java.util.Collection collection12 = options4.getOptions(); org.apache.commons.cli.Option option14 = options4.getOption("usage: "); org.apache.commons.cli.OptionGroup optionGroup15 = null; try { org.apache.commons.cli.Options options16 = options4.addOptionGroup(optionGroup15); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertNotNull(collection12); org.junit.Assert.assertNull(option14); }
public void test141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test141"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); int int33 = helpFormatter0.findWrapPos("", (-1), (int) (short) 10); helpFormatter0.defaultLeftPad = ' '; int int39 = helpFormatter0.findWrapPos("\n", (int) (byte) -1, (int) '4'); java.lang.StringBuffer stringBuffer40 = null; org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option44 = options42.getOption(" "); java.util.List list46 = options42.getMatchingOptions(""); try { java.lang.StringBuffer stringBuffer49 = helpFormatter0.renderOptions(stringBuffer40, (int) (short) 100, options42, 0, (int) (short) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1)); org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1)); org.junit.Assert.assertNull(option44); org.junit.Assert.assertNotNull(list46); }
public void test142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test142"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); helpFormatter0.setNewLine("usage:"); helpFormatter0.defaultLongOptPrefix = "[ Options: [ short {} ] [ long {} ]"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); }
public void test143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test143"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; helpFormatter0.setSyntaxPrefix(" "); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultLeftPad = 3; helpFormatter0.setSyntaxPrefix(""); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); }
public void test144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test144"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(" "); java.lang.String str8 = helpFormatter0.defaultLongOptPrefix; java.lang.String str9 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); boolean boolean18 = options12.hasOption(" "); org.apache.commons.cli.Options options23 = options12.addOption("", " ", false, "  "); helpFormatter0.printHelp("arg", "  ", options12, "-"); helpFormatter0.setSyntaxPrefix(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "--" + "'", str9, "--"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(options23); }
public void test145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test145"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); java.lang.String str16 = options15.toString(); org.apache.commons.cli.Option option18 = options15.getOption("arg"); java.util.List list20 = options15.getMatchingOptions("hi!"); helpFormatter0.printHelp((-1), "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", options15, "arg", true); org.apache.commons.cli.Option option24 = null; try { org.apache.commons.cli.Options options25 = options15.addOption(option24); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str16, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option18); org.junit.Assert.assertNotNull(list20); }
public void test146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test146"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultNewLine = "usage: "; try { java.lang.String str9 = helpFormatter0.createPadding((-1)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); }
public void test147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test147"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = "usage: "; int int12 = helpFormatter0.findWrapPos("--", 0, 3); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); }
public void test148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test148"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setNewLine(" "); java.io.PrintWriter printWriter10 = null; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); boolean boolean20 = options14.hasOption(" "); java.util.List list21 = options14.getRequiredOptions(); java.util.List list22 = options14.helpOptions(); boolean boolean24 = options14.hasOption("hi!"); java.lang.String str25 = options14.toString(); try { helpFormatter0.printHelp(printWriter10, (-1), "usage:", "hi!", options14, 1, (int) (short) 10, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); }
public void test149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test149"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); java.lang.String str14 = helpFormatter0.defaultOptPrefix; int int15 = helpFormatter0.getLeftPadding(); java.lang.String str16 = helpFormatter0.getOptPrefix(); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-" + "'", str14, "-"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-" + "'", str16, "-"); }
public void test150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test150"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); java.lang.Class<?> wildcardClass6 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test151"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultOptPrefix = ""; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); java.lang.String str13 = options12.toString(); helpFormatter10.printHelp("-", options12, true); java.util.List list16 = options12.getRequiredOptions(); java.util.Collection collection17 = options12.getOptionGroups(); try { helpFormatter0.printHelp("", "\n", options12, "usage:"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str13, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(collection17); }
public void test152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test152"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getLongOptSeparator(); java.io.PrintWriter printWriter14 = null; org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultNewLine = " "; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); helpFormatter17.printHelp("arg", options21); boolean boolean24 = options21.hasShortOption(""); try { helpFormatter0.printUsage(printWriter14, (int) 'a', "", options21); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); }
public void test153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test153"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultOptPrefix = ""; java.io.PrintWriter printWriter8 = null; try { helpFormatter0.printWrapped(printWriter8, (int) (byte) 10, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); }
public void test154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test154"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; helpFormatter0.setSyntaxPrefix(" "); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); java.lang.String str18 = options17.toString(); helpFormatter15.printHelp("-", options17, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options17, false); java.lang.String str23 = helpFormatter0.getArgName(); int int24 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultLeftPad = (byte) 1; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str18, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg"); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1); }
public void test155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test155"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.Collection collection7 = options2.getOptions(); java.util.List list8 = options2.helpOptions(); org.apache.commons.cli.Option option10 = options2.getOption("-"); try { org.apache.commons.cli.Options options14 = options2.addOption("hi!", false, "-"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'hi!' contains an illegal character : '!'"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNull(option10); }
public void test156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test156"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); java.lang.StringBuffer stringBuffer8 = null; try { java.lang.StringBuffer stringBuffer12 = helpFormatter0.renderWrappedText(stringBuffer8, 0, (int) '4', "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); }
public void test157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test157"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.defaultWidth = (short) 0; java.io.PrintWriter printWriter5 = null; org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); helpFormatter9.defaultNewLine = " "; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); helpFormatter9.printHelp("arg", options13); org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option18 = options16.getOption(" "); java.util.Collection collection19 = options16.getOptions(); java.util.Collection collection20 = options16.getOptions(); java.lang.String str21 = options16.toString(); helpFormatter9.printHelp("--", options16); org.apache.commons.cli.Option option24 = options16.getOption("[ Options: [ short {} ] [ long {} ]"); try { helpFormatter0.printHelp(printWriter5, (int) (short) 0, "", "                                                 ", options16, 100, (int) ' ', "-", true); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option18); org.junit.Assert.assertNotNull(collection19); org.junit.Assert.assertNotNull(collection20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str21, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option24); }
public void test158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test158"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); helpFormatter0.defaultArgName = "  "; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator11 = null; helpFormatter10.optionComparator = comparator11; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); helpFormatter10.printHelp("--", options14); java.lang.String str17 = helpFormatter10.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); helpFormatter18.defaultDescPad = 10; org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option24 = options22.getOption(" "); java.util.List list26 = options22.getMatchingOptions("hi!"); helpFormatter18.printHelp("usage: ", options22, false); java.util.Comparator comparator29 = helpFormatter18.getOptionComparator(); helpFormatter10.setOptionComparator(comparator29); java.lang.String str32 = helpFormatter10.createPadding(3); org.apache.commons.cli.HelpFormatter helpFormatter35 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator36 = null; helpFormatter35.optionComparator = comparator36; org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options(); helpFormatter35.printHelp("--", options39); java.lang.String str42 = helpFormatter35.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter43 = new org.apache.commons.cli.HelpFormatter(); helpFormatter43.defaultDescPad = 10; org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option49 = options47.getOption(" "); java.util.List list51 = options47.getMatchingOptions("hi!"); helpFormatter43.printHelp("usage: ", options47, false); java.util.Comparator comparator54 = helpFormatter43.getOptionComparator(); helpFormatter35.setOptionComparator(comparator54); org.apache.commons.cli.HelpFormatter helpFormatter57 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator58 = null; helpFormatter57.optionComparator = comparator58; org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options(); helpFormatter57.printHelp("--", options61); helpFormatter35.printHelp("[ Options: [ short {} ] [ long {} ]", options61); java.lang.String str64 = options61.toString(); helpFormatter10.printHelp("-", "-", options61, "-", false); helpFormatter0.printHelp("hi!", "-", options61, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNull(option24); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertNotNull(comparator29); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "  " + "'", str32, "  "); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg"); org.junit.Assert.assertNull(option49); org.junit.Assert.assertNotNull(list51); org.junit.Assert.assertNotNull(comparator54); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str64, "[ Options: [ short {} ] [ long {} ]"); }
public void test159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test159"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); int int33 = helpFormatter0.findWrapPos("", (-1), (int) (short) 10); helpFormatter0.defaultLeftPad = ' '; java.lang.String str36 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1)); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "usage: " + "'", str36, "usage: "); }
public void test160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test160"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.lang.String str15 = helpFormatter0.rtrim("                                                 "); java.lang.String str16 = helpFormatter0.defaultNewLine; helpFormatter0.setArgName("usage:"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); }
public void test161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test161"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultNewLine; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); }
public void test162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test162"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setLeftPadding((int) '#'); java.lang.String str10 = helpFormatter0.defaultArgName; java.io.PrintWriter printWriter11 = null; try { helpFormatter0.printWrapped(printWriter11, 74, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); }
public void test163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test163"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; int int18 = helpFormatter0.getWidth(); helpFormatter0.setLongOptSeparator(""); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 74 + "'", int18 == 74); }
public void test164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test164"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setArgName("-"); java.lang.String str10 = helpFormatter0.getOptPrefix(); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); }
public void test165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test165"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.defaultWidth = (short) 0; java.io.PrintWriter printWriter5 = null; try { helpFormatter0.printWrapped(printWriter5, (int) (byte) 10, (int) (byte) 100, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test166"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; java.util.Comparator comparator3 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertNotNull(comparator3); }
public void test167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test167"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); java.io.PrintWriter printWriter56 = null; org.apache.commons.cli.HelpFormatter helpFormatter60 = new org.apache.commons.cli.HelpFormatter(); helpFormatter60.defaultNewLine = " "; int int63 = helpFormatter60.defaultLeftPad; org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option68 = options66.getOption(" "); java.util.Collection collection69 = options66.getOptions(); java.util.Collection collection70 = options66.getOptions(); java.lang.String str71 = options66.toString(); java.lang.String str72 = options66.toString(); helpFormatter60.printHelp("                                                 ", "\n", options66, "usage: ", false); org.apache.commons.cli.Option option77 = options66.getOption("arg"); try { helpFormatter0.printHelp(printWriter56, (int) '#', "usage: ", "usage: ", options66, (int) (byte) 10, (int) (byte) -1, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1); org.junit.Assert.assertNull(option68); org.junit.Assert.assertNotNull(collection69); org.junit.Assert.assertNotNull(collection70); org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str72, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option77); }
public void test168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test168"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = ""; java.lang.String str14 = helpFormatter0.getLongOptSeparator(); java.lang.String str15 = helpFormatter0.getArgName(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + " " + "'", str14, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); }
public void test169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test169"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.defaultSyntaxPrefix = "usage: "; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test170"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.io.PrintWriter printWriter13 = null; try { helpFormatter0.printWrapped(printWriter13, (int) (short) 10, (int) (short) 10, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); }
public void test171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test171"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setOptPrefix("[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); }
public void test172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test172"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); helpFormatter0.setWidth((int) (short) -1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); }
public void test173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test173"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.defaultSyntaxPrefix = "arg"; java.lang.String str10 = helpFormatter0.createPadding((int) (short) 0); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test174"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option11 = options9.getOption(" "); java.util.List list13 = options9.getMatchingOptions("hi!"); boolean boolean15 = options9.hasOption(" "); org.apache.commons.cli.Option option17 = options9.getOption("hi!"); helpFormatter0.printHelp((int) '4', "\n", "                                                 ", options9, "usage:"); helpFormatter0.setDescPadding(52); helpFormatter0.setWidth((-1)); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option11); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNull(option17); }
public void test175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test175"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); java.lang.String str19 = options18.toString(); helpFormatter16.printHelp("-", options18, true); java.util.Collection collection22 = options18.getOptions(); java.util.Collection collection23 = options18.getOptions(); org.apache.commons.cli.Options options27 = options18.addOption("arg", false, ""); helpFormatter0.printHelp("\n", options18, true); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str19, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection22); org.junit.Assert.assertNotNull(collection23); org.junit.Assert.assertNotNull(options27); }
public void test176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test176"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.setSyntaxPrefix("usage:"); }
public void test177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test177"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); helpFormatter0.defaultDescPad = 0; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); }
public void test178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test178"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); java.lang.String str17 = options16.toString(); helpFormatter14.printHelp("-", options16, true); org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option25 = options23.getOption(" "); java.util.List list27 = options23.getMatchingOptions("hi!"); boolean boolean29 = options23.hasOption(" "); org.apache.commons.cli.Option option31 = options23.getOption("hi!"); helpFormatter14.printHelp((int) '4', "\n", "                                                 ", options23, "usage:"); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options23); java.util.Collection collection35 = options23.getOptions(); java.lang.Class<?> wildcardClass36 = options23.getClass(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option25); org.junit.Assert.assertNotNull(list27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNull(option31); org.junit.Assert.assertNotNull(collection35); org.junit.Assert.assertNotNull(wildcardClass36); }
public void test179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test179"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); helpFormatter0.setLeftPadding(74); java.io.PrintWriter printWriter10 = null; org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); helpFormatter14.defaultNewLine = " "; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); helpFormatter14.printHelp("arg", options18); org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.Collection collection24 = options21.getOptions(); java.util.Collection collection25 = options21.getOptions(); java.lang.String str26 = options21.toString(); helpFormatter14.printHelp("--", options21); try { helpFormatter0.printHelp(printWriter10, (int) (short) -1, "                                                 ", "", options21, 1, 74, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertNotNull(collection25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str26, "[ Options: [ short {} ] [ long {} ]"); }
public void test180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test180"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; helpFormatter0.defaultLongOptPrefix = " "; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); }
public void test181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test181"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str10 = helpFormatter0.getNewLine(); java.lang.String str11 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); }
public void test182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test182"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultOptPrefix = "usage:"; java.lang.String str9 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n"); }
public void test183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test183"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = ""; java.lang.String str14 = helpFormatter0.getLongOptSeparator(); java.lang.String str15 = helpFormatter0.defaultSyntaxPrefix; java.io.PrintWriter printWriter16 = null; try { helpFormatter0.printUsage(printWriter16, 52, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + " " + "'", str14, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "usage: " + "'", str15, "usage: "); }
public void test184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test184"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = "  "; java.lang.StringBuffer stringBuffer3 = null; try { java.lang.StringBuffer stringBuffer7 = helpFormatter0.renderWrappedText(stringBuffer3, (int) (short) -1, 0, "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test185"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); org.apache.commons.cli.HelpFormatter helpFormatter7 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); java.lang.String str10 = options9.toString(); helpFormatter7.printHelp("-", options9, true); java.util.List list13 = options9.getRequiredOptions(); java.util.Collection collection14 = options9.getOptionGroups(); java.lang.String str15 = options9.toString(); helpFormatter0.printHelp("arg", options9, true); java.lang.StringBuffer stringBuffer18 = null; try { java.lang.StringBuffer stringBuffer22 = helpFormatter0.renderWrappedText(stringBuffer18, (int) (short) 100, (int) (short) 0, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertNotNull(collection14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str15, "[ Options: [ short {} ] [ long {} ]"); }
public void test186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test186"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultNewLine = ""; int int14 = helpFormatter0.getDescPadding(); java.io.PrintWriter printWriter15 = null; try { helpFormatter0.printUsage(printWriter15, 74, "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); }
public void test187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test187"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); int int14 = helpFormatter0.getDescPadding(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); helpFormatter15.defaultOptPrefix = " "; int int25 = helpFormatter15.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter26 = new org.apache.commons.cli.HelpFormatter(); int int30 = helpFormatter26.findWrapPos("", (int) '#', 1); helpFormatter26.defaultWidth = (byte) 10; java.lang.String str33 = helpFormatter26.getNewLine(); java.util.Comparator comparator34 = helpFormatter26.getOptionComparator(); java.util.Comparator comparator35 = helpFormatter26.getOptionComparator(); helpFormatter15.optionComparator = comparator35; helpFormatter0.optionComparator = comparator35; java.lang.Class<?> wildcardClass38 = comparator35.getClass(); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1); org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1)); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\n" + "'", str33, "\n"); org.junit.Assert.assertNotNull(comparator34); org.junit.Assert.assertNotNull(comparator35); org.junit.Assert.assertNotNull(wildcardClass38); }
public void test188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test188"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultNewLine = ""; int int14 = helpFormatter0.getDescPadding(); helpFormatter0.setLongOptPrefix(""); helpFormatter0.setWidth(0); java.io.PrintWriter printWriter19 = null; try { helpFormatter0.printUsage(printWriter19, (int) (short) -1, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); }
public void test189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test189"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); java.lang.String str7 = helpFormatter0.getArgName(); helpFormatter0.setOptPrefix("  "); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator11 = null; helpFormatter10.optionComparator = comparator11; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); helpFormatter10.printHelp("--", options14); java.lang.String str17 = helpFormatter10.createPadding((int) 'a'); helpFormatter10.setNewLine(" "); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); helpFormatter20.defaultDescPad = 10; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option26 = options24.getOption(" "); java.util.List list28 = options24.getMatchingOptions("hi!"); helpFormatter20.printHelp("usage: ", options24, false); java.lang.String str31 = helpFormatter20.defaultOptPrefix; java.lang.String str32 = helpFormatter20.getNewLine(); java.lang.String str33 = helpFormatter20.defaultArgName; helpFormatter20.setDescPadding((int) '#'); java.util.Comparator comparator36 = helpFormatter20.optionComparator; helpFormatter10.setOptionComparator(comparator36); helpFormatter0.optionComparator = comparator36; org.apache.commons.cli.HelpFormatter helpFormatter40 = new org.apache.commons.cli.HelpFormatter(); helpFormatter40.defaultDescPad = 10; org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option46 = options44.getOption(" "); java.util.List list48 = options44.getMatchingOptions("hi!"); helpFormatter40.printHelp("usage: ", options44, false); java.util.Collection collection51 = options44.getOptionGroups(); java.util.Collection collection52 = options44.getOptionGroups(); try { helpFormatter0.printHelp("", options44); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "                                                 " + "'", str17, "                                                 "); org.junit.Assert.assertNull(option26); org.junit.Assert.assertNotNull(list28); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-" + "'", str31, "-"); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\n" + "'", str32, "\n"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "arg" + "'", str33, "arg"); org.junit.Assert.assertNotNull(comparator36); org.junit.Assert.assertNull(option46); org.junit.Assert.assertNotNull(list48); org.junit.Assert.assertNotNull(collection51); org.junit.Assert.assertNotNull(collection52); }
public void test190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test190"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultArgName; org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option5 = options3.getOption(" "); java.util.List list7 = options3.getMatchingOptions("hi!"); boolean boolean9 = options3.hasOption(" "); org.apache.commons.cli.Options options14 = options3.addOption("", " ", false, "  "); boolean boolean16 = options14.hasOption("\n"); java.lang.String str17 = options14.toString(); helpFormatter0.printHelp(" ", options14, false); java.util.Collection collection20 = options14.getOptionGroups(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "arg" + "'", str1, "arg"); org.junit.Assert.assertNull(option5); org.junit.Assert.assertNotNull(list7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(options14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]" + "'", str17, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.assertNotNull(collection20); }
public void test191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test191"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setNewLine(" "); helpFormatter0.defaultLongOptPrefix = "--"; java.lang.String str12 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); }
public void test192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test192"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); int int33 = helpFormatter0.findWrapPos("", (-1), (int) (short) 10); helpFormatter0.defaultLeftPad = ' '; java.lang.StringBuffer stringBuffer36 = null; try { java.lang.StringBuffer stringBuffer40 = helpFormatter0.renderWrappedText(stringBuffer36, (int) (short) 100, 1, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1)); }
public void test193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test193"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); int int4 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1); }
public void test194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test194"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; helpFormatter0.setSyntaxPrefix(" "); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); java.lang.String str18 = options17.toString(); helpFormatter15.printHelp("-", options17, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options17, false); java.lang.String str23 = helpFormatter0.getArgName(); int int24 = helpFormatter0.getLeftPadding(); java.lang.Class<?> wildcardClass25 = helpFormatter0.getClass(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str18, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg"); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1); org.junit.Assert.assertNotNull(wildcardClass25); }
public void test195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test195"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); java.lang.String str17 = options16.toString(); helpFormatter14.printHelp("-", options16, true); org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option25 = options23.getOption(" "); java.util.List list27 = options23.getMatchingOptions("hi!"); boolean boolean29 = options23.hasOption(" "); org.apache.commons.cli.Option option31 = options23.getOption("hi!"); helpFormatter14.printHelp((int) '4', "\n", "                                                 ", options23, "usage:"); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options23); java.util.Collection collection35 = options23.getOptions(); java.util.List list36 = options23.helpOptions(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option25); org.junit.Assert.assertNotNull(list27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNull(option31); org.junit.Assert.assertNotNull(collection35); org.junit.Assert.assertNotNull(list36); }
public void test196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test196"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); java.lang.String str14 = helpFormatter0.defaultSyntaxPrefix; int int15 = helpFormatter0.defaultDescPad; org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "usage: " + "'", str14, "usage: "); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3); }
public void test197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test197"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultLeftPad = (short) 0; int int14 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("arg"); java.lang.StringBuffer stringBuffer17 = null; try { java.lang.StringBuffer stringBuffer21 = helpFormatter0.renderWrappedText(stringBuffer17, (int) (byte) -1, (int) (byte) 100, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10); }
public void test198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test198"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; java.lang.String str6 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding(100); java.lang.String str9 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-" + "'", str9, "-"); }
public void test199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test199"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; int int12 = helpFormatter0.defaultWidth; java.lang.StringBuffer stringBuffer13 = null; try { java.lang.StringBuffer stringBuffer17 = helpFormatter0.renderWrappedText(stringBuffer13, (int) (byte) 10, (int) (short) 100, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 74 + "'", int12 == 74); }
public void test200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test200"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setLeftPadding((int) (byte) -1); java.lang.Class<?> wildcardClass20 = helpFormatter0.getClass(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertNotNull(wildcardClass20); }
public void test201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test201"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); helpFormatter0.setLeftPadding(74); int int10 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 74 + "'", int10 == 74); }
public void test202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test202"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str7 = helpFormatter0.defaultNewLine; helpFormatter0.defaultDescPad = (short) 10; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); }
public void test203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test203"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding(0); helpFormatter0.defaultOptPrefix = ""; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertNotNull(comparator10); }
public void test204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test204"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getWidth(); helpFormatter0.setSyntaxPrefix(" "); java.io.PrintWriter printWriter4 = null; try { helpFormatter0.printUsage(printWriter4, (int) (byte) 10, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 74 + "'", int1 == 74); }
public void test205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test205"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultNewLine = ""; int int14 = helpFormatter0.getDescPadding(); helpFormatter0.setOptPrefix(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); }
public void test206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test206"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; helpFormatter0.setDescPadding((int) (byte) 1); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); }
public void test207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test207"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setNewLine(" "); java.lang.String str10 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); }
public void test208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test208"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.setNewLine("-"); java.lang.String str5 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); }
public void test209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test209"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); helpFormatter0.setLongOptPrefix("hi!"); java.lang.String str23 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "usage: " + "'", str23, "usage: "); }
public void test210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test210"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; java.lang.StringBuffer stringBuffer18 = null; try { java.lang.StringBuffer stringBuffer22 = helpFormatter0.renderWrappedText(stringBuffer18, 0, (int) (short) 10, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); }
public void test211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test211"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); java.lang.String str14 = helpFormatter0.getArgName(); java.lang.String str15 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "--" + "'", str15, "--"); }
public void test212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test212"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth(10); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth((int) (short) 0); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test213"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); java.lang.String str17 = options16.toString(); helpFormatter14.printHelp("-", options16, true); org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option25 = options23.getOption(" "); java.util.List list27 = options23.getMatchingOptions("hi!"); boolean boolean29 = options23.hasOption(" "); org.apache.commons.cli.Option option31 = options23.getOption("hi!"); helpFormatter14.printHelp((int) '4', "\n", "                                                 ", options23, "usage:"); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options23); java.util.List list36 = options23.getMatchingOptions("usage:"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option25); org.junit.Assert.assertNotNull(list27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNull(option31); org.junit.Assert.assertNotNull(list36); }
public void test214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test214"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getLongOptSeparator(); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setDescPadding(0); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); }
public void test215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test215"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); org.apache.commons.cli.HelpFormatter helpFormatter27 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator28 = null; helpFormatter27.optionComparator = comparator28; org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options(); helpFormatter27.printHelp("--", options31); java.lang.String str34 = helpFormatter27.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter35 = new org.apache.commons.cli.HelpFormatter(); helpFormatter35.defaultDescPad = 10; org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option41 = options39.getOption(" "); java.util.List list43 = options39.getMatchingOptions("hi!"); helpFormatter35.printHelp("usage: ", options39, false); java.util.Comparator comparator46 = helpFormatter35.getOptionComparator(); helpFormatter27.setOptionComparator(comparator46); helpFormatter0.setOptionComparator(comparator46); int int49 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "arg" + "'", str34, "arg"); org.junit.Assert.assertNull(option41); org.junit.Assert.assertNotNull(list43); org.junit.Assert.assertNotNull(comparator46); org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1); }
public void test216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test216"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); helpFormatter0.setOptPrefix("hi!"); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); }
public void test217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test217"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator10 = null; helpFormatter9.optionComparator = comparator10; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); helpFormatter9.printHelp("--", options13); java.lang.String str16 = helpFormatter9.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); java.util.Comparator comparator28 = helpFormatter17.getOptionComparator(); helpFormatter9.setOptionComparator(comparator28); helpFormatter0.optionComparator = comparator28; helpFormatter0.setNewLine("usage:"); java.lang.String str33 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(comparator28); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "usage: " + "'", str33, "usage: "); }
public void test218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test218"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); java.lang.String str22 = helpFormatter0.createPadding(3); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "  " + "'", str22, "  "); }
public void test219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test219"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setOptPrefix(""); helpFormatter0.setLeftPadding(10); int int13 = helpFormatter0.getLeftPadding(); java.lang.String str14 = helpFormatter0.getArgName(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str14, "[ Options: [ short {} ] [ long {} ]"); }
public void test220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test220"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); java.lang.String str8 = helpFormatter0.getNewLine(); java.lang.Class<?> wildcardClass9 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n"); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test221"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; helpFormatter0.setArgName(" "); helpFormatter0.defaultSyntaxPrefix = ""; java.io.PrintWriter printWriter7 = null; org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); int int15 = helpFormatter11.findWrapPos("", (int) '#', 1); java.lang.String str16 = helpFormatter11.getSyntaxPrefix(); helpFormatter11.setLongOptSeparator(" "); org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); java.lang.String str21 = options20.toString(); org.apache.commons.cli.Option option23 = options20.getOption("arg"); helpFormatter11.printHelp("usage:", options20); org.apache.commons.cli.Option option26 = options20.getOption("                                                 "); try { helpFormatter0.printHelp(printWriter7, (int) (byte) -1, "-", "usage: ", options20, (int) (short) -1, (int) '#', "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "usage: " + "'", str16, "usage: "); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str21, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNull(option26); }
public void test222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test222"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); java.util.Comparator comparator30 = null; helpFormatter0.optionComparator = comparator30; helpFormatter0.defaultDescPad = 0; int int34 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0); }
public void test223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test223"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); java.lang.String str7 = helpFormatter0.getArgName(); helpFormatter0.setOptPrefix("  "); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator11 = null; helpFormatter10.optionComparator = comparator11; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); helpFormatter10.printHelp("--", options14); java.lang.String str17 = helpFormatter10.createPadding((int) 'a'); helpFormatter10.setNewLine(" "); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); helpFormatter20.defaultDescPad = 10; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option26 = options24.getOption(" "); java.util.List list28 = options24.getMatchingOptions("hi!"); helpFormatter20.printHelp("usage: ", options24, false); java.lang.String str31 = helpFormatter20.defaultOptPrefix; java.lang.String str32 = helpFormatter20.getNewLine(); java.lang.String str33 = helpFormatter20.defaultArgName; helpFormatter20.setDescPadding((int) '#'); java.util.Comparator comparator36 = helpFormatter20.optionComparator; helpFormatter10.setOptionComparator(comparator36); helpFormatter0.optionComparator = comparator36; java.io.PrintWriter printWriter39 = null; org.apache.commons.cli.Options options42 = null; try { helpFormatter0.printUsage(printWriter39, (int) '4', "", options42); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "                                                 " + "'", str17, "                                                 "); org.junit.Assert.assertNull(option26); org.junit.Assert.assertNotNull(list28); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-" + "'", str31, "-"); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\n" + "'", str32, "\n"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "arg" + "'", str33, "arg"); org.junit.Assert.assertNotNull(comparator36); }
public void test224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test224"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setNewLine(" "); helpFormatter0.setLongOptPrefix("\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); }
public void test225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test225"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); java.lang.String str10 = helpFormatter0.defaultArgName; int int11 = helpFormatter0.getDescPadding(); int int15 = helpFormatter0.findWrapPos("[ Options: [ short {} ] [ long {} ]", (int) (byte) -1, (int) (short) -1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-2) + "'", int15 == (-2)); }
public void test226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test226"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultOptPrefix = "usage: "; int int12 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10); }
public void test227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test227"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option11 = options9.getOption(" "); java.util.List list13 = options9.getMatchingOptions("hi!"); boolean boolean15 = options9.hasOption(" "); org.apache.commons.cli.Option option17 = options9.getOption("hi!"); helpFormatter0.printHelp((int) '4', "\n", "                                                 ", options9, "usage:"); java.util.Collection collection20 = options9.getOptions(); boolean boolean22 = options9.hasLongOption("\n"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option11); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(collection20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test228"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; java.lang.Class<?> wildcardClass6 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test229"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); helpFormatter0.setNewLine("arg"); helpFormatter0.defaultNewLine = "hi!"; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); }
public void test230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test230"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str11 = helpFormatter0.rtrim("usage: "); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setArgName(" "); java.io.PrintWriter printWriter15 = null; org.apache.commons.cli.HelpFormatter helpFormatter19 = new org.apache.commons.cli.HelpFormatter(); helpFormatter19.defaultNewLine = " "; helpFormatter19.defaultNewLine = "  "; org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option27 = options25.getOption(" "); java.util.List list29 = options25.getMatchingOptions("hi!"); boolean boolean31 = options25.hasShortOption("arg"); java.lang.String str32 = options25.toString(); helpFormatter19.printHelp("usage:", options25, true); try { helpFormatter0.printHelp(printWriter15, 100, "", "-", options25, (int) (byte) -1, (int) (byte) 0, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage:" + "'", str11, "usage:"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(list29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str32, "[ Options: [ short {} ] [ long {} ]"); }
public void test231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test231"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultLeftPad = (short) 0; int int14 = helpFormatter0.getWidth(); java.lang.StringBuffer stringBuffer15 = null; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); boolean boolean23 = options17.hasOption(" "); boolean boolean25 = options17.hasShortOption("usage: "); java.lang.StringBuffer stringBuffer28 = helpFormatter0.renderOptions(stringBuffer15, (int) (short) -1, options17, (int) '4', (int) '4'); java.lang.StringBuffer stringBuffer29 = null; try { java.lang.StringBuffer stringBuffer33 = helpFormatter0.renderWrappedText(stringBuffer29, (int) (short) 0, (int) '#', "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNull(stringBuffer28); }
public void test232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test232"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.List list8 = options2.getMatchingOptions("usage: "); try { org.apache.commons.cli.Options options13 = options2.addOption("-", "hi!", false, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal option name '-'"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(list8); }
public void test233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test233"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); helpFormatter0.setOptPrefix("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter58 = new org.apache.commons.cli.HelpFormatter(); int int62 = helpFormatter58.findWrapPos("", (int) '#', 1); int int63 = helpFormatter58.defaultLeftPad; int int64 = helpFormatter58.getLeftPadding(); java.lang.String str65 = helpFormatter58.getArgName(); helpFormatter58.setOptPrefix("  "); org.apache.commons.cli.HelpFormatter helpFormatter68 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator69 = null; helpFormatter68.optionComparator = comparator69; org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options(); helpFormatter68.printHelp("--", options72); java.lang.String str75 = helpFormatter68.createPadding((int) 'a'); helpFormatter68.setNewLine(" "); org.apache.commons.cli.HelpFormatter helpFormatter78 = new org.apache.commons.cli.HelpFormatter(); helpFormatter78.defaultDescPad = 10; org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option84 = options82.getOption(" "); java.util.List list86 = options82.getMatchingOptions("hi!"); helpFormatter78.printHelp("usage: ", options82, false); java.lang.String str89 = helpFormatter78.defaultOptPrefix; java.lang.String str90 = helpFormatter78.getNewLine(); java.lang.String str91 = helpFormatter78.defaultArgName; helpFormatter78.setDescPadding((int) '#'); java.util.Comparator comparator94 = helpFormatter78.optionComparator; helpFormatter68.setOptionComparator(comparator94); helpFormatter58.optionComparator = comparator94; helpFormatter0.optionComparator = comparator94; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1)); org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1); org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "arg" + "'", str65, "arg"); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "                                                 " + "'", str75, "                                                 "); org.junit.Assert.assertNull(option84); org.junit.Assert.assertNotNull(list86); org.junit.Assert.assertEquals("'" + str89 + "' != '" + "-" + "'", str89, "-"); org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\n" + "'", str90, "\n"); org.junit.Assert.assertEquals("'" + str91 + "' != '" + "arg" + "'", str91, "arg"); org.junit.Assert.assertNotNull(comparator94); }
public void test234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test234"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; java.lang.StringBuffer stringBuffer6 = null; try { java.lang.StringBuffer stringBuffer10 = helpFormatter0.renderWrappedText(stringBuffer6, (int) (byte) -1, 74, "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); }
public void test235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test235"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.Class<?> wildcardClass6 = helpFormatter0.getClass(); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test236"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setNewLine("usage: "); int int11 = helpFormatter0.getWidth(); java.io.PrintWriter printWriter12 = null; try { helpFormatter0.printWrapped(printWriter12, (int) 'a', (-1), "-"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); }
public void test237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test237"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option11 = options9.getOption(" "); java.util.List list13 = options9.getMatchingOptions("hi!"); boolean boolean15 = options9.hasOption(" "); org.apache.commons.cli.Option option17 = options9.getOption("hi!"); helpFormatter0.printHelp((int) '4', "\n", "                                                 ", options9, "usage:"); java.util.Collection collection20 = options9.getOptions(); org.apache.commons.cli.Option option21 = null; try { org.apache.commons.cli.OptionGroup optionGroup22 = options9.getOptionGroup(option21); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option11); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(collection20); }
public void test238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test238"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator10 = null; helpFormatter9.optionComparator = comparator10; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); helpFormatter9.printHelp("--", options13); java.lang.String str16 = helpFormatter9.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); java.util.Comparator comparator28 = helpFormatter17.getOptionComparator(); helpFormatter9.setOptionComparator(comparator28); helpFormatter0.optionComparator = comparator28; org.apache.commons.cli.HelpFormatter helpFormatter34 = new org.apache.commons.cli.HelpFormatter(); int int38 = helpFormatter34.findWrapPos("", (int) '#', 1); helpFormatter34.defaultWidth = (byte) 10; java.lang.String str41 = helpFormatter34.getNewLine(); helpFormatter34.defaultOptPrefix = " "; int int44 = helpFormatter34.defaultLeftPad; java.lang.String str45 = helpFormatter34.getSyntaxPrefix(); helpFormatter34.defaultLeftPad = (short) 0; int int48 = helpFormatter34.getWidth(); java.lang.StringBuffer stringBuffer49 = null; org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option53 = options51.getOption(" "); java.util.List list55 = options51.getMatchingOptions("hi!"); boolean boolean57 = options51.hasOption(" "); boolean boolean59 = options51.hasShortOption("usage: "); java.lang.StringBuffer stringBuffer62 = helpFormatter34.renderOptions(stringBuffer49, (int) (short) -1, options51, (int) '4', (int) '4'); boolean boolean64 = options51.hasOption("--"); helpFormatter0.printHelp((int) (byte) 100, "  ", "", options51, "hi!"); org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option70 = options68.getOption(" "); helpFormatter0.printHelp("hi!", options68, true); int int73 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(comparator28); org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1)); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\n" + "'", str41, "\n"); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "usage: " + "'", str45, "usage: "); org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10); org.junit.Assert.assertNull(option53); org.junit.Assert.assertNotNull(list55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNull(stringBuffer62); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNull(option70); org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1); }
public void test239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test239"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); int int30 = helpFormatter0.findWrapPos("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", (-1), 0); int int31 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1)); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10); }
public void test240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test240"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); int int16 = helpFormatter12.findWrapPos("", (int) '#', 1); helpFormatter12.defaultWidth = (byte) 10; java.lang.String str19 = helpFormatter12.getNewLine(); helpFormatter12.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter23 = new org.apache.commons.cli.HelpFormatter(); helpFormatter23.defaultDescPad = 10; org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option29 = options27.getOption(" "); java.util.List list31 = options27.getMatchingOptions("hi!"); helpFormatter23.printHelp("usage: ", options27, false); helpFormatter12.printHelp("\n", options27); boolean boolean36 = options27.hasShortOption("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.printHelp("usage:", "", options27, "                                                 "); helpFormatter0.setLongOptPrefix(""); java.io.PrintWriter printWriter41 = null; try { helpFormatter0.printUsage(printWriter41, (int) '#', "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n" + "'", str19, "\n"); org.junit.Assert.assertNull(option29); org.junit.Assert.assertNotNull(list31); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); }
public void test241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test241"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); java.lang.String str8 = helpFormatter0.getLongOptSeparator(); int int9 = helpFormatter0.getWidth(); java.lang.String str11 = helpFormatter0.rtrim("                                                 "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 74 + "'", int9 == 74); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); }
public void test242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test242"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; java.lang.String str7 = helpFormatter0.getLongOptSeparator(); int int8 = helpFormatter0.getWidth(); helpFormatter0.setDescPadding((int) 'a'); helpFormatter0.setLeftPadding((int) (byte) 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); }
public void test243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test243"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultNewLine = "usage: "; java.lang.String str8 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "usage: " + "'", str8, "usage: "); }
public void test244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test244"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options(); java.lang.String str12 = options11.toString(); org.apache.commons.cli.Option option14 = options11.getOption("arg"); java.util.List list16 = options11.getMatchingOptions("hi!"); helpFormatter0.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "-", options11, " ", false); java.io.PrintWriter printWriter20 = null; try { helpFormatter0.printWrapped(printWriter20, 100, 0, "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "usage: " + "'", str7, "usage: "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); }
public void test245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test245"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = "  "; java.lang.String str3 = helpFormatter0.defaultArgName; helpFormatter0.setArgName("--"); org.apache.commons.cli.HelpFormatter helpFormatter7 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter7.findWrapPos("", (int) '#', 1); java.lang.String str12 = helpFormatter7.getSyntaxPrefix(); helpFormatter7.defaultNewLine = "usage: "; helpFormatter7.defaultArgName = "usage: "; java.lang.String str18 = helpFormatter7.rtrim("usage: "); java.lang.String str19 = helpFormatter7.defaultSyntaxPrefix; org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option25 = options23.getOption(" "); java.util.List list27 = options23.getMatchingOptions("hi!"); boolean boolean29 = options23.hasOption(" "); java.util.List list30 = options23.getRequiredOptions(); java.lang.String str31 = options23.toString(); java.util.List list32 = options23.helpOptions(); helpFormatter7.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options23, "usage: "); helpFormatter0.printHelp(" ", options23, true); java.io.PrintWriter printWriter37 = null; org.apache.commons.cli.HelpFormatter helpFormatter40 = new org.apache.commons.cli.HelpFormatter(); int int44 = helpFormatter40.findWrapPos("", (int) '#', 1); helpFormatter40.defaultWidth = (byte) 10; java.lang.String str47 = helpFormatter40.getNewLine(); helpFormatter40.defaultOptPrefix = " "; int int50 = helpFormatter40.defaultLeftPad; java.lang.String str51 = helpFormatter40.getArgName(); int int52 = helpFormatter40.defaultDescPad; helpFormatter40.defaultLongOptPrefix = "\n"; org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option60 = options58.getOption(" "); java.util.List list62 = options58.getMatchingOptions("hi!"); boolean boolean64 = options58.hasOption(" "); java.util.List list65 = options58.getRequiredOptions(); java.util.List list66 = options58.helpOptions(); helpFormatter40.printHelp((int) (short) -1, "\n", "usage:", options58, "", true); try { helpFormatter0.printUsage(printWriter37, 52, "--", options58); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "usage:" + "'", str18, "usage:"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "usage: " + "'", str19, "usage: "); org.junit.Assert.assertNull(option25); org.junit.Assert.assertNotNull(list27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(list30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str31, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list32); org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1)); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\n" + "'", str47, "\n"); org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1); org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg"); org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3); org.junit.Assert.assertNull(option60); org.junit.Assert.assertNotNull(list62); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(list65); org.junit.Assert.assertNotNull(list66); }
public void test246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test246"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.io.PrintWriter printWriter4 = null; try { helpFormatter0.printWrapped(printWriter4, 3, (int) (byte) 10, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); }
public void test247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test247"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); helpFormatter6.defaultDescPad = 10; org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option12 = options10.getOption(" "); java.util.List list14 = options10.getMatchingOptions("hi!"); helpFormatter6.printHelp("usage: ", options10, false); java.lang.String str17 = helpFormatter6.defaultOptPrefix; java.lang.String str18 = helpFormatter6.defaultLongOptPrefix; java.lang.String str19 = helpFormatter6.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator21 = null; helpFormatter20.optionComparator = comparator21; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); helpFormatter20.printHelp("--", options24); java.lang.String str27 = helpFormatter20.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter28 = new org.apache.commons.cli.HelpFormatter(); helpFormatter28.defaultDescPad = 10; org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option34 = options32.getOption(" "); java.util.List list36 = options32.getMatchingOptions("hi!"); helpFormatter28.printHelp("usage: ", options32, false); java.util.Comparator comparator39 = helpFormatter28.getOptionComparator(); helpFormatter20.setOptionComparator(comparator39); helpFormatter6.optionComparator = comparator39; helpFormatter0.optionComparator = comparator39; helpFormatter0.defaultLeftPad = (short) 10; java.lang.String str45 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(list14); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-" + "'", str17, "-"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "--" + "'", str18, "--"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n" + "'", str19, "\n"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg"); org.junit.Assert.assertNull(option34); org.junit.Assert.assertNotNull(list36); org.junit.Assert.assertNotNull(comparator39); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "usage: " + "'", str45, "usage: "); }
public void test248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test248"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.defaultNewLine = "usage:"; helpFormatter0.defaultDescPad = '4'; int int7 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); }
public void test249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test249"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.lang.String str15 = helpFormatter0.rtrim("                                                 "); java.lang.String str16 = helpFormatter0.defaultNewLine; org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator18 = null; helpFormatter17.optionComparator = comparator18; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); helpFormatter17.printHelp("--", options21); java.lang.String str24 = helpFormatter17.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); helpFormatter25.defaultDescPad = 10; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option31 = options29.getOption(" "); java.util.List list33 = options29.getMatchingOptions("hi!"); helpFormatter25.printHelp("usage: ", options29, false); java.util.Comparator comparator36 = helpFormatter25.getOptionComparator(); helpFormatter17.setOptionComparator(comparator36); helpFormatter0.setOptionComparator(comparator36); java.lang.Class<?> wildcardClass39 = comparator36.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "arg" + "'", str24, "arg"); org.junit.Assert.assertNull(option31); org.junit.Assert.assertNotNull(list33); org.junit.Assert.assertNotNull(comparator36); org.junit.Assert.assertNotNull(wildcardClass39); }
public void test250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test250"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); java.lang.String str14 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix(""); java.lang.String str17 = helpFormatter0.getArgName(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); }
public void test251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test251"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); int int14 = helpFormatter0.getDescPadding(); java.lang.String str15 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); java.util.Collection collection28 = options21.getOptionGroups(); helpFormatter0.printHelp(" ", options21, false); java.lang.Class<?> wildcardClass31 = options21.getClass(); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertEquals("'" + str15 + "' != '" + " " + "'", str15, " "); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(collection28); org.junit.Assert.assertNotNull(wildcardClass31); }
public void test252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test252"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.defaultNewLine = "[ Options: [ short {} ] [ long {} ]"; helpFormatter0.setLeftPadding(52); java.lang.String str21 = helpFormatter0.getOptPrefix(); java.io.PrintWriter printWriter22 = null; try { helpFormatter0.printWrapped(printWriter22, (int) (short) 100, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertEquals("'" + str21 + "' != '" + " " + "'", str21, " "); }
public void test253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test253"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setLongOptSeparator("  "); java.lang.String str16 = helpFormatter0.createPadding((int) 'a'); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "                                                 " + "'", str16, "                                                 "); }
public void test254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test254"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLeftPadding((int) (byte) -1); java.io.PrintWriter printWriter17 = null; try { helpFormatter0.printWrapped(printWriter17, (int) (short) 1, (int) (short) -1, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test255"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultArgName = " "; helpFormatter0.setArgName("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); helpFormatter12.defaultDescPad = 10; int int15 = helpFormatter12.getDescPadding(); java.lang.String str16 = helpFormatter12.defaultArgName; java.lang.String str17 = helpFormatter12.getLongOptSeparator(); helpFormatter12.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator21 = null; helpFormatter20.optionComparator = comparator21; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); helpFormatter20.printHelp("--", options24); java.lang.String str27 = helpFormatter20.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter28 = new org.apache.commons.cli.HelpFormatter(); helpFormatter28.defaultDescPad = 10; org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option34 = options32.getOption(" "); java.util.List list36 = options32.getMatchingOptions("hi!"); helpFormatter28.printHelp("usage: ", options32, false); java.util.Comparator comparator39 = helpFormatter28.getOptionComparator(); helpFormatter20.setOptionComparator(comparator39); helpFormatter12.setOptionComparator(comparator39); helpFormatter0.optionComparator = comparator39; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + " " + "'", str17, " "); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg"); org.junit.Assert.assertNull(option34); org.junit.Assert.assertNotNull(list36); org.junit.Assert.assertNotNull(comparator39); }
public void test256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test256"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; helpFormatter0.setSyntaxPrefix(" "); java.lang.String str14 = helpFormatter0.getNewLine(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n"); }
public void test257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test257"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); helpFormatter0.defaultNewLine = "arg"; helpFormatter0.defaultOptPrefix = "[ Options: [ short {} ] [ long {} ]"; helpFormatter0.setNewLine(" "); java.lang.String str13 = helpFormatter0.createPadding(74); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "                                     " + "'", str13, "                                     "); }
public void test258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test258"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option20 = options18.getOption(" "); java.util.List list22 = options18.getMatchingOptions("hi!"); boolean boolean24 = options18.hasOption(" "); java.util.List list25 = options18.getRequiredOptions(); java.util.List list26 = options18.helpOptions(); helpFormatter0.printHelp((int) (short) -1, "\n", "usage:", options18, "", true); java.lang.String str30 = helpFormatter0.getNewLine(); helpFormatter0.setArgName("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); java.lang.String str33 = helpFormatter0.getOptPrefix(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertNull(option20); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\n" + "'", str30, "\n"); org.junit.Assert.assertEquals("'" + str33 + "' != '" + " " + "'", str33, " "); }
public void test259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test259"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); java.lang.String str14 = helpFormatter0.getArgName(); java.io.PrintWriter printWriter15 = null; try { helpFormatter0.printUsage(printWriter15, 74, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); }
public void test260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test260"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); java.io.PrintWriter printWriter30 = null; org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options(); boolean boolean36 = options34.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.List list37 = options34.helpOptions(); try { helpFormatter0.printHelp(printWriter30, 0, "", "usage:", options34, (int) (byte) 100, 0, "usage: ", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(list37); }
public void test261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test261"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; java.lang.String str3 = helpFormatter0.defaultNewLine; java.io.PrintWriter printWriter4 = null; org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); int int10 = helpFormatter6.findWrapPos("", (int) '#', 1); java.lang.String str11 = helpFormatter6.getSyntaxPrefix(); helpFormatter6.defaultNewLine = "usage: "; helpFormatter6.defaultArgName = "usage: "; helpFormatter6.setWidth(10); int int18 = helpFormatter6.defaultDescPad; helpFormatter6.defaultArgName = "usage: "; org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); java.lang.String str23 = options22.toString(); org.apache.commons.cli.Option option25 = options22.getOption("arg"); java.util.List list26 = options22.helpOptions(); helpFormatter6.printHelp(" ", options22, false); try { helpFormatter0.printOptions(printWriter4, 0, options22, (int) (byte) 10, 100); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str23, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option25); org.junit.Assert.assertNotNull(list26); }
public void test262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test262"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultLeftPad = (short) 0; int int14 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("arg"); java.lang.String str17 = helpFormatter0.defaultOptPrefix; java.lang.String str18 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setSyntaxPrefix("-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10); org.junit.Assert.assertEquals("'" + str17 + "' != '" + " " + "'", str17, " "); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "usage: " + "'", str18, "usage: "); }
public void test263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test263"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.defaultArgName; helpFormatter0.setDescPadding((int) '#'); java.util.Comparator comparator16 = helpFormatter0.optionComparator; int int17 = helpFormatter0.defaultWidth; java.lang.String str18 = helpFormatter0.getLongOptPrefix(); java.lang.String str19 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg"); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74 + "'", int17 == 74); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "--" + "'", str18, "--"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + " " + "'", str19, " "); }
public void test264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test264"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultLeftPad = (short) 0; int int14 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("arg"); java.lang.String str17 = helpFormatter0.defaultOptPrefix; helpFormatter0.defaultNewLine = "[ Options: [ short {} ] [ long {} ]"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10); org.junit.Assert.assertEquals("'" + str17 + "' != '" + " " + "'", str17, " "); }
public void test265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test265"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); int int15 = helpFormatter11.findWrapPos("", (int) '#', 1); helpFormatter11.defaultWidth = (byte) 10; java.lang.String str18 = helpFormatter11.getNewLine(); java.util.Comparator comparator19 = helpFormatter11.getOptionComparator(); java.util.Comparator comparator20 = helpFormatter11.getOptionComparator(); helpFormatter0.optionComparator = comparator20; helpFormatter0.defaultWidth = '4'; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n" + "'", str18, "\n"); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertNotNull(comparator20); }
public void test266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test266"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int7 = helpFormatter0.defaultWidth; helpFormatter0.setOptPrefix(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74 + "'", int7 == 74); }
public void test267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test267"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); java.io.PrintWriter printWriter10 = null; try { helpFormatter0.printWrapped(printWriter10, (int) (short) -1, (int) (byte) 10, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); }
public void test268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test268"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.lang.String str15 = helpFormatter0.rtrim("                                                 "); java.lang.String str16 = helpFormatter0.defaultNewLine; org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator18 = null; helpFormatter17.optionComparator = comparator18; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); helpFormatter17.printHelp("--", options21); java.lang.String str24 = helpFormatter17.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); helpFormatter25.defaultDescPad = 10; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option31 = options29.getOption(" "); java.util.List list33 = options29.getMatchingOptions("hi!"); helpFormatter25.printHelp("usage: ", options29, false); java.util.Comparator comparator36 = helpFormatter25.getOptionComparator(); helpFormatter17.setOptionComparator(comparator36); helpFormatter0.setOptionComparator(comparator36); java.lang.String str39 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "arg" + "'", str24, "arg"); org.junit.Assert.assertNull(option31); org.junit.Assert.assertNotNull(list33); org.junit.Assert.assertNotNull(comparator36); org.junit.Assert.assertEquals("'" + str39 + "' != '" + " " + "'", str39, " "); }
public void test269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test269"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); try { org.apache.commons.cli.Options options9 = options2.addOption("hi!", true, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option 'hi!' contains an illegal character : '!'"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); }
public void test270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test270"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); int int33 = helpFormatter0.findWrapPos("", (-1), (int) (short) 10); java.io.PrintWriter printWriter34 = null; try { helpFormatter0.printUsage(printWriter34, 52, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1)); }
public void test271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test271"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth(10); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultArgName = "usage: "; org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); java.lang.String str17 = options16.toString(); org.apache.commons.cli.Option option19 = options16.getOption("arg"); java.util.List list20 = options16.helpOptions(); helpFormatter0.printHelp(" ", options16, false); org.apache.commons.cli.Option option23 = null; try { org.apache.commons.cli.Options options24 = options16.addOption(option23); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list20); }
public void test272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test272"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.lang.String str15 = helpFormatter0.rtrim("                                                 "); java.lang.String str16 = helpFormatter0.defaultNewLine; helpFormatter0.defaultSyntaxPrefix = " "; java.lang.StringBuffer stringBuffer19 = null; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); boolean boolean27 = options21.hasOption(" "); java.util.List list28 = options21.getRequiredOptions(); java.util.List list29 = options21.helpOptions(); java.util.Collection collection30 = options21.getOptionGroups(); java.util.List list32 = options21.getMatchingOptions("arg"); java.lang.String str33 = options21.toString(); org.apache.commons.cli.Option option35 = options21.getOption("--"); java.util.Collection collection36 = options21.getOptionGroups(); try { java.lang.StringBuffer stringBuffer39 = helpFormatter0.renderOptions(stringBuffer19, 0, options21, (int) ' ', (-1)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(list28); org.junit.Assert.assertNotNull(list29); org.junit.Assert.assertNotNull(collection30); org.junit.Assert.assertNotNull(list32); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str33, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option35); org.junit.Assert.assertNotNull(collection36); }
public void test273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test273"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); helpFormatter0.setOptPrefix(""); java.io.PrintWriter printWriter32 = null; try { helpFormatter0.printWrapped(printWriter32, (-1), "                                     "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); }
public void test274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test274"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; java.lang.StringBuffer stringBuffer8 = null; org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); boolean boolean12 = options10.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.Collection collection13 = options10.getOptions(); java.lang.StringBuffer stringBuffer16 = helpFormatter0.renderOptions(stringBuffer8, (int) '4', options10, 74, (int) (short) 10); org.apache.commons.cli.Option option17 = null; try { org.apache.commons.cli.OptionGroup optionGroup18 = options10.getOptionGroup(option17); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(collection13); org.junit.Assert.assertNull(stringBuffer16); }
public void test275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test275"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setLeftPadding((int) '#'); java.lang.String str10 = helpFormatter0.defaultArgName; helpFormatter0.defaultDescPad = 0; int int13 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35); }
public void test276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test276"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); helpFormatter0.setOptPrefix("usage: "); helpFormatter0.setWidth((int) (short) 10); helpFormatter0.defaultWidth = 10; helpFormatter0.setDescPadding((-2)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); }
public void test277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test277"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setNewLine(" "); helpFormatter0.defaultOptPrefix = "                                     "; }
public void test278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test278"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setLeftPadding((int) '#'); java.lang.String str10 = helpFormatter0.getOptPrefix(); java.lang.String str11 = helpFormatter0.defaultNewLine; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n"); }
public void test279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test279"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; helpFormatter0.defaultWidth = 1; int int15 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); }
public void test280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test280"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasShortOption(" "); java.lang.String str29 = options17.toString(); boolean boolean31 = options17.hasOption("hi!"); boolean boolean33 = options17.hasShortOption("[ Options: [ short {} ] [ long {} ]"); org.apache.commons.cli.Option option34 = null; try { org.apache.commons.cli.OptionGroup optionGroup35 = options17.getOptionGroup(option34); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str29, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); }
public void test281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test281"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.setWidth((int) '4'); helpFormatter0.setSyntaxPrefix("--"); java.util.Comparator comparator21 = helpFormatter0.optionComparator; helpFormatter0.defaultOptPrefix = "usage:"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertNotNull(comparator21); }
public void test282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test282"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(" "); helpFormatter0.setLongOptSeparator(""); java.lang.Class<?> wildcardClass10 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertNotNull(wildcardClass10); }
public void test283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test283"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option12 = options10.getOption(" "); java.util.List list14 = options10.getMatchingOptions("hi!"); boolean boolean16 = options10.hasShortOption("arg"); helpFormatter0.printHelp("arg", options10); org.apache.commons.cli.Option option19 = options10.getOption(""); try { org.apache.commons.cli.Options options23 = options10.addOption("--", false, ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '--' contains an illegal character : '-'"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(list14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNull(option19); }
public void test284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test284"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option11 = options9.getOption(" "); java.util.List list13 = options9.getMatchingOptions("hi!"); boolean boolean15 = options9.hasOption(" "); org.apache.commons.cli.Option option17 = options9.getOption("hi!"); helpFormatter0.printHelp((int) '4', "\n", "                                                 ", options9, "usage:"); java.util.Collection collection20 = options9.getOptions(); java.util.List list22 = options9.getMatchingOptions(""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option11); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(collection20); org.junit.Assert.assertNotNull(list22); }
public void test285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test285"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; java.io.PrintWriter printWriter6 = null; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int14 = helpFormatter10.findWrapPos("", (int) '#', 1); helpFormatter10.defaultWidth = (byte) 10; java.lang.String str17 = helpFormatter10.getNewLine(); helpFormatter10.defaultOptPrefix = " "; int int20 = helpFormatter10.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter21 = new org.apache.commons.cli.HelpFormatter(); int int25 = helpFormatter21.findWrapPos("", (int) '#', 1); helpFormatter21.defaultWidth = (byte) 10; java.lang.String str28 = helpFormatter21.getNewLine(); java.util.Comparator comparator29 = helpFormatter21.getOptionComparator(); java.util.Comparator comparator30 = helpFormatter21.getOptionComparator(); helpFormatter10.optionComparator = comparator30; org.apache.commons.cli.HelpFormatter helpFormatter33 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator34 = null; helpFormatter33.optionComparator = comparator34; org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); helpFormatter33.printHelp("--", options37); java.lang.String str40 = helpFormatter33.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter41 = new org.apache.commons.cli.HelpFormatter(); helpFormatter41.defaultDescPad = 10; org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option47 = options45.getOption(" "); java.util.List list49 = options45.getMatchingOptions("hi!"); helpFormatter41.printHelp("usage: ", options45, false); java.util.Comparator comparator52 = helpFormatter41.getOptionComparator(); helpFormatter33.setOptionComparator(comparator52); org.apache.commons.cli.HelpFormatter helpFormatter57 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator58 = null; helpFormatter57.optionComparator = comparator58; org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options(); helpFormatter57.printHelp("--", options61); java.lang.String str64 = helpFormatter57.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter65 = new org.apache.commons.cli.HelpFormatter(); helpFormatter65.defaultDescPad = 10; org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option71 = options69.getOption(" "); java.util.List list73 = options69.getMatchingOptions("hi!"); helpFormatter65.printHelp("usage: ", options69, false); java.util.Comparator comparator76 = helpFormatter65.getOptionComparator(); helpFormatter57.setOptionComparator(comparator76); org.apache.commons.cli.HelpFormatter helpFormatter79 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator80 = null; helpFormatter79.optionComparator = comparator80; org.apache.commons.cli.Options options83 = new org.apache.commons.cli.Options(); helpFormatter79.printHelp("--", options83); helpFormatter57.printHelp("[ Options: [ short {} ] [ long {} ]", options83); helpFormatter33.printHelp(100, "\n", "", options83, "\n", true); helpFormatter10.printHelp("  ", options83); try { helpFormatter0.printHelp(printWriter6, 52, "usage: ", "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", options83, 100, (int) (short) 0, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\n" + "'", str17, "\n"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1); org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1)); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\n" + "'", str28, "\n"); org.junit.Assert.assertNotNull(comparator29); org.junit.Assert.assertNotNull(comparator30); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg"); org.junit.Assert.assertNull(option47); org.junit.Assert.assertNotNull(list49); org.junit.Assert.assertNotNull(comparator52); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "arg" + "'", str64, "arg"); org.junit.Assert.assertNull(option71); org.junit.Assert.assertNotNull(list73); org.junit.Assert.assertNotNull(comparator76); }
public void test286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test286"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); helpFormatter10.defaultDescPad = 10; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); helpFormatter10.printHelp("usage: ", options14, false); java.lang.String str21 = helpFormatter10.defaultOptPrefix; java.lang.String str22 = helpFormatter10.defaultLongOptPrefix; java.lang.String str23 = helpFormatter10.getLongOptSeparator(); helpFormatter10.defaultNewLine = "  "; java.util.Comparator comparator26 = helpFormatter10.optionComparator; helpFormatter0.setOptionComparator(comparator26); java.lang.String str28 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-" + "'", str21, "-"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "--" + "'", str22, "--"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + " " + "'", str23, " "); org.junit.Assert.assertNotNull(comparator26); org.junit.Assert.assertEquals("'" + str28 + "' != '" + " " + "'", str28, " "); }
public void test287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test287"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); java.lang.String str20 = helpFormatter15.getSyntaxPrefix(); helpFormatter15.defaultNewLine = "usage: "; helpFormatter15.defaultArgName = "usage: "; java.lang.String str26 = helpFormatter15.rtrim("usage: "); java.lang.String str27 = helpFormatter15.defaultSyntaxPrefix; org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option33 = options31.getOption(" "); java.util.List list35 = options31.getMatchingOptions("hi!"); boolean boolean37 = options31.hasOption(" "); java.util.List list38 = options31.getRequiredOptions(); java.lang.String str39 = options31.toString(); java.util.List list40 = options31.helpOptions(); helpFormatter15.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options31, "usage: "); helpFormatter0.printHelp((-1), "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "hi!", options31, "--"); boolean boolean46 = options31.hasOption(" "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "usage: " + "'", str20, "usage: "); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "usage:" + "'", str26, "usage:"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "usage: " + "'", str27, "usage: "); org.junit.Assert.assertNull(option33); org.junit.Assert.assertNotNull(list35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(list38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str39, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); }
public void test288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test288"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String str8 = options7.toString(); helpFormatter5.printHelp("-", options7, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", "usage:", options7, "usage: ", true); helpFormatter0.defaultDescPad = 0; helpFormatter0.defaultArgName = "-"; helpFormatter0.defaultNewLine = "                                     "; org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str8, "[ Options: [ short {} ] [ long {} ]"); }
public void test289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test289"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); helpFormatter10.defaultDescPad = 10; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); helpFormatter10.printHelp("usage: ", options14, false); java.lang.String str21 = helpFormatter10.defaultOptPrefix; java.lang.String str22 = helpFormatter10.defaultLongOptPrefix; java.lang.String str23 = helpFormatter10.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); helpFormatter10.optionComparator = comparator43; helpFormatter0.setOptionComparator(comparator43); java.lang.String str47 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-" + "'", str21, "-"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "--" + "'", str22, "--"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n"); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertEquals("'" + str47 + "' != '" + " " + "'", str47, " "); }
public void test290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test290"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); helpFormatter0.defaultArgName = ""; int int13 = helpFormatter0.defaultDescPad; java.io.PrintWriter printWriter14 = null; org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); java.lang.String str19 = options18.toString(); helpFormatter16.printHelp("-", options18, true); java.util.Collection collection22 = options18.getOptions(); java.util.Collection collection23 = options18.getOptions(); org.apache.commons.cli.Options options27 = options18.addOption("arg", false, ""); try { helpFormatter0.printOptions(printWriter14, (int) (byte) 10, options27, 35, (int) (short) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str19, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection22); org.junit.Assert.assertNotNull(collection23); org.junit.Assert.assertNotNull(options27); }
public void test291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test291"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str11 = helpFormatter0.rtrim("usage: "); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option18 = options16.getOption(" "); java.util.List list20 = options16.getMatchingOptions("hi!"); boolean boolean22 = options16.hasOption(" "); java.util.List list23 = options16.getRequiredOptions(); java.lang.String str24 = options16.toString(); java.util.List list25 = options16.helpOptions(); helpFormatter0.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options16, "usage: "); java.lang.String str29 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setOptPrefix("\n"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage:" + "'", str11, "usage:"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertNull(option18); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(list23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str24, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                 " + "'", str29, "                                                 "); }
public void test292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test292"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasShortOption(" "); java.lang.String str29 = options17.toString(); boolean boolean31 = options17.hasOption("hi!"); boolean boolean33 = options17.hasShortOption("[ Options: [ short {} ] [ long {} ]"); boolean boolean35 = options17.hasOption(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str29, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); }
public void test293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test293"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "arg", options14, "usage:", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); }
public void test294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test294"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); java.lang.String str7 = helpFormatter0.getArgName(); helpFormatter0.setOptPrefix("  "); helpFormatter0.setNewLine("--"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); }
public void test295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test295"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.defaultNewLine = "usage:"; helpFormatter0.defaultDescPad = '4'; helpFormatter0.defaultLongOptPrefix = "-"; }
public void test296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test296"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getArgName(); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option11 = options9.getOption(" "); java.util.List list13 = options9.getMatchingOptions("hi!"); boolean boolean15 = options9.hasShortOption("arg"); helpFormatter0.printHelp("  ", options9); java.util.Collection collection17 = options9.getOptions(); org.apache.commons.cli.OptionGroup optionGroup18 = null; try { org.apache.commons.cli.Options options19 = options9.addOptionGroup(optionGroup18); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option11); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(collection17); }
public void test297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test297"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setLeftPadding((int) '#'); java.lang.String str10 = helpFormatter0.getOptPrefix(); java.io.PrintWriter printWriter11 = null; try { helpFormatter0.printWrapped(printWriter11, (-1), " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); }
public void test298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test298"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); java.lang.String str56 = helpFormatter0.getLongOptPrefix(); java.lang.Class<?> wildcardClass57 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "--" + "'", str56, "--"); org.junit.Assert.assertNotNull(wildcardClass57); }
public void test299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test299"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultSyntaxPrefix = "[ Options: [ short {} ] [ long {} ]"; java.lang.String str8 = helpFormatter0.defaultArgName; int int9 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultWidth = 0; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); }
public void test300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test300"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultNewLine = ""; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); }
public void test301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test301"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; java.lang.String str12 = helpFormatter0.getOptPrefix(); helpFormatter0.defaultOptPrefix = ""; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + " " + "'", str12, " "); }
public void test302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test302"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; java.lang.String str7 = helpFormatter0.getLongOptSeparator(); int int8 = helpFormatter0.getLeftPadding(); helpFormatter0.setNewLine("usage: "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test303"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); java.lang.String str8 = helpFormatter0.getLongOptSeparator(); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); }
public void test304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test304"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = ""; java.lang.Class<?> wildcardClass14 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertNotNull(wildcardClass14); }
public void test305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test305"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); helpFormatter0.setOptPrefix("usage:"); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); java.lang.String str14 = options13.toString(); helpFormatter11.printHelp("-", options13, true); java.util.List list17 = options13.getRequiredOptions(); helpFormatter0.printHelp((int) (byte) 100, "usage: ", "--", options13, "-"); java.lang.String str21 = helpFormatter0.rtrim(" "); helpFormatter0.setLongOptPrefix("\n"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str14, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list17); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, ""); }
public void test306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test306"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int14 = helpFormatter10.findWrapPos("", (int) '#', 1); helpFormatter10.defaultWidth = (byte) 10; java.lang.String str17 = helpFormatter10.getNewLine(); helpFormatter10.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter21 = new org.apache.commons.cli.HelpFormatter(); helpFormatter21.defaultDescPad = 10; org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option27 = options25.getOption(" "); java.util.List list29 = options25.getMatchingOptions("hi!"); helpFormatter21.printHelp("usage: ", options25, false); helpFormatter10.printHelp("\n", options25); helpFormatter0.printHelp("usage: ", "-", options25, "arg", false); helpFormatter0.defaultArgName = ""; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\n" + "'", str17, "\n"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(list29); }
public void test307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test307"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultLeftPad = (short) 0; int int14 = helpFormatter0.getWidth(); java.lang.StringBuffer stringBuffer15 = null; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); boolean boolean23 = options17.hasOption(" "); boolean boolean25 = options17.hasShortOption("usage: "); java.lang.StringBuffer stringBuffer28 = helpFormatter0.renderOptions(stringBuffer15, (int) (short) -1, options17, (int) '4', (int) '4'); java.io.PrintWriter printWriter29 = null; org.apache.commons.cli.HelpFormatter helpFormatter33 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str34 = helpFormatter33.defaultArgName; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); boolean boolean42 = options36.hasOption(" "); org.apache.commons.cli.Options options47 = options36.addOption("", " ", false, "  "); boolean boolean49 = options47.hasOption("\n"); java.lang.String str50 = options47.toString(); helpFormatter33.printHelp(" ", options47, false); try { helpFormatter0.printHelp(printWriter29, (int) '4', "usage: ", " ", options47, (-1), 10, "hi!", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNull(stringBuffer28); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "arg" + "'", str34, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(options47); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]" + "'", str50, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); }
public void test308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test308"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setDescPadding((int) (short) 1); int int6 = helpFormatter0.findWrapPos("[ Options: [ short {} ] [ long {} ]", (-1), (int) '4'); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); }
public void test309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test309"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultArgName = " "; helpFormatter0.defaultLeftPad = 3; int int12 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test310"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); org.apache.commons.cli.Option option15 = options7.getOption("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option15); }
public void test311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test311"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.HelpFormatter helpFormatter3 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator4 = null; helpFormatter3.optionComparator = comparator4; org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); helpFormatter3.printHelp("--", options7); java.lang.String str10 = helpFormatter3.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); java.util.Comparator comparator22 = helpFormatter11.getOptionComparator(); helpFormatter3.setOptionComparator(comparator22); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator26 = null; helpFormatter25.optionComparator = comparator26; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); helpFormatter25.printHelp("--", options29); helpFormatter3.printHelp("[ Options: [ short {} ] [ long {} ]", options29); java.lang.String str32 = options29.toString(); helpFormatter0.printHelp("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "", options29, "                                                 "); org.apache.commons.cli.Options options37 = null; try { helpFormatter0.printHelp("                                     ", "hi!", options37, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str32, "[ Options: [ short {} ] [ long {} ]"); }
public void test312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test312"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.setNewLine("-"); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); }
public void test313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test313"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setLongOptPrefix("usage:"); java.lang.String str10 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); }
public void test314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test314"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setLeftPadding(3); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); int int24 = helpFormatter20.findWrapPos("", (int) '#', 1); helpFormatter20.defaultWidth = (byte) 10; java.lang.String str27 = helpFormatter20.getNewLine(); helpFormatter20.defaultOptPrefix = " "; int int30 = helpFormatter20.defaultLeftPad; java.lang.String str31 = helpFormatter20.getArgName(); int int32 = helpFormatter20.defaultDescPad; helpFormatter20.defaultLongOptPrefix = "\n"; org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option40 = options38.getOption(" "); java.util.List list42 = options38.getMatchingOptions("hi!"); boolean boolean44 = options38.hasOption(" "); java.util.List list45 = options38.getRequiredOptions(); java.util.List list46 = options38.helpOptions(); helpFormatter20.printHelp((int) (short) -1, "\n", "usage:", options38, "", true); java.util.Comparator comparator50 = helpFormatter20.optionComparator; int int54 = helpFormatter20.findWrapPos("hi!", 52, 52); org.apache.commons.cli.HelpFormatter helpFormatter55 = new org.apache.commons.cli.HelpFormatter(); int int59 = helpFormatter55.findWrapPos("", (int) '#', 1); int int60 = helpFormatter55.defaultLeftPad; int int61 = helpFormatter55.getLeftPadding(); helpFormatter55.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter55.setOptPrefix(""); java.util.Comparator comparator66 = helpFormatter55.getOptionComparator(); helpFormatter20.optionComparator = comparator66; helpFormatter0.optionComparator = comparator66; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1)); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\n" + "'", str27, "\n"); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3); org.junit.Assert.assertNull(option40); org.junit.Assert.assertNotNull(list42); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(list45); org.junit.Assert.assertNotNull(list46); org.junit.Assert.assertNotNull(comparator50); org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1)); org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1)); org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1); org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1); org.junit.Assert.assertNotNull(comparator66); }
public void test315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test315"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.defaultArgName; helpFormatter0.setDescPadding((int) '#'); java.util.Comparator comparator16 = helpFormatter0.optionComparator; int int17 = helpFormatter0.defaultWidth; helpFormatter0.defaultNewLine = "hi!"; java.io.PrintWriter printWriter20 = null; org.apache.commons.cli.Options options24 = null; try { helpFormatter0.printHelp(printWriter20, (int) (byte) -1, "[ Options: [ short {} ] [ long {} ]", "", options24, (int) (short) 1, (-2), ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg"); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74 + "'", int17 == 74); }
public void test316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test316"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setOptPrefix(""); helpFormatter0.setLeftPadding(10); helpFormatter0.setDescPadding((int) (short) 0); helpFormatter0.defaultSyntaxPrefix = ""; java.lang.Class<?> wildcardClass17 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(wildcardClass17); }
public void test317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test317"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); java.lang.String str14 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator17 = null; helpFormatter16.optionComparator = comparator17; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); helpFormatter16.printHelp("--", options20); java.lang.String str23 = helpFormatter16.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); helpFormatter24.defaultDescPad = 10; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option30 = options28.getOption(" "); java.util.List list32 = options28.getMatchingOptions("hi!"); helpFormatter24.printHelp("usage: ", options28, false); java.util.Comparator comparator35 = helpFormatter24.getOptionComparator(); helpFormatter16.setOptionComparator(comparator35); org.apache.commons.cli.HelpFormatter helpFormatter38 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator39 = null; helpFormatter38.optionComparator = comparator39; org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options(); helpFormatter38.printHelp("--", options42); helpFormatter16.printHelp("[ Options: [ short {} ] [ long {} ]", options42); java.lang.String str45 = options42.toString(); helpFormatter0.printHelp("                                                 ", options42, true); java.lang.String str48 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "usage: " + "'", str14, "usage: "); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg"); org.junit.Assert.assertNull(option30); org.junit.Assert.assertNotNull(list32); org.junit.Assert.assertNotNull(comparator35); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str45, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "--" + "'", str48, "--"); }
public void test318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test318"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getArgName(); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option11 = options9.getOption(" "); java.util.List list13 = options9.getMatchingOptions("hi!"); boolean boolean15 = options9.hasShortOption("arg"); helpFormatter0.printHelp("  ", options9); java.util.Collection collection17 = options9.getOptions(); java.util.List list18 = options9.getRequiredOptions(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option11); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(collection17); org.junit.Assert.assertNotNull(list18); }
public void test319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test319"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option12 = options10.getOption(" "); java.util.List list14 = options10.getMatchingOptions("hi!"); boolean boolean16 = options10.hasShortOption("arg"); helpFormatter0.printHelp("arg", options10); java.util.Collection collection18 = options10.getOptions(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(list14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(collection18); }
public void test320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test320"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); helpFormatter0.setNewLine("usage:"); helpFormatter0.setLongOptSeparator("usage: "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); }
public void test321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test321"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); java.lang.String str10 = options9.toString(); org.apache.commons.cli.Option option12 = options9.getOption("arg"); boolean boolean14 = options9.hasLongOption("hi!"); helpFormatter0.printHelp("                                                 ", "", options9, "                                                 ", false); boolean boolean19 = options9.hasOption(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test322"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setDescPadding((int) (short) 1); helpFormatter0.setLeftPadding((int) '#'); java.util.Comparator comparator5 = helpFormatter0.optionComparator; org.junit.Assert.assertNotNull(comparator5); }
public void test323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test323"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int14 = helpFormatter10.findWrapPos("", (int) '#', 1); java.lang.String str15 = helpFormatter10.defaultArgName; helpFormatter10.defaultOptPrefix = ""; org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator21 = null; helpFormatter20.optionComparator = comparator21; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); helpFormatter20.printHelp("--", options24); java.lang.String str27 = helpFormatter20.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter28 = new org.apache.commons.cli.HelpFormatter(); helpFormatter28.defaultDescPad = 10; org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option34 = options32.getOption(" "); java.util.List list36 = options32.getMatchingOptions("hi!"); helpFormatter28.printHelp("usage: ", options32, false); java.util.Comparator comparator39 = helpFormatter28.getOptionComparator(); helpFormatter20.setOptionComparator(comparator39); org.apache.commons.cli.HelpFormatter helpFormatter42 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator43 = null; helpFormatter42.optionComparator = comparator43; org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options(); helpFormatter42.printHelp("--", options46); helpFormatter20.printHelp("[ Options: [ short {} ] [ long {} ]", options46); java.util.Collection collection49 = options46.getOptionGroups(); helpFormatter10.printHelp("--", "", options46, "                                                 "); helpFormatter0.printHelp("usage:", "", options46, "-"); int int54 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg"); org.junit.Assert.assertNull(option34); org.junit.Assert.assertNotNull(list36); org.junit.Assert.assertNotNull(comparator39); org.junit.Assert.assertNotNull(collection49); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 74 + "'", int54 == 74); }
public void test324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test324"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultOptPrefix = "usage: "; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertNotNull(comparator8); }
public void test325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test325"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str10 = helpFormatter0.getOptPrefix(); helpFormatter0.defaultNewLine = "usage: "; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); }
public void test326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test326"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); helpFormatter10.defaultDescPad = 10; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); helpFormatter10.printHelp("usage: ", options14, false); java.lang.String str21 = helpFormatter10.defaultOptPrefix; java.lang.String str22 = helpFormatter10.defaultLongOptPrefix; java.lang.String str23 = helpFormatter10.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); helpFormatter10.optionComparator = comparator43; helpFormatter0.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter49 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); java.lang.String str52 = options51.toString(); helpFormatter49.printHelp("-", options51, true); java.util.List list55 = options51.getRequiredOptions(); java.util.Collection collection56 = options51.getOptionGroups(); java.lang.String str57 = options51.toString(); boolean boolean59 = options51.hasShortOption("usage: "); try { helpFormatter0.printHelp("", "[ Options: [ short {} ] [ long {} ]", options51, "hi!", true); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-" + "'", str21, "-"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "--" + "'", str22, "--"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n"); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str52, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list55); org.junit.Assert.assertNotNull(collection56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str57, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); }
public void test327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test327"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; java.lang.String str12 = helpFormatter0.getOptPrefix(); org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); boolean boolean20 = options14.hasOption(" "); java.util.List list21 = options14.getRequiredOptions(); java.util.List list22 = options14.helpOptions(); java.util.Collection collection23 = options14.getOptionGroups(); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options14); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + " " + "'", str12, " "); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertNotNull(collection23); }
public void test328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test328"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.HelpFormatter helpFormatter3 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator4 = null; helpFormatter3.optionComparator = comparator4; org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); helpFormatter3.printHelp("--", options7); java.lang.String str10 = helpFormatter3.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); java.util.Comparator comparator22 = helpFormatter11.getOptionComparator(); helpFormatter3.setOptionComparator(comparator22); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator26 = null; helpFormatter25.optionComparator = comparator26; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); helpFormatter25.printHelp("--", options29); helpFormatter3.printHelp("[ Options: [ short {} ] [ long {} ]", options29); java.lang.String str32 = options29.toString(); helpFormatter0.printHelp("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "", options29, "                                                 "); try { org.apache.commons.cli.Options options38 = options29.addOption("\n", false, "--"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal option name '?'"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str32, "[ Options: [ short {} ] [ long {} ]"); }
public void test329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test329"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(" "); helpFormatter0.setLongOptSeparator(""); java.lang.String str10 = helpFormatter0.getNewLine(); java.util.Comparator comparator11 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n" + "'", str10, "\n"); org.junit.Assert.assertNotNull(comparator11); }
public void test330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test330"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; int int3 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option7 = options5.getOption(" "); java.util.Collection collection8 = options5.getOptions(); java.util.Collection collection9 = options5.getOptions(); java.lang.String str10 = options5.toString(); org.apache.commons.cli.Option option12 = options5.getOption("usage: "); helpFormatter0.printHelp("usage:", options5); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertNull(option7); org.junit.Assert.assertNotNull(collection8); org.junit.Assert.assertNotNull(collection9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option12); }
public void test331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test331"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setSyntaxPrefix("-"); java.io.PrintWriter printWriter20 = null; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option26 = options24.getOption(" "); java.util.List list28 = options24.getMatchingOptions("hi!"); boolean boolean30 = options24.hasOption(" "); org.apache.commons.cli.Options options35 = options24.addOption("", " ", false, "  "); boolean boolean37 = options35.hasOption("\n"); org.apache.commons.cli.Options options42 = options35.addOption("", "                                                 ", true, "--"); try { helpFormatter0.printHelp(printWriter20, (int) ' ', "\n", "                                                 ", options35, 0, 100, "-", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertNull(option26); org.junit.Assert.assertNotNull(list28); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(options35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(options42); }
public void test332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test332"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator23 = null; helpFormatter22.optionComparator = comparator23; org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options(); helpFormatter22.printHelp("--", options26); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options26); java.util.Collection collection29 = options26.getOptionGroups(); boolean boolean31 = options26.hasShortOption(""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertNotNull(collection29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); }
public void test333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test333"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultOptPrefix = ""; helpFormatter0.defaultNewLine = "usage:"; int int13 = helpFormatter0.findWrapPos("arg", (-1), 10); org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); int int18 = helpFormatter14.findWrapPos("", (int) '#', 1); int int19 = helpFormatter14.defaultLeftPad; int int20 = helpFormatter14.getLeftPadding(); helpFormatter14.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator23 = helpFormatter14.getOptionComparator(); helpFormatter0.setOptionComparator(comparator23); java.io.PrintWriter printWriter25 = null; try { helpFormatter0.printWrapped(printWriter25, 35, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1)); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1); org.junit.Assert.assertNotNull(comparator23); }
public void test334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test334"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(" "); java.lang.String str8 = helpFormatter0.defaultLongOptPrefix; java.lang.String str9 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultArgName = ""; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "--" + "'", str9, "--"); }
public void test335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test335"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); java.lang.String str20 = helpFormatter15.getSyntaxPrefix(); helpFormatter15.defaultNewLine = "usage: "; helpFormatter15.defaultArgName = "usage: "; java.lang.String str26 = helpFormatter15.rtrim("usage: "); java.lang.String str27 = helpFormatter15.defaultSyntaxPrefix; org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option33 = options31.getOption(" "); java.util.List list35 = options31.getMatchingOptions("hi!"); boolean boolean37 = options31.hasOption(" "); java.util.List list38 = options31.getRequiredOptions(); java.lang.String str39 = options31.toString(); java.util.List list40 = options31.helpOptions(); helpFormatter15.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options31, "usage: "); helpFormatter0.printHelp((-1), "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "hi!", options31, "--"); org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option49 = options47.getOption(" "); java.util.List list51 = options47.getMatchingOptions("hi!"); boolean boolean53 = options47.hasOption(" "); java.util.List list54 = options47.getRequiredOptions(); java.util.List list55 = options47.helpOptions(); boolean boolean57 = options47.hasOption("-"); helpFormatter0.printHelp("usage: ", "--", options47, "[ Options: [ short {} ] [ long {} ]"); org.apache.commons.cli.Option option60 = null; try { org.apache.commons.cli.Options options61 = options47.addOption(option60); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "usage: " + "'", str20, "usage: "); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "usage:" + "'", str26, "usage:"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "usage: " + "'", str27, "usage: "); org.junit.Assert.assertNull(option33); org.junit.Assert.assertNotNull(list35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(list38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str39, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNull(option49); org.junit.Assert.assertNotNull(list51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(list54); org.junit.Assert.assertNotNull(list55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); }
public void test336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test336"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); java.lang.String str20 = helpFormatter15.getSyntaxPrefix(); helpFormatter15.defaultNewLine = "usage: "; helpFormatter15.defaultArgName = "usage: "; java.lang.String str26 = helpFormatter15.rtrim("usage: "); java.lang.String str27 = helpFormatter15.defaultSyntaxPrefix; org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option33 = options31.getOption(" "); java.util.List list35 = options31.getMatchingOptions("hi!"); boolean boolean37 = options31.hasOption(" "); java.util.List list38 = options31.getRequiredOptions(); java.lang.String str39 = options31.toString(); java.util.List list40 = options31.helpOptions(); helpFormatter15.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options31, "usage: "); helpFormatter0.printHelp((-1), "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "hi!", options31, "--"); org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option49 = options47.getOption(" "); java.util.List list51 = options47.getMatchingOptions("hi!"); boolean boolean53 = options47.hasOption(" "); java.util.List list54 = options47.getRequiredOptions(); java.util.List list55 = options47.helpOptions(); boolean boolean57 = options47.hasOption("-"); helpFormatter0.printHelp("usage: ", "--", options47, "[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setWidth((int) (byte) 10); java.lang.String str63 = helpFormatter0.rtrim("--"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "usage: " + "'", str20, "usage: "); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "usage:" + "'", str26, "usage:"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "usage: " + "'", str27, "usage: "); org.junit.Assert.assertNull(option33); org.junit.Assert.assertNotNull(list35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(list38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str39, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNull(option49); org.junit.Assert.assertNotNull(list51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(list54); org.junit.Assert.assertNotNull(list55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertEquals("'" + str63 + "' != '" + "--" + "'", str63, "--"); }
public void test337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test337"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setNewLine("-"); java.lang.String str11 = helpFormatter0.defaultArgName; int int12 = helpFormatter0.getDescPadding(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str11, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test338"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultNewLine = "usage: "; java.lang.String str8 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setOptPrefix("  "); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); }
public void test339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test339"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); java.util.Comparator comparator30 = null; helpFormatter0.optionComparator = comparator30; java.lang.String str32 = helpFormatter0.defaultArgName; helpFormatter0.setOptPrefix("                                                 "); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg"); }
public void test340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test340"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding((int) (short) 100); java.lang.String str12 = helpFormatter0.rtrim("                                     "); org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.lang.String str24 = helpFormatter13.defaultOptPrefix; helpFormatter13.setSyntaxPrefix(" "); java.util.Comparator comparator27 = helpFormatter13.optionComparator; helpFormatter0.optionComparator = comparator27; helpFormatter0.setDescPadding((int) (short) 10); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-" + "'", str24, "-"); org.junit.Assert.assertNotNull(comparator27); }
public void test341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test341"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; helpFormatter0.setSyntaxPrefix(" "); helpFormatter0.setArgName("arg"); org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option21 = options19.getOption(" "); java.util.List list23 = options19.getMatchingOptions("hi!"); boolean boolean25 = options19.hasOption(" "); org.apache.commons.cli.Option option27 = options19.getOption("hi!"); java.util.List list29 = options19.getMatchingOptions("usage: "); try { helpFormatter0.printHelp((int) (short) 100, "", "arg", options19, "--"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertNull(option21); org.junit.Assert.assertNotNull(list23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(list29); }
public void test342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test342"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator10 = null; helpFormatter9.optionComparator = comparator10; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); helpFormatter9.printHelp("--", options13); java.lang.String str16 = helpFormatter9.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); java.util.Comparator comparator28 = helpFormatter17.getOptionComparator(); helpFormatter9.setOptionComparator(comparator28); helpFormatter0.optionComparator = comparator28; helpFormatter0.setNewLine("usage:"); int int36 = helpFormatter0.findWrapPos("", 3, 74); helpFormatter0.defaultNewLine = "[ Options: [ short {} ] [ long {} ]"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(comparator28); org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1)); }
public void test343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test343"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); java.util.Comparator comparator23 = helpFormatter15.getOptionComparator(); java.util.Comparator comparator24 = helpFormatter15.getOptionComparator(); helpFormatter15.setNewLine("usage:"); org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); int int34 = helpFormatter30.findWrapPos("", (int) '#', 1); helpFormatter30.defaultWidth = (byte) 10; java.lang.String str37 = helpFormatter30.getNewLine(); helpFormatter30.defaultOptPrefix = " "; int int40 = helpFormatter30.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter43 = new org.apache.commons.cli.HelpFormatter(); helpFormatter43.defaultDescPad = 10; org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option49 = options47.getOption(" "); java.util.List list51 = options47.getMatchingOptions("hi!"); helpFormatter43.printHelp("usage: ", options47, false); java.util.Collection collection54 = options47.getOptionGroups(); helpFormatter30.printHelp("hi!", "", options47, "arg"); boolean boolean58 = options47.hasLongOption("  "); java.util.Collection collection59 = options47.getOptionGroups(); helpFormatter15.printHelp((int) '#', "  ", " ", options47, " "); helpFormatter0.printHelp("arg", "  ", options47, "usage:"); org.apache.commons.cli.HelpFormatter helpFormatter65 = new org.apache.commons.cli.HelpFormatter(); int int69 = helpFormatter65.findWrapPos("", (int) '#', 1); helpFormatter65.defaultWidth = (byte) 10; java.lang.String str72 = helpFormatter65.getNewLine(); helpFormatter65.defaultOptPrefix = " "; int int75 = helpFormatter65.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter78 = new org.apache.commons.cli.HelpFormatter(); helpFormatter78.defaultDescPad = 10; org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option84 = options82.getOption(" "); java.util.List list86 = options82.getMatchingOptions("hi!"); helpFormatter78.printHelp("usage: ", options82, false); java.util.Collection collection89 = options82.getOptionGroups(); helpFormatter65.printHelp("hi!", "", options82, "arg"); boolean boolean93 = options82.hasShortOption(" "); java.lang.String str94 = options82.toString(); java.util.List list95 = options82.helpOptions(); java.util.Collection collection96 = options82.getOptions(); java.lang.String str97 = options82.toString(); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options82, true); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertNotNull(comparator23); org.junit.Assert.assertNotNull(comparator24); org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1)); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\n" + "'", str37, "\n"); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1); org.junit.Assert.assertNull(option49); org.junit.Assert.assertNotNull(list51); org.junit.Assert.assertNotNull(collection54); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(collection59); org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1)); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\n" + "'", str72, "\n"); org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1); org.junit.Assert.assertNull(option84); org.junit.Assert.assertNotNull(list86); org.junit.Assert.assertNotNull(collection89); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str94, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list95); org.junit.Assert.assertNotNull(collection96); org.junit.Assert.assertEquals("'" + str97 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str97, "[ Options: [ short {} ] [ long {} ]"); }
public void test344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test344"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); java.lang.String str22 = helpFormatter0.createPadding(3); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator26 = null; helpFormatter25.optionComparator = comparator26; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); helpFormatter25.printHelp("--", options29); java.lang.String str32 = helpFormatter25.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter33 = new org.apache.commons.cli.HelpFormatter(); helpFormatter33.defaultDescPad = 10; org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option39 = options37.getOption(" "); java.util.List list41 = options37.getMatchingOptions("hi!"); helpFormatter33.printHelp("usage: ", options37, false); java.util.Comparator comparator44 = helpFormatter33.getOptionComparator(); helpFormatter25.setOptionComparator(comparator44); org.apache.commons.cli.HelpFormatter helpFormatter47 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator48 = null; helpFormatter47.optionComparator = comparator48; org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); helpFormatter47.printHelp("--", options51); helpFormatter25.printHelp("[ Options: [ short {} ] [ long {} ]", options51); java.lang.String str54 = options51.toString(); helpFormatter0.printHelp("-", "-", options51, "-", false); java.io.PrintWriter printWriter58 = null; try { helpFormatter0.printWrapped(printWriter58, (int) (short) 100, 3, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "  " + "'", str22, "  "); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg"); org.junit.Assert.assertNull(option39); org.junit.Assert.assertNotNull(list41); org.junit.Assert.assertNotNull(comparator44); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str54, "[ Options: [ short {} ] [ long {} ]"); }
public void test345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test345"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth(10); org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator18 = null; helpFormatter17.optionComparator = comparator18; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); helpFormatter17.printHelp("--", options21); java.lang.String str24 = helpFormatter17.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); helpFormatter25.defaultDescPad = 10; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option31 = options29.getOption(" "); java.util.List list33 = options29.getMatchingOptions("hi!"); helpFormatter25.printHelp("usage: ", options29, false); java.util.Comparator comparator36 = helpFormatter25.getOptionComparator(); helpFormatter17.setOptionComparator(comparator36); org.apache.commons.cli.HelpFormatter helpFormatter39 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator40 = null; helpFormatter39.optionComparator = comparator40; org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options(); helpFormatter39.printHelp("--", options43); helpFormatter17.printHelp("[ Options: [ short {} ] [ long {} ]", options43); java.lang.String str46 = options43.toString(); helpFormatter14.printHelp("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "", options43, "                                                 "); helpFormatter0.printHelp("usage:", "--", options43, "--"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "arg" + "'", str24, "arg"); org.junit.Assert.assertNull(option31); org.junit.Assert.assertNotNull(list33); org.junit.Assert.assertNotNull(comparator36); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str46, "[ Options: [ short {} ] [ long {} ]"); }
public void test346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test346"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); helpFormatter5.defaultDescPad = 10; org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int12 = helpFormatter8.findWrapPos("", (int) '#', 1); java.lang.String str13 = helpFormatter8.getSyntaxPrefix(); int int14 = helpFormatter8.defaultLeftPad; int int18 = helpFormatter8.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.util.Comparator comparator19 = helpFormatter8.optionComparator; helpFormatter5.optionComparator = comparator19; helpFormatter0.optionComparator = comparator19; java.lang.String str22 = helpFormatter0.defaultLongOptPrefix; java.lang.String str23 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "--" + "'", str22, "--"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg"); }
public void test347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test347"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); helpFormatter0.defaultLongOptPrefix = "hi!"; helpFormatter0.setLongOptSeparator("usage: "); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); }
public void test348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test348"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultLeftPad = ' '; java.io.PrintWriter printWriter10 = null; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); boolean boolean20 = options14.hasOption(" "); java.util.List list21 = options14.getRequiredOptions(); java.util.List list22 = options14.helpOptions(); boolean boolean24 = options14.hasOption("-"); org.apache.commons.cli.Option option26 = options14.getOption("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.apache.commons.cli.Option option28 = options14.getOption("arg"); try { helpFormatter0.printHelp(printWriter10, (int) ' ', "", "[ Options: [ short {} ] [ long {} ]", options14, 52, (int) (byte) 1, "\n", true); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNull(option26); org.junit.Assert.assertNull(option28); }
public void test349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test349"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); boolean boolean28 = options17.hasLongOption("  "); java.util.Collection collection29 = options17.getOptionGroups(); java.util.List list31 = options17.getMatchingOptions("-"); org.apache.commons.cli.Option option32 = null; try { org.apache.commons.cli.Options options33 = options17.addOption(option32); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(collection29); org.junit.Assert.assertNotNull(list31); }
public void test350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test350"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); int int18 = helpFormatter14.findWrapPos("", (int) '#', 1); helpFormatter14.defaultWidth = (byte) 10; java.lang.String str21 = helpFormatter14.getNewLine(); java.util.Comparator comparator22 = helpFormatter14.getOptionComparator(); java.util.Comparator comparator23 = helpFormatter14.getOptionComparator(); helpFormatter0.optionComparator = comparator23; org.apache.commons.cli.HelpFormatter helpFormatter26 = new org.apache.commons.cli.HelpFormatter(); helpFormatter26.defaultDescPad = 10; org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option32 = options30.getOption(" "); java.util.List list34 = options30.getMatchingOptions("hi!"); helpFormatter26.printHelp("usage: ", options30, false); java.lang.String str37 = helpFormatter26.defaultOptPrefix; java.lang.String str38 = helpFormatter26.defaultLongOptPrefix; helpFormatter26.defaultLongOptPrefix = " "; org.apache.commons.cli.HelpFormatter helpFormatter43 = new org.apache.commons.cli.HelpFormatter(); int int47 = helpFormatter43.findWrapPos("", (int) '#', 1); helpFormatter43.defaultWidth = (byte) 10; java.lang.String str50 = helpFormatter43.getNewLine(); helpFormatter43.defaultOptPrefix = " "; int int53 = helpFormatter43.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter56 = new org.apache.commons.cli.HelpFormatter(); helpFormatter56.defaultDescPad = 10; org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option62 = options60.getOption(" "); java.util.List list64 = options60.getMatchingOptions("hi!"); helpFormatter56.printHelp("usage: ", options60, false); java.util.Collection collection67 = options60.getOptionGroups(); helpFormatter43.printHelp("hi!", "", options60, "arg"); boolean boolean71 = options60.hasShortOption(" "); helpFormatter26.printHelp("\n", "-", options60, "", false); helpFormatter0.printHelp("arg", options60); try { org.apache.commons.cli.Options options79 = options60.addOption("                                     ", true, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '                                     ' contains an illegal character : ' '"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\n" + "'", str21, "\n"); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertNotNull(comparator23); org.junit.Assert.assertNull(option32); org.junit.Assert.assertNotNull(list34); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-" + "'", str37, "-"); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "--" + "'", str38, "--"); org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1)); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\n" + "'", str50, "\n"); org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1); org.junit.Assert.assertNull(option62); org.junit.Assert.assertNotNull(list64); org.junit.Assert.assertNotNull(collection67); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); }
public void test351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test351"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); java.util.Comparator comparator30 = null; helpFormatter0.optionComparator = comparator30; helpFormatter0.defaultLongOptPrefix = "--"; java.lang.String str34 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "usage: " + "'", str34, "usage: "); }
public void test352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test352"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setDescPadding((int) (short) -1); java.lang.String str12 = helpFormatter0.getLongOptPrefix(); java.lang.String str13 = helpFormatter0.defaultNewLine; helpFormatter0.setLongOptSeparator("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); }
public void test353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test353"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); org.apache.commons.cli.Option option7 = options4.getOption(""); org.junit.Assert.assertNull(option7); }
public void test354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test354"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setLeftPadding((int) '#'); java.lang.String str10 = helpFormatter0.defaultArgName; helpFormatter0.defaultDescPad = 0; helpFormatter0.defaultDescPad = 74; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); }
public void test355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test355"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); java.lang.String str22 = helpFormatter0.createPadding(3); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator26 = null; helpFormatter25.optionComparator = comparator26; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); helpFormatter25.printHelp("--", options29); java.lang.String str32 = helpFormatter25.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter33 = new org.apache.commons.cli.HelpFormatter(); helpFormatter33.defaultDescPad = 10; org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option39 = options37.getOption(" "); java.util.List list41 = options37.getMatchingOptions("hi!"); helpFormatter33.printHelp("usage: ", options37, false); java.util.Comparator comparator44 = helpFormatter33.getOptionComparator(); helpFormatter25.setOptionComparator(comparator44); org.apache.commons.cli.HelpFormatter helpFormatter47 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator48 = null; helpFormatter47.optionComparator = comparator48; org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); helpFormatter47.printHelp("--", options51); helpFormatter25.printHelp("[ Options: [ short {} ] [ long {} ]", options51); java.lang.String str54 = options51.toString(); helpFormatter0.printHelp("-", "-", options51, "-", false); helpFormatter0.setWidth((int) '4'); helpFormatter0.setArgName("usage:"); java.io.PrintWriter printWriter62 = null; try { helpFormatter0.printWrapped(printWriter62, (int) (short) 1, 10, "-"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "  " + "'", str22, "  "); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg"); org.junit.Assert.assertNull(option39); org.junit.Assert.assertNotNull(list41); org.junit.Assert.assertNotNull(comparator44); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str54, "[ Options: [ short {} ] [ long {} ]"); }
public void test356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test356"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator23 = null; helpFormatter22.optionComparator = comparator23; org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options(); helpFormatter22.printHelp("--", options26); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options26); int int29 = helpFormatter0.defaultLeftPad; int int30 = helpFormatter0.defaultWidth; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 74 + "'", int30 == 74); }
public void test357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test357"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultDescPad = 0; java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultLongOptPrefix = "hi!"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); }
public void test358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test358"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultOptPrefix = "usage: "; java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.lang.String str27 = helpFormatter16.defaultOptPrefix; java.lang.String str28 = helpFormatter16.defaultLongOptPrefix; helpFormatter16.defaultLongOptPrefix = " "; org.apache.commons.cli.HelpFormatter helpFormatter33 = new org.apache.commons.cli.HelpFormatter(); int int37 = helpFormatter33.findWrapPos("", (int) '#', 1); helpFormatter33.defaultWidth = (byte) 10; java.lang.String str40 = helpFormatter33.getNewLine(); helpFormatter33.defaultOptPrefix = " "; int int43 = helpFormatter33.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); helpFormatter46.defaultDescPad = 10; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option52 = options50.getOption(" "); java.util.List list54 = options50.getMatchingOptions("hi!"); helpFormatter46.printHelp("usage: ", options50, false); java.util.Collection collection57 = options50.getOptionGroups(); helpFormatter33.printHelp("hi!", "", options50, "arg"); boolean boolean61 = options50.hasShortOption(" "); helpFormatter16.printHelp("\n", "-", options50, "", false); try { helpFormatter0.printHelp(printWriter12, (int) (byte) 100, "usage:", "--", options50, 74, (int) (short) -1, "-"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-" + "'", str27, "-"); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "--" + "'", str28, "--"); org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1)); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\n" + "'", str40, "\n"); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1); org.junit.Assert.assertNull(option52); org.junit.Assert.assertNotNull(list54); org.junit.Assert.assertNotNull(collection57); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); }
public void test359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test359"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; int int18 = helpFormatter0.getWidth(); java.lang.StringBuffer stringBuffer19 = null; try { java.lang.StringBuffer stringBuffer23 = helpFormatter0.renderWrappedText(stringBuffer19, (int) (byte) 0, (int) (byte) 10, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 74 + "'", int18 == 74); }
public void test360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test360"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setArgName(""); java.io.PrintWriter printWriter20 = null; try { helpFormatter0.printUsage(printWriter20, (int) '#', "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); }
public void test361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test361"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultOptPrefix = ""; helpFormatter0.defaultNewLine = "usage:"; int int13 = helpFormatter0.findWrapPos("arg", (-1), 10); org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); int int18 = helpFormatter14.findWrapPos("", (int) '#', 1); helpFormatter14.defaultWidth = (byte) 10; java.lang.String str21 = helpFormatter14.getNewLine(); java.util.Comparator comparator22 = helpFormatter14.getOptionComparator(); java.util.Comparator comparator23 = helpFormatter14.getOptionComparator(); helpFormatter0.setOptionComparator(comparator23); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1)); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\n" + "'", str21, "\n"); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertNotNull(comparator23); }
public void test362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test362"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultLongOptPrefix = "hi!"; helpFormatter0.defaultSyntaxPrefix = "--"; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(comparator11); }
public void test363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test363"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); }
public void test364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test364"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = "  "; java.lang.String str3 = helpFormatter0.defaultArgName; int int4 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultSyntaxPrefix = "[ Options: [ short {} ] [ long {} ]"; java.io.PrintWriter printWriter7 = null; try { helpFormatter0.printWrapped(printWriter7, 52, (int) 'a', "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1); }
public void test365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test365"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); helpFormatter15.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter26 = new org.apache.commons.cli.HelpFormatter(); helpFormatter26.defaultDescPad = 10; org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option32 = options30.getOption(" "); java.util.List list34 = options30.getMatchingOptions("hi!"); helpFormatter26.printHelp("usage: ", options30, false); helpFormatter15.printHelp("\n", options30); boolean boolean39 = options30.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.List list40 = options30.getRequiredOptions(); helpFormatter0.printHelp("                                                 ", options30, false); java.lang.String str43 = helpFormatter0.defaultOptPrefix; org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option47 = options45.getOption(" "); java.util.List list49 = options45.getMatchingOptions("hi!"); boolean boolean51 = options45.hasOption(" "); java.util.Collection collection52 = options45.getOptionGroups(); try { helpFormatter0.printHelp("", options45, true); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertNull(option32); org.junit.Assert.assertNotNull(list34); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-" + "'", str43, "-"); org.junit.Assert.assertNull(option47); org.junit.Assert.assertNotNull(list49); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(collection52); }
public void test366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test366"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setArgName("-"); java.lang.String str10 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); org.junit.Assert.assertNull(comparator11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); }
public void test367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test367"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = ""; java.lang.String str14 = helpFormatter0.getLongOptSeparator(); java.lang.String str15 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultDescPad = 100; java.io.PrintWriter printWriter18 = null; try { helpFormatter0.printWrapped(printWriter18, 100, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + " " + "'", str14, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "usage: " + "'", str15, "usage: "); }
public void test368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test368"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); java.lang.String str22 = helpFormatter0.createPadding(3); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator26 = null; helpFormatter25.optionComparator = comparator26; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); helpFormatter25.printHelp("--", options29); java.lang.String str32 = helpFormatter25.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter33 = new org.apache.commons.cli.HelpFormatter(); helpFormatter33.defaultDescPad = 10; org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option39 = options37.getOption(" "); java.util.List list41 = options37.getMatchingOptions("hi!"); helpFormatter33.printHelp("usage: ", options37, false); java.util.Comparator comparator44 = helpFormatter33.getOptionComparator(); helpFormatter25.setOptionComparator(comparator44); org.apache.commons.cli.HelpFormatter helpFormatter47 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator48 = null; helpFormatter47.optionComparator = comparator48; org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); helpFormatter47.printHelp("--", options51); helpFormatter25.printHelp("[ Options: [ short {} ] [ long {} ]", options51); java.lang.String str54 = options51.toString(); helpFormatter0.printHelp("-", "-", options51, "-", false); helpFormatter0.setWidth((int) '4'); helpFormatter0.setArgName("usage:"); org.apache.commons.cli.HelpFormatter helpFormatter62 = new org.apache.commons.cli.HelpFormatter(); int int66 = helpFormatter62.findWrapPos("", (int) '#', 1); int int67 = helpFormatter62.defaultLeftPad; int int68 = helpFormatter62.getLeftPadding(); helpFormatter62.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator71 = helpFormatter62.getOptionComparator(); helpFormatter62.defaultOptPrefix = "usage:"; java.lang.String str74 = helpFormatter62.defaultArgName; org.apache.commons.cli.HelpFormatter helpFormatter75 = new org.apache.commons.cli.HelpFormatter(); int int79 = helpFormatter75.findWrapPos("", (int) '#', 1); java.lang.String str80 = helpFormatter75.getSyntaxPrefix(); java.util.Comparator comparator81 = helpFormatter75.optionComparator; helpFormatter62.setOptionComparator(comparator81); helpFormatter0.setOptionComparator(comparator81); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "  " + "'", str22, "  "); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg"); org.junit.Assert.assertNull(option39); org.junit.Assert.assertNotNull(list41); org.junit.Assert.assertNotNull(comparator44); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str54, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1)); org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1); org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1); org.junit.Assert.assertNotNull(comparator71); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str74, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1)); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "usage: " + "'", str80, "usage: "); org.junit.Assert.assertNotNull(comparator81); }
public void test369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test369"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; java.lang.String str10 = helpFormatter0.getArgName(); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); helpFormatter0.setNewLine("usage:"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertNotNull(comparator11); }
public void test370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test370"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); java.util.Comparator comparator6 = helpFormatter0.optionComparator; int int7 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertNotNull(comparator6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); }
public void test371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test371"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; helpFormatter0.setSyntaxPrefix(" "); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); java.lang.String str18 = options17.toString(); helpFormatter15.printHelp("-", options17, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options17, false); java.lang.String str23 = helpFormatter0.getArgName(); int int24 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultOptPrefix = "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"; org.apache.commons.cli.Options options28 = null; try { helpFormatter0.printHelp("                                     ", options28, false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str18, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg"); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1); }
public void test372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test372"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option15 = options13.getOption(" "); java.util.List list17 = options13.getMatchingOptions("hi!"); boolean boolean19 = options13.hasOption(" "); java.util.List list20 = options13.getRequiredOptions(); java.util.List list21 = options13.helpOptions(); java.util.Collection collection22 = options13.getOptionGroups(); java.util.List list24 = options13.getMatchingOptions("arg"); java.lang.String str25 = options13.toString(); org.apache.commons.cli.Option option27 = options13.getOption("--"); java.util.Collection collection28 = options13.getOptionGroups(); org.apache.commons.cli.Options options32 = options13.addOption("", true, "usage: "); helpFormatter0.printHelp("\n", options13); java.util.Collection collection34 = options13.getOptions(); try { org.apache.commons.cli.Options options39 = options13.addOption("\n", "usage:", true, ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal option name '?'"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(comparator11); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(list17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(collection28); org.junit.Assert.assertNotNull(options32); org.junit.Assert.assertNotNull(collection34); }
public void test373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test373"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultOptPrefix = ""; helpFormatter0.defaultNewLine = "usage:"; int int13 = helpFormatter0.findWrapPos("arg", (-1), 10); java.lang.String str14 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1)); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "usage:" + "'", str14, "usage:"); }
public void test374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test374"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setDescPadding((int) (short) 1); java.lang.String str3 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertEquals("'" + str3 + "' != '" + "--" + "'", str3, "--"); }
public void test375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test375"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; helpFormatter0.defaultOptPrefix = ""; helpFormatter0.defaultNewLine = "usage:"; helpFormatter0.setLeftPadding(100); java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printHelp(printWriter12, (int) (byte) 10, "                                     ", "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", options16, (int) (byte) 0, 52, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); }
public void test376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test376"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); java.lang.String str27 = helpFormatter0.getOptPrefix(); int int28 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertEquals("'" + str27 + "' != '" + " " + "'", str27, " "); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1); }
public void test377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test377"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setNewLine(" "); java.lang.String str10 = helpFormatter0.defaultLongOptPrefix; int int11 = helpFormatter0.getDescPadding(); helpFormatter0.setLongOptPrefix("usage: "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--" + "'", str10, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3); }
public void test378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test378"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator10 = null; helpFormatter9.optionComparator = comparator10; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); helpFormatter9.printHelp("--", options13); java.lang.String str16 = helpFormatter9.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); java.util.Comparator comparator28 = helpFormatter17.getOptionComparator(); helpFormatter9.setOptionComparator(comparator28); helpFormatter0.optionComparator = comparator28; helpFormatter0.setNewLine("usage:"); int int36 = helpFormatter0.findWrapPos("", 3, 74); org.apache.commons.cli.Options options39 = null; try { helpFormatter0.printHelp("                                                 ", "arg", options39, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(comparator28); org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1)); }
public void test379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test379"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.defaultNewLine = "[ Options: [ short {} ] [ long {} ]"; helpFormatter0.setLeftPadding(52); java.lang.String str21 = helpFormatter0.getOptPrefix(); helpFormatter0.defaultArgName = "[ Options: [ short {} ] [ long {} ]"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertEquals("'" + str21 + "' != '" + " " + "'", str21, " "); }
public void test380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test380"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultSyntaxPrefix = "arg"; helpFormatter0.setArgName(" "); helpFormatter0.setOptPrefix("hi!"); java.util.Comparator comparator15 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertNotNull(comparator15); }
public void test381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test381"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 100); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "                                                  " + "'", str9, "                                                  "); }
public void test382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test382"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); java.util.Comparator comparator30 = null; helpFormatter0.optionComparator = comparator30; java.lang.String str32 = helpFormatter0.defaultArgName; java.io.PrintWriter printWriter33 = null; org.apache.commons.cli.HelpFormatter helpFormatter36 = new org.apache.commons.cli.HelpFormatter(); int int40 = helpFormatter36.findWrapPos("", (int) '#', 1); helpFormatter36.defaultWidth = (byte) 10; java.lang.String str43 = helpFormatter36.getNewLine(); java.util.Comparator comparator44 = helpFormatter36.getOptionComparator(); org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option48 = options46.getOption(" "); java.util.List list50 = options46.getMatchingOptions("hi!"); boolean boolean52 = options46.hasShortOption("arg"); helpFormatter36.printHelp("arg", options46); java.util.List list55 = options46.getMatchingOptions("usage: "); try { helpFormatter0.printUsage(printWriter33, (-2), "", options46); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg"); org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1)); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\n" + "'", str43, "\n"); org.junit.Assert.assertNotNull(comparator44); org.junit.Assert.assertNull(option48); org.junit.Assert.assertNotNull(list50); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(list55); }
public void test383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test383"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; helpFormatter0.setSyntaxPrefix(" "); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); java.lang.String str18 = options17.toString(); helpFormatter15.printHelp("-", options17, true); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options17, false); java.lang.String str23 = helpFormatter0.getArgName(); int int24 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultOptPrefix = "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"; java.lang.String str27 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str18, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg"); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "--" + "'", str27, "--"); }
public void test384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test384"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str11 = helpFormatter0.rtrim("usage: "); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option18 = options16.getOption(" "); java.util.List list20 = options16.getMatchingOptions("hi!"); boolean boolean22 = options16.hasOption(" "); java.util.List list23 = options16.getRequiredOptions(); java.lang.String str24 = options16.toString(); java.util.List list25 = options16.helpOptions(); helpFormatter0.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options16, "usage: "); org.apache.commons.cli.Option option28 = null; try { org.apache.commons.cli.OptionGroup optionGroup29 = options16.getOptionGroup(option28); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage:" + "'", str11, "usage:"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertNull(option18); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(list23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str24, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list25); }
public void test385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test385"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultNewLine = ""; int int14 = helpFormatter0.getDescPadding(); helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.setLeftPadding((int) 'a'); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); }
public void test386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test386"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); helpFormatter0.defaultArgName = "-"; java.util.Comparator comparator16 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultLongOptPrefix = "[ Options: [ short {} ] [ long {} ]"; org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(comparator16); }
public void test387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test387"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option15 = options13.getOption(" "); java.util.List list17 = options13.getMatchingOptions("hi!"); boolean boolean19 = options13.hasOption(" "); java.util.List list20 = options13.getRequiredOptions(); java.util.List list21 = options13.helpOptions(); java.util.Collection collection22 = options13.getOptionGroups(); java.util.List list24 = options13.getMatchingOptions("arg"); java.lang.String str25 = options13.toString(); org.apache.commons.cli.Option option27 = options13.getOption("--"); java.util.Collection collection28 = options13.getOptionGroups(); org.apache.commons.cli.Options options32 = options13.addOption("", true, "usage: "); helpFormatter0.printHelp("\n", options13); helpFormatter0.defaultLeftPad = (short) 10; java.lang.String str36 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(comparator11); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(list17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(collection28); org.junit.Assert.assertNotNull(options32); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "usage: " + "'", str36, "usage: "); }
public void test388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test388"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.setNewLine("-"); java.lang.String str5 = helpFormatter0.getNewLine(); helpFormatter0.setDescPadding((-2)); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int14 = helpFormatter10.findWrapPos("", (int) '#', 1); java.lang.String str15 = helpFormatter10.getSyntaxPrefix(); helpFormatter10.defaultNewLine = "usage: "; helpFormatter10.defaultArgName = "usage: "; helpFormatter10.setWidth(10); int int22 = helpFormatter10.defaultDescPad; helpFormatter10.defaultArgName = "usage: "; org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options(); java.lang.String str27 = options26.toString(); org.apache.commons.cli.Option option29 = options26.getOption("arg"); java.util.List list30 = options26.helpOptions(); helpFormatter10.printHelp(" ", options26, false); try { helpFormatter0.printHelp("", "  ", options26, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "usage: " + "'", str15, "usage: "); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str27, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option29); org.junit.Assert.assertNotNull(list30); }
public void test389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test389"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setArgName(""); helpFormatter0.defaultSyntaxPrefix = ""; java.lang.String str22 = helpFormatter0.defaultArgName; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); }
public void test390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test390"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; java.lang.String str6 = helpFormatter0.defaultOptPrefix; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); }
public void test391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test391"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setLongOptSeparator("  "); int int15 = helpFormatter0.defaultWidth; java.io.PrintWriter printWriter16 = null; org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); int int24 = helpFormatter20.findWrapPos("", (int) '#', 1); java.lang.String str25 = helpFormatter20.getSyntaxPrefix(); helpFormatter20.defaultNewLine = "usage: "; helpFormatter20.defaultArgName = "usage: "; helpFormatter20.setWidth(10); int int32 = helpFormatter20.defaultDescPad; org.apache.commons.cli.HelpFormatter helpFormatter35 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options(); java.lang.String str38 = options37.toString(); helpFormatter35.printHelp("-", options37, true); java.util.Collection collection41 = options37.getOptions(); java.util.Collection collection42 = options37.getOptions(); org.apache.commons.cli.Options options46 = options37.addOption("arg", false, ""); java.util.Collection collection47 = options46.getOptions(); helpFormatter20.printHelp("                                                 ", "usage: ", options46, ""); try { helpFormatter0.printHelp(printWriter16, (-1), "\n", "", options46, 52, (int) (byte) 100, "-"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 74 + "'", int15 == 74); org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1)); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "usage: " + "'", str25, "usage: "); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str38, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection41); org.junit.Assert.assertNotNull(collection42); org.junit.Assert.assertNotNull(options46); org.junit.Assert.assertNotNull(collection47); }
public void test392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test392"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.defaultArgName = ""; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); }
public void test393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test393"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); java.lang.String str22 = helpFormatter0.createPadding(3); helpFormatter0.defaultSyntaxPrefix = ""; org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "  " + "'", str22, "  "); }
public void test394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test394"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option11 = options9.getOption(" "); java.util.List list13 = options9.getMatchingOptions("hi!"); boolean boolean15 = options9.hasOption(" "); org.apache.commons.cli.Option option17 = options9.getOption("hi!"); helpFormatter0.printHelp((int) '4', "\n", "                                                 ", options9, "usage:"); java.util.Collection collection20 = options9.getOptions(); org.apache.commons.cli.Option option21 = null; try { org.apache.commons.cli.Options options22 = options9.addOption(option21); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option11); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(collection20); }
public void test395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test395"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); helpFormatter0.setLongOptSeparator("arg"); helpFormatter0.setLongOptSeparator(" "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); }
public void test396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test396"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultLeftPad = (short) 0; int int14 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("arg"); java.lang.String str17 = helpFormatter0.defaultOptPrefix; int int21 = helpFormatter0.findWrapPos("hi!", 0, (int) (byte) 10); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10); org.junit.Assert.assertEquals("'" + str17 + "' != '" + " " + "'", str17, " "); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); }
public void test397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test397"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option15 = options13.getOption(" "); java.util.List list17 = options13.getMatchingOptions("hi!"); boolean boolean19 = options13.hasOption(" "); java.util.List list20 = options13.getRequiredOptions(); java.util.List list21 = options13.helpOptions(); java.util.Collection collection22 = options13.getOptionGroups(); java.util.List list24 = options13.getMatchingOptions("arg"); java.lang.String str25 = options13.toString(); org.apache.commons.cli.Option option27 = options13.getOption("--"); java.util.Collection collection28 = options13.getOptionGroups(); org.apache.commons.cli.Options options32 = options13.addOption("", true, "usage: "); helpFormatter0.printHelp("\n", options13); boolean boolean35 = options13.hasOption(""); java.util.Collection collection36 = options13.getOptionGroups(); try { org.apache.commons.cli.Options options40 = options13.addOption("--", true, "--"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '--' contains an illegal character : '-'"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(comparator11); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(list17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(collection28); org.junit.Assert.assertNotNull(options32); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(collection36); }
public void test398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test398"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); helpFormatter0.defaultSyntaxPrefix = ""; java.io.PrintWriter printWriter58 = null; org.apache.commons.cli.Options options61 = null; try { helpFormatter0.printUsage(printWriter58, 0, "", options61); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); }
public void test399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test399"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setLongOptSeparator("usage:"); helpFormatter0.defaultNewLine = "-"; org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); }
public void test400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test400"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setNewLine(" "); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp((int) (short) 100, " ", "-", options13, "hi!", true); java.lang.String str17 = helpFormatter0.getNewLine(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertEquals("'" + str17 + "' != '" + " " + "'", str17, " "); }
public void test401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test401"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); java.lang.String str8 = helpFormatter0.getLongOptSeparator(); int int9 = helpFormatter0.getDescPadding(); helpFormatter0.setLeftPadding(10); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3); }
public void test402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test402"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultArgName = ""; int int14 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 74 + "'", int14 == 74); }
public void test403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test403"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding((int) (short) 100); java.lang.String str11 = helpFormatter0.getLongOptSeparator(); java.io.PrintWriter printWriter12 = null; try { helpFormatter0.printUsage(printWriter12, 3, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); }
public void test404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test404"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator10 = null; helpFormatter9.optionComparator = comparator10; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); helpFormatter9.printHelp("--", options13); java.lang.String str16 = helpFormatter9.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); java.util.Comparator comparator28 = helpFormatter17.getOptionComparator(); helpFormatter9.setOptionComparator(comparator28); helpFormatter0.optionComparator = comparator28; org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option34 = options32.getOption(" "); java.util.List list36 = options32.getMatchingOptions("hi!"); boolean boolean38 = options32.hasOption(" "); java.util.List list39 = options32.getRequiredOptions(); java.util.List list40 = options32.helpOptions(); boolean boolean42 = options32.hasOption("hi!"); java.lang.String str43 = options32.toString(); try { helpFormatter0.printHelp("", options32); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(comparator28); org.junit.Assert.assertNull(option34); org.junit.Assert.assertNotNull(list36); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(list39); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str43, "[ Options: [ short {} ] [ long {} ]"); }
public void test405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test405"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); java.lang.String str56 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setNewLine("--"); helpFormatter0.setOptPrefix("                                                  "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "--" + "'", str56, "--"); }
public void test406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test406"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getLongOptSeparator(); java.lang.String str14 = helpFormatter0.defaultArgName; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); }
public void test407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test407"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); java.lang.String str14 = helpFormatter0.getArgName(); int int15 = helpFormatter0.defaultWidth; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 74 + "'", int15 == 74); }
public void test408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test408"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; java.lang.String str12 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + " " + "'", str12, " "); }
public void test409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test409"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultNewLine = ""; int int14 = helpFormatter0.getDescPadding(); helpFormatter0.setLeftPadding((int) (byte) -1); org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option20 = options18.getOption(" "); java.util.List list22 = options18.getMatchingOptions("hi!"); boolean boolean24 = options18.hasOption(" "); org.apache.commons.cli.Options options29 = options18.addOption("", " ", false, "  "); java.lang.String str30 = options18.toString(); java.util.List list31 = options18.helpOptions(); try { helpFormatter0.printHelp("-", options18, false); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); org.junit.Assert.assertNull(option20); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(options29); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]" + "'", str30, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.assertNotNull(list31); }
public void test410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test410"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); java.lang.String str11 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); }
public void test411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test411"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.defaultArgName; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; int int7 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); }
public void test412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test412"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.Collection collection7 = options2.getOptions(); org.apache.commons.cli.Options options11 = options2.addOption("arg", false, ""); java.util.Collection collection12 = options11.getOptions(); boolean boolean14 = options11.hasOption("                                                  "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertNotNull(options11); org.junit.Assert.assertNotNull(collection12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test413"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.setNewLine("[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); }
public void test414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test414"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); helpFormatter0.setLongOptPrefix("hi!"); java.io.PrintWriter printWriter23 = null; try { helpFormatter0.printWrapped(printWriter23, 1, 100, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); }
public void test415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test415"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding((int) (short) 100); java.lang.String str11 = helpFormatter0.getLongOptSeparator(); java.io.PrintWriter printWriter12 = null; try { helpFormatter0.printWrapped(printWriter12, (int) (short) 100, (-1), "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); }
public void test416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test416"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.lang.String str15 = helpFormatter0.rtrim("                                                 "); java.lang.String str16 = helpFormatter0.defaultNewLine; java.util.Comparator comparator17 = helpFormatter0.optionComparator; int int18 = helpFormatter0.getDescPadding(); helpFormatter0.defaultLongOptPrefix = "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(comparator17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3); }
public void test417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test417"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth(10); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setSyntaxPrefix(""); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); java.lang.String str19 = options18.toString(); helpFormatter16.printHelp("-", options18, true); java.util.Collection collection22 = options18.getOptions(); java.util.Collection collection23 = options18.getOptions(); boolean boolean25 = options18.hasShortOption("usage:"); try { helpFormatter0.printHelp("", options18, false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str19, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection22); org.junit.Assert.assertNotNull(collection23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); }
public void test418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test418"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.lang.String str15 = helpFormatter0.rtrim("                                                 "); helpFormatter0.setNewLine(" "); java.lang.StringBuffer stringBuffer18 = null; org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); helpFormatter20.defaultDescPad = 10; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option26 = options24.getOption(" "); java.util.List list28 = options24.getMatchingOptions("hi!"); helpFormatter20.printHelp("usage: ", options24, false); helpFormatter20.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter34 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); java.lang.String str37 = options36.toString(); helpFormatter34.printHelp("-", options36, true); org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option45 = options43.getOption(" "); java.util.List list47 = options43.getMatchingOptions("hi!"); boolean boolean49 = options43.hasOption(" "); org.apache.commons.cli.Option option51 = options43.getOption("hi!"); helpFormatter34.printHelp((int) '4', "\n", "                                                 ", options43, "usage:"); helpFormatter20.printHelp("[ Options: [ short {} ] [ long {} ]", options43); java.lang.StringBuffer stringBuffer57 = helpFormatter0.renderOptions(stringBuffer18, (int) '#', options43, 74, (int) (short) 1); java.lang.String str58 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertNull(option26); org.junit.Assert.assertNotNull(list28); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str37, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option45); org.junit.Assert.assertNotNull(list47); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNull(option51); org.junit.Assert.assertNull(stringBuffer57); org.junit.Assert.assertEquals("'" + str58 + "' != '" + " " + "'", str58, " "); }
public void test419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test419"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; int int3 = helpFormatter0.getDescPadding(); java.lang.String str4 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = null; helpFormatter8.optionComparator = comparator9; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); helpFormatter8.printHelp("--", options12); java.lang.String str15 = helpFormatter8.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.defaultDescPad = 10; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.List list24 = options20.getMatchingOptions("hi!"); helpFormatter16.printHelp("usage: ", options20, false); java.util.Comparator comparator27 = helpFormatter16.getOptionComparator(); helpFormatter8.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); int int33 = helpFormatter0.findWrapPos("", (-1), (int) (short) 10); helpFormatter0.setNewLine("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1)); }
public void test420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test420"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultDescPad = (byte) -1; java.lang.String str13 = helpFormatter0.defaultNewLine; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); }
public void test421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test421"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); helpFormatter0.defaultSyntaxPrefix = ""; org.apache.commons.cli.HelpFormatter helpFormatter61 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator62 = null; helpFormatter61.optionComparator = comparator62; org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options(); helpFormatter61.printHelp("--", options65); java.lang.String str68 = helpFormatter61.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter69 = new org.apache.commons.cli.HelpFormatter(); helpFormatter69.defaultDescPad = 10; org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option75 = options73.getOption(" "); java.util.List list77 = options73.getMatchingOptions("hi!"); helpFormatter69.printHelp("usage: ", options73, false); java.util.Comparator comparator80 = helpFormatter69.getOptionComparator(); helpFormatter61.setOptionComparator(comparator80); org.apache.commons.cli.HelpFormatter helpFormatter83 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator84 = null; helpFormatter83.optionComparator = comparator84; org.apache.commons.cli.Options options87 = new org.apache.commons.cli.Options(); helpFormatter83.printHelp("--", options87); helpFormatter61.printHelp("[ Options: [ short {} ] [ long {} ]", options87); helpFormatter0.printHelp((int) (byte) 10, "--", "[ Options: [ short {} ] [ long {} ]", options87, "--", false); java.util.Collection collection93 = options87.getOptionGroups(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertEquals("'" + str68 + "' != '" + "arg" + "'", str68, "arg"); org.junit.Assert.assertNull(option75); org.junit.Assert.assertNotNull(list77); org.junit.Assert.assertNotNull(comparator80); org.junit.Assert.assertNotNull(collection93); }
public void test422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test422"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); helpFormatter0.setOptPrefix("usage:"); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); java.lang.String str14 = options13.toString(); helpFormatter11.printHelp("-", options13, true); java.util.List list17 = options13.getRequiredOptions(); helpFormatter0.printHelp((int) (byte) 100, "usage: ", "--", options13, "-"); helpFormatter0.setWidth((int) (short) 1); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str14, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list17); }
public void test423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test423"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); java.io.PrintWriter printWriter21 = null; try { helpFormatter0.printUsage(printWriter21, (int) 'a', "                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); }
public void test424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test424"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.defaultNewLine = "[ Options: [ short {} ] [ long {} ]"; helpFormatter0.setLeftPadding(52); int int21 = helpFormatter0.defaultWidth; int int22 = helpFormatter0.defaultWidth; java.util.Comparator comparator23 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10); org.junit.Assert.assertNotNull(comparator23); }
public void test425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test425"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str10 = helpFormatter0.getNewLine(); helpFormatter0.setNewLine("  "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); }
public void test426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test426"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.defaultNewLine = "[ Options: [ short {} ] [ long {} ]"; helpFormatter0.setLeftPadding(52); java.lang.String str21 = helpFormatter0.getOptPrefix(); java.lang.String str22 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertEquals("'" + str21 + "' != '" + " " + "'", str21, " "); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]"); }
public void test427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test427"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); java.lang.String str14 = helpFormatter0.getArgName(); helpFormatter0.defaultLongOptPrefix = ""; helpFormatter0.defaultSyntaxPrefix = "  "; helpFormatter0.setLongOptPrefix(" "); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); }
public void test428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test428"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); int int16 = helpFormatter12.findWrapPos("", (int) '#', 1); helpFormatter12.defaultWidth = (byte) 10; java.lang.String str19 = helpFormatter12.getNewLine(); helpFormatter12.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter23 = new org.apache.commons.cli.HelpFormatter(); helpFormatter23.defaultDescPad = 10; org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option29 = options27.getOption(" "); java.util.List list31 = options27.getMatchingOptions("hi!"); helpFormatter23.printHelp("usage: ", options27, false); helpFormatter12.printHelp("\n", options27); boolean boolean36 = options27.hasShortOption("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.printHelp("usage:", "", options27, "                                                 "); helpFormatter0.setLongOptPrefix(""); int int41 = helpFormatter0.defaultDescPad; java.lang.String str42 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n" + "'", str19, "\n"); org.junit.Assert.assertNull(option29); org.junit.Assert.assertNotNull(list31); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3); org.junit.Assert.assertEquals("'" + str42 + "' != '" + " " + "'", str42, " "); }
public void test429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test429"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(" "); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); java.lang.String str10 = options9.toString(); org.apache.commons.cli.Option option12 = options9.getOption("arg"); helpFormatter0.printHelp("usage:", options9); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); java.lang.String str15 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option12); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\n" + "'", str15, "\n"); }
public void test430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test430"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str11 = helpFormatter0.rtrim("usage: "); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultWidth = (byte) -1; org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); java.lang.String str21 = options20.toString(); helpFormatter18.printHelp("-", options20, true); helpFormatter0.printHelp((int) (byte) 10, "[ Options: [ short {} ] [ long {} ]", "usage: ", options20, "\n", true); java.lang.String str27 = helpFormatter0.getArgName(); org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); helpFormatter30.defaultNewLine = " "; int int33 = helpFormatter30.defaultLeftPad; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.Collection collection39 = options36.getOptions(); java.util.Collection collection40 = options36.getOptions(); java.lang.String str41 = options36.toString(); java.lang.String str42 = options36.toString(); helpFormatter30.printHelp("                                                 ", "\n", options36, "usage: ", false); try { helpFormatter0.printHelp("", " ", options36, "                                     "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage:" + "'", str11, "usage:"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str21, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "usage: " + "'", str27, "usage: "); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(collection39); org.junit.Assert.assertNotNull(collection40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str41, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str42, "[ Options: [ short {} ] [ long {} ]"); }
public void test431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test431"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; java.lang.String str7 = helpFormatter0.getLongOptSeparator(); int int8 = helpFormatter0.getLeftPadding(); int int9 = helpFormatter0.getLeftPadding(); java.lang.String str11 = helpFormatter0.createPadding(0); helpFormatter0.setSyntaxPrefix(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); }
public void test432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test432"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; java.lang.String str3 = helpFormatter0.defaultNewLine; java.lang.String str4 = helpFormatter0.getOptPrefix(); java.io.PrintWriter printWriter5 = null; org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options(); java.lang.String str12 = options11.toString(); helpFormatter9.printHelp("-", options11, true); java.util.Collection collection15 = options11.getOptions(); java.util.List list17 = options11.getMatchingOptions("usage: "); try { helpFormatter0.printHelp(printWriter5, (int) (short) 10, "                                     ", "--", options11, 0, (int) ' ', ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection15); org.junit.Assert.assertNotNull(list17); }
public void test433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test433"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultNewLine = ""; int int14 = helpFormatter0.getDescPadding(); helpFormatter0.setLongOptPrefix(""); helpFormatter0.setWidth(0); helpFormatter0.setDescPadding(0); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); }
public void test434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test434"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.setLongOptSeparator("                                                 "); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); }
public void test435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test435"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setNewLine(" "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); }
public void test436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test436"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getLongOptSeparator(); java.lang.String str14 = helpFormatter0.getLongOptPrefix(); java.lang.String str16 = helpFormatter0.rtrim(""); java.lang.String str17 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "usage: " + "'", str17, "usage: "); }
public void test437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test437"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); helpFormatter0.setOptPrefix("usage: "); helpFormatter0.setWidth((int) (short) 10); helpFormatter0.setArgName("--"); java.lang.String str62 = helpFormatter0.defaultArgName; java.io.PrintWriter printWriter63 = null; try { helpFormatter0.printUsage(printWriter63, (int) 'a', "[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "--" + "'", str62, "--"); }
public void test438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test438"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); try { org.apache.commons.cli.Options options15 = options4.addOption("--", " ", false, "-"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '--' contains an illegal character : '-'"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); }
public void test439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test439"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option11 = options9.getOption(" "); java.util.List list13 = options9.getMatchingOptions("hi!"); boolean boolean15 = options9.hasOption(" "); org.apache.commons.cli.Option option17 = options9.getOption("hi!"); helpFormatter0.printHelp((int) '4', "\n", "                                                 ", options9, "usage:"); java.lang.String str20 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultSyntaxPrefix = "arg"; org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option11); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNull(option17); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "--" + "'", str20, "--"); }
public void test440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test440"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; helpFormatter0.defaultWidth = 1; helpFormatter0.defaultLongOptPrefix = "                                     "; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); }
public void test441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test441"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); helpFormatter0.setNewLine("usage:"); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); helpFormatter15.defaultOptPrefix = " "; int int25 = helpFormatter15.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter28 = new org.apache.commons.cli.HelpFormatter(); helpFormatter28.defaultDescPad = 10; org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option34 = options32.getOption(" "); java.util.List list36 = options32.getMatchingOptions("hi!"); helpFormatter28.printHelp("usage: ", options32, false); java.util.Collection collection39 = options32.getOptionGroups(); helpFormatter15.printHelp("hi!", "", options32, "arg"); boolean boolean43 = options32.hasLongOption("  "); java.util.Collection collection44 = options32.getOptionGroups(); helpFormatter0.printHelp((int) '#', "  ", " ", options32, " "); java.util.List list47 = options32.getRequiredOptions(); java.util.List list49 = options32.getMatchingOptions(""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1); org.junit.Assert.assertNull(option34); org.junit.Assert.assertNotNull(list36); org.junit.Assert.assertNotNull(collection39); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(collection44); org.junit.Assert.assertNotNull(list47); org.junit.Assert.assertNotNull(list49); }
public void test442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test442"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); java.util.Comparator comparator6 = helpFormatter0.optionComparator; helpFormatter0.defaultWidth = (short) 1; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertNotNull(comparator6); }
public void test443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test443"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; java.lang.String str3 = helpFormatter0.defaultNewLine; java.lang.Class<?> wildcardClass4 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertNotNull(wildcardClass4); }
public void test444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test444"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setWidth(0); java.lang.String str11 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setArgName(""); java.lang.String str14 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--" + "'", str11, "--"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n"); }
public void test445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test445"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth(10); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultArgName = "usage: "; org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); java.lang.String str17 = options16.toString(); org.apache.commons.cli.Option option19 = options16.getOption("arg"); java.util.List list20 = options16.helpOptions(); helpFormatter0.printHelp(" ", options16, false); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); int int29 = helpFormatter25.findWrapPos("", (int) '#', 1); java.lang.String str30 = helpFormatter25.getSyntaxPrefix(); helpFormatter25.defaultNewLine = "usage: "; helpFormatter25.defaultArgName = "usage: "; java.lang.String str36 = helpFormatter25.rtrim("usage: "); java.lang.String str37 = helpFormatter25.defaultSyntaxPrefix; org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option43 = options41.getOption(" "); java.util.List list45 = options41.getMatchingOptions("hi!"); boolean boolean47 = options41.hasOption(" "); java.util.List list48 = options41.getRequiredOptions(); java.lang.String str49 = options41.toString(); java.util.List list50 = options41.helpOptions(); helpFormatter25.printHelp((int) (byte) 100, "[ Options: [ short {} ] [ long {} ]", "                                                 ", options41, "usage: "); boolean boolean54 = options41.hasShortOption("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); helpFormatter0.printHelp("--", "hi!", options41, "", true); org.apache.commons.cli.Option option58 = null; try { org.apache.commons.cli.Options options59 = options41.addOption(option58); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1)); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "usage: " + "'", str30, "usage: "); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "usage:" + "'", str36, "usage:"); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "usage: " + "'", str37, "usage: "); org.junit.Assert.assertNull(option43); org.junit.Assert.assertNotNull(list45); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(list48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list50); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); }
public void test446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test446"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); int int17 = helpFormatter13.findWrapPos("", (int) '#', 1); int int18 = helpFormatter13.defaultLeftPad; int int19 = helpFormatter13.getLeftPadding(); helpFormatter13.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator22 = helpFormatter13.getOptionComparator(); helpFormatter0.setOptionComparator(comparator22); helpFormatter0.defaultOptPrefix = "  "; org.apache.commons.cli.HelpFormatter helpFormatter28 = new org.apache.commons.cli.HelpFormatter(); int int32 = helpFormatter28.findWrapPos("", (int) '#', 1); java.lang.String str33 = helpFormatter28.getSyntaxPrefix(); int int34 = helpFormatter28.defaultLeftPad; java.lang.String str35 = helpFormatter28.getLongOptSeparator(); int int36 = helpFormatter28.getWidth(); org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options(); boolean boolean40 = options38.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.List list41 = options38.helpOptions(); helpFormatter28.printHelp("                                     ", options38, false); helpFormatter0.printHelp(" ", "arg", options38, "hi!", true); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1)); org.junit.Assert.assertEquals("'" + str33 + "' != '" + "usage: " + "'", str33, "usage: "); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1); org.junit.Assert.assertEquals("'" + str35 + "' != '" + " " + "'", str35, " "); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 74 + "'", int36 == 74); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(list41); }
public void test447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test447"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); helpFormatter5.defaultDescPad = 10; org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int12 = helpFormatter8.findWrapPos("", (int) '#', 1); java.lang.String str13 = helpFormatter8.getSyntaxPrefix(); int int14 = helpFormatter8.defaultLeftPad; int int18 = helpFormatter8.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.util.Comparator comparator19 = helpFormatter8.optionComparator; helpFormatter5.optionComparator = comparator19; helpFormatter0.optionComparator = comparator19; helpFormatter0.defaultOptPrefix = "usage:"; java.io.PrintWriter printWriter24 = null; org.apache.commons.cli.Options options26 = null; try { helpFormatter0.printOptions(printWriter24, 100, options26, 0, 52); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); org.junit.Assert.assertNotNull(comparator19); }
public void test448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test448"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option15 = options13.getOption(" "); java.util.List list17 = options13.getMatchingOptions("hi!"); boolean boolean19 = options13.hasOption(" "); java.util.List list20 = options13.getRequiredOptions(); java.util.List list21 = options13.helpOptions(); java.util.Collection collection22 = options13.getOptionGroups(); java.util.List list24 = options13.getMatchingOptions("arg"); java.lang.String str25 = options13.toString(); org.apache.commons.cli.Option option27 = options13.getOption("--"); java.util.Collection collection28 = options13.getOptionGroups(); org.apache.commons.cli.Options options32 = options13.addOption("", true, "usage: "); helpFormatter0.printHelp("\n", options13); boolean boolean35 = options13.hasOption(""); org.apache.commons.cli.OptionGroup optionGroup36 = null; try { org.apache.commons.cli.Options options37 = options13.addOptionGroup(optionGroup36); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(comparator11); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(list17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(collection28); org.junit.Assert.assertNotNull(options32); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); }
public void test449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test449"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; java.lang.String str18 = helpFormatter0.getArgName(); java.lang.String str19 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setOptPrefix("hi!"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "arg" + "'", str18, "arg"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "usage: " + "'", str19, "usage: "); }
public void test450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test450"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option12 = options10.getOption(" "); java.util.List list14 = options10.getMatchingOptions("hi!"); boolean boolean16 = options10.hasShortOption("arg"); helpFormatter0.printHelp("arg", options10); java.lang.String str18 = helpFormatter0.defaultLongOptPrefix; java.io.PrintWriter printWriter19 = null; org.apache.commons.cli.HelpFormatter helpFormatter23 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator24 = null; helpFormatter23.optionComparator = comparator24; org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); helpFormatter23.printHelp("--", options27); try { helpFormatter0.printHelp(printWriter19, (int) (byte) 10, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]", options27, (int) (short) 0, (int) (byte) 0, "usage:"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(list14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "--" + "'", str18, "--"); }
public void test451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test451"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); helpFormatter6.defaultDescPad = 10; org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option12 = options10.getOption(" "); java.util.List list14 = options10.getMatchingOptions("hi!"); helpFormatter6.printHelp("usage: ", options10, false); java.lang.String str17 = helpFormatter6.defaultOptPrefix; java.lang.String str18 = helpFormatter6.defaultLongOptPrefix; java.lang.String str19 = helpFormatter6.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator21 = null; helpFormatter20.optionComparator = comparator21; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); helpFormatter20.printHelp("--", options24); java.lang.String str27 = helpFormatter20.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter28 = new org.apache.commons.cli.HelpFormatter(); helpFormatter28.defaultDescPad = 10; org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option34 = options32.getOption(" "); java.util.List list36 = options32.getMatchingOptions("hi!"); helpFormatter28.printHelp("usage: ", options32, false); java.util.Comparator comparator39 = helpFormatter28.getOptionComparator(); helpFormatter20.setOptionComparator(comparator39); helpFormatter6.optionComparator = comparator39; helpFormatter0.optionComparator = comparator39; helpFormatter0.defaultLeftPad = (short) 10; helpFormatter0.defaultDescPad = (short) -1; java.lang.String str48 = helpFormatter0.createPadding(0); org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(list14); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-" + "'", str17, "-"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "--" + "'", str18, "--"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n" + "'", str19, "\n"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg"); org.junit.Assert.assertNull(option34); org.junit.Assert.assertNotNull(list36); org.junit.Assert.assertNotNull(comparator39); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, ""); }
public void test452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test452"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 3; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); java.lang.String str19 = options18.toString(); org.apache.commons.cli.Option option21 = options18.getOption("arg"); java.util.List list23 = options18.getMatchingOptions("hi!"); boolean boolean25 = options18.hasLongOption("-"); boolean boolean27 = options18.hasShortOption("--"); helpFormatter0.printHelp(100, "                                                  ", "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", options18, "", false); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str19, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option21); org.junit.Assert.assertNotNull(list23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); }
public void test453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test453"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int14 = helpFormatter10.findWrapPos("", (int) '#', 1); helpFormatter10.defaultWidth = (byte) 10; java.lang.String str17 = helpFormatter10.getNewLine(); helpFormatter10.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter21 = new org.apache.commons.cli.HelpFormatter(); helpFormatter21.defaultDescPad = 10; org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option27 = options25.getOption(" "); java.util.List list29 = options25.getMatchingOptions("hi!"); helpFormatter21.printHelp("usage: ", options25, false); helpFormatter10.printHelp("\n", options25); helpFormatter0.printHelp("usage: ", "-", options25, "arg", false); int int36 = helpFormatter0.getWidth(); java.lang.String str37 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\n" + "'", str17, "\n"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(list29); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\n" + "'", str37, "\n"); }
public void test454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test454"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter15.findWrapPos("", (int) '#', 1); helpFormatter15.defaultWidth = (byte) 10; java.lang.String str22 = helpFormatter15.getNewLine(); helpFormatter15.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter26 = new org.apache.commons.cli.HelpFormatter(); helpFormatter26.defaultDescPad = 10; org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option32 = options30.getOption(" "); java.util.List list34 = options30.getMatchingOptions("hi!"); helpFormatter26.printHelp("usage: ", options30, false); helpFormatter15.printHelp("\n", options30); boolean boolean39 = options30.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.List list40 = options30.getRequiredOptions(); helpFormatter0.printHelp("                                                 ", options30, false); helpFormatter0.setArgName("                                                 "); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertNull(option32); org.junit.Assert.assertNotNull(list34); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(list40); }
public void test455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test455"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option20 = options18.getOption(" "); java.util.List list22 = options18.getMatchingOptions("hi!"); boolean boolean24 = options18.hasOption(" "); java.util.List list25 = options18.getRequiredOptions(); java.util.List list26 = options18.helpOptions(); helpFormatter0.printHelp((int) (short) -1, "\n", "usage:", options18, "", true); java.lang.String str30 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertNull(option20); org.junit.Assert.assertNotNull(list22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertEquals("'" + str30 + "' != '" + " " + "'", str30, " "); }
public void test456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test456"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); helpFormatter0.printHelp("\n", options15); boolean boolean24 = options15.hasShortOption("[ Options: [ short {} ] [ long {} ]"); java.util.List list25 = options15.getRequiredOptions(); java.util.List list26 = options15.helpOptions(); java.lang.Class<?> wildcardClass27 = options15.getClass(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(list26); org.junit.Assert.assertNotNull(wildcardClass27); }
public void test457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test457"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option15 = options13.getOption(" "); java.util.List list17 = options13.getMatchingOptions("hi!"); boolean boolean19 = options13.hasOption(" "); java.util.List list20 = options13.getRequiredOptions(); java.util.List list21 = options13.helpOptions(); java.util.Collection collection22 = options13.getOptionGroups(); java.util.List list24 = options13.getMatchingOptions("arg"); java.lang.String str25 = options13.toString(); org.apache.commons.cli.Option option27 = options13.getOption("--"); java.util.Collection collection28 = options13.getOptionGroups(); org.apache.commons.cli.Options options32 = options13.addOption("", true, "usage: "); helpFormatter0.printHelp("\n", options13); boolean boolean35 = options13.hasOption(""); try { org.apache.commons.cli.Options options40 = options13.addOption("  ", "usage:", false, ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The option '  ' contains an illegal character : ' '"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(comparator11); org.junit.Assert.assertNull(option15); org.junit.Assert.assertNotNull(list17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection22); org.junit.Assert.assertNotNull(list24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(collection28); org.junit.Assert.assertNotNull(options32); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); }
public void test458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test458"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setOptPrefix("\n"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); }
public void test459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test459"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultArgName = ""; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertNotNull(comparator8); }
public void test460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test460"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); helpFormatter0.setArgName("[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]"); org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(comparator11); }
public void test461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test461"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setSyntaxPrefix("-"); org.apache.commons.cli.Options options21 = null; try { helpFormatter0.printHelp("", options21); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); }
public void test462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test462"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.lang.String str11 = helpFormatter0.defaultArgName; helpFormatter0.defaultNewLine = ""; int int14 = helpFormatter0.getDescPadding(); helpFormatter0.setLongOptPrefix(""); java.io.PrintWriter printWriter17 = null; try { helpFormatter0.printUsage(printWriter17, (int) '4', "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); }
public void test463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test463"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); int int14 = helpFormatter0.defaultWidth; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 74 + "'", int14 == 74); }
public void test464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test464"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.createPadding((int) 'a'); helpFormatter0.setNewLine(" "); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); helpFormatter10.defaultDescPad = 10; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); helpFormatter10.printHelp("usage: ", options14, false); java.lang.String str21 = helpFormatter10.defaultOptPrefix; java.lang.String str22 = helpFormatter10.getNewLine(); java.lang.String str23 = helpFormatter10.defaultArgName; helpFormatter10.setDescPadding((int) '#'); java.util.Comparator comparator26 = helpFormatter10.optionComparator; helpFormatter0.setOptionComparator(comparator26); java.lang.String str29 = helpFormatter0.createPadding(74); java.lang.StringBuffer stringBuffer30 = null; try { java.lang.StringBuffer stringBuffer34 = helpFormatter0.renderWrappedText(stringBuffer30, 3, (-2), "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-" + "'", str21, "-"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg"); org.junit.Assert.assertNotNull(comparator26); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                     " + "'", str29, "                                     "); }
public void test465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test465"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultWidth = (byte) -1; helpFormatter0.defaultNewLine = ""; java.lang.String str15 = helpFormatter0.rtrim("                                                 "); helpFormatter0.setNewLine(" "); java.lang.StringBuffer stringBuffer18 = null; org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); helpFormatter20.defaultDescPad = 10; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option26 = options24.getOption(" "); java.util.List list28 = options24.getMatchingOptions("hi!"); helpFormatter20.printHelp("usage: ", options24, false); helpFormatter20.defaultWidth = 'a'; org.apache.commons.cli.HelpFormatter helpFormatter34 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); java.lang.String str37 = options36.toString(); helpFormatter34.printHelp("-", options36, true); org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option45 = options43.getOption(" "); java.util.List list47 = options43.getMatchingOptions("hi!"); boolean boolean49 = options43.hasOption(" "); org.apache.commons.cli.Option option51 = options43.getOption("hi!"); helpFormatter34.printHelp((int) '4', "\n", "                                                 ", options43, "usage:"); helpFormatter20.printHelp("[ Options: [ short {} ] [ long {} ]", options43); java.lang.StringBuffer stringBuffer57 = helpFormatter0.renderOptions(stringBuffer18, (int) '#', options43, 74, (int) (short) 1); org.apache.commons.cli.HelpFormatter helpFormatter59 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options(); java.lang.String str62 = options61.toString(); helpFormatter59.printHelp("-", options61, true); boolean boolean66 = options61.hasOption("arg"); java.util.List list67 = options61.getRequiredOptions(); try { helpFormatter0.printHelp("", options61); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertNull(option26); org.junit.Assert.assertNotNull(list28); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str37, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option45); org.junit.Assert.assertNotNull(list47); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNull(option51); org.junit.Assert.assertNull(stringBuffer57); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str62, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertNotNull(list67); }
public void test466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test466"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); int int16 = helpFormatter12.findWrapPos("", (int) '#', 1); helpFormatter12.defaultWidth = (byte) 10; java.lang.String str19 = helpFormatter12.getNewLine(); helpFormatter12.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter23 = new org.apache.commons.cli.HelpFormatter(); helpFormatter23.defaultDescPad = 10; org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option29 = options27.getOption(" "); java.util.List list31 = options27.getMatchingOptions("hi!"); helpFormatter23.printHelp("usage: ", options27, false); helpFormatter12.printHelp("\n", options27); boolean boolean36 = options27.hasShortOption("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.printHelp("usage:", "", options27, "                                                 "); int int39 = helpFormatter0.defaultLeftPad; java.lang.String str41 = helpFormatter0.createPadding((int) ' '); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n" + "'", str19, "\n"); org.junit.Assert.assertNull(option29); org.junit.Assert.assertNotNull(list31); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "                " + "'", str41, "                "); }
public void test467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test467"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator10 = null; helpFormatter9.optionComparator = comparator10; org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); helpFormatter9.printHelp("--", options13); java.lang.String str16 = helpFormatter9.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.defaultDescPad = 10; org.apache.commons.cli.Options options21 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option23 = options21.getOption(" "); java.util.List list25 = options21.getMatchingOptions("hi!"); helpFormatter17.printHelp("usage: ", options21, false); java.util.Comparator comparator28 = helpFormatter17.getOptionComparator(); helpFormatter9.setOptionComparator(comparator28); helpFormatter0.optionComparator = comparator28; helpFormatter0.setNewLine("usage:"); int int36 = helpFormatter0.findWrapPos("", 3, 74); java.lang.String str38 = helpFormatter0.createPadding(100); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); org.junit.Assert.assertNull(option23); org.junit.Assert.assertNotNull(list25); org.junit.Assert.assertNotNull(comparator28); org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1)); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "                                                  " + "'", str38, "                                                  "); }
public void test468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test468"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); helpFormatter0.setLeftPadding((int) '#'); java.lang.String str10 = helpFormatter0.defaultArgName; java.lang.String str11 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator15 = null; helpFormatter14.optionComparator = comparator15; org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); helpFormatter14.printHelp("--", options18); java.lang.String str20 = helpFormatter14.getNewLine(); java.lang.String str21 = helpFormatter14.defaultSyntaxPrefix; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option26 = options24.getOption(" "); java.util.Collection collection27 = options24.getOptions(); java.util.Collection collection28 = options24.getOptions(); java.lang.String str29 = options24.toString(); java.lang.String str30 = options24.toString(); helpFormatter14.printHelp("  ", "", options24, ""); helpFormatter0.printHelp("[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", "                                                 ", options24, "  ", false); helpFormatter0.setNewLine("hi!"); java.io.PrintWriter printWriter38 = null; org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option43 = options41.getOption(" "); java.util.List list45 = options41.getMatchingOptions("hi!"); boolean boolean47 = options41.hasOption(" "); org.apache.commons.cli.Options options52 = options41.addOption("", " ", false, "  "); boolean boolean54 = options52.hasOption("\n"); org.apache.commons.cli.Options options59 = options52.addOption("", "                                                 ", true, "--"); org.apache.commons.cli.Option option61 = options52.getOption("  "); try { helpFormatter0.printUsage(printWriter38, 100, "[ Options: [ short {=[ option:                                                   [ARG] :: -- ]} ] [ long { =[ option:   ::   ],                                                 =[ option:                                                   [ARG] :: -- ]} ]", options52); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--" + "'", str11, "--"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n" + "'", str20, "\n"); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "usage: " + "'", str21, "usage: "); org.junit.Assert.assertNull(option26); org.junit.Assert.assertNotNull(collection27); org.junit.Assert.assertNotNull(collection28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str29, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str30, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option43); org.junit.Assert.assertNotNull(list45); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(options52); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(options59); org.junit.Assert.assertNull(option61); }
public void test469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test469"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); helpFormatter0.setOptPrefix("usage:"); java.lang.String str8 = helpFormatter0.getLongOptSeparator(); int int9 = helpFormatter0.defaultWidth; int int10 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 74 + "'", int9 == 74); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); }
public void test470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test470"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultLeftPad; java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setOptPrefix("                                                 "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(comparator7); }
public void test471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test471"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); helpFormatter10.defaultDescPad = 10; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); helpFormatter10.printHelp("usage: ", options14, false); java.lang.String str21 = helpFormatter10.defaultOptPrefix; java.lang.String str22 = helpFormatter10.defaultLongOptPrefix; java.lang.String str23 = helpFormatter10.getLongOptSeparator(); helpFormatter10.defaultNewLine = "  "; java.util.Comparator comparator26 = helpFormatter10.optionComparator; helpFormatter0.setOptionComparator(comparator26); java.lang.StringBuffer stringBuffer28 = null; try { java.lang.StringBuffer stringBuffer32 = helpFormatter0.renderWrappedText(stringBuffer28, (int) (short) -1, 52, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-" + "'", str21, "-"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "--" + "'", str22, "--"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + " " + "'", str23, " "); org.junit.Assert.assertNotNull(comparator26); }
public void test472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test472"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); helpFormatter0.setOptPrefix(""); helpFormatter0.setLeftPadding(10); int int13 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultDescPad = (short) -1; helpFormatter0.defaultArgName = ""; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10); }
public void test473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test473"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator23 = null; helpFormatter22.optionComparator = comparator23; org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options(); helpFormatter22.printHelp("--", options26); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options26); java.util.Comparator comparator29 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertNotNull(comparator29); }
public void test474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test474"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator12 = helpFormatter0.optionComparator; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertNotNull(comparator11); org.junit.Assert.assertNotNull(comparator12); }
public void test475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test475"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); helpFormatter6.defaultDescPad = 10; org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option12 = options10.getOption(" "); java.util.List list14 = options10.getMatchingOptions("hi!"); helpFormatter6.printHelp("usage: ", options10, false); java.lang.String str17 = helpFormatter6.defaultOptPrefix; java.lang.String str18 = helpFormatter6.defaultLongOptPrefix; java.lang.String str19 = helpFormatter6.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator21 = null; helpFormatter20.optionComparator = comparator21; org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options(); helpFormatter20.printHelp("--", options24); java.lang.String str27 = helpFormatter20.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter28 = new org.apache.commons.cli.HelpFormatter(); helpFormatter28.defaultDescPad = 10; org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option34 = options32.getOption(" "); java.util.List list36 = options32.getMatchingOptions("hi!"); helpFormatter28.printHelp("usage: ", options32, false); java.util.Comparator comparator39 = helpFormatter28.getOptionComparator(); helpFormatter20.setOptionComparator(comparator39); helpFormatter6.optionComparator = comparator39; helpFormatter0.optionComparator = comparator39; java.lang.StringBuffer stringBuffer43 = null; org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option47 = options45.getOption(" "); java.util.Collection collection48 = options45.getOptions(); java.util.Collection collection49 = options45.getOptions(); org.apache.commons.cli.Options options53 = options45.addOption("", false, "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]"); java.util.Collection collection54 = options45.getOptions(); try { java.lang.StringBuffer stringBuffer57 = helpFormatter0.renderOptions(stringBuffer43, 100, options45, 10, 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNull(option12); org.junit.Assert.assertNotNull(list14); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-" + "'", str17, "-"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "--" + "'", str18, "--"); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n" + "'", str19, "\n"); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg"); org.junit.Assert.assertNull(option34); org.junit.Assert.assertNotNull(list36); org.junit.Assert.assertNotNull(comparator39); org.junit.Assert.assertNull(option47); org.junit.Assert.assertNotNull(collection48); org.junit.Assert.assertNotNull(collection49); org.junit.Assert.assertNotNull(options53); org.junit.Assert.assertNotNull(collection54); }
public void test476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test476"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator(" "); java.lang.String str8 = helpFormatter0.defaultLongOptPrefix; java.lang.String str9 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); boolean boolean18 = options12.hasOption(" "); org.apache.commons.cli.Options options23 = options12.addOption("", " ", false, "  "); helpFormatter0.printHelp("arg", "  ", options12, "-"); java.lang.String str26 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "--" + "'", str9, "--"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(options23); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "usage: " + "'", str26, "usage: "); }
public void test477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test477"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); helpFormatter10.defaultDescPad = 10; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); helpFormatter10.printHelp("usage: ", options14, false); java.lang.String str21 = helpFormatter10.defaultOptPrefix; java.lang.String str22 = helpFormatter10.defaultLongOptPrefix; java.lang.String str23 = helpFormatter10.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); helpFormatter10.optionComparator = comparator43; helpFormatter0.setOptionComparator(comparator43); java.lang.String str48 = helpFormatter0.rtrim("--"); java.lang.String str49 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-" + "'", str21, "-"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "--" + "'", str22, "--"); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n"); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "--" + "'", str48, "--"); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "usage: " + "'", str49, "usage: "); }
public void test478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test478"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int14 = helpFormatter10.findWrapPos("", (int) '#', 1); helpFormatter10.defaultWidth = (byte) 10; java.lang.String str17 = helpFormatter10.getNewLine(); helpFormatter10.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter21 = new org.apache.commons.cli.HelpFormatter(); helpFormatter21.defaultDescPad = 10; org.apache.commons.cli.Options options25 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option27 = options25.getOption(" "); java.util.List list29 = options25.getMatchingOptions("hi!"); helpFormatter21.printHelp("usage: ", options25, false); helpFormatter10.printHelp("\n", options25); helpFormatter0.printHelp("usage: ", "-", options25, "arg", false); boolean boolean37 = options25.hasOption("-"); java.util.Collection collection38 = options25.getOptions(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\n" + "'", str17, "\n"); org.junit.Assert.assertNull(option27); org.junit.Assert.assertNotNull(list29); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(collection38); }
public void test479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test479"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultArgName = ""; helpFormatter0.setWidth(52); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); }
public void test480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test480"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.getNewLine(); java.lang.String str14 = helpFormatter0.getArgName(); helpFormatter0.defaultLongOptPrefix = ""; helpFormatter0.defaultOptPrefix = "                                                  "; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); }
public void test481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test481"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option11 = options9.getOption(" "); java.util.List list13 = options9.getMatchingOptions("hi!"); boolean boolean15 = options9.hasOption(" "); org.apache.commons.cli.Option option17 = options9.getOption("hi!"); helpFormatter0.printHelp((int) '4', "\n", "                                                 ", options9, "usage:"); java.lang.String str20 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultSyntaxPrefix = "hi!"; helpFormatter0.setDescPadding((int) (short) 1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option11); org.junit.Assert.assertNotNull(list13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNull(option17); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "--" + "'", str20, "--"); }
public void test482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test482"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); java.lang.String str11 = helpFormatter0.defaultOptPrefix; java.lang.String str12 = helpFormatter0.getNewLine(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultSyntaxPrefix = "usage: "; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.setLeftPadding((int) (byte) -1); java.lang.String str22 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str23 = helpFormatter0.defaultSyntaxPrefix; int int24 = helpFormatter0.defaultDescPad; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "usage: " + "'", str22, "usage: "); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "usage: " + "'", str23, "usage: "); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35); }
public void test483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test483"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setLongOptPrefix("  "); java.lang.StringBuffer stringBuffer12 = null; org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); helpFormatter14.defaultNewLine = " "; int int17 = helpFormatter14.defaultLeftPad; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option22 = options20.getOption(" "); java.util.Collection collection23 = options20.getOptions(); java.util.Collection collection24 = options20.getOptions(); java.lang.String str25 = options20.toString(); java.lang.String str26 = options20.toString(); helpFormatter14.printHelp("                                                 ", "\n", options20, "usage: ", false); try { java.lang.StringBuffer stringBuffer32 = helpFormatter0.renderOptions(stringBuffer12, (int) '#', options20, (int) '4', (-2)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); org.junit.Assert.assertNull(option22); org.junit.Assert.assertNotNull(collection23); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str26, "[ Options: [ short {} ] [ long {} ]"); }
public void test484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test484"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator25 = null; helpFormatter24.optionComparator = comparator25; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); helpFormatter24.printHelp("--", options28); java.lang.String str31 = helpFormatter24.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter32 = new org.apache.commons.cli.HelpFormatter(); helpFormatter32.defaultDescPad = 10; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option38 = options36.getOption(" "); java.util.List list40 = options36.getMatchingOptions("hi!"); helpFormatter32.printHelp("usage: ", options36, false); java.util.Comparator comparator43 = helpFormatter32.getOptionComparator(); helpFormatter24.setOptionComparator(comparator43); org.apache.commons.cli.HelpFormatter helpFormatter46 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator47 = null; helpFormatter46.optionComparator = comparator47; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); helpFormatter46.printHelp("--", options50); helpFormatter24.printHelp("[ Options: [ short {} ] [ long {} ]", options50); helpFormatter0.printHelp(100, "\n", "", options50, "\n", true); java.util.List list56 = options50.helpOptions(); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg"); org.junit.Assert.assertNull(option38); org.junit.Assert.assertNotNull(list40); org.junit.Assert.assertNotNull(comparator43); org.junit.Assert.assertNotNull(list56); }
public void test485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test485"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.defaultDescPad = 10; org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option19 = options17.getOption(" "); java.util.List list21 = options17.getMatchingOptions("hi!"); helpFormatter13.printHelp("usage: ", options17, false); java.util.Collection collection24 = options17.getOptionGroups(); helpFormatter0.printHelp("hi!", "", options17, "arg"); java.lang.String str27 = helpFormatter0.getOptPrefix(); java.io.PrintWriter printWriter28 = null; try { helpFormatter0.printWrapped(printWriter28, (-2), (-1), "                                     "); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list21); org.junit.Assert.assertNotNull(collection24); org.junit.Assert.assertEquals("'" + str27 + "' != '" + " " + "'", str27, " "); }
public void test486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test486"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); helpFormatter0.setSyntaxPrefix("                                     "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertNotNull(comparator10); }
public void test487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test487"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "\n"; helpFormatter0.setLeftPadding((int) (byte) -1); helpFormatter0.defaultNewLine = "[ Options: [ short {} ] [ long {} ]"; helpFormatter0.setLeftPadding(52); int int21 = helpFormatter0.defaultWidth; org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); int int26 = helpFormatter22.findWrapPos("", (int) '#', 1); helpFormatter22.defaultWidth = (byte) 10; java.lang.String str29 = helpFormatter22.getNewLine(); helpFormatter22.defaultOptPrefix = " "; int int32 = helpFormatter22.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter33 = new org.apache.commons.cli.HelpFormatter(); int int37 = helpFormatter33.findWrapPos("", (int) '#', 1); helpFormatter33.defaultWidth = (byte) 10; java.lang.String str40 = helpFormatter33.getNewLine(); java.util.Comparator comparator41 = helpFormatter33.getOptionComparator(); java.util.Comparator comparator42 = helpFormatter33.getOptionComparator(); helpFormatter22.optionComparator = comparator42; helpFormatter0.setOptionComparator(comparator42); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10); org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1)); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\n" + "'", str29, "\n"); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1); org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1)); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\n" + "'", str40, "\n"); org.junit.Assert.assertNotNull(comparator41); org.junit.Assert.assertNotNull(comparator42); }
public void test488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test488"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; helpFormatter0.setNewLine("-"); java.lang.String str5 = helpFormatter0.getNewLine(); java.io.PrintWriter printWriter6 = null; org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultNewLine = " "; helpFormatter8.defaultNewLine = "  "; org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.List list18 = options14.getMatchingOptions("hi!"); boolean boolean20 = options14.hasShortOption("arg"); java.lang.String str21 = options14.toString(); helpFormatter8.printHelp("usage:", options14, true); java.util.Collection collection24 = options14.getOptionGroups(); try { helpFormatter0.printOptions(printWriter6, 35, options14, (int) '4', (int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(list18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str21, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection24); }
public void test489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test489"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultNewLine = ""; helpFormatter0.setSyntaxPrefix("-"); helpFormatter0.setDescPadding((int) (byte) 10); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); }
public void test490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test490"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getOptPrefix(); int int8 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultLeftPad = (-1); org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option16 = options14.getOption(" "); java.util.Collection collection17 = options14.getOptions(); java.util.Collection collection18 = options14.getOptions(); try { helpFormatter0.printHelp((int) (short) -1, "                                                  ", "[ Options: [ short {=[ option:   ::   ]} ] [ long { =[ option:   ::   ]} ]", options14, "  "); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertNull(option16); org.junit.Assert.assertNotNull(collection17); org.junit.Assert.assertNotNull(collection18); }
public void test491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test491"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; java.lang.String str11 = helpFormatter0.rtrim("usage: "); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setArgName(" "); helpFormatter0.defaultSyntaxPrefix = "                                                 "; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage:" + "'", str11, "usage:"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); }
public void test492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test492"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.HelpFormatter helpFormatter3 = new org.apache.commons.cli.HelpFormatter(); int int7 = helpFormatter3.findWrapPos("", (int) '#', 1); java.lang.String str8 = helpFormatter3.getSyntaxPrefix(); int int9 = helpFormatter3.defaultLeftPad; int int13 = helpFormatter3.findWrapPos("-", (int) (byte) 0, (int) (byte) 100); java.util.Comparator comparator14 = helpFormatter3.optionComparator; helpFormatter0.optionComparator = comparator14; helpFormatter0.defaultLongOptPrefix = "                                                 "; helpFormatter0.defaultNewLine = "-"; org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1)); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "usage: " + "'", str8, "usage: "); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1)); org.junit.Assert.assertNotNull(comparator14); }
public void test493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test493"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options(); java.lang.String str3 = options2.toString(); helpFormatter0.printHelp("-", options2, true); java.util.Collection collection6 = options2.getOptions(); java.util.Collection collection7 = options2.getOptions(); org.apache.commons.cli.Options options11 = options2.addOption("arg", false, ""); org.apache.commons.cli.Option option13 = options11.getOption("\n"); boolean boolean15 = options11.hasShortOption("\n"); java.util.Collection collection16 = options11.getOptions(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str3, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection6); org.junit.Assert.assertNotNull(collection7); org.junit.Assert.assertNotNull(options11); org.junit.Assert.assertNull(option13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(collection16); }
public void test494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test494"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option6 = options4.getOption(" "); java.util.List list8 = options4.getMatchingOptions("hi!"); helpFormatter0.printHelp("usage: ", options4, false); helpFormatter0.defaultDescPad = (byte) -1; java.lang.String str13 = helpFormatter0.defaultArgName; org.junit.Assert.assertNull(option6); org.junit.Assert.assertNotNull(list8); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg"); }
public void test495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test495"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultNewLine = " "; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("arg", options4); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = options7.getOption(" "); java.util.Collection collection10 = options7.getOptions(); java.util.Collection collection11 = options7.getOptions(); java.lang.String str12 = options7.toString(); helpFormatter0.printHelp("--", options7); java.lang.String str14 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator17 = null; helpFormatter16.optionComparator = comparator17; org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); helpFormatter16.printHelp("--", options20); java.lang.String str23 = helpFormatter16.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); helpFormatter24.defaultDescPad = 10; org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option30 = options28.getOption(" "); java.util.List list32 = options28.getMatchingOptions("hi!"); helpFormatter24.printHelp("usage: ", options28, false); java.util.Comparator comparator35 = helpFormatter24.getOptionComparator(); helpFormatter16.setOptionComparator(comparator35); org.apache.commons.cli.HelpFormatter helpFormatter38 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator39 = null; helpFormatter38.optionComparator = comparator39; org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options(); helpFormatter38.printHelp("--", options42); helpFormatter16.printHelp("[ Options: [ short {} ] [ long {} ]", options42); java.lang.String str45 = options42.toString(); helpFormatter0.printHelp("                                                 ", options42, true); java.util.List list48 = options42.helpOptions(); org.junit.Assert.assertNull(option9); org.junit.Assert.assertNotNull(collection10); org.junit.Assert.assertNotNull(collection11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "usage: " + "'", str14, "usage: "); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg"); org.junit.Assert.assertNull(option30); org.junit.Assert.assertNotNull(list32); org.junit.Assert.assertNotNull(comparator35); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str45, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(list48); }
public void test496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test496"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding(0); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.defaultDescPad = 10; org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option17 = options15.getOption(" "); java.util.List list19 = options15.getMatchingOptions("hi!"); helpFormatter11.printHelp("usage: ", options15, false); helpFormatter0.printHelp("\n", options15); helpFormatter0.defaultWidth = '#'; org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertNull(option17); org.junit.Assert.assertNotNull(list19); }
public void test497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test497"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); helpFormatter0.defaultWidth = (byte) 10; java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = " "; int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.setLongOptPrefix("[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test498"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = null; helpFormatter0.optionComparator = comparator1; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); helpFormatter0.printHelp("--", options4); java.lang.String str7 = helpFormatter0.rtrim("arg"); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.defaultDescPad = 10; org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option14 = options12.getOption(" "); java.util.List list16 = options12.getMatchingOptions("hi!"); helpFormatter8.printHelp("usage: ", options12, false); java.util.Comparator comparator19 = helpFormatter8.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator23 = null; helpFormatter22.optionComparator = comparator23; org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options(); helpFormatter22.printHelp("--", options26); helpFormatter0.printHelp("[ Options: [ short {} ] [ long {} ]", options26); helpFormatter0.setOptPrefix(""); helpFormatter0.setLongOptPrefix("                                     "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNull(option14); org.junit.Assert.assertNotNull(list16); org.junit.Assert.assertNotNull(comparator19); }
public void test499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test499"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "usage: "; helpFormatter0.defaultArgName = "usage: "; helpFormatter0.setWidth(10); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultArgName = "usage: "; org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); java.lang.String str17 = options16.toString(); org.apache.commons.cli.Option option19 = options16.getOption("arg"); java.util.List list20 = options16.helpOptions(); helpFormatter0.printHelp(" ", options16, false); int int23 = helpFormatter0.getDescPadding(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNull(option19); org.junit.Assert.assertNotNull(list20); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3); }
public void test500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test500"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int4 = helpFormatter0.findWrapPos("", (int) '#', 1); int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setArgName("[ Options: [ short {} ] [ long {} ]"); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); java.lang.String str10 = helpFormatter0.getArgName(); int int11 = helpFormatter0.defaultWidth; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); java.lang.String str16 = options15.toString(); helpFormatter13.printHelp("-", options15, true); java.util.Collection collection19 = options15.getOptions(); java.util.Collection collection20 = options15.getOptions(); org.apache.commons.cli.Options options24 = options15.addOption("arg", false, ""); java.util.Collection collection25 = options24.getOptions(); helpFormatter0.printHelp("arg", options24, false); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str16, "[ Options: [ short {} ] [ long {} ]"); org.junit.Assert.assertNotNull(collection19); org.junit.Assert.assertNotNull(collection20); org.junit.Assert.assertNotNull(options24); org.junit.Assert.assertNotNull(collection25); }
