public void test000() throws Throwable { float float0 = NumberUtils.max((-1628.1744F), (-1628.1744F), (-1628.1744F)); assertEquals((-1628.1744F), float0, 0.01F); }
public void test001() throws Throwable { float float0 = NumberUtils.min((-1637.821F), (-1637.821F), (-1637.821F)); assertEquals((-1637.821F), float0, 0.01F); }
public void test002() throws Throwable { double double0 = NumberUtils.toDouble("mk{JBWd'u=#o7&#FQ"); assertEquals(0.0, double0, 0.01); } @Test(timeout = 4000) public void test003() throws Throwable { double double0 = NumberUtils.min((-863.0815374851), (-863.0815374851), (-863.0815374851)); assertEquals((-863.0815374851), double0, 0.01); } @Test(timeout = 4000) public void test004() throws Throwable { NumberUtils numberUtils0 = new NumberUtils(); int[] intArray0 = new int[2]; intArray0[1] = (int) (short)numberUtils0.SHORT_MINUS_ONE; int int0 = NumberUtils.min(intArray0); assertEquals((-1), int0); } @Test(timeout = 4000) public void test005() throws Throwable { byte byte0 = NumberUtils.toByte("The Array must not be null"); assertEquals((byte)0, byte0); } @Test(timeout = 4000) public void test006() throws Throwable { double double0 = NumberUtils.max((double) (-313.0F), (double) (-313.0F), (double) (-313.0F)); assertEquals((-313.0), double0, 0.01); } @Test(timeout = 4000) public void test007() throws Throwable { long long0 = NumberUtils.toLong("{[u!BuM)R[4"); assertEquals(0L, long0); } @Test(timeout = 4000) public void test008() throws Throwable { int int0 = NumberUtils.toInt("InvocationTargetException occurred during 1.6 backcompat code"); assertEquals(0, int0); } @Test(timeout = 4000) public void test009() throws Throwable { float float0 = NumberUtils.toFloat("X+^(11?}:Btf^G<5i"); assertEquals(0.0F, float0, 0.01F); } @Test(timeout = 4000) public void test010() throws Throwable { short short0 = NumberUtils.toShort(""); assertEquals((short)0, short0); } @Test(timeout = 4000) public void test011() throws Throwable { int int0 = NumberUtils.toInt((String) null); assertEquals(0, int0); } @Test(timeout = 4000) public void test012() throws Throwable { long long0 = NumberUtils.toLong((String) null, 280L); assertEquals(280L, long0); } @Test(timeout = 4000) public void test013() throws Throwable { float float0 = NumberUtils.toFloat((String) null, 0.0F); assertEquals(0.0F, float0, 0.01F); } @Test(timeout = 4000) public void test014() throws Throwable { double double0 = NumberUtils.toDouble((String) null); assertEquals(0.0, double0, 0.01); } @Test(timeout = 4000) public void test015() throws Throwable { byte byte0 = NumberUtils.toByte((String) null, (byte)113); assertEquals((byte)113, byte0); } @Test(timeout = 4000) public void test016() throws Throwable { short short0 = NumberUtils.toShort((String) null, (short)40); assertEquals((short)40, short0); } @Test(timeout = 4000) public void test017() throws Throwable { try { NumberUtils.createNumber("2E.m."); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // 2E.m. is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } } @Test(timeout = 4000) public void test018() throws Throwable { Number number0 = NumberUtils.createNumber((String) null); assertNull(number0); } @Test(timeout = 4000) public void test019() throws Throwable { try { NumberUtils.createNumber(""); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // A blank string is not a valid number // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } } @Test(timeout = 4000) public void test020() throws Throwable { Number number0 = NumberUtils.createNumber("----"); assertNull(number0); } @Test(timeout = 4000) public void test021() throws Throwable { try { NumberUtils.createNumber("0x.[NM"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // For input string: \".[NM\" // verifyException("java.lang.NumberFormatException", e); } } @Test(timeout = 4000) public void test022() throws Throwable { try { NumberUtils.createNumber("-0x(>8&c_"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // For input string: \"-(>8&c_\" // verifyException("java.lang.NumberFormatException", e); } } @Test(timeout = 4000) public void test023() throws Throwable { Number number0 = NumberUtils.createNumber("0e1"); assertEquals((byte)0, number0.byteValue()); } @Test(timeout = 4000) public void test024() throws Throwable { Number number0 = NumberUtils.createNumber("-0."); assertEquals((short)0, number0.shortValue()); } @Test(timeout = 4000) public void test025() throws Throwable { try { NumberUtils.createNumber("4Beg\".3nS[s9L[Eq"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // 4Beg\".3nS[s9L[Eq is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } } @Test(timeout = 4000) public void test026() throws Throwable { try { NumberUtils.createNumber("EvW]miHd%;.,(eK#5"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // no message in exception (getMessage() returned null) // verifyException("java.math.BigDecimal", e); } } @Test(timeout = 4000) public void test027() throws Throwable { Number number0 = NumberUtils.createNumber("0f"); assertEquals((short)0, number0.shortValue()); } @Test(timeout = 4000) public void test028() throws Throwable { try { NumberUtils.createNumber("h^@7}ZuQ6eEBVKq["); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // h^@7}ZuQ6eEBVKq[ is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); }
public void test003() throws Throwable { double double0 = NumberUtils.min((-863.0815374851), (-863.0815374851), (-863.0815374851)); assertEquals((-863.0815374851), double0, 0.01); }
public void test004() throws Throwable { NumberUtils numberUtils0 = new NumberUtils(); int[] intArray0 = new int[2]; intArray0[1] = (int) (short)numberUtils0.SHORT_MINUS_ONE; int int0 = NumberUtils.min(intArray0); assertEquals((-1), int0); }
public void test005() throws Throwable { byte byte0 = NumberUtils.toByte("The Array must not be null"); assertEquals((byte)0, byte0); }
public void test006() throws Throwable { double double0 = NumberUtils.max((double) (-313.0F), (double) (-313.0F), (double) (-313.0F)); assertEquals((-313.0), double0, 0.01); }
public void test007() throws Throwable { long long0 = NumberUtils.toLong("{[u!BuM)R[4"); assertEquals(0L, long0); } @Test(timeout = 4000) public void test008() throws Throwable { int int0 = NumberUtils.toInt("InvocationTargetException occurred during 1.6 backcompat code"); assertEquals(0, int0); } @Test(timeout = 4000) public void test009() throws Throwable { float float0 = NumberUtils.toFloat("X+^(11?}:Btf^G<5i"); assertEquals(0.0F, float0, 0.01F); }
public void test008() throws Throwable { int int0 = NumberUtils.toInt("InvocationTargetException occurred during 1.6 backcompat code"); assertEquals(0, int0); }
public void test009() throws Throwable { float float0 = NumberUtils.toFloat("X+^(11?}:Btf^G<5i");
public void test010() throws Throwable { short short0 = NumberUtils.toShort(""); assertEquals((short)0, short0); }
public void test011() throws Throwable { int int0 = NumberUtils.toInt((String) null); assertEquals(0, int0); }
public void test012() throws Throwable { long long0 = NumberUtils.toLong((String) null, 280L); assertEquals(280L, long0); }
public void test013() throws Throwable { float float0 = NumberUtils.toFloat((String) null, 0.0F); assertEquals(0.0F, float0, 0.01F); }
public void test014() throws Throwable { double double0 = NumberUtils.toDouble((String) null); assertEquals(0.0, double0, 0.01); }
public void test015() throws Throwable { byte byte0 = NumberUtils.toByte((String) null, (byte)113); assertEquals((byte)113, byte0); }
public void test016() throws Throwable { short short0 = NumberUtils.toShort((String) null, (short)40); assertEquals((short)40, short0); }
public void test017() throws Throwable { try { NumberUtils.createNumber("2E.m."); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // 2E.m. is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test018() throws Throwable { Number number0 = NumberUtils.createNumber((String) null); assertNull(number0); }
public void test019() throws Throwable { try { NumberUtils.createNumber(""); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // A blank string is not a valid number // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test020() throws Throwable { Number number0 = NumberUtils.createNumber("----"); assertNull(number0); }
public void test021() throws Throwable { try { NumberUtils.createNumber("0x.[NM"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // For input string: \".[NM\" // verifyException("java.lang.NumberFormatException", e); } }
public void test022() throws Throwable { try { NumberUtils.createNumber("-0x(>8&c_"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // For input string: \"-(>8&c_\" // verifyException("java.lang.NumberFormatException", e); } }
public void test023() throws Throwable { Number number0 = NumberUtils.createNumber("0e1"); assertEquals((byte)0, number0.byteValue()); }
public void test024() throws Throwable { Number number0 = NumberUtils.createNumber("-0."); assertEquals((short)0, number0.shortValue()); }
public void test025() throws Throwable { try { NumberUtils.createNumber("4Beg\".3nS[s9L[Eq"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // 4Beg\".3nS[s9L[Eq is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test026() throws Throwable { try { NumberUtils.createNumber("EvW]miHd%;.,(eK#5"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // no message in exception (getMessage() returned null) // verifyException("java.math.BigDecimal", e); } }
public void test027() throws Throwable { Number number0 = NumberUtils.createNumber("0f"); assertEquals((short)0, number0.shortValue()); }
public void test028() throws Throwable { try { NumberUtils.createNumber("h^@7}ZuQ6eEBVKq["); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // h^@7}ZuQ6eEBVKq[ is not a valid number.
public void test029() throws Throwable { try { NumberUtils.createNumber("0e"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // 0e is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test030() throws Throwable { try { NumberUtils.createNumber("0e)"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // 0e) is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test031() throws Throwable { Number number0 = NumberUtils.createNumber("0D"); assertEquals((short)0, number0.shortValue()); }
public void test032() throws Throwable { try { NumberUtils.createNumber("?$QY8g8gqg[7QDF"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // ?$QY8g8gqg[7QDF is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test033() throws Throwable { Number number0 = NumberUtils.createNumber("-9L"); assertEquals((-9L), number0); }
public void test034() throws Throwable { try { NumberUtils.createNumber("Vs?$}=d"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // Vs?$}=d is not a valid number.
public void test035() throws Throwable { Number number0 = NumberUtils.createNumber("0l"); assertEquals(0L, number0); }
public void test036() throws Throwable { try { NumberUtils.createNumber("JAj}Y.TdJ$,0|x?IL"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // JAj}Y.TdJ$,0|x?IL is not a valid number.
public void test037() throws Throwable { try { NumberUtils.createNumber("The Array must not be null"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // The Array must not be null is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test038() throws Throwable { try { NumberUtils.createNumber("-,L"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // -,L is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test039() throws Throwable { Number number0 = NumberUtils.createNumber("4f"); assertEquals(4.0F, number0); }
public void test040() throws Throwable { Number number0 = NumberUtils.createNumber("0.f"); assertEquals(0.0F, number0); }
public void test041() throws Throwable { Number number0 = NumberUtils.createNumber("1D"); assertEquals(1.0, number0); }
public void test042() throws Throwable { Number number0 = NumberUtils.createNumber("0.D"); assertEquals(0.0, number0); }
public void test043() throws Throwable { try { NumberUtils.createNumber("|Q7eZYL#x;@E((5"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // For input string: \"|Q7eZY\" // verifyException("java.lang.NumberFormatException", e); } }
public void test044() throws Throwable { Number number0 = NumberUtils.createNumber("0."); assertEquals(0.0F, number0); }
public void test045() throws Throwable { Number number0 = NumberUtils.createNumber("57."); assertEquals(57.0F, number0); }
public void test046() throws Throwable { Float float0 = NumberUtils.createFloat((String) null); assertNull(float0); }
public void test047() throws Throwable { Double double0 = NumberUtils.createDouble((String) null); assertNull(double0); }
public void test048() throws Throwable { Integer integer0 = NumberUtils.createInteger((String) null); assertNull(integer0); }
public void test049() throws Throwable { Long long0 = NumberUtils.createLong((String) null); assertNull(long0); }
public void test050() throws Throwable { BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null); assertNull(bigInteger0); }
public void test051() throws Throwable { BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null); assertNull(bigDecimal0); }
public void test052() throws Throwable { try { NumberUtils.createNumber("D"); fail("Expecting exception: NumberFormatException"); } catch(NumberFormatException e) { // // D is not a valid number. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test053() throws Throwable { long[] longArray0 = new long[0]; // Undeclared exception! try { NumberUtils.min(longArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test054() throws Throwable { // Undeclared exception! try { NumberUtils.min((long[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test055() throws Throwable { long[] longArray0 = new long[3]; longArray0[0] = 16L; long long0 = NumberUtils.min(longArray0); assertEquals(0L, long0); }
public void test056() throws Throwable { int[] intArray0 = new int[2]; int int0 = NumberUtils.min(intArray0); assertEquals(0, int0); }
public void test057() throws Throwable { // Undeclared exception! try { NumberUtils.min((int[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test058() throws Throwable { int[] intArray0 = new int[0]; // Undeclared exception! try { NumberUtils.min(intArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test059() throws Throwable { // Undeclared exception! try { NumberUtils.min((short[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test060() throws Throwable { short[] shortArray0 = new short[0]; // Undeclared exception! try { NumberUtils.min(shortArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test061() throws Throwable { NumberUtils numberUtils0 = new NumberUtils(); short[] shortArray0 = new short[3]; shortArray0[0] = (short) (byte)numberUtils0.BYTE_ONE; short short0 = NumberUtils.min(shortArray0); assertEquals((short)0, short0); }
public void test062() throws Throwable { // Undeclared exception! try { NumberUtils.min((byte[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test063() throws Throwable { byte[] byteArray0 = new byte[0]; // Undeclared exception! try { NumberUtils.min(byteArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test064() throws Throwable { NumberUtils numberUtils0 = new NumberUtils(); byte[] byteArray0 = new byte[10]; byteArray0[8] = (byte) numberUtils0.BYTE_MINUS_ONE; byte byte0 = NumberUtils.min(byteArray0); assertEquals((byte) (-1), byte0); }
public void test065() throws Throwable { // Undeclared exception! try { NumberUtils.min((double[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test066() throws Throwable { double[] doubleArray0 = new double[0]; // Undeclared exception! try { NumberUtils.min(doubleArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test067() throws Throwable { double[] doubleArray0 = new double[5]; doubleArray0[4] = Double.NaN; double double0 = NumberUtils.min(doubleArray0); assertEquals(Double.NaN, double0, 0.01); }
public void test068() throws Throwable { double[] doubleArray0 = new double[4]; doubleArray0[3] = (double) (byte) (-1); double double0 = NumberUtils.min(doubleArray0); assertEquals((-1.0), double0, 0.01); }
public void test069() throws Throwable { // Undeclared exception! try { NumberUtils.min((float[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test070() throws Throwable { float[] floatArray0 = new float[0]; // Undeclared exception! try { NumberUtils.min(floatArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test071() throws Throwable { float[] floatArray0 = new float[17]; floatArray0[1] = Float.NaN; float float0 = NumberUtils.min(floatArray0); assertEquals(Float.NaN, float0, 0.01F); }
public void test072() throws Throwable { float[] floatArray0 = new float[17]; floatArray0[1] = (-1.0F); float float0 = NumberUtils.min(floatArray0); assertEquals((-1.0F), float0, 0.01F); }
public void test073() throws Throwable { long[] longArray0 = new long[0]; // Undeclared exception! try { NumberUtils.max(longArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test074() throws Throwable { // Undeclared exception! try { NumberUtils.max((long[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test075() throws Throwable { long[] longArray0 = new long[6]; longArray0[1] = 234L; long long0 = NumberUtils.max(longArray0); assertEquals(234L, long0); }
public void test076() throws Throwable { int[] intArray0 = new int[0]; // Undeclared exception! try { NumberUtils.max(intArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test077() throws Throwable { // Undeclared exception! try { NumberUtils.max((int[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test078() throws Throwable { int[] intArray0 = new int[3]; intArray0[0] = (-548); int int0 = NumberUtils.max(intArray0); assertEquals(0, int0); }
public void test079() throws Throwable { // Undeclared exception! try { NumberUtils.max((short[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test080() throws Throwable { short[] shortArray0 = new short[0]; // Undeclared exception! try { NumberUtils.max(shortArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test081() throws Throwable { short[] shortArray0 = new short[18]; shortArray0[1] = (short)12; short short0 = NumberUtils.max(shortArray0); assertEquals((short)12, short0); }
public void test082() throws Throwable { // Undeclared exception! try { NumberUtils.max((byte[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test083() throws Throwable { byte[] byteArray0 = new byte[0]; // Undeclared exception! try { NumberUtils.max(byteArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test084() throws Throwable { NumberUtils numberUtils0 = new NumberUtils(); byte[] byteArray0 = new byte[5]; byteArray0[3] = (byte) numberUtils0.BYTE_ONE; byte byte0 = NumberUtils.max(byteArray0); assertEquals((byte)1, byte0); }
public void test085() throws Throwable { double[] doubleArray0 = new double[0]; // Undeclared exception! try { NumberUtils.max(doubleArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test086() throws Throwable { // Undeclared exception! try { NumberUtils.max((double[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test087() throws Throwable { double[] doubleArray0 = new double[9]; doubleArray0[3] = Double.NaN; double double0 = NumberUtils.max(doubleArray0); assertEquals(Double.NaN, double0, 0.01); }
public void test088() throws Throwable { double[] doubleArray0 = new double[4]; doubleArray0[3] = (double) (byte)29; double double0 = NumberUtils.max(doubleArray0); assertEquals(29.0, double0, 0.01); }
public void test089() throws Throwable { // Undeclared exception! try { NumberUtils.max((float[]) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // The Array must not be null // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test090() throws Throwable { float[] floatArray0 = new float[0]; // Undeclared exception! try { NumberUtils.max(floatArray0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // Array cannot be empty. // verifyException("org.apache.commons.lang3.math.NumberUtils", e); } }
public void test091() throws Throwable { float[] floatArray0 = new float[5]; floatArray0[1] = Float.NaN; float float0 = NumberUtils.max(floatArray0); assertEquals(Float.NaN, float0, 0.01F); }
public void test092() throws Throwable { float[] floatArray0 = new float[3]; floatArray0[2] = 152.5F; float float0 = NumberUtils.max(floatArray0); assertEquals(152.5F, float0, 0.01F); }
public void test093() throws Throwable { long long0 = NumberUtils.min((long) (short)772, (long) 0, (long) 0); assertEquals(0L, long0); }
public void test094() throws Throwable { long long0 = NumberUtils.min((long) (short)759, (long) (short)759, (long) 0); assertEquals(0L, long0); }
public void test095() throws Throwable { int int0 = NumberUtils.min((int) (short)759, (int) (short) (-3717), 0); assertEquals((-3717), int0); }
public void test096() throws Throwable { int int0 = NumberUtils.min((-504), (-504), (-781)); assertEquals((-781), int0); }
public void test097() throws Throwable { short short0 = NumberUtils.min((short)116, (short)65, (short)65); assertEquals((short)65, short0); }
public void test098() throws Throwable { short short0 = NumberUtils.min((short)0, (short)0, (short) (-2063)); assertEquals((short) (-2063), short0); }
public void test099() throws Throwable { byte byte0 = NumberUtils.min((byte)29, (byte) (-42), (byte)29); assertEquals((byte) (-42), byte0); }
public void test100() throws Throwable { byte byte0 = NumberUtils.min((byte)29, (byte)29, (byte) (-64)); assertEquals((byte) (-64), byte0); }
public void test101() throws Throwable { Short short0 = new Short((short) (-2063)); long long0 = NumberUtils.max((long) (short) (-2063), (long) short0, (long) (short)0); assertEquals(0L, long0); }
public void test102() throws Throwable { Short short0 = new Short((short)179); long long0 = NumberUtils.max((long) (short)0, (long) short0, (long) (short)0); assertEquals(179L, long0); }
public void test103() throws Throwable { int int0 = NumberUtils.max((int) (short)244, (int) (short)244, (int) (short)759); assertEquals(759, int0); }
public void test104() throws Throwable { NumberUtils numberUtils0 = new NumberUtils(); int int0 = NumberUtils.max((int) numberUtils0.SHORT_MINUS_ONE, (int) numberUtils0.INTEGER_ONE, (int) numberUtils0.SHORT_ZERO); assertEquals(1, int0); }
public void test105() throws Throwable { short short0 = NumberUtils.max((short)726, (short)15225, (short)15225); assertEquals((short)15225, short0); }
public void test106() throws Throwable { NumberUtils numberUtils0 = new NumberUtils(); short short0 = NumberUtils.max((short) numberUtils0.SHORT_ZERO, (short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.BYTE_ONE); assertEquals((short)1, short0); }
public void test107() throws Throwable { byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)53); assertEquals((byte)53, byte0); }
public void test108() throws Throwable { byte byte0 = NumberUtils.max((byte) (-42), (byte)29, (byte) (-42)); assertEquals((byte)29, byte0); }
public void test109() throws Throwable { boolean boolean0 = NumberUtils.isDigits(""); assertFalse(boolean0); }
public void test110() throws Throwable { boolean boolean0 = NumberUtils.isNumber("2E.m."); assertFalse(boolean0); }
public void test111() throws Throwable { boolean boolean0 = NumberUtils.isNumber((String) null); assertFalse(boolean0); }
public void test112() throws Throwable { boolean boolean0 = NumberUtils.isNumber("d"); assertFalse(boolean0); }
public void test113() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0e."); assertFalse(boolean0); }
public void test114() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0x0x"); assertFalse(boolean0); }
public void test115() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0x"); assertFalse(boolean0); }
public void test116() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0xD"); assertTrue(boolean0); }
public void test117() throws Throwable { boolean boolean0 = NumberUtils.isNumber("-0x%71M#(7YR"); assertFalse(boolean0); }
public void test118() throws Throwable { boolean boolean0 = NumberUtils.isNumber("-0xda^lKTO"); assertFalse(boolean0); }
public void test119() throws Throwable { boolean boolean0 = NumberUtils.isNumber("-"); assertFalse(boolean0); }
public void test120() throws Throwable { boolean boolean0 = NumberUtils.isNumber("..."); assertFalse(boolean0); }
public void test121() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0eEq"); assertFalse(boolean0); }
public void test122() throws Throwable { boolean boolean0 = NumberUtils.isNumber("eV9"); assertFalse(boolean0); }
public void test123() throws Throwable { boolean boolean0 = NumberUtils.isNumber("+\"2#lV:Y2Pc;6H1<*-"); assertFalse(boolean0); }
public void test124() throws Throwable { boolean boolean0 = NumberUtils.isNumber(".[NM"); assertFalse(boolean0); }
public void test125() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0e-)"); assertFalse(boolean0); }
public void test126() throws Throwable { boolean boolean0 = NumberUtils.isNumber("27"); assertTrue(boolean0); }
public void test127() throws Throwable { boolean boolean0 = NumberUtils.isNumber("e"); assertFalse(boolean0); }
public void test128() throws Throwable { boolean boolean0 = NumberUtils.isNumber("E"); assertFalse(boolean0); }
public void test129() throws Throwable { boolean boolean0 = NumberUtils.isNumber(".."); assertFalse(boolean0); }
public void test130() throws Throwable { boolean boolean0 = NumberUtils.isNumber("57."); assertTrue(boolean0); }
public void test131() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0eL"); assertFalse(boolean0); }
public void test132() throws Throwable { boolean boolean0 = NumberUtils.isNumber("D"); assertFalse(boolean0); }
public void test133() throws Throwable { boolean boolean0 = NumberUtils.isNumber("f"); assertFalse(boolean0); }
public void test134() throws Throwable { boolean boolean0 = NumberUtils.isNumber("5F"); assertTrue(boolean0); }
public void test135() throws Throwable { boolean boolean0 = NumberUtils.isNumber("l"); assertFalse(boolean0); }
public void test136() throws Throwable { boolean boolean0 = NumberUtils.isNumber("0L"); assertTrue(boolean0); }
